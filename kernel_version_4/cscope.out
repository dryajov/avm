cscope 15 /home/averma/avm/kernel_version_4               0001399445
	@alignment_engine/alignment_engine.c

10 
	~"¥ŸŸy≥s.h
"

12 
SPINLOCK
 
¥öt_i‹eque°_lock
;

14 
INT
 
dz_Æignmít_ígöe_swôch
;

15 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

16 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

17 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

18 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

19 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

20 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

21 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

22 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_èû_u«lig√d_∑ge
;

23 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_hód_u«lig√d_∑ge
;

24 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_bŸh_u«lig√d_∑ge
;

25 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

26 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

27 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

28 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

29 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

30 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

31 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

33 
USHORT
 
num_Æign_ªad_thªads
;

34 
USHORT
 
num_Æign_wrôe_thªads
;

36 
ATOMIC64
 
Æign_iocou¡_disk_ªad
;

37 
ATOMIC64
 
Æign_iocou¡_disk_ªad_öã∫Æ
;

38 
ATOMIC64
 
Æign_iocou¡_disk_wrôe
;

39 
ATOMIC64
 
Æign_iocou¡_disk_wrôe_öã∫Æ
;

41 
VOID
 
	$dz_Æign_öô_cou¡îs
(
VOID
)

43 
	`SET_COUNTER
(
Æign_iocou¡_disk_ªad
);

44 
	`SET_COUNTER
(
Æign_iocou¡_disk_wrôe
);

46 
	`SET_COUNTER
(
Æign_iocou¡_disk_ªad_öã∫Æ
);

47 
	`SET_COUNTER
(
Æign_iocou¡_disk_wrôe_öã∫Æ
);

49 
	`SET_COUNTER
(
Æign_iocou¡_ªads_∑πül_∑ge
);

50 
	`SET_COUNTER
(
Æign_iocou¡_ªads_sögÀ_∑ge
);

51 
	`SET_COUNTER
(
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
);

52 
	`SET_COUNTER
(
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
);

53 
	`SET_COUNTER
(
Æign_iocou¡_ªads_mu…i_∑ge
);

54 
	`SET_COUNTER
(
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
);

55 
	`SET_COUNTER
(
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
);

56 
	`SET_COUNTER
(
Æign_iocou¡_ªads_mu…i_èû_u«lig√d_∑ge
);

57 
	`SET_COUNTER
(
Æign_iocou¡_ªads_mu…i_hód_u«lig√d_∑ge
);

58 
	`SET_COUNTER
(
Æign_iocou¡_ªads_mu…i_bŸh_u«lig√d_∑ge
);

60 
	`SET_COUNTER
(
Æign_iocou¡_wrôes_∑πül_∑ge
);

61 
	`SET_COUNTER
(
Æign_iocou¡_wrôes_sögÀ_∑ge
);

62 
	`SET_COUNTER
(
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
);

63 
	`SET_COUNTER
(
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
);

64 
	`SET_COUNTER
(
Æign_iocou¡_wrôes_mu…i_∑ge
);

65 
	`SET_COUNTER
(
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
);

66 
	`SET_COUNTER
(
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
);

68 
	`ALIGN_COUNTER_U64_SET
(
Æign_ígöe_mem‹y_ußge
, 0);

69 
	}
}

72 
INT
 
	$dz_Æign_ígöe_öô
(
VOID
)

74 
INT
 
ªt
 = 
SUCCESS
;

75 
	`MARK_MEMORY_USAGE
();

81 
	`LOGALIGNF
(" ______________________________________________________ \n");

82 
	`LOGALIGNF
("| |\n");

83 
	`LOGALIGNF
("| Alignment Engine Initialization Begin |\n");

84 
	`LOGALIGNF
("|______________________________________________________|\n");

85 
	`dz_Æign_öô_cou¡îs
();

86 
ªt
 = 
	`dz_¸óã_Æign_ªad_thªad_poﬁ
(
num_Æign_ªad_thªads
);

88 i‡(
ªt
 !
SUCCESS
) {

89 
exô_Áûuª
;

92 
ªt
 = 
	`dz_¸óã_Æign_wrôe_thªad_poﬁ
(
num_Æign_wrôe_thªads
);

94 i‡(
ªt
 !
SUCCESS
) {

95 
exô_Áûuª
;

99 
	`PRINT_MEMORY_USAGE
(
	`ALIGN_COUNTER_U64_GET
(
Æign_ígöe_mem‹y_ußge
), "ALIGN Engine");

101 
	`LOGALIGNF
(" ______________________________________________________ \n");

102 
	`LOGALIGNF
("| |\n");

103 
	`LOGALIGNF
("| Alignment Engine Initialization End |\n");

104 
	`LOGALIGNF
("|______________________________________________________|\n");

105 
RETURNS
;

107 
exô_Áûuª
:

108 
	`dz_de°roy_Æign_ªad_thªad_poﬁ
();

109 
	`dz_de°roy_Æign_wrôe_thªad_poﬁ
();

110 
RETURNF
;

111 
	}
}

112 
EXPORT_SYMBOL
(
dz_Æign_ígöe_öô
);

114 
RVOID
 
	$dz_Æign_ígöe_exô
(
VOID
)

116 
	`MARK_MEMORY_USAGE
();

117 
	`LOGALIGNF
(" ______________________________________________________ \n");

118 
	`LOGALIGNF
("| |\n");

119 
	`LOGALIGNF
("| Alignment Engine Exit Begin |\n");

120 
	`LOGALIGNF
("|______________________________________________________|\n");

122 
	`dz_de°roy_Æign_ªad_thªad_poﬁ
();

123 
	`dz_de°roy_Æign_wrôe_thªad_poﬁ
();

124 
	`PRINT_MEMORY_FREED
(
	`ALIGN_COUNTER_U64_GET
(
Æign_ígöe_mem‹y_ußge
), "ALIGN Engine");

125 
	`LOGALIGNF
(" ______________________________________________________ \n");

126 
	`LOGALIGNF
("| |\n");

127 
	`LOGALIGNF
("| Alignment Engine Exit End |\n");

128 
	`LOGALIGNF
("|______________________________________________________|\n");

130 
	}
}

131 
EXPORT_SYMBOL
(
dz_Æign_ígöe_exô
);

133 
RVOID
 
	$dz_Æign_io
(
PIOREQUEST
 
i‹eque°
)

135 
	`bio_d©a_dú
(
i‹eque°
->
i‹_bio
Ë=
WRITE
 ?

136 
	`dz_Æign_wrôe_io
(
i‹eque°
) :

137 
	`dz_Æign_ªad_io
(
i‹eque°
);

138 
	}
}

140 
	$dz_Æign_ígöe_moduÀ_öô
()

142 
	`LOGALIGN
(" ______________________________________________________ \n");

143 
	`LOGALIGN
("| |\n");

144 
	`LOGALIGN
("| ZAIDSTOR AVM Alignment Engine Module Loaded |\n");

145 
	`LOGALIGN
("|______________________________________________________|\n");

147 
RETURNS
;

148 
	}
}

151 
	$dz_Æign_ígöe_moduÀ_exô
()

153 
	`LOGALIGN
(" ______________________________________________________ \n");

154 
	`LOGALIGN
("| |\n");

155 
	`LOGALIGN
("| ZAIDSTOR AVM Alignment Engine Module UnLoaded |\n");

156 
	`LOGALIGN
("|______________________________________________________|\n");

157 
	}
}

159 
moduÀ_öô
(
dz_Æign_ígöe_moduÀ_öô
);

160 
moduÀ_exô
(
dz_Æign_ígöe_moduÀ_exô
);

161 
MODULE_LICENSE
(
DZ_MODULE_LICENSE
);

162 
MODULE_AUTHOR
(
DZ_MODULE_AUTHOR
);

	@alignment_engine/alignment_engine.h

1 #i‚de‡
_ALIGNMENT_ENGINE_H_


2 
	#_ALIGNMENT_ENGINE_H_


	)

4 
	~"ty≥s.h
"

5 
	~"ma¸os.h
"

6 
	~"mëad©a_ígöe.h
"

7 
	~"i‹eque°.h
"

10 
RINT
 
dz_¥o˚ss_u«lig√d_d©a_‰om_bio_hód
(
PIOREQUEST
 
pi‹eque°
,

11 
PBVEC_HOLDER
 
bvec_hﬁdî
, 
UINT
 
∑πül_d©a_hód
, UINT 
Æig√d_d©a
,

12 
UINT
 
∑πül_d©a_èû
, 
SECTOR
 
£˘‹
);

14 
RINT
 
dz_¥o˚ss_∑πül_u«lig√d_d©a_‰om_bio_hód
(
PIOREQUEST
 
pi‹eque°
,

15 
PBVEC_HOLDER
 
bvec_hﬁdî
, 
UINT
 
∑πül_d©a
, 
SECTOR
 
£˘‹
);

17 
RINT
 
dz_¥o˚ss_∑πül_u«lig√d_d©a_‰om_bio_èû
(
PIOREQUEST
 
pi‹eque°
,

18 
PBVEC_HOLDER
 
bvec_hﬁdî
, 
INT
 
∑πül_d©a
, 
SECTOR
 
£˘‹
);

20 
RINT
 
dz_¥o˚ss_Æig√d_d©a_‰om_bio_èû
(
PIOREQUEST
 
pi‹eque°
,

21 
PBVEC_HOLDER
 
bvec_hﬁdî
, 
UINT
 
Æig√d_d©a_byãs
, 
SECTOR
 
£˘‹
);

23 
RINT
 
dz_¥o˚ss_Æignmít_f‹_mu…ùÀ_blocks_io
(
PIOREQUEST
 
pi‹eque°
);

24 
RINT
 
dz_¥o˚ss_Æignmít_f‹_∑πül_block_io
(
PIOREQUEST
 
pi‹eque°
);

25 
RINT
 
dz_¥o˚ss_Æignmít_f‹_sögÀ_block_io
(
PIOREQUEST
 
pi‹eque°
);

26 
RINT
 
dz_wrôe_•lô_bio_wôh_Æignmít_¥o˚ssög
(
PIOREQUEST
 
pi‹eque°
);

28 
RVOID
 
dz_Æign_ªad_io
(
PIOREQUEST
 
pi‹eque°
);

29 
RVOID
 
dz_Æign_wrôe_io
(
PIOREQUEST
 
pi‹eque°
);

31 
RVOID
 
dz_Æign_ªad_f‹_∑πül_block
(
PIOREQUEST
 
pi‹eque°
);

32 
RVOID
 
dz_Æign_ªad_f‹_sögÀ_block
(
PIOREQUEST
 
pi‹eque°
);

33 
RINT
 
dz_Æign_ªad_f‹_mu…i_block
(
PIOREQUEST
 
pi‹eque°
);

35 
RINT
 
dz_Æign_ªad_sögÀ_block_‰om_øw_disk_sync_öã∫Æ
(
PIOREQUEST
 
i‹eque°
, 
SECTOR
 
£˘‹
 );

36 
RINT
 
dz_Æign_ªad_sögÀ_block_‰om_øw_disk_sync
(
PIOREQUEST
 
i‹eque°
, 
SECTOR
 
£˘‹
);

38 
RVOID
 
dz_Æign_wrôe_f‹_∑πül_block
(
PIOREQUEST
 
∑ª¡_i‹eque°
);

39 
RVOID
 
dz_Æign_wrôe_f‹_sögÀ_block
(
PIOREQUEST
 
i‹eque°
);

40 
RVOID
 
dz_Æign_wrôe_f‹_mu…i_block
(
PIOREQUEST
 
pi‹eque°
);

42 
INT
 
dz_Æign_ígöe_öô
(
VOID
);

43 
RVOID
 
dz_Æign_ígöe_exô
(
VOID
);

	@alignment_engine/alignment_engine_read.c

9 
	~"¥ŸŸy≥s.h
"

11 
INT
 
dz_swôch_Æignmít_ígöe_mu…i_block_ªad
;

12 
INT
 
dz_swôch_Æignmít_ígöe_∑πül_block_ªad
;

13 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

15 
SPINLOCK
 
¥öt_i‹eque°_lock
;

17 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

20 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_hÆig√d_∑ge
;

23 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_èlig√d_∑ge
;

27 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_•ûÀd_∑ge
;

32 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_absﬁuã_∑ge
;

34 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

35 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

36 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

37 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

38 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

39 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

50 
RVOID
 
	$dz_Æign_ªad_io
(
PIOREQUEST
 
pi‹eque°
)

54 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
pi‹eque°
->
i‹_bio
);

59 
	`INIT_LIST_HEAD
(&
pi‹eque°
->
i‹_ioq_hód_loˇl
);

60 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

62 i‡(
io_size
 < 
LBA_BLOCK_SIZE
) {

65 i‡(
dz_swôch_Æignmít_ígöe_∑πül_block_ªad
 =
DZ_DISABLED
) {

66 
	`LOGALIGN
("Disabled Read Processing io_size %lli forÖartial blockát sector %lli for ior_type = %d\n",

67 (
U64
)
io_size
, (U64)
	`DZ_BIO_GET_SECTOR
(
pi‹eque°
->
i‹_bio
),Öi‹eque°->
i‹_ty≥
);

69 
	`FAKE_IO_DONE
(
pi‹eque°
);

70 
	`i‹eque°_put
(
pi‹eque°
);

72 
	`LOGALIGN
("READ_PARTIAL: io_size = %lli sector = %lli ior_type = %d, iorequest = %p\n",

73 (
U64
)
io_size
, (U64)
	`DZ_BIO_GET_SECTOR
(
pi‹eque°
->
i‹_bio
),Öi‹eque°->
i‹_ty≥
,Öiorequest);

74 
	`INC_COUNTER
(
Æign_iocou¡_ªads_∑πül_∑ge
);

75 
	`dz_Æign_ªad_f‹_∑πül_block
(
pi‹eque°
);

78 } i‡(
io_size
 =
LBA_BLOCK_SIZE
) {

80 
	`LOGALIGN
("READ_SINGLE: io_size = %lli sector = %lli ior_type = %d, iorequest = %p\n",

81 (
U64
)
io_size
, (U64)
	`DZ_BIO_GET_SECTOR
(
pi‹eque°
->
i‹_bio
),Öi‹eque°->
i‹_ty≥
,Öiorequest);

83 
	`INC_COUNTER
(
Æign_iocou¡_ªads_sögÀ_∑ge
);

85 i‡(
pi‹eque°
->
i‹_ty≥
 == 1) {

86 
	`FAKE_IO_DONE
(
pi‹eque°
);

87 
	`i‹eque°_put
(
pi‹eque°
);

89 
	`dz_Æign_ªad_f‹_sögÀ_block
(
pi‹eque°
);

92 } i‡(
io_size
 > 
LBA_BLOCK_SIZE
) {

94 i‡(
dz_swôch_Æignmít_ígöe_mu…i_block_ªad
 =
DZ_DISABLED
) {

95 
	`LOGALIGN
("DISABLED:READ_MULTI: io_size = %lli sector = %lli ior_type = %d, iorequest = %p\n",

96 (
U64
)
io_size
, (U64)
	`DZ_BIO_GET_SECTOR
(
pi‹eque°
->
i‹_bio
),Öi‹eque°->
i‹_ty≥
,Öiorequest);

97 
	`FAKE_IO_DONE
(
pi‹eque°
);

98 
	`i‹eque°_put
(
pi‹eque°
);

101 
	`LOGALIGN
("READ_MULTI: io_size = %lli sector = %lli ior_type = %d, iorequest = %p\n",

102 (
U64
)
io_size
, (U64)
	`DZ_BIO_GET_SECTOR
(
pi‹eque°
->
i‹_bio
),Öi‹eque°->
i‹_ty≥
,Öiorequest);

103 
	`INC_COUNTER
(
Æign_iocou¡_ªads_mu…i_∑ge
);

104 
	`dz_Æign_ªad_f‹_mu…i_block
(
pi‹eque°
);

109 
	`BUG_ON
(1);

113 
	}
}

	@alignment_engine/alignment_engine_read_multi.c

9 
	~"¥ŸŸy≥s.h
"

11 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

13 
SPINLOCK
 
¥öt_i‹eque°_lock
;

15 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

18 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_hÆig√d_∑ge
;

21 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_èlig√d_∑ge
;

25 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_•ûÀd_∑ge
;

30 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_absﬁuã_∑ge
;

32 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

33 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

34 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

35 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

36 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

37 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

38 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_èû_u«lig√d_∑ge
;

39 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_hód_u«lig√d_∑ge
;

40 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_bŸh_u«lig√d_∑ge
;

42 
RVOID
 
	$dz_Æign_ªad_∑ª¡_biod⁄e
(
PBIO
 
bio
)

44 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

45 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

46 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

48 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

53 
	`DZ_BIO_SET_STATUS
(
pi‹eque°
->
i‹_bio
, 
	`DZ_BIO_GET_STATUS
(
bio
));

54 
	`IOREQUEST_DONE
(
pi‹eque°
);

56 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

57 
	`i‹eque°_put
(
ci‹eque°
);

59 
	`bio_d©a_dú
(
pi‹eque°
->
i‹_bio
Ë=
WRITE
 ?

60 
	`i‹eque°_put
(
pi‹eque°
) :

61 
	`i‹eque°_put
(
pi‹eque°
);

64 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

65 
	`i‹eque°_put
(
ci‹eque°
);

68 
	}
}

72 
RVOID
 
	$dz_Æign_ªad_mu…i_block_hód_u«lig√d_biod⁄e
(
PBIO
 
bio
)

76 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

77 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

78 
PVOID
 
˝agebuf
 = 
NULL
;

79 
PVOID
 
µagebuf
 = 
NULL
;

80 
BIOVEC
 
cbvec
;

81 
BIOVEC
 
pbvec
;

82 
PBIO
 
pbio
 = 
pi‹eque°
->
i‹_bio
;

84 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
pbio
);

85 
UINT
 
£˘‹_pos_ö_lba
 = 0;

86 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

87 
INT
 
bv_Àn
 = 0;

88 
ITERATOR
 
ôî
;

89 
INT
 
∑πül_byãs_hód
;

103 
	`IF_BIO_ERROR
(
bio
) {

104 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

105 
exô
;

108 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

109 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

112 
cbvec
 = 
	`bio_iovec
(
bio
);

113 
˝agebuf
 = 
	`km≠
(
cbvec
.
bv_∑ge
);

114 
˝agebuf
 +
£˘‹_pos_ö_lba
;

118 
	`bio_f‹_óch_£gmít
(
pbvec
, 
pbio
, 
ôî
) {

119 
µagebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

120 
µagebuf
 +
pbvec
.
bv_off£t
;

121 
bv_Àn
 = 
pbvec
.bv_len;

122 i‡(
∑πül_byãs_hód
 > 
bv_Àn
) {

132 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
bv_Àn
);

133 
˝agebuf
 +
bv_Àn
;

134 
∑πül_byãs_hód
 -
bv_Àn
;

135 
	`kunm≠
(
pbvec
.
bv_∑ge
);

140 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
∑πül_byãs_hód
);

141 
	`kunm≠
(
pbvec
.
bv_∑ge
);

145 
	`kunm≠
(
cbvec
.
bv_∑ge
);

147 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

150 
	`DZ_BIO_SET_STATUS
(
pi‹eque°
->
i‹_bio
, 
	`DZ_BIO_GET_STATUS
(
bio
));

151 
	`IOREQUEST_DONE
(
pi‹eque°
);

153 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

154 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

155 
	`i‹eque°_put
(
ci‹eque°
);

156 
	`i‹eque°_put
(
pi‹eque°
);

160 
exô
:

161 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

162 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

163 
	`i‹eque°_put
(
ci‹eque°
);

167 
	}
}

172 
RVOID
 
	$dz_Æign_ªad_mu…i_block_èû_u«lig√d_biod⁄e
(
PBIO
 
bio
)

175 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

176 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

177 
PVOID
 
˝agebuf
 = 
NULL
;

178 
PVOID
 
µagebuf
 = 
NULL
;

179 
BIOVEC
 
cbvec
;

180 
BIOVEC
 
pbvec
;

181 
PBIO
 
pbio
 = 
pi‹eque°
->
i‹_bio
;

183 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
pbio
);

184 
UINT
 
£˘‹_pos_ö_lba
 = 0;

185 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

187 
SIZE
 
size
 = 
	`DZ_BIO_GET_SIZE
(
pbio
);

188 
PBIOVEC
 
œ°_bvec
 = 
NULL
;

189 
INT
 
bi_v˙t
 = 0;

190 
INT
 
bi_v˙t_max
 = 0;

191 
INT
 
bv_Àn
 = 0;

192 
INT
 
bv_off£t
 = 0;

193 
INT
 
∑πül_byãs_èû
;

194 
INT
 
∑πül_byãs_hód
;

195 
INT
 
∑πül_byãs
;

207 
	`IF_BIO_ERROR
(
bio
) {

208 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

209 
exô
;

212 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

213 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

214 
∑πül_byãs_èû
 = 
size
 - 
∑πül_byãs_hód
;

215 
∑πül_byãs
 = 
∑πül_byãs_èû
;

218 
cbvec
 = 
	`bio_iovec
(
bio
);

219 
˝agebuf
 = 
	`km≠
(
cbvec
.
bv_∑ge
);

220 
˝agebuf
 +
£˘‹_pos_ö_lba
;

223 
bi_v˙t_max
 = 
pbio
->
bi_v˙t
;

224 
pbvec
 = 
	`bio_iovec
(
pbio
);

225 
bi_v˙t
 = 
pbio
->bi_vcnt - 1;

227 
∑πül_byãs
 > 0) {

228 
bi_v˙t
 >= 0) {

229 
œ°_bvec
 = &
pbio
->
bi_io_vec
[
bi_v˙t
];

230 
bv_Àn
 = 
œ°_bvec
->bv_len;

231 
∑πül_byãs
 -
bv_Àn
 ;

232 i‡(
∑πül_byãs
 <= 0) {

234 
bv_off£t
 = 
œ°_bvec
->bv_off£à- 
∑πül_byãs
;

235 
µagebuf
 = 
	`km≠
(
œ°_bvec
->
bv_∑ge
);

236 
µagebuf
 +
bv_off£t
;

237 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
∑πül_byãs_èû
);

238 
	`kunm≠
(
œ°_bvec
->
bv_∑ge
);

241 
bv_off£t
 = 
œ°_bvec
->bv_offset;

242 
µagebuf
 = 
	`km≠
(
œ°_bvec
->
bv_∑ge
);

243 
µagebuf
 +
bv_off£t
;

244 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
bv_Àn
);

245 
	`kunm≠
(
œ°_bvec
->
bv_∑ge
);

246 
˝agebuf
 +
bv_Àn
;

247 
bi_v˙t
--;

252 
	`kunm≠
(
cbvec
.
bv_∑ge
);

253 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

256 
	`DZ_BIO_SET_STATUS
(
pi‹eque°
->
i‹_bio
, 
	`DZ_BIO_GET_STATUS
(
bio
));

257 
	`IOREQUEST_DONE
(
pi‹eque°
);

258 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

259 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

260 
	`i‹eque°_put
(
ci‹eque°
);

262 
	`i‹eque°_put
(
pi‹eque°
);

266 
exô
:

267 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

268 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

269 
	`i‹eque°_put
(
ci‹eque°
);

273 
	}
}

275 
RVOID
 
	$dz_Æign_ªad_mu…i_block_bŸh_Æig√d_biod⁄e
(
PBIO
 
bio
)

290 
	`dz_Æign_ªad_∑ª¡_biod⁄e
(
bio
);

291 
	}
}

300 
RVOID
 
	$dz_Æign_ªad_mu…i_block_bŸh_u«lig√d
 (
PIOREQUEST
 
pi‹eque°
)

302 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

304 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

305 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

306 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

307 
PBIOVEC
 
cur_bvec
 = 
NULL
;

308 
INT
 
bi_v˙t
 = 0;

309 
INT
 
bi_v˙t_max
 = 0;

310 
INT
 
bv_Àn
 = 0;

311 
INT
 
ªmaöög_bv_Àn
 = 0;

312 
UINT
 
£˘‹_pos_ö_lba
 = 0;

313 
SIZE
 
£˘‹_byãs
 = 0;

314 
U64
 
tŸ_byãs
 = 0;

315 
INT
 
d©a_byãs
 = 0;

316 
INT
 
Æig√d_byãs
 = 0;

317 
INT
 
∑πül_byãs_hód
 = 0;

318 
INT
 
∑πül_byãs_èû
 = 0;

319 
INT
 
tŸÆ_blocks_√eded
 = 0;

320 
LIST_HEAD
 
‰ì_li°_hód
 ;

321 
PIOREQUEST
 
chûd_i‹eque°
 = 
NULL
;

322 
PIOREQUEST
 
chûd_i‹eque°_hód

NULL
;

323 
PIOREQUEST
 
chûd_i‹eque°_èû

NULL
;

324 
PBIO
 
chûd_bio
 = 
NULL
;

325 
PPAGE
 
∑ge_hód
 = 
NULL
;

326 
PPAGE
 
∑ge_èû
 = 
NULL
;

327 
INT
 
ªt
 = 
SUCCESS
;

328 
INT
 
cou¡
;

329 
INT
 
ƒ_iovecs
 = 0;

333 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

334 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

335 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

336 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

337 
∑πül_byãs_èû
 = 
tŸ_byãs
 % 
LBA_BLOCK_SIZE
;

338 
Æig√d_byãs
 = 
io_size
 - 
∑πül_byãs_hód
 - 
∑πül_byãs_èû
 ;

341 
tŸÆ_blocks_√eded
 = 1 + 1 + (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

346 
ƒ_iovecs
 = (
bio
->
bi_max_vecs
 / 
tŸÆ_blocks_√eded
) + 1;

348 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

349 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

350 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

352 
chûd_i‹eque°
 = 
	`dz_io_Æloc
();

353 i‡(!
chûd_i‹eque°
) {

354 
	`LOGALIGNE
("UnableÅo get free iorequest\n");

355 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

356 
exô_Áûuª
;

358 
chûd_bio
 = 
	`dz_bio_Æloc
(
ƒ_iovecs
);

359 i‡(!
chûd_bio
) {

360 
	`LOGALIGNE
("UnableÅo get free child bio\n");

361 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

362 
exô_Áûuª
;

365 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio
, 
£˘‹
,

366 
dz_Æign_ªad_mu…i_block_bŸh_Æig√d_biod⁄e
, 
chûd_i‹eque°
);

367 
	`©omic_£t
(&
chûd_i‹eque°
->
i‹_chûd_˙t
, 0);

368 
chûd_i‹eque°
->
i‹_thªad_poﬁ

Æign_ªad_thªad_poﬁ
;

369 
chûd_i‹eque°
->
i‹_bio
 = 
chûd_bio
;

371 
chûd_i‹eque°
->
i‹_∑ª¡
 = 
pi‹eque°
;

372 
chûd_i‹eque°
->
i‹_lba
 = 
lba
;

373 
chûd_i‹eque°
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
;

375 
	`li°_add_èû
(&(
chûd_i‹eque°
->
i‹_ioq
), &
‰ì_li°_hód
);

376 
£˘‹
 +
SECTORS_PER_PAGE
;

377 
	`©omic_öc
(&
pi‹eque°
->
i‹_chûd_˙t
);

378 
lba
++;

380 i‡(
cou¡
 == 0) {

381 
chûd_i‹eque°_hód
 = 
chûd_i‹eque°
;

386 
∑ge_hód
 = 
	`dz_ªad_∑ge_Æloc
();

387 i‡(!
∑ge_hód
) {

388 
exô_Áûuª
;

391 
ªt
 = 
	`bio_add_∑ge
(
chûd_i‹eque°_hód
->
i‹_bio
, 
∑ge_hód
, 
PAGE_SIZE
, 0);

392 i‡(!
ªt
) {

394 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

395 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio head\n");

396 
exô_∑ge_add
;

400 
chûd_i‹eque°_hód
->
i‹_bio
->
bi_íd_io
 = 
dz_Æign_ªad_mu…i_block_hód_u«lig√d_biod⁄e
;

403 
chûd_i‹eque°_èû
 = 
chûd_i‹eque°
;

404 
∑ge_èû
 = 
	`dz_ªad_∑ge_Æloc
();

405 i‡(!
∑ge_èû
) {

406 
exô_Áûuª
;

409 
ªt
 = 
	`bio_add_∑ge
(
chûd_i‹eque°_èû
->
i‹_bio
, 
∑ge_èû
, 
PAGE_SIZE
, 0);

410 i‡(!
ªt
) {

412 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

413 
	`LOGALIGNE
("UnableÅoádd PageÅo child bioÅail\n");

414 
exô_∑ge_add
;

418 
chûd_i‹eque°
->
i‹_bio
->
bi_íd_io
 = 
dz_Æign_ªad_mu…i_block_èû_u«lig√d_biod⁄e
;

427 
chûd_i‹eque°_hód
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

428 
	`li°_dñ
(&
chûd_i‹eque°_hód
->
i‹_ioq
);

429 
	`dz_q_chûd_i‹eque°_to_∑ª¡_q
(
pi‹eque°
, 
chûd_i‹eque°_hód
);

430 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

431 
d©a_byãs
 = 
∑πül_byãs_hód
;

432 
	`LOGALIGN
("Printing HeadÖart\n");

437 
bi_v˙t
 < 
bi_v˙t_max
) {

438 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

439 
bv_Àn
 = 
cur_bvec
->bv_len;

441 i‡(
bv_Àn
 >
d©a_byãs
) {

442 i‡(
bv_Àn
 =
d©a_byãs
) {

443 
bi_v˙t
++;

445 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

449 
d©a_byãs
 -
bv_Àn
;

450 
bi_v˙t
++;

454 
£˘‹
 +(
∑πül_byãs_hód
 / 
SECTOR_SIZE
);

455 
lba
++;

457 
	`LOGALIGN
("Printing Intermediate AlignedÖart\n");

461 
Æig√d_byãs
) {

463 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

464 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

465 
	`dz_q_chûd_i‹eque°_to_∑ª¡_q
(
pi‹eque°
, 
chûd_i‹eque°
);

466 
chûd_bio
 = 
chûd_i‹eque°
->
i‹_bio
;

467 
chûd_i‹eque°
->
i‹_£˘‹
 = 
£˘‹
;

468 
chûd_i‹eque°
->
i‹_lba
 = 
lba
;

469 
	`PRINT_POINTER
(
chûd_i‹eque°
);

471 
d©a_byãs
 = 
PAGE_SIZE
;

473 i‡(
ªmaöög_bv_Àn
) {

474 
d©a_byãs
 -
ªmaöög_bv_Àn
;

475 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
ªmaöög_bv_Àn
,

476 
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
));

477 i‡(!
ªt
) {

479 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

480 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio\n");

481 
exô_∑ge_add
;

483 
bi_v˙t
++;

484 
ªmaöög_bv_Àn
 = 0;

488 
bi_v˙t
 < 
bi_v˙t_max
) {

489 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

490 
bv_Àn
 = 
cur_bvec
->bv_len;

492 i‡(
bv_Àn
 >
d©a_byãs
) {

493 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
d©a_byãs
, cur_bvec->
bv_off£t
);

494 i‡(!
ªt
) {

496 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

497 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio\n");

498 
exô_∑ge_add
;

501 i‡(
bv_Àn
 =
d©a_byãs
) {

502 
bi_v˙t
++;

504 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

506 
Æig√d_byãs
 -
PAGE_SIZE
;

510 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
bv_Àn
, cur_bvec->
bv_off£t
);

511 i‡(!
ªt
) {

513 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

514 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio\n");

515 
exô_∑ge_add
;

517 
d©a_byãs
 -
bv_Àn
;

518 
bi_v˙t
++;

521 
£˘‹
 +
SECTORS_PER_PAGE
;

522 
lba
++;

528 
	`LOGALIGN
("Printing TailÖart\n");

530 i‡(
	`li°_em±y
(&
‰ì_li°_hód
)) {

531 
	`BUG_ON
(1);

534 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

535 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

536 
	`dz_q_chûd_i‹eque°_to_∑ª¡_q
(
pi‹eque°
, 
chûd_i‹eque°
);

538 
	`dz_mîge_∑ª¡_loˇl_q_to_thªadpoﬁ_q
(
pi‹eque°
->
i‹_thªad_poﬁ
,Öiorequest);

541 
exô_Áûuª
:

543 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

544 
	`i‹eque°_put
(
pi‹eque°
);

545 i‡(
∑ge_hód
) {

546 
	`dz_ªad_∑ge_‰ì
(
∑ge_hód
);

548 i‡(
∑ge_èû
) {

549 
	`dz_ªad_∑ge_‰ì
(
∑ge_èû
);

551 i‡(
chûd_i‹eque°
) {

552 
	`dz_io_‰ì
(
chûd_i‹eque°
);

554 i‡(
chûd_bio
) {

555 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio
);

557 
exô_∑ge_add
:

558 
bv_Àn
 = 0; bv_À¿< 
tŸÆ_blocks_√eded
; bv_len++) {

560 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

561 i‡(
chûd_i‹eque°
) {

562 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_i‹eque°
->
i‹_bio
);

563 
	`dz_io_‰ì
(
chûd_i‹eque°
);

564 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

567 
	}
}

576 
RVOID
 
	$dz_Æign_ªad_mu…i_block_hód_u«lig√d
 (
PIOREQUEST
 
pi‹eque°
)

578 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

580 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

581 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

582 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

583 
PBIOVEC
 
cur_bvec
 = 
NULL
;

584 
INT
 
bi_v˙t
 = 0;

585 
INT
 
bi_v˙t_max
 = 0;

586 
INT
 
bv_Àn
 = 0;

587 
INT
 
ªmaöög_bv_Àn
 = 0;

588 
UINT
 
£˘‹_pos_ö_lba
 = 0;

589 
SIZE
 
£˘‹_byãs
 = 0;

590 
U64
 
tŸ_byãs
 = 0;

591 
INT
 
d©a_byãs
 = 0;

592 
INT
 
Æig√d_byãs
 = 0;

593 
INT
 
∑πül_byãs_hód
 = 0;

594 
INT
 
tŸÆ_blocks_√eded
 = 0;

595 
PIOREQUEST
 
chûd_i‹eque°
 = 
NULL
;

596 
PIOREQUEST
 
chûd_i‹eque°_hód

NULL
;

597 
PBIO
 
chûd_bio
 = 
NULL
;

598 
PPAGE
 
∑ge
 = 
NULL
;

599 
INT
 
ªt
 = 
SUCCESS
;

600 
LIST_HEAD
 
‰ì_li°_hód
 ;

601 
INT
 
cou¡
;

602 
INT
 
ƒ_iovecs
 = 0;

606 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

607 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

608 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

609 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

610 
Æig√d_byãs
 = 
io_size
 - 
∑πül_byãs_hód
 ;

613 
tŸÆ_blocks_√eded
 = 1 + (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

618 
ƒ_iovecs
 = (
bio
->
bi_max_vecs
 / 
tŸÆ_blocks_√eded
) + 1;

620 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

622 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

623 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

625 
chûd_i‹eque°
 = 
	`dz_io_Æloc
();

626 i‡(!
chûd_i‹eque°
) {

627 
	`LOGALIGNE
("UnableÅo get free iorequest\n");

628 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

629 
exô_Áûuª
;

631 
chûd_bio
 = 
	`dz_bio_Æloc
(
ƒ_iovecs
);

632 i‡(!
chûd_bio
) {

633 
	`LOGALIGNE
("UnableÅo get free child bio\n");

634 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

635 
exô_Áûuª
;

638 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio
, 
£˘‹
,

639 
dz_Æign_ªad_mu…i_block_bŸh_Æig√d_biod⁄e
, 
chûd_i‹eque°
);

641 
	`©omic_£t
(&
chûd_i‹eque°
->
i‹_chûd_˙t
, 0);

643 
chûd_i‹eque°
->
i‹_thªad_poﬁ

Æign_ªad_thªad_poﬁ
;

644 
chûd_i‹eque°
->
i‹_bio
 = 
chûd_bio
;

646 
chûd_i‹eque°
->
i‹_∑ª¡
 = 
pi‹eque°
;

647 
chûd_i‹eque°
->
i‹_lba
 = 
lba
;

648 
chûd_i‹eque°
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
;

650 
	`li°_add_èû
(&(
chûd_i‹eque°
->
i‹_ioq
), &
‰ì_li°_hód
);

651 
	`©omic_öc
(&
pi‹eque°
->
i‹_chûd_˙t
);

653 i‡(
cou¡
 == 0) {

654 
chûd_i‹eque°_hód
 = 
chûd_i‹eque°
;

659 
∑ge
 = 
	`dz_ªad_∑ge_Æloc
();

660 i‡(!
∑ge
) {

661 
exô_Áûuª
;

664 
ªt
 = 
	`bio_add_∑ge
(
chûd_i‹eque°_hód
->
i‹_bio
, 
∑ge
, 
PAGE_SIZE
, 0);

665 i‡(!
ªt
) {

667 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

668 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio\n");

669 
exô_∑ge_add
;

673 
chûd_i‹eque°_hód
->
i‹_bio
->
bi_íd_io
 = 
dz_Æign_ªad_mu…i_block_hód_u«lig√d_biod⁄e
;

682 
chûd_i‹eque°_hód
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

683 
	`li°_dñ
(&
chûd_i‹eque°_hód
->
i‹_ioq
);

684 
	`dz_q_chûd_i‹eque°_to_∑ª¡_q
(
pi‹eque°
, 
chûd_i‹eque°_hód
);

685 
chûd_i‹eque°_hód
->
i‹_lba
 = 
lba
;

686 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

688 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

689 
d©a_byãs
 = 
∑πül_byãs_hód
;

690 
	`LOGALIGN
("Printing HeadÖart\n");

695 
bi_v˙t
 < 
bi_v˙t_max
) {

696 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

697 
bv_Àn
 = 
cur_bvec
->bv_len;

699 i‡(
bv_Àn
 >
d©a_byãs
) {

700 i‡(
bv_Àn
 =
d©a_byãs
) {

701 
bi_v˙t
++;

703 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

707 
d©a_byãs
 -
bv_Àn
;

708 
bi_v˙t
++;

712 
£˘‹
 +(
∑πül_byãs_hód
 / 
SECTOR_SIZE
);

713 
lba
++;

716 
	`LOGALIGN
("Printing Tail AlignedÖart\n");

720 
Æig√d_byãs
) {

722 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

723 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

724 
	`dz_q_chûd_i‹eque°_to_∑ª¡_q
(
pi‹eque°
, 
chûd_i‹eque°
);

725 
chûd_bio
 = 
chûd_i‹eque°
->
i‹_bio
;

726 
	`PRINT_POINTER
(
chûd_i‹eque°
);

727 
chûd_i‹eque°
->
i‹_lba
 = 
lba
;

728 
chûd_i‹eque°
->
i‹_£˘‹
 = 
£˘‹
;

730 
d©a_byãs
 = 
PAGE_SIZE
;

732 i‡(
ªmaöög_bv_Àn
) {

733 
d©a_byãs
 -
ªmaöög_bv_Àn
;

734 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
ªmaöög_bv_Àn
,

735 
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
));

736 i‡(!
ªt
) {

738 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

739 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio\n");

740 
exô_∑ge_add
;

742 
bi_v˙t
++;

743 
ªmaöög_bv_Àn
 = 0;

747 
bi_v˙t
 < 
bi_v˙t_max
) {

748 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

749 
bv_Àn
 = 
cur_bvec
->bv_len;

751 i‡(
bv_Àn
 >
d©a_byãs
) {

752 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
d©a_byãs
, cur_bvec->
bv_off£t
);

753 i‡(!
ªt
) {

755 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

756 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio\n");

757 
exô_∑ge_add
;

760 i‡(
bv_Àn
 =
d©a_byãs
) {

761 
bi_v˙t
++;

763 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

765 
Æig√d_byãs
 -
PAGE_SIZE
;

769 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
bv_Àn
, cur_bvec->
bv_off£t
);

770 i‡(!
ªt
) {

772 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

773 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio\n");

774 
exô_∑ge_add
;

776 
d©a_byãs
 -
bv_Àn
;

777 
bi_v˙t
++;

780 
£˘‹
 +
SECTORS_PER_PAGE
;

781 
lba
++;

784 i‡(!
	`li°_em±y
(&
‰ì_li°_hód
)) {

785 
	`BUG_ON
(1);

791 
	`dz_mîge_∑ª¡_loˇl_q_to_thªadpoﬁ_q
(
pi‹eque°
->
i‹_thªad_poﬁ
,Öiorequest);

793 
exô_Áûuª
:

795 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

796 
	`i‹eque°_put
(
pi‹eque°
);

797 i‡(
∑ge
) {

798 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

800 i‡(
chûd_i‹eque°
) {

801 
	`dz_io_‰ì
(
chûd_i‹eque°
);

803 i‡(
chûd_bio
) {

804 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio
);

806 
exô_∑ge_add
:

807 
bv_Àn
 = 0; bv_À¿< 
tŸÆ_blocks_√eded
; bv_len++) {

809 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

810 i‡(
chûd_i‹eque°
) {

811 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_i‹eque°
->
i‹_bio
);

812 
	`dz_io_‰ì
(
chûd_i‹eque°
);

813 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

816 
	}
}

831 
RVOID
 
	$dz_Æign_ªad_mu…i_block_èû_u«lig√d
(
PIOREQUEST
 
pi‹eque°
)

833 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

835 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

836 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

837 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

838 
PBIOVEC
 
cur_bvec
 = 
NULL
;

839 
INT
 
bi_v˙t
 = 0;

840 
INT
 
bi_v˙t_max
 = 0;

841 
INT
 
bv_Àn
 = 0;

842 
INT
 
ªmaöög_bv_Àn
 = 0;

843 
UINT
 
£˘‹_pos_ö_lba
 = 0;

844 
SIZE
 
£˘‹_byãs
 = 0;

845 
U64
 
tŸ_byãs
 = 0;

846 
INT
 
d©a_byãs
 = 0;

847 
INT
 
Æig√d_byãs
 = 0;

848 
INT
 
∑πül_byãs_èû
 = 0;

849 
INT
 
tŸÆ_blocks_√eded
 = 0;

850 
PIOREQUEST
 
chûd_i‹eque°
 = 
NULL
;

851 
PIOREQUEST
 
chûd_i‹eque°_èû

NULL
;

852 
PBIO
 
chûd_bio
 = 
NULL
;

853 
PPAGE
 
∑ge
 = 
NULL
;

854 
LIST_HEAD
 
‰ì_li°_hód
;

855 
INT
 
cou¡
;

856 
INT
 
ªt
;

857 
PIOREQUEST
 
¥ev_chûd_i‹eque°

NULL
;

858 
INT
 
ƒ_iovecs
 = 0;

861 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

862 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

863 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

864 
∑πül_byãs_èû
 = 
tŸ_byãs
 % 
LBA_BLOCK_SIZE
;

865 
Æig√d_byãs
 = 
io_size
 - 
∑πül_byãs_èû
 ;

869 
tŸÆ_blocks_√eded
 = 1 + (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

874 
ƒ_iovecs
 = (
bio
->
bi_max_vecs
 / 
tŸÆ_blocks_√eded
) + 1;

876 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

878 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

881 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

883 
chûd_i‹eque°
 = 
	`dz_io_Æloc
();

884 i‡(!
chûd_i‹eque°
) {

885 
	`LOGALIGNE
("UnableÅo get free iorequest\n");

886 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

887 
exô_Áûuª
;

889 
	`MEMSET
(
chûd_i‹eque°
);

890 i‡(
chûd_i‹eque°
 =
¥ev_chûd_i‹eque°
) {

891 
	`LOGALIGN
("Fú° AŒo¯chûd_i‹eque° = %p\n", 
chûd_i‹eque°
);

892 
	`LOGALIGN
("Pªv AŒo¯chûd_i‹eque° = %p\n", 
¥ev_chûd_i‹eque°
);

893 
	`LOGALIGN
("Botháre same\n");

894 
SL1
;

895 
	`BUG_ON
(1);

899 
chûd_bio
 = 
	`dz_bio_Æloc
(
ƒ_iovecs
);

900 i‡(!
chûd_bio
) {

901 
	`LOGALIGNE
("UnableÅo get free child bio\n");

902 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

903 
exô_Áûuª
;

908 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio
, 
£˘‹
,

909 
dz_Æign_ªad_mu…i_block_bŸh_Æig√d_biod⁄e
, 
chûd_i‹eque°
);

911 
	`©omic_£t
(&
chûd_i‹eque°
->
i‹_chûd_˙t
, 0);

912 
chûd_i‹eque°
->
i‹_thªad_poﬁ
 = 
Æign_ªad_thªad_poﬁ
;

913 
chûd_i‹eque°
->
i‹_bio
 = 
chûd_bio
;

915 
chûd_i‹eque°
->
i‹_∑ª¡
 = 
pi‹eque°
;

916 
chûd_i‹eque°
->
i‹_lba
 = 
lba
;

917 
chûd_i‹eque°
->
i‹_£˘‹
 = 
£˘‹
;

918 
chûd_i‹eque°
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
;

924 
	`li°_add_èû
(&(
chûd_i‹eque°
->
i‹_ioq
), &
‰ì_li°_hód
);

926 
£˘‹
 +
SECTORS_PER_PAGE
;

929 
	`©omic_öc
(&
pi‹eque°
->
i‹_chûd_˙t
);

933 
lba
++;

935 
¥ev_chûd_i‹eque°
 = 
chûd_i‹eque°
;

944 
chûd_i‹eque°_èû
 = 
chûd_i‹eque°
;

945 
∑ge
 = 
	`dz_ªad_∑ge_Æloc
();

946 i‡(!
∑ge
) {

947 
exô_Áûuª
;

951 
ªt
 = 
	`bio_add_∑ge
(
chûd_i‹eque°_èû
->
i‹_bio
, 
∑ge
, 
∑πül_byãs_èû
, 0);

952 i‡(!
ªt
) {

954 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

955 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio\n");

956 
exô_∑ge_add
;

961 
chûd_i‹eque°_èû
->
i‹_bio
->
bi_íd_io
 = 
dz_Æign_ªad_mu…i_block_èû_u«lig√d_biod⁄e
;

968 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

970 
Æig√d_byãs
) {

973 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

976 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

977 
	`dz_q_chûd_i‹eque°_to_∑ª¡_q
(
pi‹eque°
, 
chûd_i‹eque°
);

978 
chûd_bio
 = 
chûd_i‹eque°
->
i‹_bio
;

979 
	`PRINT_POINTER
(
chûd_i‹eque°
);

981 
d©a_byãs
 = 
PAGE_SIZE
;

983 i‡(
ªmaöög_bv_Àn
) {

984 
d©a_byãs
 -
ªmaöög_bv_Àn
;

985 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
ªmaöög_bv_Àn
,

986 
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
));

987 i‡(!
ªt
) {

989 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

990 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio\n");

991 
exô_∑ge_add
;

993 
bi_v˙t
++;

994 
ªmaöög_bv_Àn
 = 0;

997 
bi_v˙t
 < 
bi_v˙t_max
) {

998 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

999 
bv_Àn
 = 
cur_bvec
->bv_len;

1001 i‡(
bv_Àn
 >
d©a_byãs
) {

1003 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
d©a_byãs
, cur_bvec->
bv_off£t
);

1004 i‡(!
ªt
) {

1006 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1007 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio\n");

1008 
exô_∑ge_add
;

1011 i‡(
bv_Àn
 =
d©a_byãs
) {

1012 
bi_v˙t
++;

1014 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

1016 
Æig√d_byãs
 -
PAGE_SIZE
;

1020 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
bv_Àn
, cur_bvec->
bv_off£t
);

1021 i‡(!
ªt
) {

1023 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1024 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio\n");

1025 
exô_∑ge_add
;

1027 
d©a_byãs
 -
bv_Àn
;

1028 
bi_v˙t
++;

1034 
	`dz_q_i‹eque°
(
Æign_ªad_thªad_poﬁ
, 
chûd_i‹eque°
);

1037 
	`LOGALIGN
("Printing TailÖart\n");

1041 i‡(
	`li°_em±y
(&
‰ì_li°_hód
)) {

1042 
	`BUG_ON
(1);

1044 
chûd_i‹eque°_èû
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

1045 
	`li°_dñ
(&
chûd_i‹eque°_èû
->
i‹_ioq
);

1048 
	`dz_q_i‹eque°
(
Æign_ªad_thªad_poﬁ
, 
chûd_i‹eque°_èû
);

1054 
exô_Áûuª
:

1056 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1057 
	`i‹eque°_put
(
pi‹eque°
);

1058 i‡(
∑ge
) {

1059 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

1061 i‡(
chûd_i‹eque°
) {

1062 
	`dz_io_‰ì
(
chûd_i‹eque°
);

1064 i‡(
chûd_bio
) {

1065 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio
);

1067 
exô_∑ge_add
:

1068 
bv_Àn
 = 0; bv_À¿< 
tŸÆ_blocks_√eded
; bv_len++) {

1070 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

1071 i‡(
chûd_i‹eque°
) {

1072 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_i‹eque°
->
i‹_bio
);

1073 
	`dz_io_‰ì
(
chûd_i‹eque°
);

1074 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

1077 
	}
}

1088 
RVOID
 
	$dz_Æign_ªad_mu…i_block_bŸh_Æig√d
(
PIOREQUEST
 
pi‹eque°
)

1091 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

1093 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

1094 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

1095 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

1096 
PBIOVEC
 
cur_bvec
 = 
NULL
;

1097 
INT
 
bi_v˙t
 = 0;

1098 
INT
 
bi_v˙t_max
 = 0;

1099 
INT
 
bv_Àn
 = 0;

1100 
INT
 
ªmaöög_bv_Àn
 = 0;

1101 
UINT
 
£˘‹_pos_ö_lba
 = 0;

1102 
SIZE
 
£˘‹_byãs
 = 0;

1103 
U64
 
tŸ_byãs
 = 0;

1104 
INT
 
d©a_byãs
 = 0;

1105 
INT
 
Æig√d_byãs
 = 0;

1106 
INT
 
tŸÆ_blocks_√eded
 = 0;

1107 
PIOREQUEST
 
chûd_i‹eque°
 = 
NULL
;

1108 
PBIO
 
chûd_bio
 = 
NULL
;

1109 
LIST_HEAD
 
‰ì_li°_hód
;

1110 
INT
 
cou¡
;

1111 
INT
 
ªt
;

1112 
PIOREQUEST
 
¥ev_chûd_i‹eque°

NULL
;

1113 
INT
 
ƒ_iovecs
 = 0;

1115 
BOOL
 
bvec_Æign
 = 
FALSE
;

1119 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

1120 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

1121 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

1122 
Æig√d_byãs
 = 
io_size
 ;

1127 
tŸÆ_blocks_√eded
 = (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

1137 i‡(
tŸÆ_blocks_√eded
 =
bio
->
bi_v˙t
) {

1139 
ƒ_iovecs
 = 1;

1140 
bvec_Æign
 = 
TRUE
;

1142 
ƒ_iovecs
 = (
bio
->
bi_v˙t
 / 
tŸÆ_blocks_√eded
) + 1;

1146 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

1148 
	`LOGALIGND
("Total blocksÇeeded = %d,Çr_iovecs = %d, bio->bi_max_vecs = %d, bio->bi_vcnt = %d\n",

1149 
tŸÆ_blocks_√eded
, 
ƒ_iovecs
, 
bio
->
bi_max_vecs
, bio->
bi_v˙t
);

1152 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

1155 i‡(
bvec_Æign
 =
TRUE
) {

1157 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

1159 
chûd_i‹eque°
 = 
	`dz_io_Æloc
();

1160 
	`LOGALIGN
("[cou¡ = %d] chûd_i‹eque° = %p\n", 
cou¡
, 
chûd_i‹eque°
);

1161 i‡(!
chûd_i‹eque°
) {

1162 
	`LOGALIGNE
("UnableÅo get free iorequest\n");

1163 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

1164 
exô_Áûuª
;

1166 
	`MEMSET
(
chûd_i‹eque°
);

1168 i‡(
chûd_i‹eque°
 =
¥ev_chûd_i‹eque°
) {

1169 
	`LOGALIGNE
("#################################################################\n");

1170 
	`LOGALIGNE
("Fú° AŒo¯chûd_i‹eque° = %p\n", 
chûd_i‹eque°
);

1171 
	`LOGALIGNE
("Pªv AŒo¯chûd_i‹eque° = %p\n", 
¥ev_chûd_i‹eque°
);

1172 
	`LOGALIGNE
("BŸháª samê@ cou¡ = %d\n", 
cou¡
);

1173 
	`LOGALIGNE
("TŸÆ block†√eded = %d,Çr_iovec†%d\n", 
tŸÆ_blocks_√eded
, 
ƒ_iovecs
);

1174 
	`LOGALIGNE
("bio->bi_sizê%Œi, bio->bi_£˘‹ = %Œi\n", (
U64
)
	`DZ_BIO_GET_SIZE
(
bio
), (U64)
	`DZ_BIO_GET_SECTOR
(bio));

1175 
	`LOGALIGNE
("bio->bi_max_vec†%d, bio->bi_v˙à%d\n", 
bio
->
bi_max_vecs
, bio->
bi_v˙t
);

1176 
	`LOGALIGNE
("£˘‹_byã†%Œò, se˘‹_pos_ö_lb®%Œò\n", (
U64
)
£˘‹_byãs
, (U64)
£˘‹_pos_ö_lba
);

1177 
	`LOGALIGNE
("tŸ_byã†%Œò,álig√d_byã†%Œò\n", (
U64
)
tŸ_byãs
, (U64)
Æig√d_byãs
);

1178 
	`LOGALIGNE
("#################################################################\n");

1179 
SL1
;

1180 
	`BUG_ON
(1);

1182 
chûd_bio
 = 
	`dz_bio_Æloc
(
ƒ_iovecs
);

1183 i‡(!
chûd_bio
) {

1184 
	`LOGALIGNE
("UnableÅo get free child bio\n");

1185 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

1186 
exô_Áûuª
;

1191 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio
, 
£˘‹
,

1192 
dz_Æign_ªad_mu…i_block_bŸh_Æig√d_biod⁄e
, 
chûd_i‹eque°
);

1197 
	`©omic_£t
(&
chûd_i‹eque°
->
i‹_chûd_˙t
, 0);

1198 
chûd_i‹eque°
->
i‹_thªad_poﬁ

Æign_ªad_thªad_poﬁ
;

1199 
chûd_i‹eque°
->
i‹_bio
 = 
chûd_bio
;

1201 
chûd_i‹eque°
->
i‹_∑ª¡
 = 
pi‹eque°
;

1202 
chûd_i‹eque°
->
i‹_lba
 = 
lba
;

1203 
chûd_i‹eque°
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ_SHARE_PAGE
;

1209 
	`li°_add_èû
(&(
chûd_i‹eque°
->
i‹_ioq
), &
‰ì_li°_hód
);

1211 
£˘‹
 +
SECTORS_PER_PAGE
;

1214 
	`©omic_öc
(&
pi‹eque°
->
i‹_chûd_˙t
);

1218 
lba
++;

1219 
¥ev_chûd_i‹eque°
 = 
chûd_i‹eque°
;

1221 
cur_bvec
 = &
bio
->
bi_io_vec
[
cou¡
];

1226 
ªt
 = 
	`bio_add_∑ge
(
chûd_i‹eque°
->
i‹_bio
, 
cur_bvec
->
bv_∑ge
, cur_bvec->
bv_Àn
, cur_bvec->
bv_off£t
);

1227 i‡(!
ªt
) {

1229 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1230 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio instance\n");

1231 
exô_∑ge_add
;

1234 
	`LOGALIGN
("AVERMA:BA:bi_vcnt = %d , child_iorequest = %p child_iorequest->ior_bio = %p , ior_type = %d, bi_size = %d, bio_page = %p\n",

1235 
bio
->
bi_v˙t
, 
chûd_i‹eque°
, chûd_i‹eque°->
i‹_bio
, chûd_i‹eque°->
i‹_ty≥
, 
	`DZ_BIO_GET_SIZE
(chûd_i‹eque°->i‹_bio), 
	`bio_∑ge
(child_iorequest->ior_bio));

1240 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

1241 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

1242 
	`li°_dñ
(&(
chûd_i‹eque°
->
i‹_ioq
));

1245 i‡(
	`DZ_BIO_GET_SIZE
(
chûd_i‹eque°
->
i‹_bio
Ë> 
PAGE_SIZE
 ) {

1248 
	`dz_q_i‹eque°
(
Æign_ªad_thªad_poﬁ
, 
chûd_i‹eque°
);

1256 
	`LOGALIGNE
("#################################################################\n");

1257 
	`LOGALIGNE
("bio bvec isÇotáligned\n");

1258 
	`LOGALIGNE
("TŸÆ block†√eded = %d,Çr_iovec†%d\n", 
tŸÆ_blocks_√eded
, 
ƒ_iovecs
);

1259 
	`LOGALIGNE
("bio->bi_sizê%Œi, bio->bi_£˘‹ = %Œi\n", (
U64
)
	`DZ_BIO_GET_SIZE
(
bio
), (U64)
	`DZ_BIO_GET_SECTOR
(bio));

1260 
	`LOGALIGNE
("bio->bi_max_vec†%d, bio->bi_v˙à%d\n", 
bio
->
bi_max_vecs
, bio->
bi_v˙t
);

1261 
	`LOGALIGNE
("£˘‹_byã†%Œò, se˘‹_pos_ö_lb®%Œò\n", (
U64
)
£˘‹_byãs
, (U64)
£˘‹_pos_ö_lba
);

1262 
	`LOGALIGNE
("tŸ_byã†%Œò,álig√d_byã†%Œò\n", (
U64
)
tŸ_byãs
, (U64)
Æig√d_byãs
);

1263 
	`¥öt_biom
(
bio
, "bio bvec isÇotálignedÉrror");

1264 
	`LOGALIGNE
("#################################################################\n");

1265 
SL2
;

1266 
	`BUG_ON
(1);

1271 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

1273 
chûd_i‹eque°
 = 
	`dz_io_Æloc
();

1274 i‡(!
chûd_i‹eque°
) {

1275 
	`LOGALIGNE
("UnableÅo get free iorequest\n");

1276 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

1277 
exô_Áûuª
;

1279 
	`MEMSET
(
chûd_i‹eque°
);

1281 i‡(
chûd_i‹eque°
 =
¥ev_chûd_i‹eque°
) {

1282 
	`LOGALIGN
("Fú° AŒo¯chûd_i‹eque° = %p\n", 
chûd_i‹eque°
);

1283 
	`LOGALIGN
("Pªv AŒo¯chûd_i‹eque° = %p\n", 
¥ev_chûd_i‹eque°
);

1284 
	`LOGALIGN
("Botháre same\n");

1285 
SL1
;

1286 
	`BUG_ON
(1);

1288 
chûd_bio
 = 
	`dz_bio_Æloc
(
ƒ_iovecs
);

1289 i‡(!
chûd_bio
) {

1290 
	`LOGALIGNE
("UnableÅo get free child bio\n");

1291 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

1292 
exô_Áûuª
;

1297 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio
, 
£˘‹
,

1298 
dz_Æign_ªad_mu…i_block_bŸh_Æig√d_biod⁄e
, 
chûd_i‹eque°
);

1300 
	`©omic_£t
(&
chûd_i‹eque°
->
i‹_chûd_˙t
, 0);

1301 
chûd_i‹eque°
->
i‹_thªad_poﬁ

Æign_ªad_thªad_poﬁ
;

1302 
chûd_i‹eque°
->
i‹_bio
 = 
chûd_bio
;

1304 
chûd_i‹eque°
->
i‹_∑ª¡
 = 
pi‹eque°
;

1305 
chûd_i‹eque°
->
i‹_lba
 = 
lba
;

1306 
chûd_i‹eque°
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ_SHARE_PAGE
;

1312 
	`li°_add_èû
(&(
chûd_i‹eque°
->
i‹_ioq
), &
‰ì_li°_hód
);

1314 
£˘‹
 +
SECTORS_PER_PAGE
;

1317 
	`©omic_öc
(&
pi‹eque°
->
i‹_chûd_˙t
);

1321 
lba
++;

1322 
¥ev_chûd_i‹eque°
 = 
chûd_i‹eque°
;

1337 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

1339 
Æig√d_byãs
) {

1342 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

1347 
	`li°_dñ
(&(
chûd_i‹eque°
->
i‹_ioq
));

1351 
chûd_bio
 = 
chûd_i‹eque°
->
i‹_bio
;

1354 
d©a_byãs
 = 
PAGE_SIZE
;

1356 i‡(
ªmaöög_bv_Àn
) {

1359 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
ªmaöög_bv_Àn
,

1360 
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
));

1361 i‡(!
ªt
) {

1363 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1364 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio\n");

1365 
exô_∑ge_add
;

1367 
d©a_byãs
 -
ªmaöög_bv_Àn
;

1368 
bi_v˙t
++;

1369 
ªmaöög_bv_Àn
 = 0;

1372 
bi_v˙t
 < 
bi_v˙t_max
) {

1373 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

1374 
bv_Àn
 = 
cur_bvec
->bv_len;

1381 i‡(
bv_Àn
 >
d©a_byãs
) {

1383 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
d©a_byãs
, cur_bvec->
bv_off£t
);

1384 i‡(!
ªt
) {

1386 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1387 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio instance\n");

1388 
exô_∑ge_add
;

1391 i‡(
bv_Àn
 =
d©a_byãs
) {

1392 
bi_v˙t
++;

1394 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

1396 
Æig√d_byãs
 -
PAGE_SIZE
;

1400 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
bv_Àn
, cur_bvec->
bv_off£t
);

1401 i‡(!
ªt
) {

1403 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1404 
	`LOGALIGNE
("UnableÅoádd PageÅo child bioÉxtended\n");

1405 
exô_∑ge_add
;

1407 
d©a_byãs
 -
bv_Àn
;

1408 
bi_v˙t
++;

1417 
	`dz_q_i‹eque°
(
Æign_ªad_thªad_poﬁ
, 
chûd_i‹eque°
);

1421 
	`LOGD
("AVERMA:SET COMPLETED %d \n", 
avîma_˙t
++);

1429 
exô_Áûuª
:

1431 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1432 
	`i‹eque°_put
(
pi‹eque°
);

1433 i‡(
chûd_i‹eque°
) {

1434 
	`dz_io_‰ì
(
chûd_i‹eque°
);

1436 i‡(
chûd_bio
) {

1437 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio
);

1439 
exô_∑ge_add
:

1440 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

1442 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

1443 i‡(
chûd_i‹eque°
) {

1444 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_i‹eque°
->
i‹_bio
);

1447 
	`dz_io_‰ì
(
chûd_i‹eque°
);

1448 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

1451 
	}
}

1459 
RINT
 
	$dz_Æign_ªad_f‹_mu…i_block
(
PIOREQUEST
 
pi‹eque°
)

1461 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

1462 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

1463 
LBA
 
lba
 = 0;

1465 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

1467 
SIZE
 
£˘‹_byãs
 = 0;

1468 
U64
 
tŸ_byãs
 = 0;

1469 
INT
 
ba
 = 0;

1470 
INT
 
bu
 = 0;

1471 
INT
 
hu
 = 0;

1472 
INT
 
tu
 = 0;

1475 
lba
 = 
	`dz_c⁄vît_£˘‹_to_lba
(
£˘‹
);

1477 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

1488 i‡((
£˘‹_byãs
 % 
LBA_BLOCK_SIZE
) == 0 ) {

1491 i‡(((
£˘‹_byãs
 + 
io_size
Ë% 
LBA_BLOCK_SIZE
) == 0 ) {

1499 i‡(
ba
++ == 0) {

1500 
	`LOGD
("Ca£1:READ BIO i†Hód Alig√dánd Taû Alig√d. io_sizê%zu byãs\n", 
io_size
);

1502 
	`LOGALIGND
("Ca£1:READ BIO i†Hód Alig√dánd Taû Alig√d. io_sizê%zu byãs\n", 
io_size
);

1503 
	`INC_COUNTER
(
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
);

1504 
	`dz_Æign_ªad_mu…i_block_bŸh_Æig√d
(
pi‹eque°
);

1505 
RETURNS
;

1512 i‡(
tu
++ == 0) {

1513 
	`LOGD
("Case2:Read BIO is Head Alignedánd Tail UnAligned\n");

1515 
	`LOGALIGN
("%s", "Case2:Read BIO is Head Alignedánd Tail UnAligned\n");

1516 
	`INC_COUNTER
(
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
);

1517 
	`INC_COUNTER
(
Æign_iocou¡_ªads_mu…i_èû_u«lig√d_∑ge
);

1518 
	`dz_Æign_ªad_mu…i_block_èû_u«lig√d
(
pi‹eque°
);

1519 
RETURNS
;

1522 } i‡(((
tŸ_byãs
 = (
£˘‹_byãs
 + 
io_size
)Ë% 
LBA_BLOCK_SIZE
) == 0 ) {

1532 i‡(
hu
++ == 0) {

1533 
	`LOGD
("Case3:Read BIO is Head UnAlignedánd Tail Aligned\n");

1535 
	`LOGALIGN
("%s", "Case3:Read BIO is Head UnAlignedánd Tail Aligned\n");

1536 
	`INC_COUNTER
(
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
);

1537 
	`INC_COUNTER
(
Æign_iocou¡_ªads_mu…i_hód_u«lig√d_∑ge
);

1538 
	`dz_Æign_ªad_mu…i_block_hód_u«lig√d
(
pi‹eque°
);

1539 
RETURNS
;

1550 i‡(
bu
++ == 0) {

1551 
	`LOGD
("Case4:Read BIO is Neither Head Aligned Nor Tail Aligned\n");

1553 
	`LOGALIGN
("%s", "Case4:Read BIO is Neither Head Aligned Nor Tail Aligned\n");

1554 
	`INC_COUNTER
(
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
);

1555 
	`INC_COUNTER
(
Æign_iocou¡_ªads_mu…i_bŸh_u«lig√d_∑ge
);

1556 
	`dz_Æign_ªad_mu…i_block_bŸh_u«lig√d
(
pi‹eque°
);

1557 
RETURNS
;

1559 
	}
}

	@alignment_engine/alignment_engine_read_partial.c

9 
	~"¥ŸŸy≥s.h
"

11 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

13 
SPINLOCK
 
¥öt_i‹eque°_lock
;

15 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

18 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_hÆig√d_∑ge
;

21 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_èlig√d_∑ge
;

25 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_•ûÀd_∑ge
;

30 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_absﬁuã_∑ge
;

32 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

33 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

34 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

35 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

36 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

37 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

39 
RVOID
 
	$dz_Æign_ªad_f‹_∑πül_block_biod⁄e_èû
(
PBIO
 
bio
)

41 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

42 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

43 
PVOID
 
˝agebuf
 = 
NULL
;

44 
PVOID
 
µagebuf
 = 
NULL
;

45 
BIOVEC
 
cbvec
;

46 
BIOVEC
 
pbvec
;

47 
PBIO
 
pbio
 = 
pi‹eque°
->
i‹_bio
;

49 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
pbio
);

50 
UINT
 
£˘‹_pos_ö_lba
 = 0;

51 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

53 
SIZE
 
size
 = 
	`DZ_BIO_GET_SIZE
(
pbio
);

54 
PBIOVEC
 
œ°_bvec
 = 
NULL
;

55 
INT
 
bi_v˙t
 = 0;

56 
INT
 
bi_v˙t_max
 = 0;

57 
INT
 
bv_Àn
 = 0;

58 
INT
 
bv_off£t
 = 0;

59 
INT
 
∑πül_byãs_èû
;

60 
INT
 
∑πül_byãs_hód
;

61 
INT
 
∑πül_byãs
;

74 
	`IF_BIO_ERROR
(
bio
) {

75 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

76 
exô
;

78 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

79 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

80 
∑πül_byãs_èû
 = 
size
 - 
∑πül_byãs_hód
;

81 
∑πül_byãs
 = 
∑πül_byãs_èû
;

84 
cbvec
 = 
	`bio_iovec
(
bio
);

85 
˝agebuf
 = 
	`km≠
(
cbvec
.
bv_∑ge
);

86 
˝agebuf
 +
£˘‹_pos_ö_lba
;

89 
bi_v˙t_max
 = 
pbio
->
bi_v˙t
;

90 
pbvec
 = 
	`bio_iovec
(
pbio
);

91 
bi_v˙t
 = 
pbio
->bi_vcnt - 1;

93 
∑πül_byãs
 > 0) {

94 
bi_v˙t
 >= 0) {

95 
œ°_bvec
 = &
pbio
->
bi_io_vec
[
bi_v˙t
];

96 
bv_Àn
 = 
œ°_bvec
->bv_len;

97 
∑πül_byãs
 -
bv_Àn
 ;

98 i‡(
∑πül_byãs
 <= 0) {

100 
bv_off£t
 = 
œ°_bvec
->bv_off£à- 
∑πül_byãs
;

101 
µagebuf
 = 
	`km≠
(
œ°_bvec
->
bv_∑ge
);

102 
µagebuf
 +
bv_off£t
;

103 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
∑πül_byãs_èû
);

104 
	`kunm≠
(
œ°_bvec
->
bv_∑ge
);

107 
bv_off£t
 = 
œ°_bvec
->bv_offset;

108 
µagebuf
 = 
	`km≠
(
œ°_bvec
->
bv_∑ge
);

109 
µagebuf
 +
bv_off£t
;

110 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
bv_Àn
);

111 
	`kunm≠
(
œ°_bvec
->
bv_∑ge
);

112 
˝agebuf
 +
bv_Àn
;

113 
bi_v˙t
--;

118 
	`kunm≠
(
cbvec
.
bv_∑ge
);

119 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

122 
	`IOREQUEST_DONE
(
pi‹eque°
);

123 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

124 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

125 
	`i‹eque°_put
(
ci‹eque°
);

127 
	`bio_d©a_dú
(
pi‹eque°
->
i‹_bio
Ë=
WRITE
 ?

128 
	`i‹eque°_put
(
pi‹eque°
) :

129 
	`i‹eque°_put
(
pi‹eque°
);

133 
exô
:

134 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

135 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

136 
	`i‹eque°_put
(
ci‹eque°
);

140 
	}
}

142 
RVOID
 
	$dz_Æign_ªad_f‹_∑πül_block_biod⁄e_hód
(
PBIO
 
bio
)

144 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

145 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

146 
PVOID
 
˝agebuf
 = 
NULL
;

147 
PVOID
 
µagebuf
 = 
NULL
;

148 
BIOVEC
 
cbvec
;

149 
BIOVEC
 
pbvec
;

150 
PBIO
 
pbio
 = 
pi‹eque°
->
i‹_bio
;

152 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
pbio
);

153 
UINT
 
£˘‹_pos_ö_lba
 = 0;

154 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

155 
INT
 
bv_Àn
 = 0;

156 
ITERATOR
 
ôî
;

157 
INT
 
∑πül_byãs_hód
;

171 
	`IF_BIO_ERROR
(
bio
) {

172 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

173 
exô
;

175 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

176 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

179 
cbvec
 = 
	`bio_iovec
(
bio
);

180 
˝agebuf
 = 
	`km≠
(
cbvec
.
bv_∑ge
);

181 
˝agebuf
 +
£˘‹_pos_ö_lba
;

185 
	`bio_f‹_óch_£gmít
(
pbvec
, 
pbio
, 
ôî
) {

186 
µagebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

187 
µagebuf
 +
pbvec
.
bv_off£t
;

188 
bv_Àn
 = 
pbvec
.bv_len;

189 i‡(
∑πül_byãs_hód
 > 
bv_Àn
) {

199 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
bv_Àn
);

200 
˝agebuf
 +
bv_Àn
;

201 
∑πül_byãs_hód
 -
bv_Àn
;

202 
	`kunm≠
(
pbvec
.
bv_∑ge
);

207 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
∑πül_byãs_hód
);

208 
	`kunm≠
(
pbvec
.
bv_∑ge
);

212 
	`kunm≠
(
cbvec
.
bv_∑ge
);

214 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

217 
	`IOREQUEST_DONE
(
pi‹eque°
);

218 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

219 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

220 
	`i‹eque°_put
(
ci‹eque°
);

222 
	`bio_d©a_dú
(
pi‹eque°
->
i‹_bio
Ë=
WRITE
 ?

223 
	`i‹eque°_put
(
pi‹eque°
) :

224 
	`i‹eque°_put
(
pi‹eque°
);

228 
exô
:

229 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

230 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

231 
	`i‹eque°_put
(
ci‹eque°
);

235 
	}
}

237 
RVOID
 
	$dz_Æign_ªad_f‹_∑πül_block_biod⁄e
(
PBIO
 
bio
)

239 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

240 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

241 
PVOID
 
˝agebuf
 = 
NULL
;

242 
PVOID
 
µagebuf
 = 
NULL
;

243 
BIOVEC
 
cbvec
;

244 
BIOVEC
 
pbvec
;

245 
PBIO
 
pbio
 = 
pi‹eque°
->
i‹_bio
;

247 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
pbio
);

248 
UINT
 
£˘‹_pos_ö_lba
 = 0;

249 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

251 
SIZE
 
size
 = 
	`DZ_BIO_GET_SIZE
(
pbio
);

252 
INT
 
bv_Àn
 = 0;

253 
ITERATOR
 
ôî
;

265 
	`IF_BIO_ERROR
(
bio
) {

266 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

267 
exô
;

270 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

271 
cbvec
 = 
	`bio_iovec
(
bio
);

272 
˝agebuf
 = 
	`km≠
(
cbvec
.
bv_∑ge
);

273 
˝agebuf
 +
£˘‹_pos_ö_lba
;

276 
	`bio_f‹_óch_£gmít
(
pbvec
, 
pbio
, 
ôî
) {

281 
µagebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

282 
µagebuf
 +
pbvec
.
bv_off£t
;

283 
bv_Àn
 = 
pbvec
.bv_len;

284 i‡(
size
 > 
bv_Àn
) {

285 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
bv_Àn
);

286 
˝agebuf
 +
bv_Àn
;

287 
size
 -
bv_Àn
;

288 
	`kunm≠
(
pbvec
.
bv_∑ge
);

291 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
size
);

292 
	`kunm≠
(
pbvec
.
bv_∑ge
);

296 
	`kunm≠
(
cbvec
.
bv_∑ge
);

297 
	`READ_IO_DONE
(
pi‹eque°
);

299 
exô
:

300 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

301 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

302 
	`i‹eque°_put
(
ci‹eque°
);

303 
	`i‹eque°_put
(
pi‹eque°
);

306 
	}
}

313 
RVOID
 
	$dz_Æign_ªad_doubÀ_∑ge_async
(
PIOREQUEST
 
∑ª¡_i‹eque°
,

314 
BIODONE
 
d⁄e_hód
, BIODONE 
d⁄e_èû
)

316 
INT
 
ªt
 = 
SUCCESS
;

317 
PIOREQUEST
 
chûd_i‹eque°_hód
 = 
NULL
;

318 
PIOREQUEST
 
chûd_i‹eque°_èû
 = 
NULL
;

319 
PBIO
 
chûd_bio_hód
 = 
NULL
;

320 
PBIO
 
chûd_bio_èû
 = 
NULL
;

321 
PPAGE
 
∑ge_hód
 = 
NULL
;

322 
PPAGE
 
∑ge_èû
 = 
NULL
;

323 
PBIO
 
bio
 = 
∑ª¡_i‹eque°
->
i‹_bio
;

324 
LBA
 
lba
 = 
∑ª¡_i‹eque°
->
i‹_lba
;

325 
SECTOR
 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba
);

329 
chûd_i‹eque°_hód
 = 
	`dz_io_Æloc
();

330 i‡(!
chûd_i‹eque°_hód
) {

331 
	`LOGFECE
("UnableÅo get free iorequest\n");

332 
exô_Áûuª
;

334 
	`MEMSET
(
chûd_i‹eque°_hód
);

337 
chûd_bio_hód
 = 
	`dz_bio_Æloc
(1);

338 i‡(!
chûd_bio_hód
) {

339 
	`LOGFECE
("UnableÅo get free child bio\n");

340 
exô_Áûuª
;

344 
∑ge_hód
 = 
	`dz_ªad_∑ge_Æloc
();

345 i‡(!
∑ge_hód
) {

346 
	`LOGFECE
("UnableÅo get freeÑeadÖage\n");

347 
exô_Áûuª
;

349 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio_hód
, 
£˘‹
, 
d⁄e_hód
, 
chûd_i‹eque°_hód
);

352 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio_hód
, 
∑ge_hód
, 
PAGE_SIZE
, 0);

353 i‡(!
ªt
) {

355 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

356 
	`LOGFECE
("UnableÅoádd PageÅo child bio head\n");

357 
exô_Æloc
;

360 
	`©omic_£t
(&
chûd_i‹eque°_hód
->
i‹_chûd_˙t
, 0);

361 
chûd_i‹eque°_hód
->
i‹_thªad_poﬁ
 = 
Æign_ªad_thªad_poﬁ
;

362 
chûd_i‹eque°_hód
->
i‹_bio
 = 
chûd_bio_hód
;

364 
chûd_i‹eque°_hód
->
i‹_lba
 = 
lba
;

365 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

366 
chûd_i‹eque°_hód
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

367 
chûd_i‹eque°_hód
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
;

370 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

374 
lba
++;

375 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba
);

378 
chûd_i‹eque°_èû
 = 
	`dz_io_Æloc
();

379 i‡(!
chûd_i‹eque°_èû
) {

380 
	`LOGFECE
("UnableÅo get free iorequestÅail\n");

381 
exô_Áûuª
;

383 
	`MEMSET
(
chûd_i‹eque°_èû
);

386 
chûd_bio_èû
 = 
	`dz_bio_Æloc
(1);

387 i‡(!
chûd_bio_èû
) {

388 
	`LOGFECE
("UnableÅo get free child bioÅail\n");

389 
exô_Áûuª
;

393 
∑ge_èû
 = 
	`dz_ªad_∑ge_Æloc
();

394 i‡(!
∑ge_èû
) {

395 
	`LOGFECE
("UnableÅo get freeÑeadÖageÅail\n");

396 
exô_Áûuª
;

398 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio_èû
, 
£˘‹
, 
d⁄e_èû
, 
chûd_i‹eque°_èû
);

400 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio_èû
, 
∑ge_èû
, 
PAGE_SIZE
, 0);

401 i‡(!
ªt
) {

403 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

404 
	`LOGFECE
("UnableÅoádd PageÅo child bioÅail\n");

405 
exô_Æloc
;

407 
	`©omic_£t
(&
chûd_i‹eque°_èû
->
i‹_chûd_˙t
, 0);

408 
chûd_i‹eque°_èû
->
i‹_thªad_poﬁ
 = 
Æign_ªad_thªad_poﬁ
;

409 
chûd_i‹eque°_èû
->
i‹_bio
 = 
chûd_bio_èû
;

411 
chûd_i‹eque°_èû
->
i‹_lba
 = 
lba
;

412 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

413 
chûd_i‹eque°_èû
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

414 
chûd_i‹eque°_èû
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
;

417 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

420 
chûd_bio_hód
->
bi_√xt
 = 
chûd_bio_èû
;

421 
chûd_bio_èû
->
bi_√xt
 = 
chûd_bio_hód
;

425 
	`dz_q_i‹eque°_thªad_poﬁ
(
chûd_i‹eque°_hód
);

426 
	`dz_q_i‹eque°_thªad_poﬁ
(
chûd_i‹eque°_èû
);

429 
exô_Áûuª
:

431 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

433 
exô_Æloc
:

434 i‡(
∑ge_hód
) {

435 
	`dz_ªad_∑ge_‰ì
(
∑ge_hód
);

437 i‡(
∑ge_èû
) {

438 
	`dz_ªad_∑ge_‰ì
(
∑ge_èû
);

440 i‡(
chûd_bio_hód
) {

441 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio_hód
);

443 i‡(
chûd_bio_èû
) {

444 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio_èû
);

446 i‡(
chûd_i‹eque°_hód
) {

447 
	`dz_io_‰ì
(
chûd_i‹eque°_hód
);

449 i‡(
chûd_i‹eque°_èû
) {

450 
	`dz_io_‰ì
(
chûd_i‹eque°_èû
);

452 
	`i‹eque°_put
(
∑ª¡_i‹eque°
);

453 
	}
}

455 
RVOID
 
	$dz_Æign_ªad_sögÀ_∑ge_async
(
PIOREQUEST
 
∑ª¡_i‹eque°
, 
BIODONE
 
d⁄e_func
)

457 
INT
 
ªt
 = 
SUCCESS
;

458 
PIOREQUEST
 
chûd_i‹eque°
 = 
NULL
;

459 
PBIO
 
chûd_bio
 = 
NULL
;

460 
PBIO
 
bio
 = 
∑ª¡_i‹eque°
->
i‹_bio
;

461 
PPAGE
 
∑ge
 = 
NULL
;

462 
SECTOR
 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
∑ª¡_i‹eque°
->
i‹_lba
);

464 
chûd_i‹eque°
 = 
	`dz_io_Æloc
();

465 i‡(!
chûd_i‹eque°
) {

466 
	`LOGALIGNE
("UnableÅo get free iorequest\n");

467 
exô_Áûuª
;

469 
	`MEMSET
(
chûd_i‹eque°
);

470 
chûd_bio
 = 
	`dz_bio_Æloc
(1);

471 i‡(!
chûd_bio
) {

472 
	`LOGALIGNE
("UnableÅo get free child bio\n");

473 
exô_Áûuª
;

475 
∑ge
 = 
	`dz_ªad_∑ge_Æloc
();

476 i‡(!
∑ge
) {

477 
	`LOGALIGNE
("UnableÅo get freeÑeadÖage\n");

478 
exô_Áûuª
;

480 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio
, 
£˘‹
, 
d⁄e_func
, 
chûd_i‹eque°
);

482 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
∑ge
, 
PAGE_SIZE
, 0);

483 i‡(!
ªt
) {

485 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

486 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio\n");

487 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

488 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio
);

489 
	`dz_io_‰ì
(
chûd_i‹eque°
);

492 
	`©omic_£t
(&
chûd_i‹eque°
->
i‹_chûd_˙t
, 0);

493 
chûd_i‹eque°
->
i‹_thªad_poﬁ

Æign_ªad_thªad_poﬁ
;

494 
chûd_i‹eque°
->
i‹_bio
 = 
chûd_bio
;

496 
chûd_i‹eque°
->
i‹_lba
 = 
∑ª¡_i‹eque°
->ior_lba;

497 
chûd_i‹eque°
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

498 
chûd_i‹eque°
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
;

499 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

506 
exô_Áûuª
:

508 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

509 i‡(
chûd_i‹eque°
) {

510 
	`dz_io_‰ì
(
chûd_i‹eque°
);

512 i‡(
∑ge
) {

513 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

515 i‡(
chûd_bio
) {

516 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio
);

518 
	}
}

524 
RVOID
 
	$dz_Æign_ªad_f‹_∑πül_block
(
PIOREQUEST
 
pi‹eque°
)

526 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

527 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

529 
INT
 
size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

530 
UINT
 
£˘‹_pos_ö_lba
 = 0;

531 
BOOL
 
Æign_Êag
 = 
åue
;

533 i‡(((
£˘‹
 * 
SECTOR_SIZE
Ë% 
LBA_BLOCK_SIZE
) == 0 ) {

535 
∑πül_io
:

536 i‡(
Æign_Êag
 =
åue
) {

537 
	`LOGD
("Case1: Partial Block IO: Start Block Aligned. Only one Child will be created\n");

541 
	`dz_Æign_ªad_sögÀ_∑ge_async
(
pi‹eque°
, 
dz_Æign_ªad_f‹_∑πül_block_biod⁄e
);

545 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
pi‹eque°
->
i‹_lba
 * 
LBA_BLOCK_SIZE
);

547 i‡((
£˘‹_pos_ö_lba
 + 
size
Ë<
LBA_BLOCK_SIZE
) {

550 
	`LOGD
("Case2: Partial Block IO: NO Start Block Aligned. Falls into Single Block butÇo Spillover.\n");

551 
Æign_Êag
 = 
Ál£
;

552 
∑πül_io
;

555 
	`LOGD
("Case3: Partial Block IO: Spill overÅoÇext block. Two children will be created\n");

558 
	`dz_Æign_ªad_doubÀ_∑ge_async
(
pi‹eque°
,

559 
dz_Æign_ªad_f‹_∑πül_block_biod⁄e_hód
,

560 
dz_Æign_ªad_f‹_∑πül_block_biod⁄e_èû
);

564 
	}
}

	@alignment_engine/alignment_engine_read_single.c

9 
	~"¥ŸŸy≥s.h
"

11 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

12 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

13 
INT
 
dz_swôch_dedu≥_ígöe
;

14 
INT
 
dz_swôch_bec_ígöe
;

15 
INT
 
dz_swôch_„c_ígöe
;

17 
SPINLOCK
 
¥öt_i‹eque°_lock
;

18 
PBLOCK_DEVICE
 
DATA_DISK_DEVICE
;

20 
ATOMIC64
 
Æign_iocou¡_disk_ªad
;

21 
ATOMIC64
 
Æign_iocou¡_disk_ªad_öã∫Æ
;

22 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

23 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

24 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

31 
RVOID
 
	$dz_Æign_ªad_f‹_sögÀ_block_biod⁄e_èû
(
PBIO
 
bio
)

33 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

34 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

35 
PVOID
 
˝agebuf
 = 
NULL
;

36 
PVOID
 
µagebuf
 = 
NULL
;

37 
BIOVEC
 
cbvec
;

38 
BIOVEC
 
pbvec
;

39 
PBIO
 
pbio
 = 
pi‹eque°
->
i‹_bio
;

41 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
pbio
);

42 
UINT
 
£˘‹_pos_ö_lba
 = 0;

43 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

45 
SIZE
 
size
 = 
	`DZ_BIO_GET_SIZE
(
pbio
);

46 
PBIOVEC
 
œ°_bvec
 = 
NULL
;

47 
INT
 
bi_v˙t
 = 0;

48 
INT
 
bi_v˙t_max
 = 0;

49 
INT
 
bv_Àn
 = 0;

50 
INT
 
bv_off£t
 = 0;

51 
INT
 
∑πül_byãs_èû
;

52 
INT
 
∑πül_byãs_hód
;

53 
INT
 
∑πül_byãs
;

63 
	`IF_BIO_ERROR
(
bio
) {

64 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

65 
exô
;

67 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

68 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

69 
∑πül_byãs_èû
 = 
size
 - 
∑πül_byãs_hód
;

70 
∑πül_byãs
 = 
∑πül_byãs_èû
;

73 
cbvec
 = 
	`bio_iovec
(
bio
);

74 
˝agebuf
 = 
	`km≠
(
cbvec
.
bv_∑ge
);

75 
˝agebuf
 +
£˘‹_pos_ö_lba
;

79 
bi_v˙t_max
 = 
pbio
->
bi_v˙t
;

80 
pbvec
 = 
	`bio_iovec
(
pbio
);

81 
bi_v˙t
 = 
pbio
->bi_vcnt - 1;

83 
∑πül_byãs
 > 0) {

84 
bi_v˙t
 >= 0) {

85 
œ°_bvec
 = &
pbio
->
bi_io_vec
[
bi_v˙t
];

86 
bv_Àn
 = 
œ°_bvec
->bv_len;

87 
∑πül_byãs
 -
bv_Àn
 ;

88 i‡(
∑πül_byãs
 <= 0) {

90 
bv_off£t
 = 
œ°_bvec
->bv_off£à- 
∑πül_byãs
;

91 
µagebuf
 = 
	`km≠
(
œ°_bvec
->
bv_∑ge
);

92 
µagebuf
 +
bv_off£t
;

93 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
∑πül_byãs_èû
);

94 
	`kunm≠
(
œ°_bvec
->
bv_∑ge
);

97 
bv_off£t
 = 
œ°_bvec
->bv_offset;

98 
µagebuf
 = 
	`km≠
(
œ°_bvec
->
bv_∑ge
);

99 
µagebuf
 +
bv_off£t
;

100 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
bv_Àn
);

101 
	`kunm≠
(
œ°_bvec
->
bv_∑ge
);

102 
˝agebuf
 +
bv_Àn
;

103 
bi_v˙t
--;

108 
	`kunm≠
(
cbvec
.
bv_∑ge
);

109 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

112 
	`IOREQUEST_DONE
(
pi‹eque°
);

113 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

114 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

115 
	`i‹eque°_put
(
ci‹eque°
);

116 
	`i‹eque°_put
(
pi‹eque°
);

121 
exô
:

122 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

123 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

124 
	`i‹eque°_put
(
ci‹eque°
);

127 
	}
}

133 
RVOID
 
	$dz_Æign_ªad_f‹_sögÀ_block_biod⁄e_hód
(
PBIO
 
bio
)

135 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

136 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

137 
PVOID
 
˝agebuf
 = 
NULL
;

138 
PVOID
 
µagebuf
 = 
NULL
;

139 
BIOVEC
 
cbvec
;

140 
BIOVEC
 
pbvec
;

141 
PBIO
 
pbio
 = 
pi‹eque°
->
i‹_bio
;

143 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
pbio
);

144 
UINT
 
£˘‹_pos_ö_lba
 = 0;

145 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

146 
INT
 
bv_Àn
 = 0;

147 
INT
 
∑πül_byãs_hód
;

148 
ITERATOR
 
ôî
;

161 
	`IF_BIO_ERROR
(
bio
) {

162 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

163 
exô
;

165 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

166 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

169 
cbvec
 = 
	`bio_iovec
(
bio
);

170 
˝agebuf
 = 
	`km≠
(
cbvec
.
bv_∑ge
);

171 
˝agebuf
 +
£˘‹_pos_ö_lba
;

175 
	`bio_f‹_óch_£gmít
(
pbvec
, 
pbio
, 
ôî
) {

176 
µagebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

177 
µagebuf
 +
pbvec
.
bv_off£t
;

178 
bv_Àn
 = 
pbvec
.bv_len;

179 i‡(
∑πül_byãs_hód
 > 
bv_Àn
) {

189 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
bv_Àn
);

190 
˝agebuf
 +
bv_Àn
;

191 
∑πül_byãs_hód
 -
bv_Àn
;

192 
	`kunm≠
(
pbvec
.
bv_∑ge
);

197 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
∑πül_byãs_hód
);

198 
	`kunm≠
(
pbvec
.
bv_∑ge
);

202 
	`kunm≠
(
cbvec
.
bv_∑ge
);

204 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

207 
	`IOREQUEST_DONE
(
pi‹eque°
);

208 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

209 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

210 
	`i‹eque°_put
(
ci‹eque°
);

211 
	`i‹eque°_put
(
pi‹eque°
);

215 
exô
:

216 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

217 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

218 
	`i‹eque°_put
(
ci‹eque°
);

221 
	}
}

227 
RVOID
 
	$dz_Æign_ªad_doubÀ_∑ge_async
(
PIOREQUEST
 
∑ª¡_i‹eque°
,

228 
BIODONE
 
d⁄e_hód
, BIODONE 
d⁄e_èû
)

230 
INT
 
ªt
 = 
SUCCESS
;

231 
PIOREQUEST
 
chûd_i‹eque°_hód
 = 
NULL
;

232 
PIOREQUEST
 
chûd_i‹eque°_èû
 = 
NULL
;

233 
PBIO
 
chûd_bio_hód
 = 
NULL
;

234 
PBIO
 
chûd_bio_èû
 = 
NULL
;

235 
PPAGE
 
∑ge_hód
 = 
NULL
;

236 
PPAGE
 
∑ge_èû
 = 
NULL
;

237 
PBIO
 
bio
 = 
∑ª¡_i‹eque°
->
i‹_bio
;

238 
LBA
 
lba
 = 
∑ª¡_i‹eque°
->
i‹_lba
;

239 
SECTOR
 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba
);

243 
chûd_i‹eque°_hód
 = 
	`dz_io_Æloc
();

244 i‡(!
chûd_i‹eque°_hód
) {

245 
	`LOGFECE
("UnableÅo get free iorequest\n");

246 
exô_Áûuª
;

248 
	`MEMSET
(
chûd_i‹eque°_hód
);

251 
chûd_bio_hód
 = 
	`dz_bio_Æloc
(1);

252 i‡(!
chûd_bio_hód
) {

253 
	`LOGFECE
("UnableÅo get free child bio\n");

254 
exô_Áûuª
;

258 
∑ge_hód
 = 
	`dz_ªad_∑ge_Æloc
();

259 i‡(!
∑ge_hód
) {

260 
	`LOGFECE
("UnableÅo get freeÑeadÖage\n");

261 
exô_Áûuª
;

263 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio_hód
, 
£˘‹
, 
d⁄e_hód
, 
chûd_i‹eque°_hód
);

266 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio_hód
, 
∑ge_hód
, 
PAGE_SIZE
, 0);

267 i‡(!
ªt
) {

269 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

270 
	`LOGFECE
("UnableÅoádd PageÅo child bio head\n");

271 
exô_Æloc
;

274 
	`©omic_£t
(&
chûd_i‹eque°_hód
->
i‹_chûd_˙t
, 0);

275 
chûd_i‹eque°_hód
->
i‹_thªad_poﬁ
 = 
Æign_ªad_thªad_poﬁ
;

276 
chûd_i‹eque°_hód
->
i‹_bio
 = 
chûd_bio_hód
;

278 
chûd_i‹eque°_hód
->
i‹_lba
 = 
lba
;

279 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

280 
chûd_i‹eque°_hód
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

281 
chûd_i‹eque°_hód
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
;

284 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

288 
lba
++;

289 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba
);

292 
chûd_i‹eque°_èû
 = 
	`dz_io_Æloc
();

293 i‡(!
chûd_i‹eque°_èû
) {

294 
	`LOGFECE
("UnableÅo get free iorequestÅail\n");

295 
exô_Áûuª
;

297 
	`MEMSET
(
chûd_i‹eque°_èû
);

300 
chûd_bio_èû
 = 
	`dz_bio_Æloc
(1);

301 i‡(!
chûd_bio_èû
) {

302 
	`LOGFECE
("UnableÅo get free child bioÅail\n");

303 
exô_Áûuª
;

307 
∑ge_èû
 = 
	`dz_ªad_∑ge_Æloc
();

308 i‡(!
∑ge_èû
) {

309 
	`LOGFECE
("UnableÅo get freeÑeadÖageÅail\n");

310 
exô_Áûuª
;

312 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio_èû
, 
£˘‹
, 
d⁄e_èû
, 
chûd_i‹eque°_èû
);

314 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio_èû
, 
∑ge_èû
, 
PAGE_SIZE
, 0);

315 i‡(!
ªt
) {

317 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

318 
	`LOGFECE
("UnableÅoádd PageÅo child bioÅail\n");

319 
exô_Æloc
;

321 
	`©omic_£t
(&
chûd_i‹eque°_èû
->
i‹_chûd_˙t
, 0);

322 
chûd_i‹eque°_èû
->
i‹_thªad_poﬁ
 = 
Æign_ªad_thªad_poﬁ
;

323 
chûd_i‹eque°_èû
->
i‹_bio
 = 
chûd_bio_èû
;

325 
chûd_i‹eque°_èû
->
i‹_lba
 = 
lba
;

326 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

327 
chûd_i‹eque°_èû
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

328 
chûd_i‹eque°_èû
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
;

331 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

334 
chûd_bio_hód
->
bi_√xt
 = 
chûd_bio_èû
;

335 
chûd_bio_èû
->
bi_√xt
 = 
chûd_bio_hód
;

339 
	`dz_q_i‹eque°_thªad_poﬁ
(
chûd_i‹eque°_hód
);

340 
	`dz_q_i‹eque°_thªad_poﬁ
(
chûd_i‹eque°_èû
);

343 
exô_Áûuª
:

345 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

347 
exô_Æloc
:

348 i‡(
∑ge_hód
) {

349 
	`dz_ªad_∑ge_‰ì
(
∑ge_hód
);

351 i‡(
∑ge_èû
) {

352 
	`dz_ªad_∑ge_‰ì
(
∑ge_èû
);

354 i‡(
chûd_bio_hód
) {

355 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio_hód
);

357 i‡(
chûd_bio_èû
) {

358 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio_èû
);

360 i‡(
chûd_i‹eque°_hód
) {

361 
	`dz_io_‰ì
(
chûd_i‹eque°_hód
);

363 i‡(
chûd_i‹eque°_èû
) {

364 
	`dz_io_‰ì
(
chûd_i‹eque°_èû
);

366 
	`i‹eque°_put
(
∑ª¡_i‹eque°
);

367 
	}
}

375 
RINT
 
	$dz_Æign_ªad_sögÀ_block_‰om_øw_disk_sync
(
PIOREQUEST
 
i‹eque°
, 
SECTOR
 
£˘‹
)

377 
PBIO
 
∑ª¡_bio
 = 
i‹eque°
->
i‹_bio
;

378 
PBIO
 
bio
 = 
NULL
;

379 
INT
 
îr‹
 = 
SUCCESS
;

380 
BIOVEC
 
bvec
;

381 
DZ_COMPLETION
 
io_com∂ëi⁄
;

383 
ITERATOR
 
ôî
;

385 
bio
 = 
	`dz_bio_Æloc
(
∑ª¡_bio
->
bi_v˙t
);

386 i‡(!
bio
) {

387 
	`LOGE
("UnableÅo get free bio\n");

388 
îr‹
 = 
IO_ERROR_ENOMEM
;

389 
exô_d⁄e
;

392 
io_com∂ëi⁄
.
îr‹
 = 
SUCCESS
;

394 
	`DZ_BIO_SET_BDEV
(
bio
, 
DATA_DISK_DEVICE
);

395 
	`DZ_BIO_SET_SECTOR
(
bio
, 
£˘‹
);

396 
bio
->
bi_íd_io
 = 
dz_ªad_biod⁄e_sync
;

397 
	`DZ_BIO_SET_ZIDX
(
bio
);

399 
	`DZ_BIO_SET_READ
(
bio
);

400 
bio
->
bi_√xt
 = 
NULL
;

401 
bio
->
bi_¥iv©e
 = (
VOID
 *)&
io_com∂ëi⁄
;

404 
	`bio_f‹_óch_£gmít
(
bvec
, 
∑ª¡_bio
, 
ôî
) {

405 i‡(!
	`bio_add_∑ge
(
bio
, 
bvec
.
bv_∑ge
, bvec.
bv_Àn
, bvec.
bv_off£t
)) {

406 
	`LOGE
("UnableÅoáddÖageÅo bio\n");

407 
îr‹
 = 
IO_ERROR_EIO
;

408 
exô_Áûuª
;

411 
	`öô_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

413 
	`DZ_OS_KERNEL_GENERIC_MAKE_REQUEST
(
bio
);

414 
	`waô_f‹_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

418 
îr‹
 = 
io_com∂ëi⁄
.error;

419 i‡(
	`u∆ikñy
(
îr‹
)){

420 
	`LOGE
("Eº‹ i¿ªadögÑaw d©a. Eº‹ Codê: %d", 
îr‹
);

421 
	`¥öt_biom
(
bio
, "bio withÉrror");

422 
exô_Áûuª
;

425 
exô_d⁄e
:

429  
îr‹
;

431 
exô_Áûuª
:

433  
îr‹
;

434 
	}
}

436 
EXPORT_SYMBOL
(
dz_Æign_ªad_sögÀ_block_‰om_øw_disk_sync
);

443 
RINT
 
	$dz_Æign_ªad_sögÀ_block_‰om_øw_disk_sync_öã∫Æ
(
PIOREQUEST
 
i‹eque°
, 
SECTOR
 
£˘‹
 )

445 
PBIO
 
bio
 = 
i‹eque°
->
i‹_bio
;

446 
INT
 
îr‹
 = 
SUCCESS
;

447 
DZ_COMPLETION
 
io_com∂ëi⁄
;

448 
BIODONE
 
‹ig_biod⁄e
 = 
bio
->
bi_íd_io
;

449 
SECTOR
 
‹ig_£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

450 
PVOID
 
‹ig_¥iv©e
 = 
bio
->
bi_¥iv©e
;

454 
	`LOGALIGN
("Inside Before: bio->bi_size = %d, bio = %p, bio_page = %p\n",

455 
	`DZ_BIO_GET_SIZE
(
bio
), bio, 
	`bio_∑ge
(bio));

457 
io_com∂ëi⁄
.
îr‹
 = 
SUCCESS
;

459 
	`DZ_BIO_SET_BDEV
(
bio
, 
DATA_DISK_DEVICE
);

460 
	`DZ_BIO_SET_SECTOR
(
bio
, 
£˘‹
);

462 
	`DZ_BIO_SET_BIODONE
(
bio
, 
dz_ªad_biod⁄e_sync
);

463 
	`DZ_BIO_SET_ZIDX
(
bio
);

465 
	`DZ_BIO_SET_READ
(
bio
);

466 
bio
->
bi_√xt
 = 
NULL
;

467 
bio
->
bi_¥iv©e
 = (
VOID
 *)&
io_com∂ëi⁄
;

470 
	`öô_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

471 
	`DZ_OS_KERNEL_GENERIC_MAKE_REQUEST
(
bio
);

472 
	`waô_f‹_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

476 
îr‹
 = 
io_com∂ëi⁄
.error;

477 i‡(
	`u∆ikñy
(
îr‹
)){

478 
	`LOGE
("Eº‹ i¿ªadögÑaw d©a. Eº‹ Codê: %d", 
îr‹
);

479 
	`¥öt_biom
(
bio
, "bio withÉrror");

480 
exô_d⁄e
;

483 
exô_d⁄e
:

484 
bio
->
bi_¥iv©e
 = 
‹ig_¥iv©e
;

485 
bio
->
bi_íd_io
 = 
‹ig_biod⁄e
;

486 
	`DZ_BIO_SET_SECTOR
(
bio
, 
‹ig_£˘‹
);

490 
	`LOGALIGN
("InsidêA·î: bio->bi_sizê%d, biÿ%p, bio->bi_˙à%d\n", 
	`DZ_BIO_GET_SIZE
(
bio
), bio, 
	`DZ_BIO_GET_PIN_COUNT
(bio));

491  
îr‹
;

492 
	}
}

493 
EXPORT_SYMBOL
(
dz_Æign_ªad_sögÀ_block_‰om_øw_disk_sync_öã∫Æ
);

496 
RVOID
 
	$dz_Æign_becd
(
PIOREQUEST
 
pi‹eque°
)

498 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

499 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

500 
INT
 
îr‹
 = 0;

501 i‡(
pi‹eque°
->
i‹_∑ª¡
) {

502 
	`INC_COUNTER
(
Æign_iocou¡_disk_ªad_öã∫Æ
);

503 
îr‹
 = 
	`dz_Æign_ªad_sögÀ_block_‰om_øw_disk_sync_öã∫Æ
(
pi‹eque°
, 
£˘‹
 );

504 
	`READ_IO_DONE_STATUS
(
pi‹eque°
, 
îr‹
);

505 
	`i‹eque°_put
(
pi‹eque°
);

507 
	`INC_COUNTER
(
Æign_iocou¡_disk_ªad
);

508 
îr‹
 = 
	`dz_Æign_ªad_sögÀ_block_‰om_øw_disk_sync
(
pi‹eque°
, 
£˘‹
 );

509 
	`READ_IO_DONE_STATUS
(
pi‹eque°
, 
îr‹
);

510 
	`i‹eque°_put
(
pi‹eque°
);

512 
	}
}

515 
RVOID
 
	$dz_Æign_„cd_™d_be˚
(
PIOREQUEST
 
pi‹eque°
)

517 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

518 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

519 
BOOL
 
°©us
 = 
FALSE
;

520 
PPAGE
 
ˇche_∑ge
 = 
NULL
;

521 
INT
 
îr‹
 = 0;

523 
°©us
 = 
	`dz_bec_pba_∑ge_lookup
(
£˘‹
, 
bio
);

524 i‡(
°©us
 =
FALSE
) {

525 
ˇche_∑ge
 = 
	`dz_bec_∑ge_Æloc
();

529 
	`DZ_OS_KERNEL_BIO_GET
(
bio
);

530 i‡(
pi‹eque°
->
i‹_∑ª¡
) {

531 
	`INC_COUNTER
(
Æign_iocou¡_disk_ªad_öã∫Æ
);

532 
	`LOGALIGN
("AVERMA:Before:bi_vcnt = %d ,Érror = %d, ior_type = %d, bi_size = %d, bio = %p, ior_bio = %p, ior = %p\n",

533 
bio
->
bi_v˙t
, 
îr‹
, 
pi‹eque°
->
i‹_ty≥
, 
	`DZ_BIO_GET_SIZE
(bio), bio,Öi‹eque°->
i‹_bio
,Öiorequest);

534 
îr‹
 = 
	`dz_Æign_ªad_sögÀ_block_‰om_øw_disk_sync_öã∫Æ
(
pi‹eque°
, 
£˘‹
 );

535 
	`LOGALIGN
("AVERMA:After:bi_vcnt = %d ,Érror = %d, ior_type = %d, bi_size = %d, bio = %p, ior_bio = %p, ior = %p\n",

536 
bio
->
bi_v˙t
, 
îr‹
, 
pi‹eque°
->
i‹_ty≥
, 
	`DZ_BIO_GET_SIZE
(bio), bio,Öi‹eque°->
i‹_bio
,Öiorequest);

539 
	`INC_COUNTER
(
Æign_iocou¡_disk_ªad
);

540 
îr‹
 = 
	`dz_Æign_ªad_sögÀ_block_‰om_øw_disk_sync
(
pi‹eque°
, 
£˘‹
 );

541 
	`LOGALIGN
("AVERMA:Aµ:bio->bi_v˙à%d ,Éº‹ = %d, i‹_ty≥ = %d\n", 
bio
->
bi_v˙t
, 
îr‹
, 
pi‹eque°
->
i‹_ty≥
);

544 i‡(!
îr‹
) {

545 i‡(
°©us
 =
FALSE
 && 
ˇche_∑ge
) {

546 i‡(
bio
->
bi_v˙t
 == 1) {

549 
PVOID
 
d∑gebuf

NULL
;

550 
PVOID
 
•agebuf

NULL
;

551 
CHAR
 
lbuf
[32];

552 
BIOVEC
 
bvec
 = 
	`bio_iovec
((
bio
));

553 
d∑gebuf
 = 
	`km≠
((
ˇche_∑ge
));

554 
•agebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
);

555 
•agebuf
 +
bvec
.
bv_off£t
;

556 
	`PMEMCPY
(
lbuf
, 
•agebuf
, 32);

557 i‡(
bvec
.
bv_Àn
 == 0) {

558 
	`LOGALIGN
("AVERMA:hîe4:•agebu‡%p, d∑gebu‡%p, biÿ%p, i‹que° = %p, bv_∑gê=%p\n", 
•agebuf
, 
d∑gebuf
, 
bio
, 
pi‹eque°
, 
bvec
.
bv_∑ge
);

559 
	`LOGALIGN
("AVERMA:hîe41:bvec.bvec_À¿%d, bvec.bv_off£à%d \n", 
bvec
.
bv_Àn
, bvec.
bv_off£t
);

560 
SL1
;

563 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
bvec
.
bv_Àn
);

565 
	`kunm≠
(
bvec
.
bv_∑ge
);

566 
	`kunm≠
(
ˇche_∑ge
);

570 
	`COPY_PAGE_FROM_BIO
(
ˇche_∑ge
, 
bio
);

576 
	`READ_IO_DONE_STATUS
(
pi‹eque°
, 
îr‹
);

579 i‡(
ˇche_∑ge
) {

580 
pi‹eque°
->
i‹_ˇche_∑ge
 = 
ˇche_∑ge
;

582 
	`dz_bec_∑ge_‰ì
(
ˇche_∑ge
);

584 
	`i‹eque°_put
(
pi‹eque°
);

586 
	`i‹eque°_put
(
pi‹eque°
);

588 
	}
}

595 
RVOID
 
	$dz_Æign_ªad_f‹_sögÀ_block
(
PIOREQUEST
 
pi‹eque°
)

597 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

598 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

601 i‡(((
£˘‹
 * 
SECTOR_SIZE
Ë% 
LBA_BLOCK_SIZE
) == 0 ) {

603 
	`LOGD
("Case1: Aligned Single Page\n");

604 
	`INC_COUNTER
(
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
);

607 i‡(
dz_swôch_dedu≥_ígöe
 =
DZ_ENABLED
) {

608 
pi‹eque°
->
i‹_thªad_poﬁ
 = 
dedu≥_thªad_poﬁ
;

609 
	`dz_q_i‹eque°
(
dedu≥_thªad_poﬁ
, 
pi‹eque°
);

613 i‡(
dz_swôch_bec_ígöe
 =
DZ_ENABLED
 && 
dz_swôch_„c_ígöe
 =
DZ_DISABLED
) {

614 
	`dz_Æign_„cd_™d_be˚
(
pi‹eque°
);

617 
	`dz_Æign_becd
(
pi‹eque°
);

628 
	`LOGFEC
("Case2: UnAligned Single Page\n");

629 
	`INC_COUNTER
(
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
);

630 
	`dz_Æign_ªad_doubÀ_∑ge_async
(
pi‹eque°
,

631 
dz_Æign_ªad_f‹_sögÀ_block_biod⁄e_hód
,

632 
dz_Æign_ªad_f‹_sögÀ_block_biod⁄e_èû
);

635 
	}
}

	@alignment_engine/alignment_engine_sysfs_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

17 
USHORT
 
num_Æign_ªad_thªads
;

18 
USHORT
 
num_Æign_wrôe_thªads
;

20 
INT
 
dz_swôch_„c_ígöe
;

21 
INT
 
dz_swôch_bec_ígöe
;

22 
INT
 
dz_swôch_dedu≥_ígöe
;

23 
INT
 
dz_swôch_Æignmít_ígöe
;

24 
INT
 
dz_swôch_Æignmít_ígöe_mu…i_block_ªad
;

25 
INT
 
dz_swôch_Æignmít_ígöe_mu…i_block_wrôe
;

26 
INT
 
dz_swôch_Æignmít_ígöe_∑πül_block_ªad
;

27 
INT
 
dz_swôch_Æignmít_ígöe_∑πül_block_wrôe
;

32 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

33 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

38 
SIZE
 
TARGET_DEVICE_SIZE
;

40 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

41 
NAME
 
DATA_DISK_DEVICE_NAME
;

42 
OBJECT_LIST
 
globÆ_obje˘_li°
;

43 
U64
 
lba_èbÀ_size
;

44 
U64
 
pba_èbÀ_size
;

45 
U64
 
hash_èbÀ_size
;

46 
U32
 
numbî_of_l⁄gs_f‹_pba
;

47 
U32
 
numbî_of_l⁄gs_f‹_lba
;

48 
U32
 
numbî_of_l⁄gs_f‹_gpba
;

49 
ULONG
 
mëad©a_Êush_öãrvÆ
;

50 
U64
 
mëad©a_lba_èbÀ_size
;

51 
U64
 
mëad©a_lba_lock_èbÀ_size
;

52 
U64
 
avm_sysfs_íåy_‰ì_∑ge_cou¡
;

53 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes
[
DZ_SYSFS_PAGE_SIZE
];

54 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
[
DZ_SYSFS_PAGE_SIZE
];

55 
PPBA_BLOCK
 
pba_èbÀ
;

56 
PHASH_BLOCK
 
hash_èbÀ
;

57 
PLBA_BLOCK
 
lba_èbÀ
;

59 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

60 
ATOMIC64
 
bec_ˇche_hô
;

61 
ATOMIC64
 
bec_ˇche_miss
;

62 
ATOMIC64
 
bec_ˇche_dñëe
;

63 
ULONG
 
bec_size
;

64 
INT
 
bec_cutoff_nodes
;

65 
INT
 
bec_cutoff_≥r˚¡
;

66 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

67 
U64
 
time_Êush_¥ï¨e_°¨t
;

68 
U64
 
time_Êush_°¨t
;

69 
U64
 
time_Êush_íd
;

70 
U64
 
time_„c_wrôe_°¨t
;

71 
U64
 
time_„c_wrôe_swôch
;

72 
PFEC_TABLE
 
„c_èbÀs_Êush
;

73 
ATOMIC64
 
„c_a˘ive_cou¡_£quí˚
;

74 
ATOMIC64
 
„c_‰ì_cou¡_£quí˚
;

75 
ATOMIC64
 
„c_cur_Êush_cou¡
;

76 
ATOMIC64
 
„c_Êush_›s_cou¡
;

77 
ATOMIC64
 
„c_cur_Êush_›s_cou¡
;

78 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

79 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

80 
U64
 
„c_a˘ive_cou¡
;

81 
ATOMIC64
 
dedu≥_disk_ªads
;

82 
ATOMIC64
 
dedu≥_disk_wrôes
;

83 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

84 
ATOMIC64
 
dedu≥_ˇche_hôs
;

85 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

86 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

87 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

88 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

89 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

90 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

91 
USHORT
 
dedu≥_num_thªads
;

92 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

93 
PDZ_THREAD_POOL
 
rdedu≥_thªad_poﬁ
;

94 
PDZ_THREAD_POOL
 
wdedu≥_thªad_poﬁ
;

95 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

96 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

97 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

98 
PDZ_THREAD_POOL
 
Æign_wrôe_thªad_poﬁ
;

99 
PDZ_THREAD_POOL
 
Êush_thªad_poﬁ
;

100 
PDZ_THREAD_POOL
 
mëad©a_Êush_thªad_poﬁ
;

101 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡
;

102 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads
;

103 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
;

104 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
;

105 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
;

106 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

107 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

108 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

109 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

110 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

111 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

112 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

114 
ATOMIC64
 
Æign_iocou¡_disk_ªad
;

115 
ATOMIC64
 
Æign_iocou¡_disk_ªad_öã∫Æ
;

116 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

117 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

118 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

119 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

120 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

121 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

122 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

124 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes
;

125 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
;

126 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
;

127 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
;

128 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

129 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

130 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

131 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

132 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

133 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

134 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

136 
ATOMIC64
 
Æign_iocou¡_disk_wrôe
;

137 
ATOMIC64
 
Æign_iocou¡_disk_wrôe_öã∫Æ
;

138 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

139 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

140 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

141 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

142 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

143 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

144 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

146 
PSUPERBLOCK
 
su≥rblock
;

148 
CHAR
 
avm_sysfs_íåy_gë_Æign_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
];

149 
INT
 
	$avm_gë_Æign_cou¡îs
(
CHAR
 *
buf
)

151 
INT
 
cou¡
 = 0;

152 
UINT
 
Ωídög_i‹eque°s
;

153 
UINT
 
Ωídög_thªads
;

154 
UINT
 
Ωídög_jobs
;

156 
UINT
 
w≥ndög_i‹eque°s
;

157 
UINT
 
w≥ndög_thªads
;

158 
UINT
 
w≥ndög_jobs
;

160 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_Æign_cou¡îs
;

161 
	`mem£t
(
avm_sysfs_íåy_gë_Æign_cou¡îs
, 0, 
DZ_SYSFS_PAGE_SIZE
);

162 
	`mem˝y
(
±r
, "\n", 1);

163 
±r
 += 1;

164 
±r
 +
	`•rötf
(ptr, "==============================================\n");

165 
±r
 +
	`•rötf
(ptr, "ALIGNMENT ENGINE COUNTERS\n");

166 
±r
 +
	`•rötf
(ptr, "==============================================\n");

167 i‡(!
su≥rblock
) {

168 
±r
 +
	`•rötf
(ptr, "Superblock is NULL");

172 i‡(
dz_swôch_Æignmít_ígöe
 =
DZ_DISABLED
) {

173 
±r
 +
	`•rötf
(ptr, "ALIGNMENT ENGINE DISABLED");

177 
Ωídög_i‹eque°s
 = 
	`©omic_ªad
(&
Æign_ªad_thªad_poﬁ
->
ioq_num_ios
);

178 
Ωídög_thªads
 = 
	`©omic_ªad
(&
Æign_ªad_thªad_poﬁ
->
num_a˘ive_thªads
);

179 
Ωídög_jobs
 = 
	`©omic_ªad
(&
Æign_ªad_thªad_poﬁ
->
num_jobs
);

181 
w≥ndög_i‹eque°s
 = 
	`©omic_ªad
(&
Æign_wrôe_thªad_poﬁ
->
ioq_num_ios
);

182 
w≥ndög_thªads
 = 
	`©omic_ªad
(&
Æign_wrôe_thªad_poﬁ
->
num_a˘ive_thªads
);

183 
w≥ndög_jobs
 = 
	`©omic_ªad
(&
Æign_wrôe_thªad_poﬁ
->
num_jobs
);

186 
cou¡
 = 
	`•rötf
(
±r
,

232 
Æign_ªad_thªad_poﬁ
->
«me
,

233 
Æign_ªad_thªad_poﬁ
->
num_thªads
,

234 
Ωídög_i‹eque°s
,

235 
Ωídög_thªads
,

236 
Ωídög_jobs
,

237 
Æign_ªad_thªad_poﬁ
->
quõs˚
,

238 
Æign_ªad_thªad_poﬁ
->
ioq_›í
,

240 
wrôe_thªad_poﬁ
->
«me
,

241 
wrôe_thªad_poﬁ
->
num_thªads
,

242 
w≥ndög_i‹eque°s
,

243 
w≥ndög_thªads
,

244 
w≥ndög_jobs
,

245 
Æign_wrôe_thªad_poﬁ
->
quõs˚
,

246 
Æign_wrôe_thªad_poﬁ
->
ioq_›í
,

248 (
U64
)
	`GET_CURRENT_TIME
(),

249 (
U64
)(
	`GET_TIME_DIFF_IN_SECONDS
(
time_Êush_°¨t
, 
	`GET_CURRENT_TIME
())/1000),

250 (
U64
)((
	`GET_TIME_DIFF_IN_SECONDS
(
time_Êush_°¨t
, 
time_Êush_íd
))/1000),

251 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡
),

252 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads
),

253 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
),

254 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
),

255 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
),

256 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes
),

257 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
),

258 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
),

259 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
),

260 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_ªads_∑πül_∑ge
),

261 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_ªads_sögÀ_∑ge
),

262 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
),

263 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
),

264 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_ªads_mu…i_∑ge
),

265 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
),

266 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
),

267 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_disk_ªad
),

268 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_disk_ªad_öã∫Æ
),

269 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_wrôes_∑πül_∑ge
),

270 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_wrôes_sögÀ_∑ge
),

271 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
),

272 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
),

273 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_wrôes_mu…i_∑ge
),

274 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
),

275 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
),

276 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_disk_wrôe
),

277 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_disk_wrôe_öã∫Æ
)

287 
	`LOGD
("Buf„∏Byã†u£d = %d\n", 
cou¡
);

291 
	}
}

293 
U64
 
avm_sysfs_íåy_gë_£t_swôch_d´
;

294 
INT
 
	$avm_gë_swôch_d´
(
CHAR
 *
buf
)

296 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_d´
, 
dz_swôch_Æignmít_ígöe
);

297 
	}
}

299 
INT
 
	$avm_£t_swôch_d´
(
U64
 
buf
)

301 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_Æignmít_ígöe
, 
buf
);

302 
	}
}

304 
U64
 
avm_sysfs_íåy_gë_£t_swôch_d´_mbr
;

305 
INT
 
	$avm_gë_swôch_d´_mbr
(
CHAR
 *
buf
)

307 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_d´_mbr
, 
dz_swôch_Æignmít_ígöe_mu…i_block_ªad
);

308 
	}
}

310 
INT
 
	$avm_£t_swôch_d´_mbr
(
U64
 
buf
)

312 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_Æignmít_ígöe_mu…i_block_ªad
, 
buf
);

313 
	}
}

315 
U64
 
avm_sysfs_íåy_gë_£t_swôch_d´_mbw
;

316 
INT
 
	$avm_gë_swôch_d´_mbw
(
CHAR
 *
buf
)

318 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_d´_mbw
, 
dz_swôch_Æignmít_ígöe_mu…i_block_wrôe
);

319 
	}
}

321 
INT
 
	$avm_£t_swôch_d´_mbw
(
U64
 
buf
)

323 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_Æignmít_ígöe_mu…i_block_wrôe
, 
buf
);

324 
	}
}

326 
U64
 
avm_sysfs_íåy_gë_£t_swôch_d´_pbr
;

327 
INT
 
	$avm_gë_swôch_d´_pbr
(
CHAR
 *
buf
)

329 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_d´_pbr
, 
dz_swôch_Æignmít_ígöe_∑πül_block_ªad
);

330 
	}
}

332 
INT
 
	$avm_£t_swôch_d´_pbr
(
U64
 
buf
)

334 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_Æignmít_ígöe_∑πül_block_ªad
, 
buf
);

335 
	}
}

337 
U64
 
avm_sysfs_íåy_gë_£t_swôch_d´_pbw
;

338 
INT
 
	$avm_gë_swôch_d´_pbw
(
CHAR
 *
buf
)

340 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_d´_pbw
, 
dz_swôch_Æignmít_ígöe_∑πül_block_wrôe
);

341 
	}
}

343 
INT
 
	$avm_£t_swôch_d´_pbw
(
U64
 
buf
)

345 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_Æignmít_ígöe_∑πül_block_wrôe
, 
buf
);

346 
	}
}

348 
U64
 
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads
;

349 
INT
 
	$avm_gë_tu«bÀ_d´_ªad_thªads
(
CHAR
 *
buf
)

351 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads
, 
num_Æign_ªad_thªads
);

353 
	}
}

355 
INT
 
	$avm_£t_tu«bÀ_d´_ªad_thªads
(
U64
 
buf
)

357 
	`DZ_SYS_SET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads
, 
buf
);

358 
	}
}

360 
U64
 
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads
;

361 
INT
 
	$avm_gë_tu«bÀ_d´_wrôe_thªads
(
CHAR
 *
buf
)

363 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads
, 
num_Æign_wrôe_thªads
);

365 
	}
}

367 
INT
 
	$avm_£t_tu«bÀ_d´_wrôe_thªads
(
U64
 
buf
)

369 
	`DZ_SYS_SET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads
, 
buf
);

370 
	}
}

	@alignment_engine/alignment_engine_thread_pool.c

9 
	~"¥ŸŸy≥s.h
"

11 
PCHAR
 
ALIGN_WRITE_THREAD_POOL_NAME
;

12 
PCHAR
 
ALIGN_WRITE_THREAD_POOL_SHORT_NAME
;

14 
PCHAR
 
ALIGN_READ_THREAD_POOL_NAME
;

15 
PCHAR
 
ALIGN_READ_THREAD_POOL_SHORT_NAME
;

17 
USHORT
 
num_Æign_ªad_thªads
;

18 
USHORT
 
num_Æign_wrôe_thªads
;

20 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

21 
PDZ_THREAD_POOL
 
Æign_wrôe_thªad_poﬁ
;

23 
RINT
 
	$dz_¸óã_Æign_ªad_thªad_poﬁ
(
INT
 
num_thªads
)

25 
PDZ_THREAD_POOL
 
ç
 = 
NULL
;

26 
ç
 = 
	`dz_¸óã_thªad_poﬁ
(

27 
ALIGN_READ_THREAD_POOL_NAME
, 
ALIGN_READ_THREAD_POOL_SHORT_NAME
,

28 
num_thªads
, 
NULL
, NULL, 
dz_Æign_ªad_io
);

30 i‡(
ç
) {

31 
	`LOGALIGN
("%s created successfully for %dÅhreads \n",

32 
ALIGN_READ_THREAD_POOL_NAME
, 
num_thªads
);

33 
Æign_ªad_thªad_poﬁ
 = 
ç
;

34 
RETURNS
;

36 
	`LOGE
("%†¸óti⁄ faûed \n", 
ALIGN_READ_THREAD_POOL_NAME
);

37 
RETURNF
;

39 
	}
}

41 
RVOID
 
	$dz_de°roy_Æign_ªad_thªad_poﬁ
(
VOID
)

43 
	`dz_de°roy_thªad_poﬁ
(
Æign_ªad_thªad_poﬁ
);

44 
	}
}

46 
RINT
 
	$dz_¸óã_Æign_wrôe_thªad_poﬁ
(
INT
 
num_thªads
)

48 
PDZ_THREAD_POOL
 
ç
 = 
NULL
;

49 
ç
 = 
	`dz_¸óã_thªad_poﬁ
(

50 
ALIGN_WRITE_THREAD_POOL_NAME
, 
ALIGN_WRITE_THREAD_POOL_SHORT_NAME
,

51 
num_thªads
, 
NULL
, NULL, 
dz_Æign_wrôe_io
);

54 i‡(
ç
) {

55 
	`LOGALIGN
("%s created successfully for %dÅhreads \n",

56 
ALIGN_WRITE_THREAD_POOL_NAME
, 
num_thªads
);

57 
Æign_wrôe_thªad_poﬁ
 = 
ç
;

58 
RETURNS
;

60 
	`LOGE
("%†¸óti⁄ faûed \n", 
ALIGN_WRITE_THREAD_POOL_NAME
);

61 
RETURNF
;

63 
	}
}

65 
RVOID
 
	$dz_de°roy_Æign_wrôe_thªad_poﬁ
(
VOID
)

67 
	`dz_de°roy_thªad_poﬁ
(
Æign_wrôe_thªad_poﬁ
);

68 
	}
}

	@alignment_engine/alignment_engine_write.c

9 
	~"¥ŸŸy≥s.h
"

12 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

13 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

14 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

15 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

16 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

18 
RVOID
 
	$dz_Æign_wrôe_io
(
PIOREQUEST
 
i‹eque°
)

20 
PBIO
 
bio
 = 
i‹eque°
->
i‹_bio
;

22 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

25 i‡(
io_size
 < 
LBA_BLOCK_SIZE
) {

26 
	`LOGALIGN
("Case1: Write Processing io_size forÖartial blockátÜba %lli\n",

27 
	`dz_c⁄vît_£˘‹_to_lba
(
	`DZ_BIO_GET_SECTOR
(
bio
)));

29 
	`INC_COUNTER
(
Æign_iocou¡_wrôes_∑πül_∑ge
);

30 
	`dz_Æign_wrôe_f‹_∑πül_block
(
i‹eque°
);

33 } i‡(
io_size
 =
LBA_BLOCK_SIZE
) {

35 
	`LOGALIGN
("Case2: Write Processing io_size for single blockátÜba %lli\n",

36 
	`dz_c⁄vît_£˘‹_to_lba
(
	`DZ_BIO_GET_SECTOR
(
bio
)));

38 
	`INC_COUNTER
(
Æign_iocou¡_wrôes_sögÀ_∑ge
);

40 
	`dz_Æign_wrôe_f‹_sögÀ_block
(
i‹eque°
);

43 } i‡(
io_size
 > 
LBA_BLOCK_SIZE
) {

44 
	`LOGALIGN
("Case3: Write Processing io_size for multiple blocksátÜba %lli\n",

45 
	`dz_c⁄vît_£˘‹_to_lba
(
	`DZ_BIO_GET_SECTOR
(
bio
)));

47 
	`INC_COUNTER
(
Æign_iocou¡_wrôes_mu…i_∑ge
);

48 
	`dz_Æign_wrôe_f‹_mu…i_block
(
i‹eque°
);

53 
	`BUG_ON
(1);

56 
	}
}

	@alignment_engine/alignment_engine_write_multi.c

9 
	~"¥ŸŸy≥s.h
"

11 
U64
 
„c_èbÀ_size
;

12 
U64
 
„c_a˘ive_cou¡
;

14 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

16 
SPINLOCK
 
„c_a˘ive_lock
;

17 
SPINLOCK
 
„c_Êush_lock
;

20 
PFEC_TABLE
 
„c_èbÀs_a˘ive
;

21 
PFEC_TABLE
 
„c_èbÀs_Êush
;

22 
FEC_WRITE
 
„c_èbÀ_a˘ive
;

23 
PIOREQUEST
 
„c_Êush_i‹eque°
;

25 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

26 
PLBA_BLOCK
 
lba_èbÀ
;

27 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

28 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

29 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

30 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

31 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

33 
RVOID
 
	$dz_Áw_mu…i_block_ªad_∑ge_async_∑ª¡_biod⁄e
(
PBIO
 
bio
)

35 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

36 
PIOREQUEST
 
pi‹eque°
 = 
NULL
;

37 i‡(
ci‹eque°
->
i‹_∑ª¡
) {

38 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

39 
	`PRINT_ATOMIC
(
pi‹eque°
->
i‹_chûd_˙t
);

40 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

43 
	`LOGFEC
("Parent IO Done\n");

44 
	`IO_DONE_STATUS
(
pi‹eque°
, 
îr‹
);

45 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

46 
	`i‹eque°_put
(
ci‹eque°
);

48 
	`bio_d©a_dú
(
pi‹eque°
->
i‹_bio
Ë=
WRITE
 ?

49 
	`i‹eque°_put
(
pi‹eque°
) :

50 
	`i‹eque°_put
(
pi‹eque°
);

54 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

55 
	`i‹eque°_put
(
ci‹eque°
);

58 
	}
}

60 
RVOID
 
	$dz_Áw_mu…i_∑ge_ªad_∑ge_async_biod⁄e_hód
(
PBIO
 
bio
, 
INT
 
îr‹
)

62 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUEST)(
bio
->
bi_¥iv©e
);

63 
PFEC_WRITE
 
„cw
 = (PFEC_WRITE)(
ci‹eque°
->
i‹_¥iv©e
);

64 
PVOID
 
∑gebuf
 = 
NULL
;

65 
PBIOVEC
 
pbvec
 = 
NULL
;

66 
INT
 
ªt
 = 
SUCCESS
;

67 
INT
 
bv_off£t
 = 
ci‹eque°
->
i‹_bv_off£t
;

68 
INT
 
i
;

69 i‡(
	`u∆ikñy
(!
	`bio_Êagged
(
bio
, 
BIO_UPTODATE
Ë&& !
îr‹
)) {

70 
îr‹
 = -
EIO
;

74 
	`LOGFEC
("Inside biodone Head\n");

75 
	`PRINT_POINTER
(
„cw
);

76 
ªt
 = 
	`ã°_bô
(
BIO_UPTODATE
, &
bio
->
bi_Êags
);

79 
	`bio_f‹_óch_£gmít
(
pbvec
, 
bio
, 
i
) {

81 
∑gebuf
 = 
	`km≠
(
pbvec
->
bv_∑ge
);

88 
	`PMEMCPY
(
„cw
->
bv_∑ge
, 
∑gebuf
, 
bv_off£t
 );

89 
	`kunm≠
(
pbvec
->
bv_∑ge
);

92 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

95 
	`dz_Áw_mu…i_block_ªad_∑ge_async_∑ª¡_biod⁄e
(
bio
);

97 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
ci‹eque°
->
i‹_lba
);

99 
	}
}

101 
RVOID
 
	$dz_Áw_mu…i_∑ge_ªad_∑ge_async_biod⁄e_èû
(
PBIO
 
bio
)

103 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUEST)(
bio
->
bi_¥iv©e
);

104 
PFEC_WRITE
 
„cw
 = (PFEC_WRITE)(
ci‹eque°
->
i‹_¥iv©e
);

105 
PVOID
 
∑gebuf
 = 
NULL
;

106 
PBIOVEC
 
pbvec
 = 
NULL
;

107 
INT
 
ªt
 = 
SUCCESS
;

108 
INT
 
bv_Àn
 = 
ci‹eque°
->
i‹_bv_Àn
;

109 
INT
 
i
;

110 i‡(
	`u∆ikñy
(!
	`bio_Êagged
(
bio
, 
BIO_UPTODATE
Ë&& !
îr‹
)) {

111 
îr‹
 = -
EIO
;

114 
	`LOGFEC
("Inside biodone Tail\n");

115 
	`PRINT_POINTER
(
„cw
);

116 
ªt
 = 
	`ã°_bô
(
BIO_UPTODATE
, &
bio
->
bi_Êags
);

119 
	`bio_f‹_óch_£gmít
(
pbvec
, 
bio
, 
i
) {

120 
∑gebuf
 = 
	`km≠
(
pbvec
->
bv_∑ge
);

121 
∑gebuf
 +
bv_Àn
;

122 
	`PMEMCPY
((
„cw
->
bv_∑ge
 + 
bv_Àn
), 
∑gebuf
, 
PAGE_SIZE
 - bv_len);

124 
	`kunm≠
(
pbvec
->
bv_∑ge
);

127 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

130 
	`dz_Áw_mu…i_block_ªad_∑ge_async_∑ª¡_biod⁄e
(
bio
);

132 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
ci‹eque°
->
i‹_lba
);

135 
	}
}

137 
PIOREQUEST
 
	$dz_Áw_mu…i_block_ªad_∑ge_async
(
PIOREQUEST
 
pi‹eque°
, 
PBIO
 
∑ª¡_bio
,

138 
SECTOR
 
£˘‹
, 
PBIOVEC
 
biovec
, 
BIODONE
 
biod⁄e
)

140 
PPAGE
 
∑ge
 = 
NULL
;

141 
PBIO
 
bio
 = 
NULL
;

142 
PVOID
 
∑gebuf
 = 
NULL
;

143 
PIOREQUEST
 
i‹eque°
 = 
NULL
;

145 
i‹eque°
 = 
	`dz_io_Æloc
();

146 i‡(!
i‹eque°
) {

147 
	`LOGFECE
("UnableÅoállocate memory for iorequest\n");

148 
RETURNN
;

150 
	`mem£t
(
i‹eque°
, 0, (
IOREQUEST
));

152 
∑ge
 = 
	`dz_ªad_∑ge_Æloc
();

153 i‡(!
∑ge
) {

154 
	`LOGFECE
("UnableÅo get freeÑeadÖage\n");

155 
	`dz_io_‰ì
(
i‹eque°
);

156 
RETURNN
;

159 
bio
 = 
	`dz_bio_Æloc
(1);

160 i‡(!
bio
) {

161 
	`LOGFECE
("UnableÅo get free bio\n");

162 
	`dz_io_‰ì
(
i‹eque°
);

163 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

164 
RETURNN
;

167 
∑gebuf
 = 
	`km≠
(
∑ge
);

168 
	`mem£t
(
∑gebuf
, 0, 
PAGE_SIZE
);

169 
	`kunm≠
(
∑ge
);

171 
biovec
->
bv_∑ge
 = 
∑ge
;

172 
biovec
->
bv_off£t
 = 0;

173 
biovec
->
bv_Àn
 = 
PAGE_SIZE
;

175 
bio
->
bi_bdev
 = 
∑ª¡_bio
->bi_bdev;

176 
	`DZ_BIO_SET_SECTOR
(
bio
, 
£˘‹
);

177 
bio
->
bi_íd_io
 = 
biod⁄e
;

178 
	`DZ_BIO_SET_ZIDX
(
bio
);

180 
	`DZ_BIO_SET_READ
(
bio
);

181 
bio
->
bi_√xt
 = 
NULL
;

182 
bio
->
bi_¥iv©e
 = 
i‹eque°
;

183 
bio
->
bi_Êags
 = 1 << 
BIO_UPTODATE
;

186 i‡(!
	`bio_add_∑ge
(
bio
, 
∑ge
, 
biovec
->
bv_Àn
, biovec->
bv_off£t
)) {

187 
	`LOGFECE
("UnableÅoáddÖageÅo bio\n");

188 
	`dz_io_‰ì
(
i‹eque°
);

189 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

190 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

191 
RETURNN
;

193 
i‹eque°
->
i‹_bio
 = 
bio
;

194 
i‹eque°
->
i‹_thªad_poﬁ
 = 
Æign_ªad_thªad_poﬁ
;

195 
i‹eque°
->
i‹_∑ª¡
 = 
pi‹eque°
;

196 
	`©omic_öc
(&
pi‹eque°
->
i‹_chûd_˙t
);

198  
i‹eque°
;

199 
	}
}

204 
RVOID
 
	$dz_Áw_mu…i_block_Æl_Æig√d
(
PIOREQUEST
 
pi‹eque°
)

206 
PFEC_WRITE
 
„cw
 = 
NULL
;

207 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

209 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

210 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

211 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

212 
PVOID
 
p„cw∑ge
 = 
NULL
;

213 
PBIOVEC
 
cur_bvec
 = 
NULL
;

214 
INT
 
bi_v˙t
 = 0;

215 
INT
 
bi_v˙t_max
 = 0;

216 
INT
 
bv_Àn
 = 0;

217 
INT
 
ªmaöög_bv_Àn
 = 0;

218 
UINT
 
£˘‹_pos_ö_lba
 = 0;

219 
PVOID
 
∑gebuf
 = 
NULL
;

220 
SIZE
 
£˘‹_byãs
 = 0;

221 
U64
 
tŸ_byãs
 = 0;

222 
INT
 
d©a_byãs
 = 0;

223 
INT
 
Æig√d_byãs
 = 0;

224 
INT
 
tŸÆ_blocks_√eded
 = 0;

225 
INT
 
cou¡
 = 0;

226 
LIST_HEAD
 
‰ì_li°_hód
;

230 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

231 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

232 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

233 
Æig√d_byãs
 = 
io_size
 ;

236 
tŸÆ_blocks_√eded
 = (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

237 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

241 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

243 
	`li°_add_èû
(&(
„cw
->
ioq
), &
‰ì_li°_hód
);

244 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_IN_PROGRESS
);

245 
„cw
++;

255 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

257 
Æig√d_byãs
) {

259 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

260 
	`li°_dñ
(&
„cw
->
ioq
);

263 
„cw
->
lba
 =Üba;

264 
d©a_byãs
 = 
PAGE_SIZE
;

265 
p„cw∑ge
 = 
„cw
->
bv_∑ge
;

267 i‡(
ªmaöög_bv_Àn
) {

268 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

269 
∑gebuf
 +
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
);

270 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
ªmaöög_bv_Àn
);

271 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

272 
p„cw∑ge
 +
ªmaöög_bv_Àn
;

273 
d©a_byãs
 -
ªmaöög_bv_Àn
;

274 
bi_v˙t
++;

275 
ªmaöög_bv_Àn
 = 0;

278 
bi_v˙t
 < 
bi_v˙t_max
) {

279 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

280 
bv_Àn
 = 
cur_bvec
->bv_len;

282 i‡(
bv_Àn
 >
d©a_byãs
) {

283 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

284 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

286 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

287 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

289 i‡(
bv_Àn
 =
d©a_byãs
) {

290 
bi_v˙t
++;

292 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

294 
Æig√d_byãs
 -
PAGE_SIZE
;

296 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

297 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
lba
);

301 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

302 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

304 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

305 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

307 
d©a_byãs
 -
bv_Àn
;

308 
bi_v˙t
++;

309 
p„cw∑ge
 +
bv_Àn
;

313 
lba
++;

316 
	`WRITE_IO_DONE
(
pi‹eque°
);

317 
	`i‹eque°_put
(
pi‹eque°
);

319 i‡(
pi‹eque°
->
i‹_∑ª¡
) {

320 
	`BUG_ON
(1);

324 
	}
}

331 
RVOID
 
	$dz_Áw_mu…i_block_èû_u«lig√d
(
PIOREQUEST
 
pi‹eque°
)

333 
PFEC_WRITE
 
„cw
 = 
NULL
;

334 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

336 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

337 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

338 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

339 
PVOID
 
p„cw∑ge
 = 
NULL
;

340 
PBIOVEC
 
cur_bvec
 = 
NULL
;

341 
INT
 
bi_v˙t
 = 0;

342 
INT
 
bi_v˙t_max
 = 0;

343 
INT
 
bv_Àn
 = 0;

344 
INT
 
ªmaöög_bv_Àn
 = 0;

345 
UINT
 
£˘‹_pos_ö_lba
 = 0;

346 
PVOID
 
∑gebuf
 = 
NULL
;

347 
SIZE
 
£˘‹_byãs
 = 0;

348 
U64
 
tŸ_byãs
 = 0;

349 
INT
 
d©a_byãs
 = 0;

350 
INT
 
Æig√d_byãs
 = 0;

351 
INT
 
∑πül_byãs_èû
 = 0;

352 
PIOREQUEST
 
i‹eque°_èû
 = 
NULL
;

353 
BIOVEC
 
biovec2
;

354 
INT
 
tŸÆ_blocks_√eded
 = 0;

355 
INT
 
cou¡
 = 0;

356 
LIST_HEAD
 
‰ì_li°_hód
 ;

360 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

361 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

362 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

363 
∑πül_byãs_èû
 = 
tŸ_byãs
 % 
LBA_BLOCK_SIZE
;

364 
Æig√d_byãs
 = 
io_size
 - 
∑πül_byãs_èû
 ;

367 
tŸÆ_blocks_√eded
 = 1 + (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

369 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

376 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

377 
	`PRINT_POINTER
(
„cw
);

378 
	`li°_add_èû
(&(
„cw
->
ioq
), &
‰ì_li°_hód
);

379 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_IN_PROGRESS
);

380 
„cw
++;

383 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

389 
i‹eque°_èû
 = 
	`dz_Áw_mu…i_block_ªad_∑ge_async
(
pi‹eque°
, 
bio
, 
£˘‹
, &
biovec2
,

390 
dz_Áw_mu…i_∑ge_ªad_∑ge_async_biod⁄e_èû
);

391 i‡(!
i‹eque°_èû
) {

392 
exô_Áûuª
;

399 
	`¥öt_bio
(
bio
);

401 
	`LOGFEC
("Printing Head AlignedÖart\n");

408 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

409 
Æig√d_byãs
) {

411 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

412 
	`li°_dñ
(&
„cw
->
ioq
);

413 
	`PRINT_POINTER
(
„cw
);

415 
„cw
->
lba
 =Üba;

418 
d©a_byãs
 = 
PAGE_SIZE
;

419 
p„cw∑ge
 = 
„cw
->
bv_∑ge
;

421 i‡(
ªmaöög_bv_Àn
) {

422 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

423 
∑gebuf
 +
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
);

424 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
ªmaöög_bv_Àn
);

425 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

426 
p„cw∑ge
 +
ªmaöög_bv_Àn
;

427 
d©a_byãs
 -
ªmaöög_bv_Àn
;

428 
bi_v˙t
++;

429 
ªmaöög_bv_Àn
 = 0;

433 
bi_v˙t
 < 
bi_v˙t_max
) {

434 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

435 
bv_Àn
 = 
cur_bvec
->bv_len;

437 i‡(
bv_Àn
 >
d©a_byãs
) {

438 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

439 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

441 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

442 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

444 i‡(
bv_Àn
 =
d©a_byãs
) {

445 
bi_v˙t
++;

447 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

449 
Æig√d_byãs
 -
PAGE_SIZE
;

450 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

451 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
lba
);

454 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

455 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

457 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

458 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

460 
d©a_byãs
 -
bv_Àn
;

461 
bi_v˙t
++;

462 
p„cw∑ge
 +
bv_Àn
;

466 
£˘‹
 +
SECTORS_PER_PAGE
;

467 
lba
++;

473 
	`LOGFEC
("Printing TailÖart\n");

476 i‡(!(
	`li°_em±y
(&
‰ì_li°_hód
))) {

477 
	`BUG_ON
(1);

479 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

480 
	`li°_dñ
(&
„cw
->
ioq
);

481 
	`PRINT_POINTER
(
„cw
);

483 
i‹eque°_èû
->
i‹_lba
 = 
lba
;

484 
i‹eque°_èû
->
i‹_¥iv©e
 = 
„cw
;

485 
i‹eque°_èû
->
i‹_bv_off£t
 = 0;

486 
i‹eque°_èû
->
i‹_bv_Àn
 = 
∑πül_byãs_èû
;

487 
„cw
->
lba
 =Üba;

490 
d©a_byãs
 = 
∑πül_byãs_èû
;

491 
p„cw∑ge
 = 
„cw
->
bv_∑ge
;

494 i‡(
ªmaöög_bv_Àn
) {

495 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

496 
∑gebuf
 +
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
);

497 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
ªmaöög_bv_Àn
);

498 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

499 
p„cw∑ge
 +
ªmaöög_bv_Àn
;

500 
d©a_byãs
 -
ªmaöög_bv_Àn
;

501 
bi_v˙t
++;

502 
ªmaöög_bv_Àn
 = 0;

506 
bi_v˙t
 < 
bi_v˙t_max
) {

507 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

508 
bv_Àn
 = 
cur_bvec
->bv_len;

510 i‡(
bv_Àn
 >
d©a_byãs
) {

511 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

512 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

514 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

515 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

517 i‡(
bv_Àn
 =
d©a_byãs
) {

518 
bi_v˙t
++;

520 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

525 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

526 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

528 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

529 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

531 
d©a_byãs
 -
bv_Àn
;

532 
bi_v˙t
++;

533 
p„cw∑ge
 +
bv_Àn
;

539 
	`dz_q_i‹eque°_thªad_poﬁ
(
i‹eque°_èû
);

542 
exô_Áûuª
:

543 
	`DELAY_MICRO_SECONDS
(1);

544 
	`IO_DONE_BUSY
(
pi‹eque°
);

545 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

547 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

548 i‡(!
„cw
) ;

549 
	`li°_dñ
(&
„cw
->
ioq
);

550 
	`FEC_ENTRY_WRITE_LOCK
(
„cw
);

551 
„cw
->
°©e
 = 
FECBUF_STATE_IDLE
;

552 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

554 
	}
}

561 
RVOID
 
	$dz_Áw_mu…i_block_hód_u«lig√d
(
PIOREQUEST
 
pi‹eque°
)

563 
PFEC_WRITE
 
„cw
 = 
NULL
;

564 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

566 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

567 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

568 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

569 
PVOID
 
p„cw∑ge
 = 
NULL
;

570 
PBIOVEC
 
cur_bvec
 = 
NULL
;

571 
INT
 
bi_v˙t
 = 0;

572 
INT
 
bi_v˙t_max
 = 0;

573 
INT
 
bv_Àn
 = 0;

574 
INT
 
ªmaöög_bv_Àn
 = 0;

575 
UINT
 
£˘‹_pos_ö_lba
 = 0;

576 
PVOID
 
∑gebuf
 = 
NULL
;

577 
SIZE
 
£˘‹_byãs
 = 0;

578 
U64
 
tŸ_byãs
 = 0;

579 
INT
 
d©a_byãs
 = 0;

580 
INT
 
Æig√d_byãs
 = 0;

581 
INT
 
∑πül_byãs_hód
 = 0;

582 
PIOREQUEST
 
i‹eque°_hód
 = 
NULL
;

583 
BIOVEC
 
biovec
;

584 
INT
 
tŸÆ_blocks_√eded
 = 0;

585 
INT
 
cou¡
 = 0;

586 
LIST_HEAD
 
‰ì_li°_hód
 ;

590 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

591 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

592 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

593 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

594 
Æig√d_byãs
 = 
io_size
 - 
∑πül_byãs_hód
 ;

597 
tŸÆ_blocks_√eded
 = 1 + (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

599 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

606 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

607 
	`PRINT_POINTER
(
„cw
);

608 
	`li°_add_èû
(&(
„cw
->
ioq
), &
‰ì_li°_hód
);

609 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_IN_PROGRESS
);

610 
„cw
++;

613 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

617 
i‹eque°_hód
 = 
	`dz_Áw_mu…i_block_ªad_∑ge_async
(
pi‹eque°
, 
bio
, 
£˘‹
, &
biovec
,

618 
dz_Áw_mu…i_∑ge_ªad_∑ge_async_biod⁄e_hód
);

619 i‡(!
i‹eque°_hód
) {

620 
exô_Áûuª
;

627 
	`¥öt_bio
(
bio
);

630 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

631 
	`li°_dñ
(&
„cw
->
ioq
);

632 
	`PRINT_POINTER
(
„cw
);

634 
„cw
->
lba
 =Üba;

635 
i‹eque°_hód
->
i‹_¥iv©e
 = 
„cw
;

636 
i‹eque°_hód
->
i‹_lba
 = 
lba
;

637 
i‹eque°_hód
->
i‹_bv_off£t
 = 
£˘‹_pos_ö_lba
;

642 
p„cw∑ge
 = 
„cw
->
bv_∑ge
 + 
£˘‹_pos_ö_lba
;

643 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

644 
d©a_byãs
 = 
∑πül_byãs_hód
;

645 
	`LOGFEC
("Printing HeadÖart\n");

650 
bi_v˙t
 < 
bi_v˙t_max
) {

651 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

652 
bv_Àn
 = 
cur_bvec
->bv_len;

654 i‡(
bv_Àn
 >
d©a_byãs
) {

655 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

656 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

658 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

659 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

661 i‡(
bv_Àn
 =
d©a_byãs
) {

662 
bi_v˙t
++;

664 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

669 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

670 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

672 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

673 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

675 
d©a_byãs
 -
bv_Àn
;

676 
bi_v˙t
++;

677 
p„cw∑ge
 +
bv_Àn
;

682 
£˘‹
 +(
∑πül_byãs_hód
 / 
SECTOR_SIZE
);

683 
lba
++;

686 
	`LOGFEC
("Printing Tail AlignedÖart\n");

694 
Æig√d_byãs
) {

696 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

697 
	`li°_dñ
(&
„cw
->
ioq
);

698 
	`PRINT_POINTER
(
„cw
);

700 
„cw
->
lba
 =Üba;

703 
d©a_byãs
 = 
PAGE_SIZE
;

704 
p„cw∑ge
 = 
„cw
->
bv_∑ge
;

706 i‡(
ªmaöög_bv_Àn
) {

707 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

708 
∑gebuf
 +
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
);

709 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
ªmaöög_bv_Àn
);

710 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

711 
p„cw∑ge
 +
ªmaöög_bv_Àn
;

712 
d©a_byãs
 -
ªmaöög_bv_Àn
;

713 
bi_v˙t
++;

714 
ªmaöög_bv_Àn
 = 0;

718 
bi_v˙t
 < 
bi_v˙t_max
) {

719 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

720 
bv_Àn
 = 
cur_bvec
->bv_len;

722 i‡(
bv_Àn
 >
d©a_byãs
) {

723 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

724 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

726 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

727 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

729 i‡(
bv_Àn
 =
d©a_byãs
) {

730 
bi_v˙t
++;

732 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

734 
Æig√d_byãs
 -
PAGE_SIZE
;

735 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

736 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
lba
);

739 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

740 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

742 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

743 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

745 
d©a_byãs
 -
bv_Àn
;

746 
bi_v˙t
++;

747 
p„cw∑ge
 +
bv_Àn
;

751 
£˘‹
 +
SECTORS_PER_PAGE
;

752 
lba
++;

756 
	`dz_q_i‹eque°_thªad_poﬁ
(
i‹eque°_hód
);

759 
exô_Áûuª
:

760 
	`DELAY_MICRO_SECONDS
(1);

761 
	`IO_DONE_BUSY
(
pi‹eque°
);

762 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

764 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

765 i‡(!
„cw
) ;

766 
	`li°_dñ
(&
„cw
->
ioq
);

767 
	`FEC_ENTRY_WRITE_LOCK
(
„cw
);

768 
„cw
->
°©e
 = 
FECBUF_STATE_IDLE
;

769 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

771 
	}
}

780 
RVOID
 
	$dz_Áw_mu…i_block_bŸh_u«lig√d
(
PIOREQUEST
 
pi‹eque°
)

782 
PFEC_WRITE
 
„cw
 = 
NULL
;

783 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

785 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

786 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

787 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

788 
PVOID
 
p„cw∑ge
 = 
NULL
;

789 
PBIOVEC
 
cur_bvec
 = 
NULL
;

790 
INT
 
bi_v˙t
 = 0;

791 
INT
 
bi_v˙t_max
 = 0;

792 
INT
 
bv_Àn
 = 0;

793 
INT
 
ªmaöög_bv_Àn
 = 0;

794 
UINT
 
£˘‹_pos_ö_lba
 = 0;

795 
PVOID
 
∑gebuf
 = 
NULL
;

796 
SIZE
 
£˘‹_byãs
 = 0;

797 
U64
 
tŸ_byãs
 = 0;

798 
INT
 
d©a_byãs
 = 0;

799 
INT
 
Æig√d_byãs
 = 0;

800 
INT
 
∑πül_byãs_hód
 = 0;

801 
INT
 
∑πül_byãs_èû
 = 0;

802 
PIOREQUEST
 
i‹eque°_hód
 = 
NULL
;

803 
PIOREQUEST
 
i‹eque°_èû
 = 
NULL
;

804 
BIOVEC
 
biovec
;

805 
BIOVEC
 
biovec2
;

806 
INT
 
tŸÆ_blocks_√eded
 = 0;

807 
INT
 
cou¡
 = 0;

808 
LIST_HEAD
 
‰ì_li°_hód
 ;

812 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

813 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

814 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

815 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

816 
∑πül_byãs_èû
 = 
tŸ_byãs
 % 
LBA_BLOCK_SIZE
;

817 
Æig√d_byãs
 = 
io_size
 - 
∑πül_byãs_hód
 - 
∑πül_byãs_èû
 ;

820 
tŸÆ_blocks_√eded
 = 1 + 1 + (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

822 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

829 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

830 
	`PRINT_POINTER
(
„cw
);

831 
	`li°_add_èû
(&(
„cw
->
ioq
), &
‰ì_li°_hód
);

832 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_IN_PROGRESS
);

833 
„cw
++;

837 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

841 
i‹eque°_hód
 = 
	`dz_Áw_mu…i_block_ªad_∑ge_async
(
pi‹eque°
, 
bio
, 
£˘‹
, &
biovec
,

842 
dz_Áw_mu…i_∑ge_ªad_∑ge_async_biod⁄e_hód
);

843 i‡(!
i‹eque°_hód
) {

844 
exô_Áûuª
;

849 
i‹eque°_èû
 = 
	`dz_Áw_mu…i_block_ªad_∑ge_async
(
pi‹eque°
, 
bio
, 
£˘‹
, &
biovec2
,

850 
dz_Áw_mu…i_∑ge_ªad_∑ge_async_biod⁄e_èû
);

851 i‡(!
i‹eque°_èû
) {

852 
exô_Áûuª
;

859 
	`¥öt_bio
(
bio
);

862 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

863 
	`li°_dñ
(&
„cw
->
ioq
);

864 
	`PRINT_POINTER
(
„cw
);

866 
„cw
->
lba
 =Üba;

867 
i‹eque°_hód
->
i‹_¥iv©e
 = 
„cw
;

868 
i‹eque°_hód
->
i‹_lba
 = 
lba
;

869 
i‹eque°_hód
->
i‹_bv_off£t
 = 
£˘‹_pos_ö_lba
;

870 
i‹eque°_hód
->
i‹_bv_Àn
 = 
∑πül_byãs_hód
;

875 
p„cw∑ge
 = 
„cw
->
bv_∑ge
 + 
£˘‹_pos_ö_lba
;

876 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

877 
d©a_byãs
 = 
∑πül_byãs_hód
;

878 
	`LOGFEC
("Printing HeadÖart\n");

883 
bi_v˙t
 < 
bi_v˙t_max
) {

884 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

885 
bv_Àn
 = 
cur_bvec
->bv_len;

887 i‡(
bv_Àn
 >
d©a_byãs
) {

888 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

889 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

891 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

892 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

894 i‡(
bv_Àn
 =
d©a_byãs
) {

895 
bi_v˙t
++;

897 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

902 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

903 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

905 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

906 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

908 
d©a_byãs
 -
bv_Àn
;

909 
bi_v˙t
++;

910 
p„cw∑ge
 +
bv_Àn
;

915 
£˘‹
 +(
∑πül_byãs_hód
 / 
SECTOR_SIZE
);

916 
lba
++;

919 
	`dz_q_i‹eque°_thªad_poﬁ
(
i‹eque°_hód
);

921 
	`LOGFEC
("Printing Intermediate AlignedÖart\n");

929 
Æig√d_byãs
) {

931 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

932 
	`li°_dñ
(&
„cw
->
ioq
);

933 
	`PRINT_POINTER
(
„cw
);

935 
„cw
->
lba
 =Üba;

938 
d©a_byãs
 = 
PAGE_SIZE
;

939 
p„cw∑ge
 = 
„cw
->
bv_∑ge
;

941 i‡(
ªmaöög_bv_Àn
) {

942 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

943 
∑gebuf
 +
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
);

944 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
ªmaöög_bv_Àn
);

945 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

946 
p„cw∑ge
 +
ªmaöög_bv_Àn
;

947 
d©a_byãs
 -
ªmaöög_bv_Àn
;

948 
bi_v˙t
++;

949 
ªmaöög_bv_Àn
 = 0;

953 
bi_v˙t
 < 
bi_v˙t_max
) {

954 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

955 
bv_Àn
 = 
cur_bvec
->bv_len;

957 i‡(
bv_Àn
 >
d©a_byãs
) {

958 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

959 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

961 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

962 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

964 i‡(
bv_Àn
 =
d©a_byãs
) {

965 
bi_v˙t
++;

967 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

969 
Æig√d_byãs
 -
PAGE_SIZE
;

971 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

972 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
lba
);

975 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

976 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

978 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

979 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

981 
d©a_byãs
 -
bv_Àn
;

982 
bi_v˙t
++;

983 
p„cw∑ge
 +
bv_Àn
;

987 
£˘‹
 +
SECTORS_PER_PAGE
;

988 
lba
++;

994 
	`LOGFEC
("Printing TailÖart\n");

997 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

998 
	`li°_dñ
(&
„cw
->
ioq
);

999 i‡(!(
	`li°_em±y
(&
‰ì_li°_hód
))) {

1000 
	`BUG_ON
(1);

1002 
	`PRINT_POINTER
(
„cw
);

1004 
i‹eque°_èû
->
i‹_lba
 = 
lba
;

1005 
i‹eque°_èû
->
i‹_¥iv©e
 = 
„cw
;

1006 
i‹eque°_èû
->
i‹_bv_off£t
 = 0;

1007 
i‹eque°_èû
->
i‹_bv_Àn
 = 
∑πül_byãs_èû
;

1008 
„cw
->
lba
 =Üba;

1011 
d©a_byãs
 = 
∑πül_byãs_èû
;

1012 
p„cw∑ge
 = 
„cw
->
bv_∑ge
;

1015 i‡(
ªmaöög_bv_Àn
) {

1016 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

1017 
∑gebuf
 +
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
);

1018 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
ªmaöög_bv_Àn
);

1019 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

1020 
p„cw∑ge
 +
ªmaöög_bv_Àn
;

1021 
d©a_byãs
 -
ªmaöög_bv_Àn
;

1022 
bi_v˙t
++;

1023 
ªmaöög_bv_Àn
 = 0;

1027 
bi_v˙t
 < 
bi_v˙t_max
) {

1028 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

1029 
bv_Àn
 = 
cur_bvec
->bv_len;

1031 i‡(
bv_Àn
 >
d©a_byãs
) {

1032 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

1033 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

1035 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

1036 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

1038 i‡(
bv_Àn
 =
d©a_byãs
) {

1039 
bi_v˙t
++;

1041 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

1046 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

1047 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

1049 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

1050 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

1052 
d©a_byãs
 -
bv_Àn
;

1053 
bi_v˙t
++;

1054 
p„cw∑ge
 +
bv_Àn
;

1060 
	`dz_q_i‹eque°_thªad_poﬁ
(
i‹eque°_èû
);

1061 
	`LOGFEC
("ReturningáfterÉnqueuingÅail\n");

1064 
exô_Áûuª
:

1065 
	`DELAY_MICRO_SECONDS
(1);

1066 
	`IO_DONE_BUSY
(
pi‹eque°
);

1067 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

1069 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

1070 i‡(!
„cw
) ;

1071 
	`li°_dñ
(&
„cw
->
ioq
);

1072 
	`FEC_ENTRY_WRITE_LOCK
(
„cw
);

1073 
„cw
->
°©e
 = 
FECBUF_STATE_IDLE
;

1074 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

1077 i‡(
i‹eque°_hód
) {

1078 
	`dz_ªad_∑ge_‰ì
(
	`bio_∑ge
(
i‹eque°_hód
->
i‹_bio
));

1079 
	`DZ_OS_KERNEL_BIO_PUT
(
i‹eque°_hód
->
i‹_bio
);

1080 
	`dz_io_‰ì
(
i‹eque°_hód
);

1083 
	}
}

1085 
RVOID
 
	$dz_Æign_wrôe_f‹_mu…i_block
(
PIOREQUEST
 
pi‹eque°
)

1087 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

1088 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

1090 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

1091 
SIZE
 
£˘‹_byãs
 = 0;

1092 
U64
 
tŸ_byãs
 = 0;

1094 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

1104 i‡((
£˘‹_byãs
 % 
LBA_BLOCK_SIZE
) == 0 ) {

1107 i‡(((
£˘‹_byãs
 + 
io_size
Ë% 
LBA_BLOCK_SIZE
) == 0 ) {

1113 
	`dz_Áw_mu…i_block_Æl_Æig√d
(
pi‹eque°
);

1120 
	`LOGFEC
("Case2:BIO is Head Alignedánd Tail UnAligned\n");

1121 
	`dz_Áw_mu…i_block_èû_u«lig√d
(
pi‹eque°
);

1123 } i‡(((
tŸ_byãs
 = (
£˘‹_byãs
 + 
io_size
)Ë% 
LBA_BLOCK_SIZE
) == 0 ) {

1132 
	`LOGFEC
("Case3:BIO is Head UnAlignedánd Tail Aligned\n");

1133 
	`dz_Áw_mu…i_block_hód_u«lig√d
(
pi‹eque°
);

1143 
	`LOGFEC
("Case4:BIO is Neither Head Aligned Nor Tail Aligned\n");

1144 
	`dz_Áw_mu…i_block_bŸh_u«lig√d
(
pi‹eque°
);

1146 
	}
}

	@alignment_engine/alignment_engine_write_partial.c

9 
	~"¥ŸŸy≥s.h
"

11 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

13 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

14 
PLBA_BLOCK
 
lba_èbÀ
;

15 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

16 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

17 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

18 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

19 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

21 
RVOID
 
	$dz_Æign_wrôe_∑πül_block_∑ª¡_biod⁄e
(
PBIO
 
bio
, 
INT
 
îr‹
)

23 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

24 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

25 
PBIOVEC
 
pbvec
 = 
NULL
;

26 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

27 
	`PRINT_ATOMIC
(
pi‹eque°
->
i‹_chûd_˙t
);

28 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

31 
	`LOGALIGN
("Parent IO Done\n");

32 
	`IO_DONE_STATUS
(
pi‹eque°
, 
îr‹
);

33 
pbvec
 = 
	`bio_iovec
(
bio
);

34 
	`dz_ªad_∑ge_‰ì
(
pbvec
->
bv_∑ge
);

35 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

36 
	`i‹eque°_put
(
ci‹eque°
);

38 
	`bio_d©a_dú
(
pi‹eque°
->
i‹_bio
Ë=
WRITE
 ?

39 
	`i‹eque°_put
(
pi‹eque°
) :

40 
	`i‹eque°_put
(
pi‹eque°
);

43 
pbvec
 = 
	`bio_iovec
(
bio
);

44 
	`dz_ªad_∑ge_‰ì
(
pbvec
->
bv_∑ge
);

45 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

46 
	`i‹eque°_put
(
ci‹eque°
);

49 
	}
}

51 
RVOID
 
	$dz_Æign_wrôe_∑πül_block_ªad_∑ge_sync_biod⁄e
(
PBIO
 
bio
, 
INT
 
îr‹
)

53 
PDZ_COMPLETION
 
i‹
 = (PDZ_COMPLETION)
bio
->
bi_¥iv©e
;

54 
INT
 
ªt
 = 0;

55 i‡(
	`u∆ikñy
(!
	`bio_Êagged
(
bio
, 
BIO_UPTODATE
Ë&& !
îr‹
)) {

56 
îr‹
 = -
EIO
;

59 
i‹
->
îr‹
 =Érror;

60 
ªt
 = 
	`ã°_bô
(
BIO_UPTODATE
, &
bio
->
bi_Êags
);

62 
	`com∂ëe
(&
i‹
->
io_com∂ëi⁄
);

63 
	}
}

65 
RVOID
 
	$dz_Æign_wrôe_∑πül_block_doubÀ_∑ge_async_biod⁄e_hód
(
PBIO
 
bio
, 
INT
 
îr‹
)

67 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUEST)(
bio
->
bi_¥iv©e
);

68 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

69 
PBIO
 
∑ª¡_bio
 = 
pi‹eque°
->
i‹_bio
;

70 
PFEC_WRITE
 
„cw
 = (PFEC_WRITE)(
ci‹eque°
->
i‹_¥iv©e
);

71 
PVOID
 
∑gebuf
 = 
NULL
;

72 
PBIOVEC
 
pbvec
 = 
NULL
;

73 
INT
 
ªt
 = 
SUCCESS
;

74 
INT
 
bv_off£t
 = 
ci‹eque°
->
i‹_bv_off£t
;

75 i‡(
	`u∆ikñy
(!
	`bio_Êagged
(
bio
, 
BIO_UPTODATE
Ë&& !
îr‹
)) {

76 
îr‹
 = -
EIO
;

80 
	`LOGALIGN
("Inside biodone Head\n");

81 
	`PRINT_POINTER
(
„cw
);

82 
ªt
 = 
	`ã°_bô
(
BIO_UPTODATE
, &
bio
->
bi_Êags
);

86 
pbvec
 = 
	`bio_iovec
(
bio
);

87 
∑gebuf
 = 
	`km≠
(
pbvec
->
bv_∑ge
);

88 
∑gebuf
 +
pbvec
->
bv_off£t
;

89 
	`PMEMCPY
(
„cw
->
bv_∑ge
, 
∑gebuf
, 
bv_off£t
);

90 
	`kunm≠
(
pbvec
->
bv_∑ge
);

93 
pbvec
 = 
	`bio_iovec
(
∑ª¡_bio
);

94 
∑gebuf
 = 
	`km≠
(
pbvec
->
bv_∑ge
);

95 
∑gebuf
 +
bv_off£t
;

96 
	`PMEMCPY
(
„cw
->
bv_∑ge
 + 
bv_off£t
, 
∑gebuf
, 
PAGE_SIZE
 - bv_offset );

97 
	`kunm≠
(
pbvec
->
bv_∑ge
);

99 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

101 
	`dz_Æign_wrôe_∑πül_block_∑ª¡_biod⁄e
(
bio
, 
îr‹
);

103 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
ci‹eque°
->
i‹_lba
);

106 
	}
}

108 
RVOID
 
	$dz_Æign_wrôe_∑πül_block_doubÀ_∑ge_async_biod⁄e_èû
(
PBIO
 
bio
, 
INT
 
îr‹
)

110 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUEST)(
bio
->
bi_¥iv©e
);

111 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

112 
PBIO
 
∑ª¡_bio
 = 
pi‹eque°
->
i‹_bio
;

113 
PFEC_WRITE
 
„cw
 = (PFEC_WRITE)(
ci‹eque°
->
i‹_¥iv©e
);

114 
PVOID
 
∑gebuf
 = 
NULL
;

115 
PBIOVEC
 
pbvec
 = 
NULL
;

116 
INT
 
ªt
 = 
SUCCESS
;

117 
INT
 
bv_Àn
 = 
ci‹eque°
->
i‹_bv_Àn
;

118 i‡(
	`u∆ikñy
(!
	`bio_Êagged
(
bio
, 
BIO_UPTODATE
Ë&& !
îr‹
)) {

119 
îr‹
 = -
EIO
;

122 
	`LOGALIGN
("Inside biodone Tail\n");

123 
	`PRINT_POINTER
(
„cw
);

124 
ªt
 = 
	`ã°_bô
(
BIO_UPTODATE
, &
bio
->
bi_Êags
);

127 
pbvec
 = 
	`bio_iovec
(
∑ª¡_bio
);

132 
∑gebuf
 = 
	`km≠
(
pbvec
->
bv_∑ge
);

133 
∑gebuf
 +
pbvec
->
bv_off£t
;

134 
∑gebuf
 +
pbvec
->
bv_Àn
 - bv_len;

135 
	`PMEMCPY
(
„cw
->
bv_∑ge
, 
∑gebuf
, 
bv_Àn
);

136 
	`kunm≠
(
pbvec
->
bv_∑ge
);

140 
pbvec
 = 
	`bio_iovec
(
bio
);

141 
∑gebuf
 = 
	`km≠
(
pbvec
->
bv_∑ge
);

142 
∑gebuf
 +
bv_Àn
;

143 
	`PMEMCPY
((
„cw
->
bv_∑ge
 + 
bv_Àn
), 
∑gebuf
, 
PAGE_SIZE
 - bv_len);

144 
	`kunm≠
(
pbvec
->
bv_∑ge
);

146 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

148 
	`dz_Æign_wrôe_∑πül_block_∑ª¡_biod⁄e
(
bio
, 
îr‹
);

150 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
ci‹eque°
->
i‹_lba
);

152 
	}
}

159 
PPAGE
 
	$dz_Æign_wrôe_∑πül_block_ªad_∑ge_sync
(
PIOREQUEST
 
i‹eque°
, 
PBIO
 
∑ª¡_bio
, 
SECTOR
 
£˘‹
)

161 
PPAGE
 
∑ge
 = 
NULL
;

162 
PBIO
 
bio
 = 
NULL
;

163 
INT
 
îr‹
 = 0;

164 
PVOID
 
∑gebuf
 = 
NULL
;

165 
DZ_COMPLETION
 
io_com∂ëi⁄
;

167 
∑ge
 = 
	`dz_ªad_∑ge_Æloc
();

168 i‡(!
∑ge
) {

169 
	`LOGALIGNE
("UnableÅo get freeÑeadÖage\n");

170 
RETURNN
;

173 
bio
 = 
	`dz_bio_Æloc
(1);

174 i‡(!
bio
) {

175 
	`LOGALIGNE
("UnableÅo get free bio\n");

176 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

177 
RETURNN
;

180 
∑gebuf
 = 
	`km≠
(
∑ge
);

181 
	`mem£t
(
∑gebuf
, 0, 
PAGE_SIZE
);

182 
	`kunm≠
(
∑ge
);

184 
io_com∂ëi⁄
.
îr‹
 = 0;

185 
bio
->
bi_bdev
 = 
∑ª¡_bio
->bi_bdev;

186 
	`DZ_BIO_SET_SECTOR
(
bio
, 
£˘‹
);

187 
bio
->
bi_íd_io
 = 
dz_Æign_wrôe_∑πül_block_ªad_∑ge_sync_biod⁄e
;

188 
	`DZ_BIO_SET_ZIDX
(
bio
);

190 
	`DZ_BIO_SET_READ
(
bio
);

191 
bio
->
bi_√xt
 = 
NULL
;

192 
bio
->
bi_¥iv©e
 = (
VOID
 *)&
io_com∂ëi⁄
;

193 
bio
->
bi_Êags
 = 1 << 
BIO_UPTODATE
;

196 i‡(!
	`bio_add_∑ge
(
bio
, 
∑ge
, 
PAGE_SIZE
, 0)) {

197 
	`LOGALIGNE
("UnableÅoáddÖageÅo bio\n");

198 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

199 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

200 
RETURNN
;

202 
	`öô_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

205 
i‹eque°
->
i‹_bio
 = 
bio
;

208 
	`waô_f‹_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

212 
îr‹
 = 
io_com∂ëi⁄
.error;

213 i‡(
	`u∆ikñy
(
îr‹
)){

214 
	`LOGALIGNE
("Eº‹ i¿ªadögÑaw d©a. Eº‹ Codê: %d", 
îr‹
);

215 
	`¥öt_biom
(
bio
, "bio withÉrror");

216 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

217 
RETURNN
;

219 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

220  
∑ge
;

222 
	}
}

226 
RVOID
 
	$dz_Æign_wrôe_∑πül_block_doubÀ_∑ge_async
(
PIOREQUEST
 
∑ª¡_i‹eque°
,

227 
SECTOR
 
£˘‹_pos_ö_lba
,

228 
BIODONE
 
d⁄e_hód
,

229 
BIODONE
 
d⁄e_èû
)

231 
INT
 
ªt
 = 
SUCCESS
;

232 
PFEC_WRITE
 
„cw_hód
 = 
NULL
;

233 
PFEC_WRITE
 
„cw_èû
 = 
NULL
;

234 
PIOREQUEST
 
chûd_i‹eque°_hód
 = 
NULL
;

235 
PIOREQUEST
 
chûd_i‹eque°_èû
 = 
NULL
;

236 
PBIO
 
chûd_bio_hód
 = 
NULL
;

237 
PBIO
 
chûd_bio_èû
 = 
NULL
;

238 
PPAGE
 
∑ge_hód
 = 
NULL
;

239 
PPAGE
 
∑ge_èû
 = 
NULL
;

240 
PBIO
 
bio
 = 
∑ª¡_i‹eque°
->
i‹_bio
;

241 
LBA
 
lba
 = 
∑ª¡_i‹eque°
->
i‹_lba
;

242 
SECTOR
 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba
);

243 
INT
 
∑πül_byãs_hód
 = 0;

244 
INT
 
∑πül_byãs_èû
 = 0;

247 
chûd_i‹eque°_hód
 = 
	`dz_io_Æloc
();

248 i‡(!
chûd_i‹eque°_hód
) {

249 
	`LOGALIGNE
("UnableÅo get free iorequest\n");

250 
exô_Áûuª
;

252 
chûd_bio_hód
 = 
	`dz_bio_Æloc
(1);

253 i‡(!
chûd_bio_hód
) {

254 
	`LOGALIGNE
("UnableÅo get free child bio\n");

255 
exô_Áûuª
;

257 
∑ge_hód
 = 
	`dz_ªad_∑ge_Æloc
();

258 i‡(!
∑ge_hód
) {

259 
	`LOGALIGNE
("UnableÅo get freeÑeadÖage\n");

260 
exô_Áûuª
;

262 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio_hód
, 
£˘‹
, 
d⁄e_hód
, 
chûd_i‹eque°_hód
);

264 
	`DZ_BIO_SET_READ
(
chûd_bio_hód
);

266 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio_hód
, 
∑ge_hód
, 
PAGE_SIZE
, 0);

267 i‡(!
ªt
) {

268 
	`IO_DONE_ERROR
(
∑ª¡_i‹eque°
, 
ªt
);

269 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio head\n");

270 
exô_Æloc
;

273 
	`©omic_£t
(&
chûd_i‹eque°_hód
->
i‹_chûd_˙t
, 0);

274 
chûd_i‹eque°_hód
->
i‹_thªad_poﬁ
 = 
Æign_ªad_thªad_poﬁ
;

275 
chûd_i‹eque°_hód
->
i‹_bio
 = 
chûd_bio_hód
;

277 
chûd_i‹eque°_hód
->
i‹_lba
 = 
lba
;

278 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

279 
chûd_i‹eque°_hód
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

280 
chûd_i‹eque°_hód
->
i‹_¥iv©e
 = 
„cw_hód
;

281 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

284 
lba
++;

285 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba
);

286 
chûd_i‹eque°_èû
 = 
	`dz_io_Æloc
();

287 i‡(!
chûd_i‹eque°_èû
) {

288 
	`LOGALIGNE
("UnableÅo get free iorequestÅail\n");

289 
exô_Áûuª
;

291 
chûd_bio_èû
 = 
	`dz_bio_Æloc
(1);

292 i‡(!
chûd_bio_èû
) {

293 
	`LOGALIGNE
("UnableÅo get free child bioÅail\n");

294 
exô_Áûuª
;

296 
∑ge_èû
 = 
	`dz_ªad_∑ge_Æloc
();

297 i‡(!
∑ge_èû
) {

298 
	`LOGALIGNE
("UnableÅo get freeÑeadÖageÅail\n");

299 
exô_Áûuª
;

301 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio_èû
, 
£˘‹
, 
d⁄e_èû
, 
chûd_i‹eque°_èû
);

303 
	`DZ_BIO_SET_READ
(
chûd_bio_èû
);

305 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio_èû
, 
∑ge_èû
, 
PAGE_SIZE
, 0);

306 i‡(!
ªt
) {

307 
	`IO_DONE_ERROR
(
∑ª¡_i‹eque°
, 
ªt
);

308 
	`LOGALIGNE
("UnableÅoádd PageÅo child bioÅail\n");

309 
exô_Æloc
;

311 
	`©omic_£t
(&
chûd_i‹eque°_èû
->
i‹_chûd_˙t
, 0);

312 
chûd_i‹eque°_èû
->
i‹_thªad_poﬁ
 = 
Æign_ªad_thªad_poﬁ
;

313 
chûd_i‹eque°_èû
->
i‹_bio
 = 
chûd_bio_èû
;

315 
chûd_i‹eque°_èû
->
i‹_lba
 = 
lba
;

316 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

317 
chûd_i‹eque°_èû
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

318 
chûd_i‹eque°_èû
->
i‹_¥iv©e
 = 
„cw_èû
;

319 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

322 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

323 
∑πül_byãs_èû
 = 
	`DZ_BIO_GET_SIZE
(
bio
Ë- 
∑πül_byãs_hód
;

325 
chûd_i‹eque°_hód
->
i‹_bv_Àn
 = 
∑πül_byãs_hód
;

326 
chûd_i‹eque°_hód
->
i‹_bv_off£t
 = 
£˘‹_pos_ö_lba
;

328 
chûd_i‹eque°_èû
->
i‹_bv_Àn
 = 
∑πül_byãs_èû
;

329 
chûd_i‹eque°_èû
->
i‹_bv_off£t
 = 0;

331 
chûd_bio_hód
->
bi_√xt
 = 
chûd_bio_èû
;

332 
chûd_bio_èû
->
bi_√xt
 = 
chûd_bio_hód
;

333 
	`dz_q_i‹eque°_thªad_poﬁ
(
chûd_i‹eque°_hód
);

334 
	`dz_q_i‹eque°_thªad_poﬁ
(
chûd_i‹eque°_èû
);

337 
exô_Áûuª
:

338 
	`IO_DONE_ERROR
(
∑ª¡_i‹eque°
, 
IO_ERROR_ENOMEM
);

340 
exô_Æloc
:

341 i‡(
∑ge_hód
) {

342 
	`dz_ªad_∑ge_‰ì
(
∑ge_hód
);

344 i‡(
∑ge_èû
) {

345 
	`dz_ªad_∑ge_‰ì
(
∑ge_èû
);

347 i‡(
chûd_bio_hód
) {

348 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio_hód
);

350 i‡(
chûd_bio_èû
) {

351 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio_èû
);

353 i‡(
chûd_i‹eque°_hód
) {

354 
	`dz_io_‰ì
(
chûd_i‹eque°_hód
);

356 i‡(
chûd_i‹eque°_èû
) {

357 
	`dz_io_‰ì
(
chûd_i‹eque°_èû
);

359 
	`i‹eque°_put
(
∑ª¡_i‹eque°
);

360 
	}
}

363 
RVOID
 
	$dz_Æign_wrôe_f‹_∑πül_block
(
PIOREQUEST
 
∑ª¡_i‹eque°
)

365 
PBIO
 
∑ª¡_bio
 = 
∑ª¡_i‹eque°
->
i‹_bio
;

367 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
∑ª¡_bio
);

368 
LBA
 
lba
 = 
∑ª¡_i‹eque°
->
i‹_lba
;

369 
UINT
 
£˘‹_pos_ö_lba
 = 0;

371 
INT
 
size
 = 
	`DZ_BIO_GET_SIZE
(
∑ª¡_bio
);

372 
PFEC_WRITE
 
„cw
 = 
NULL
;

373 
PVOID
 
∑gebuf
 = 
NULL
;

374 
PBIOVEC
 
pbvec
 = 
NULL
;

375 
PPAGE
 
ªadback∑ge
 = 
NULL
;

376 
INT
 
i
;

378 i‡(((
£˘‹
 * 
SECTOR_SIZE
Ë% 
LBA_BLOCK_SIZE
) == 0 ) {

380 
	`LOGALIGN
("Case1: Partial but Start Sector Aligned\n");

382 
do_rmw
:

386 
„cw
->
lba
 =Üba;

389 i‡(
∑ª¡_bio
->
bi_v˙t
 > 1) {

392 
	`BUG_ON
(1);

395 
ªadback∑ge
 = 
	`dz_Æign_wrôe_∑πül_block_ªad_∑ge_sync
(
∑ª¡_i‹eque°
, 
∑ª¡_bio
, 
£˘‹
);

396 
∑ª¡_i‹eque°
->
i‹_bio
 = 
∑ª¡_bio
;

397 i‡(!
ªadback∑ge
) {

398 
	`IO_DONE_ERROR
(
∑ª¡_i‹eque°
, 
IO_ERROR_ENOMEM
);

405 
∑gebuf
 = 
	`km≠
(
ªadback∑ge
);

406 
	`PMEMCPY
(
„cw
->
bv_∑ge
, 
∑gebuf
, 
PAGE_SIZE
);

407 
	`kunm≠
(
ªadback∑ge
);

410 
	`bio_f‹_óch_£gmít
(
pbvec
, (
∑ª¡_bio
), 
i
) {

411 
∑gebuf
 = 
	`km≠
(
pbvec
->
bv_∑ge
);

412 
∑gebuf
 +
pbvec
->
bv_off£t
;

413 
	`PMEMCPY
(
„cw
->
bv_∑ge
 + 
£˘‹_pos_ö_lba
, 
∑gebuf
, 
pbvec
->
bv_Àn
);

414 
	`kunm≠
(
pbvec
->
bv_∑ge
);

417 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

419 
	`WRITE_IO_DONE
(
∑ª¡_i‹eque°
);

422 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
lba
);

424 
	`i‹eque°_put
(
∑ª¡_i‹eque°
);

425 
	`dz_ªad_∑ge_‰ì
(
ªadback∑ge
);

431 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

433 i‡((
£˘‹_pos_ö_lba
 + 
size
Ë<
LBA_BLOCK_SIZE
) {

435 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

437 
	`LOGALIGN
("Case2: Falls into Single Page Boundary but Unaligned\n");

443 
do_rmw
;

450 
	`dz_Æign_wrôe_∑πül_block_doubÀ_∑ge_async
(
∑ª¡_i‹eque°
,

451 
£˘‹_pos_ö_lba
,

452 
dz_Æign_wrôe_∑πül_block_doubÀ_∑ge_async_biod⁄e_hód
,

453 
dz_Æign_wrôe_∑πül_block_doubÀ_∑ge_async_biod⁄e_èû
);

457 
	}
}

	@alignment_engine/alignment_engine_write_single.c

9 
	~"¥ŸŸy≥s.h
"

11 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

12 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

13 
PLBA_BLOCK
 
lba_èbÀ
;

14 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

15 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

16 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

17 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

18 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

20 
RVOID
 
	$dz_Æign_wrôe_sögÀ_block_∑ª¡_biod⁄e
(
PBIO
 
bio
, 
INT
 
îr‹
)

22 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

23 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

24 
PBIOVEC
 
pbvec
 = 
NULL
;

25 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

26 
	`PRINT_ATOMIC
(
pi‹eque°
->
i‹_chûd_˙t
);

27 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

30 
	`LOGALIGN
("Parent IO Done\n");

31 
	`IO_DONE_STATUS
(
pi‹eque°
, 
îr‹
);

32 
pbvec
 = 
	`bio_iovec
(
bio
);

33 
	`dz_ªad_∑ge_‰ì
(
pbvec
->
bv_∑ge
);

34 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

35 
	`i‹eque°_put
(
ci‹eque°
);

37 
	`bio_d©a_dú
(
pi‹eque°
->
i‹_bio
Ë=
WRITE
 ?

38 
	`i‹eque°_put
(
pi‹eque°
) :

39 
	`i‹eque°_put
(
pi‹eque°
);

42 
pbvec
 = 
	`bio_iovec
(
bio
);

43 
	`dz_ªad_∑ge_‰ì
(
pbvec
->
bv_∑ge
);

44 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

45 
	`i‹eque°_put
(
ci‹eque°
);

48 
	}
}

50 
RVOID
 
	$dz_Æign_wrôe_sögÀ_block_doubÀ_∑ge_async_biod⁄e_hód
(
PBIO
 
bio
, 
INT
 
îr‹
)

52 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUEST)(
bio
->
bi_¥iv©e
);

53 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

54 
PBIO
 
∑ª¡_bio
 = 
pi‹eque°
->
i‹_bio
;

55 
PFEC_WRITE
 
„cw
 = (PFEC_WRITE)(
ci‹eque°
->
i‹_¥iv©e
);

56 
PVOID
 
∑gebuf
 = 
NULL
;

57 
PBIOVEC
 
pbvec
 = 
NULL
;

58 
INT
 
ªt
 = 
SUCCESS
;

59 
INT
 
bv_off£t
 = 
ci‹eque°
->
i‹_bv_off£t
;

70 
	`LOGALIGN
("Inside biodone Head\n");

71 
	`PRINT_POINTER
(
„cw
);

76 
pbvec
 = 
	`bio_iovec
(
bio
);

77 
∑gebuf
 = 
	`km≠
(
pbvec
->
bv_∑ge
);

78 
∑gebuf
 +
pbvec
->
bv_off£t
;

79 
	`PMEMCPY
(
„cw
->
bv_∑ge
, 
∑gebuf
, 
bv_off£t
);

80 
	`kunm≠
(
pbvec
->
bv_∑ge
);

83 
pbvec
 = 
	`bio_iovec
(
∑ª¡_bio
);

84 
∑gebuf
 = 
	`km≠
(
pbvec
->
bv_∑ge
);

85 
∑gebuf
 +
bv_off£t
;

86 
	`PMEMCPY
(
„cw
->
bv_∑ge
 + 
bv_off£t
, 
∑gebuf
, 
PAGE_SIZE
 - bv_offset );

87 
	`kunm≠
(
pbvec
->
bv_∑ge
);

89 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

91 
	`dz_Æign_wrôe_sögÀ_block_∑ª¡_biod⁄e
(
bio
, 
îr‹
);

93 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
ci‹eque°
->
i‹_lba
);

96 
	}
}

98 
RVOID
 
	$dz_Æign_wrôe_sögÀ_block_doubÀ_∑ge_async_biod⁄e_èû
(
PBIO
 
bio
)

100 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUEST)(
bio
->
bi_¥iv©e
);

101 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

102 
PBIO
 
∑ª¡_bio
 = 
pi‹eque°
->
i‹_bio
;

103 
PFEC_WRITE
 
„cw
 = (PFEC_WRITE)(
ci‹eque°
->
i‹_¥iv©e
);

104 
PVOID
 
∑gebuf
 = 
NULL
;

105 
PBIOVEC
 
pbvec
 = 
NULL
;

106 
INT
 
ªt
 = 
SUCCESS
;

107 
INT
 
bv_Àn
 = 
ci‹eque°
->
i‹_bv_Àn
;

117 
	`LOGALIGN
("Inside biodone Tail\n");

118 
	`PRINT_POINTER
(
„cw
);

121 
pbvec
 = 
	`bio_iovec
(
∑ª¡_bio
);

126 
∑gebuf
 = 
	`km≠
(
pbvec
->
bv_∑ge
);

127 
∑gebuf
 +
pbvec
->
bv_off£t
;

128 
∑gebuf
 +
pbvec
->
bv_Àn
 - bv_len;

129 
	`PMEMCPY
(
„cw
->
bv_∑ge
, 
∑gebuf
, 
bv_Àn
);

130 
	`kunm≠
(
pbvec
->
bv_∑ge
);

134 
pbvec
 = 
	`bio_iovec
(
bio
);

135 
∑gebuf
 = 
	`km≠
(
pbvec
->
bv_∑ge
);

136 
∑gebuf
 +
bv_Àn
;

137 
	`PMEMCPY
((
„cw
->
bv_∑ge
 + 
bv_Àn
), 
∑gebuf
, 
PAGE_SIZE
 - bv_len);

138 
	`kunm≠
(
pbvec
->
bv_∑ge
);

140 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

142 
	`dz_Æign_wrôe_sögÀ_block_∑ª¡_biod⁄e
(
bio
, 
îr‹
);

144 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
ci‹eque°
->
i‹_lba
);

146 
	}
}

152 
RVOID
 
	$dz_Æign_wrôe_sögÀ_block_doubÀ_∑ge_async
(
PIOREQUEST
 
∑ª¡_i‹eque°
,

153 
SECTOR
 
£˘‹_pos_ö_lba
,

154 
BIODONE
 
d⁄e_hód
,

155 
BIODONE
 
d⁄e_èû
)

157 
INT
 
ªt
 = 
SUCCESS
;

158 
PIOREQUEST
 
chûd_i‹eque°_hód
 = 
NULL
;

159 
PIOREQUEST
 
chûd_i‹eque°_èû
 = 
NULL
;

160 
PBIO
 
chûd_bio_hód
 = 
NULL
;

161 
PBIO
 
chûd_bio_èû
 = 
NULL
;

162 
PPAGE
 
∑ge_hód
 = 
NULL
;

163 
PPAGE
 
∑ge_èû
 = 
NULL
;

164 
PBIO
 
bio
 = 
∑ª¡_i‹eque°
->
i‹_bio
;

165 
LBA
 
lba
 = 
∑ª¡_i‹eque°
->
i‹_lba
;

166 
SECTOR
 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba
);

167 
INT
 
∑πül_byãs_hód
 = 0;

168 
INT
 
∑πül_byãs_èû
 = 0;

171 
chûd_i‹eque°_hód
 = 
	`dz_io_Æloc
();

172 i‡(!
chûd_i‹eque°_hód
) {

173 
	`LOGALIGNE
("UnableÅo get free iorequest\n");

174 
exô_Áûuª
;

176 
chûd_bio_hód
 = 
	`dz_bio_Æloc
(1);

177 i‡(!
chûd_bio_hód
) {

178 
	`LOGALIGNE
("UnableÅo get free child bio\n");

179 
exô_Áûuª
;

181 
∑ge_hód
 = 
	`dz_ªad_∑ge_Æloc
();

182 i‡(!
∑ge_hód
) {

183 
	`LOGALIGNE
("UnableÅo get freeÑeadÖage\n");

184 
exô_Áûuª
;

186 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio_hód
, 
£˘‹
, 
d⁄e_hód
, 
chûd_i‹eque°_hód
);

188 
	`DZ_BIO_SET_READ
(
chûd_bio_hód
);

190 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio_hód
, 
∑ge_hód
, 
PAGE_SIZE
, 0);

191 i‡(!
ªt
) {

192 
	`IO_DONE_ERROR
(
∑ª¡_i‹eque°
, 
ªt
);

193 
	`LOGALIGNE
("UnableÅoádd PageÅo child bio head\n");

194 
exô_Æloc
;

197 
	`©omic_£t
(&
chûd_i‹eque°_hód
->
i‹_chûd_˙t
, 0);

198 
chûd_i‹eque°_hód
->
i‹_thªad_poﬁ
 = 
Æign_ªad_thªad_poﬁ
;

199 
chûd_i‹eque°_hód
->
i‹_bio
 = 
chûd_bio_hód
;

201 
chûd_i‹eque°_hód
->
i‹_lba
 = 
lba
;

202 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

203 
chûd_i‹eque°_hód
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

205 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

208 
lba
++;

209 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba
);

210 
chûd_i‹eque°_èû
 = 
	`dz_io_Æloc
();

211 i‡(!
chûd_i‹eque°_èû
) {

212 
	`LOGALIGNE
("UnableÅo get free iorequestÅail\n");

213 
exô_Áûuª
;

215 
chûd_bio_èû
 = 
	`dz_bio_Æloc
(1);

216 i‡(!
chûd_bio_èû
) {

217 
	`LOGALIGNE
("UnableÅo get free child bioÅail\n");

218 
exô_Áûuª
;

220 
∑ge_èû
 = 
	`dz_ªad_∑ge_Æloc
();

221 i‡(!
∑ge_èû
) {

222 
	`LOGALIGNE
("UnableÅo get freeÑeadÖageÅail\n");

223 
exô_Áûuª
;

225 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio_èû
, 
£˘‹
, 
d⁄e_èû
, 
chûd_i‹eque°_èû
);

227 
	`DZ_BIO_SET_READ
(
chûd_bio_èû
);

229 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio_èû
, 
∑ge_èû
, 
PAGE_SIZE
, 0);

230 i‡(!
ªt
) {

231 
	`IO_DONE_ERROR
(
∑ª¡_i‹eque°
, 
ªt
);

232 
	`LOGALIGNE
("UnableÅoádd PageÅo child bioÅail\n");

233 
exô_Æloc
;

235 
	`©omic_£t
(&
chûd_i‹eque°_èû
->
i‹_chûd_˙t
, 0);

236 
chûd_i‹eque°_èû
->
i‹_thªad_poﬁ
 = 
Æign_ªad_thªad_poﬁ
;

237 
chûd_i‹eque°_èû
->
i‹_bio
 = 
chûd_bio_èû
;

239 
chûd_i‹eque°_èû
->
i‹_lba
 = 
lba
;

240 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

241 
chûd_i‹eque°_èû
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

243 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

246 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

247 
∑πül_byãs_èû
 = 
	`DZ_BIO_GET_SIZE
(
bio
Ë- 
∑πül_byãs_hód
;

249 
chûd_i‹eque°_hód
->
i‹_bv_Àn
 = 
∑πül_byãs_hód
;

250 
chûd_i‹eque°_hód
->
i‹_bv_off£t
 = 
£˘‹_pos_ö_lba
;

252 
chûd_i‹eque°_èû
->
i‹_bv_Àn
 = 
∑πül_byãs_èû
;

253 
chûd_i‹eque°_èû
->
i‹_bv_off£t
 = 0;

255 
chûd_bio_hód
->
bi_√xt
 = 
chûd_bio_èû
;

256 
chûd_bio_èû
->
bi_√xt
 = 
chûd_bio_hód
;

257 
	`dz_q_i‹eque°_thªad_poﬁ
(
chûd_i‹eque°_hód
);

258 
	`dz_q_i‹eque°_thªad_poﬁ
(
chûd_i‹eque°_èû
);

261 
exô_Áûuª
:

262 
	`IO_DONE_ERROR
(
∑ª¡_i‹eque°
, 
IO_ERROR_ENOMEM
);

264 
exô_Æloc
:

265 i‡(
∑ge_hód
) {

266 
	`dz_ªad_∑ge_‰ì
(
∑ge_hód
);

268 i‡(
∑ge_èû
) {

269 
	`dz_ªad_∑ge_‰ì
(
∑ge_èû
);

271 i‡(
chûd_bio_hód
) {

272 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio_hód
);

274 i‡(
chûd_bio_èû
) {

275 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio_èû
);

277 i‡(
chûd_i‹eque°_hód
) {

278 
	`dz_io_‰ì
(
chûd_i‹eque°_hód
);

280 i‡(
chûd_i‹eque°_èû
) {

281 
	`dz_io_‰ì
(
chûd_i‹eque°_èû
);

283 
	`i‹eque°_put
(
∑ª¡_i‹eque°
);

284 
	}
}

287 
RVOID
 
	$dz_Æign_wrôe_sögÀ_block_i‹eque°_d⁄e
(
PVOID
 
i‹eque°
 , 
INT
 
îr‹
)

289 
PIOREQUEST
 
i‹
 = (PIOREQUEST)
i‹eque°
;

292 i‡(
îr‹
) {

293 i‡(
i‹
->
i‹_∑ª¡
) {

294 
	`DZ_ALIGN_IOREQUEST_DONE_ERROR
(
i‹
, 
îr‹
);

296 
	`WRITE_IO_DONE_STATUS
(
i‹
, 
îr‹
);

300 i‡(
i‹
->
i‹_∑ª¡
) {

301 
	`DZ_ALIGN_IOREQUEST_DONE
(
i‹
);

304 
	`WRITE_IO_DONE
(
i‹
);

310 
	`LOGD
("Disk IO D⁄êf‹ LBA %Œòwôh i‹eque° %p\n", 
i‹
->
lba
, ior);

312 
	}
}

322 
RVOID
 
	$dz_Æign_wrôe_f‹_sögÀ_block
(
PIOREQUEST
 
i‹eque°
)

324 
PBIO
 
bio
 = 
i‹eque°
->
i‹_bio
;

325 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

326 
LBA
 
lba
 = 
i‹eque°
->
i‹_lba
;

327 
UINT
 
£˘‹_pos_ö_lba
 = 0;

328 
U64
 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

332 i‡(((
£˘‹_byãs
Ë% 
LBA_BLOCK_SIZE
) != 0 ) {

333 
	`LOGALIGN
("Ca£1: SögÀ block u«lig√d Se˘‹ = %Œi\n", (
U64
)
£˘‹
);

334 
£˘‹_pos_ö_lba
 = (
£˘‹_byãs
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

336 
	`dz_Æign_wrôe_sögÀ_block_doubÀ_∑ge_async
(
i‹eque°
,

337 
£˘‹_pos_ö_lba
,

338 
dz_Æign_wrôe_sögÀ_block_doubÀ_∑ge_async_biod⁄e_hód
,

339 
dz_Æign_wrôe_sögÀ_block_doubÀ_∑ge_async_biod⁄e_èû
);

344 
	`LOGALIGN
("Ca£2: SögÀ block Alig√d Se˘‹ = %Œi\n", (
U64
)
£˘‹
);

346 
	`COPY_FROM_BIO
(
i‹eque°
->
i‹_bv_∑ge
, 
bio
);

347 
i‹eque°
->
i‹_d⁄efun
 = 
dz_Æign_wrôe_sögÀ_block_i‹eque°_d⁄e
;

350 
	`i‹eque°_gë
(
i‹eque°
);

352 
	`LOGALIGN
("Dedu≥ WrôêIO Sèπ f‹ LBA %Œòwôh i‹eque° %p\n", 
lba
, 
i‹eque°
);

355 
	`dz_q_i‹eque°
(
dedu≥_thªad_poﬁ
, 
i‹eque°
);

358 
	}
}

	@bec_engine/bec_engine.c

9 
	~"bec_ígöe.h
"

10 
	~"mem‹y_poﬁ_ígöe.h
"

11 
	~"thªad_poﬁ_ígöe.h
"

12 
	~"¥ŸŸy≥s.h
"

14 
INT
 
dz_swôch_bec_ígöe
;

15 
INT
 
dz_swôch_„c_ígöe
;

16 
PCHAR
 
BEC_THREAD_POOL_NAME
;

17 
PCHAR
 
BEC_THREAD_POOL_SHORT_NAME
;

18 
USHORT
 
num_bec_thªads
;

20 
PDZ_THREAD_POOL
 
bec_thªad_poﬁ
;

21 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

22 
INT
 
dz_pba_∑ge_mempoﬁ_cou¡
;

23 
INT
 
dz_bec_ªque°_mempoﬁ_cou¡
;

24 
PPBA_BLOCK
 
pba_èbÀ
;

25 
USHORT
 
num_bec_thªads
;

26 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

27 
INT
 
dz_pba_∑ge_mempoﬁ_cou¡
;

29 
LIST_HEAD
 
bec_li°_hód
;

30 
PRADIX_TREE_ROOT
 
bec_ødix_åì
;

32 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

37 
INT
 
bec_cutoff_nodes
;

38 
INT
 
bec_cutoff_≥r˚¡
;

41 
ULONG
 
bec_size
;

46 
ATOMIC64
 
bec_ˇche_hô
;

47 
ATOMIC64
 
bec_ˇche_miss
;

48 
ATOMIC64
 
bec_ˇche_dñëe
;

53 
RINT
 
	$dz_¸óã_bec_thªad_poﬁ
(
INT
 
num_thªads
)

55 
PDZ_THREAD_POOL
 
ç
 = 
NULL
;

56 
ç
 = 
	`dz_¸óã_thªad_poﬁ
(

57 
BEC_THREAD_POOL_NAME
, 
BEC_THREAD_POOL_SHORT_NAME
,

58 
num_thªads
, 
NULL
, NULL, 
dz_bec_io
);

59 i‡(
ç
) {

60 
	`LOGBEC
("%s created successfully for %dÅhreads \n",

61 
BEC_THREAD_POOL_NAME
, 
num_thªads
);

62 
bec_thªad_poﬁ
 = 
ç
;

63 
RETURNS
;

65 
	`LOGBECE
("%†¸óti⁄ faûed \n", 
BEC_THREAD_POOL_NAME
);

66 
RETURNF
;

68  
SUCCESS
;

69 
	}
}

71 
RVOID
 
	$dz_de°roy_bec_thªad_poﬁ
(
VOID
)

73 i‡(
bec_thªad_poﬁ
) {

74 
	`dz_de°roy_thªad_poﬁ
(
bec_thªad_poﬁ
);

76 
	}
}

78 
VOID
 
	$dz_bec_¥öt_cou¡îs
(
VOID
)

80 
	`LOGBEC
("bec_pba_∑ge_cou¡ = %Œi\n", (
U64
)
	`ATOMIC64_READ
(
bec_pba_∑ge_cou¡
));

81 
	`LOGBEC
("bec_ˇche_hô = %Œi\n", (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_hô
));

82 
	`LOGBEC
("bec_ˇche_mis† = %Œi\n", (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_miss
));

83 
	`LOGBEC
("bec_ˇche_dñëê = %Œi\n", (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_dñëe
));

84 
	`LOGBEC
("bec_sizê = %Œi\n", (
U64
)
bec_size
);

85 
	`LOGBEC
("bec_cutoff_node† = %Œi\n", (
U64
)
bec_cutoff_nodes
);

86 
	`LOGBEC
("bec_cutoff_≥r˚¡ = %Œi\n", (
U64
)
bec_cutoff_≥r˚¡
);

87 
	`LOGBEC
("bec_node_mempoﬁ_cou¡ = %Œi\n", (
U64
)
dz_bec_node_mempoﬁ_cou¡
);

88 
	}
}

90 
VOID
 
	$dz_bec_öô_cou¡îs
(
VOID
)

92 
	`ATOMIC64_SET
(
bec_pba_∑ge_cou¡
, 0);

93 
	`ATOMIC64_SET
(
bec_ˇche_hô
, 0);

94 
	`ATOMIC64_SET
(
bec_ˇche_miss
, 0);

95 
	`ATOMIC64_SET
(
bec_ˇche_dñëe
, 0);

97 
bec_cutoff_≥r˚¡
 = 
BEC_PAGE_EVICT_PERCENTAGE
;

98 
bec_size
 = 
dz_bec_node_mempoﬁ_cou¡
;

99 
bec_cutoff_nodes
 = (
bec_size
 * 
bec_cutoff_≥r˚¡
) / 100;

101 
	`BEC_COUNTER_U64_SET
(
bec_ígöe_mem‹y_ußge
, 0);

102 
	`BEC_COUNTER_ATOMIC64_SET
(
bec_∑ge_Æloc_˙t
, 0);

103 
	`BEC_COUNTER_ATOMIC64_SET
(
bec_∑ge_‰ì_˙t
, 0);

104 
	`BEC_COUNTER_ATOMIC64_SET
(
bec_node_Æloc_˙t
, 0);

105 
	`BEC_COUNTER_ATOMIC64_SET
(
bec_node_‰ì_˙t
, 0);

107 
	`dz_bec_¥öt_cou¡îs
();

108 
	}
}

110 
RINT
 
	$dz_bec_ígöe_öô
(
VOID
)

112 
INT
 
ªt
 = 
SUCCESS
;

113 
	`MARK_MEMORY_USAGE
();

115 i‡(
dz_swôch_bec_ígöe
 =
DZ_DISABLED
) {

116 
	`LOGBECF
(" ______________________________________________________ \n");

117 
	`LOGBECF
("| |\n");

118 
	`LOGBECF
("| BackEnd Cache (BEC) Engine Disabled |\n");

119 
	`LOGBECF
("|______________________________________________________|\n");

120 
	`PRINT_MEMORY_USAGE
(
	`BEC_COUNTER_U64_GET
(
bec_ígöe_mem‹y_ußge
), "BEC Engine");

121 
RETURNS
;

127 
	`LOGBECF
(" ______________________________________________________ \n");

128 
	`LOGBECF
("| |\n");

129 
	`LOGBECF
("| Backend Cache (BEC) Engine Initialization Begin |\n");

130 
	`LOGBECF
("|______________________________________________________|\n");

131 
	`INIT_LIST_HEAD
(&
bec_li°_hód
);

132 
	`dz_bec_öô_cou¡îs
();

134 
ªt
 = 
	`dz_¸óã_bec_thªad_poﬁ
(
num_bec_thªads
);

136 
bec_ødix_åì
 = 
	`dz_kmÆloc
((
RADIX_TREE_ROOT
), 
GFP_KERNEL
|
__GFP_ZERO
);

137 i‡(!
bec_ødix_åì
) {

138  -
ENOMEM
;

140 
	`INIT_RADIX_TREE
(
bec_ødix_åì
, 
GFP_ATOMIC
);

141 
ªt
 = 
	`dz_¸óã_bec_node_poﬁ
 (
dz_bec_node_mempoﬁ_cou¡
);

142 
ªt
 = 
	`dz_¸óã_bec_∑ge_poﬁ
 (
dz_bec_node_mempoﬁ_cou¡
);

143 i‡(
	`ødix_åì_¥ñﬂd
(
GFP_KERNEL
)) {

144 
	`LOGBECE
("RadixÅreeÖreload failed\n");

146 
	`LOGBEC
("RadixÅreeÖreloaded successfully\n");

148 
	`PRINT_MEMORY_USAGE
–
	`BEC_COUNTER_U64_GET
(
bec_ígöe_mem‹y_ußge
), "BEC Engine");

149 
	`LOGBECF
(" ______________________________________________________ \n");

150 
	`LOGBECF
("| |\n");

151 
	`LOGBECF
("| Backend Cache (BEC) Engine Initialization End |\n");

152 
	`LOGBECF
("|______________________________________________________|\n");

153 
RETURNS
;

154 
	}
}

155 
EXPORT_SYMBOL
(
dz_bec_ígöe_öô
);

157 
RINT
 
	$dz_bec_ígöe_exô
(
VOID
)

160 
	`MARK_MEMORY_USAGE
();

161 i‡(
dz_swôch_bec_ígöe
 =
DZ_DISABLED
) {

162 
	`LOGBECF
(" ______________________________________________________ \n");

163 
	`LOGBECF
("| |\n");

164 
	`LOGBECF
("| BackEnd Cache (BEC) Engine Disabled |\n");

165 
	`LOGBECF
("|______________________________________________________|\n");

166 
	`PRINT_MEMORY_USAGE
(
	`BEC_COUNTER_U64_GET
(
bec_ígöe_mem‹y_ußge
), "BEC Engine");

167 
RETURNS
;

170 
	`LOGBECF
(" ______________________________________________________ \n");

171 
	`LOGBECF
("| |\n");

172 
	`LOGBECF
("| Backend Cache (BEC) Engine Exit Begin |\n");

173 
	`LOGBECF
("|______________________________________________________|\n");

174 
	`dz_bec_¥öt_cou¡îs
();

175 
	`dz_de°roy_bec_thªad_poﬁ
();

176 i‡(
bec_ødix_åì
) {

177 
	`dz_k‰ì
(
bec_ødix_åì
, (
RADIX_TREE_ROOT
));

179 
	`dz_de°roy_bec_node_poﬁ
 (
dz_bec_node_mempoﬁ_cou¡
);

180 
	`dz_de°roy_bec_∑ge_poﬁ
 (
dz_bec_node_mempoﬁ_cou¡
);

181 
	`PRINT_MEMORY_FREED
(
	`BEC_COUNTER_U64_GET
(
bec_ígöe_mem‹y_ußge
), "BEC Engine");

182 
	`LOGBECF
(" ______________________________________________________ \n");

183 
	`LOGBECF
("| |\n");

184 
	`LOGBECF
("| Backend Cache (BEC) Engine Exit End |\n");

185 
	`LOGBECF
("|______________________________________________________|\n");

186 
RETURNS
;

187 
	}
}

188 
EXPORT_SYMBOL
(
dz_bec_ígöe_exô
);

190 
RVOID
 
	$dz_bec_¥o˚ed_pba_∑ge_add_ªad
(
PIOREQUEST
 
i‹eque°
)

192 
	`i‹eque°_gë
(
i‹eque°
);

193 
i‹eque°
->
i‹_bec_ªque°_ty≥
 = 
BEC_REQUEST_TYPE_ADD_READ
;

194 
i‹eque°
->
i‹_thªad_poﬁ
 = 
bec_thªad_poﬁ
;

195 
	`dz_q_i‹eque°
(
bec_thªad_poﬁ
, 
i‹eque°
);

196 
	}
}

197 
EXPORT_SYMBOL
(
dz_bec_¥o˚ed_pba_∑ge_add_ªad
);

199 
RVOID
 
	$dz_bec_¥o˚ed_pba_∑ge_add_wrôe
(
PIOREQUEST
 
i‹eque°
)

201 
	`i‹eque°_gë
(
i‹eque°
);

202 
i‹eque°
->
i‹_bec_ªque°_ty≥
 = 
BEC_REQUEST_TYPE_ADD_WRITE
;

204 
	`dz_q_i‹eque°
(
bec_thªad_poﬁ
, 
i‹eque°
);

205 
	}
}

206 
EXPORT_SYMBOL
(
dz_bec_¥o˚ed_pba_∑ge_add_wrôe
);

208 
RVOID
 
	$dz_bec_¥o˚ed_pba_∑ge_dñëe
(
PIOREQUEST
 
i‹eque°
)

214 
i‹eque°
->
i‹_bec_ªque°_ty≥
 = 
BEC_REQUEST_TYPE_DELETE
;

216 
	`dz_q_i‹eque°
(
bec_thªad_poﬁ
, 
i‹eque°
);

217 
	}
}

218 
EXPORT_SYMBOL
(
dz_bec_¥o˚ed_pba_∑ge_dñëe
);

220 
RVOID
 
	$dz_bec_io
(
PIOREQUEST
 
i‹eque°
)

222 
i‹eque°
->
i‹_bec_ªque°_ty≥
) {

223 
BEC_REQUEST_TYPE_ADD_READ
:

224 i‡(
dz_swôch_„c_ígöe
 =
DZ_DISABLED
) {

225 
	`dz_bec_pba_∑ge_add_ªad_wôhout_„c
(
i‹eque°
->
i‹_lba
, iorequest);

228 
	`dz_bec_pba_∑ge_add_ªad
(
i‹eque°
->
i‹_£˘‹
, i‹eque°, 
DZ_BEC_PAGE_SIZE
);

231 
BEC_REQUEST_TYPE_ADD_WRITE
:

232 
	`dz_bec_pba_∑ge_add_wrôe
(
i‹eque°
->
i‹_lba
, i‹eque°, 
DZ_BEC_PAGE_SIZE
);

235 
BEC_REQUEST_TYPE_DELETE
:

236 
	`dz_bec_pba_∑ge_dñëe
(
i‹eque°
->
i‹_£˘‹
, i‹eque°, 
DZ_BEC_PAGE_SIZE
);

241 
	`LOGBECW
("BEC Request Unknown\n");

244 
	}
}

246 
RINT
 
	$dz_bec_pba_∑ge_add_ªad
(
U64
 
pba_ödex
, 
PIOREQUEST
 
i‹eque°
, 
UINT
 
d©a_size
)

248 
PBIO
 
bio
 = 
i‹eque°
->
i‹_bio
;

249 
PPBA_CACHE_NODE
 
node
 = 
NULL
;

250 
INT
 
ªt
 = 
SUCCESS
;

252 
	`_ACQUIRE_BEC_LOCK_READ
();

253 
node
 = 
	`dz_bec_ødix_åì_node_föd
(
pba_ödex
);

254 i‡(
node
) {

255 i‡(
bio
->
bi_v˙t
 == 1) {

256 
	`COPY_SINGLE_PAGE_FROM_BIO
(
node
->
∑ge
, 
bio
);

258 
	`COPY_PAGE_FROM_BIO
(
node
->
∑ge
, 
bio
);

260 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

261 
	`i‹eque°_put
(
i‹eque°
);

262 
	`_RELEASE_BEC_LOCK_READ
();

263 
RETURNS
;

265 
	`_RELEASE_BEC_LOCK_READ
();

267 
node
 = 
	`dz_bec_node_Æloc
();

268 i‡(!
node
) {

269 
	`LOGBECW
("READ:All PBA CacheÇodesáreÉxhausted. TimeÅoÉvict LRUÖages\n");

270 
exô_Áûuª
;

272 
node
->
∑ge
 = 
	`dz_bec_∑ge_Æloc
();

273 i‡(!
node
->
∑ge
) {

274 
	`LOGBECW
("READ:All PBA CacheÖagesáreÉxhausted. TimeÅoÉvict LRUÖages\n");

275 
exô_Áûuª
;

278 i‡(
bio
->
bi_v˙t
 == 1) {

279 
	`COPY_SINGLE_PAGE_FROM_BIO
(
node
->
∑ge
, 
bio
);

281 
	`COPY_PAGE_FROM_BIO
(
node
->
∑ge
, 
bio
);

283 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

284 
	`i‹eque°_put
(
i‹eque°
);

285 
node
->
pba_ödex
 =Öba_index;

287 
	`_ACQUIRE_BEC_LOCK_WRITE
();

288 
ªt
 = 
	`dz_bec_ødix_åì_node_ö£π
(
node
);

289 i‡(
ªt
 =
SUCCESS
) {

290 
	`BEC_ADD_NODE_TO_LIST
(
node
);

291 
	`_RELEASE_BEC_LOCK_WRITE
();

293 
	`ATOMIC64_INC
(
bec_pba_∑ge_cou¡
);

296 i‡(
	`ATOMIC64_READ
(
bec_pba_∑ge_cou¡
Ë>
bec_size
) {

299 
	`LOGBEC
("READ:Invoking bec clear sinceÖage cache is full\n");

300 
	`dz_bec_¥öt_cou¡îs
();

302 
	`_ACQUIRE_BEC_LOCK_WRITE
();

303 
	`dz_bec_˛ór
(
bec_cutoff_nodes
);

304 
	`_RELEASE_BEC_LOCK_WRITE
();

306 i‡(
	`ødix_åì_¥ñﬂd
(
GFP_KERNEL
)) {

307 
	`LOGBECE
("READ:RadixÅreeÖreload failed\n");

311 
RETURNS
;

313 
	`_RELEASE_BEC_LOCK_WRITE
();

315 
	`LOGBECW
("READ:UnableÅoáddÇode intoÑadixÅree. InvokingÑadix_tree_preload\n");

316 
	`dz_bec_¥öt_cou¡îs
();

317 i‡(
	`ødix_åì_¥ñﬂd
(
GFP_KERNEL
)) {

319 
	`LOGBECE
("READ:RadixÅreeÖreload failed\n");

322 
RETURNF
;

324 
exô_Áûuª
:

325 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

326 
	`i‹eque°_put
(
i‹eque°
);

327 i‡(
node
) {

328 i‡(
node
->
∑ge
) {

329 
	`dz_bec_∑ge_‰ì
(
node
->
∑ge
);

331 
	`dz_bec_node_‰ì
(
node
);

333 
	`dz_bec_¥öt_cou¡îs
();

335 
	`_ACQUIRE_BEC_LOCK_WRITE
();

336 
	`dz_bec_˛ór
(
bec_cutoff_nodes
);

337 
	`_RELEASE_BEC_LOCK_WRITE
();

339 
RETURNF
;

340 
	}
}

349 
RINT
 
	$dz_bec_pba_∑ge_add_ªad_wôhout_„c
(
U64
 
pba_ödex
, 
PIOREQUEST
 
i‹eque°
)

351 
PPBA_CACHE_NODE
 
node
 = 
NULL
;

352 
PPAGE
 
ˇche_∑ge
 = 
i‹eque°
->
i‹_ˇche_∑ge
;

353 
INT
 
ªt
 = 
SUCCESS
;

355 
	`_ACQUIRE_BEC_LOCK_READ
();

356 
node
 = 
	`dz_bec_ødix_åì_node_föd
(
pba_ödex
);

357 
	`LOGBEC
("Insidêdz_bec_pba_∑ge_add_ªad_wôhout_„c:Çodê%p,Öba_ödex = %Œu\n", 
node
, 
pba_ödex
);

358 i‡(
node
) {

359 
	`dz_bec_∑ge_‰ì
(
node
->
∑ge
);

360 
node
->
∑ge
 = 
ˇche_∑ge
;

361 
	`_RELEASE_BEC_LOCK_READ
();

362 
	`i‹eque°_put
(
i‹eque°
);

363 
RETURNS
;

365 
	`_RELEASE_BEC_LOCK_READ
();

367 
	`LOGBEC
("AVERMA:BEC1\n");

369 
node
 = 
	`dz_bec_node_Æloc
();

370 i‡(!
node
) {

371 
	`dz_bec_∑ge_‰ì
(
ˇche_∑ge
);

372 
	`LOGBECW
("READ:All PBA CacheÇodesáreÉxhausted. TimeÅoÉvict LRUÖages\n");

373 
exô_Áûuª
;

375 
node
->
∑ge
 = 
ˇche_∑ge
;

377 
node
->
pba_ödex
 =Öba_index;

379 
	`LOGBEC
("AVERMA:BEC2\n");

380 
	`i‹eque°_put
(
i‹eque°
);

382 
	`_ACQUIRE_BEC_LOCK_WRITE
();

383 
ªt
 = 
	`dz_bec_ødix_åì_node_ö£π
(
node
);

384 
	`LOGBEC
("AVERMA:BEC3\n");

385 i‡(
ªt
 =
SUCCESS
) {

386 
	`BEC_ADD_NODE_TO_LIST
(
node
);

387 
	`_RELEASE_BEC_LOCK_WRITE
();

389 
	`ATOMIC64_INC
(
bec_pba_∑ge_cou¡
);

390 
	`LOGBEC
("Pageádded in Page Cache forÖba_index = %lli, TC = %li\n",

391 
node
->
pba_ödex
, 
	`ATOMIC64_READ
(
bec_pba_∑ge_cou¡
));

392 i‡(
	`ATOMIC64_READ
(
bec_pba_∑ge_cou¡
Ë>
bec_size
) {

395 
	`LOGBEC
("READ:Invoking bec clear sinceÖage cache is full\n");

396 
	`dz_bec_¥öt_cou¡îs
();

398 
	`_ACQUIRE_BEC_LOCK_WRITE
();

399 
	`dz_bec_˛ór
(
bec_cutoff_nodes
);

400 
	`_RELEASE_BEC_LOCK_WRITE
();

402 i‡(
	`ødix_åì_¥ñﬂd
(
GFP_KERNEL
)) {

403 
	`LOGBECE
("READ:RadixÅreeÖreload failed\n");

407 
RETURNS
;

409 
	`_RELEASE_BEC_LOCK_WRITE
();

411 
	`LOGBECW
("READ:UnableÅoáddÇode intoÑadixÅree. InvokingÑadix_tree_preload\n");

412 
	`dz_bec_¥öt_cou¡îs
();

413 i‡(
	`ødix_åì_¥ñﬂd
(
GFP_KERNEL
)) {

415 
	`LOGBECE
("READ:RadixÅreeÖreload failed\n");

418 
	`LOGBEC
("AVERMA:BEC4\n");

419 
RETURNF
;

421 
exô_Áûuª
:

422 
	`i‹eque°_put
(
i‹eque°
);

423 i‡(
node
) {

424 i‡(
node
->
∑ge
) {

425 
	`dz_bec_∑ge_‰ì
(
node
->
∑ge
);

427 
	`dz_bec_node_‰ì
(
node
);

429 
	`dz_bec_¥öt_cou¡îs
();

431 
	`_ACQUIRE_BEC_LOCK_WRITE
();

432 
	`dz_bec_˛ór
(
bec_cutoff_nodes
);

433 
	`_RELEASE_BEC_LOCK_WRITE
();

435 
RETURNF
;

436 
	}
}

441 
RINT
 
	$dz_bec_pba_∑ge_add_wrôe
(
U64
 
pba_ödex
, 
PIOREQUEST
 
i‹eque°
, 
UINT
 
d©a_size
)

443 
PPBA_CACHE_NODE
 
node
 = 
NULL
;

444 
INT
 
ªt
 = 
SUCCESS
;

446 
	`_ACQUIRE_BEC_LOCK_READ
();

447 
node
 = 
	`dz_bec_ødix_åì_node_föd
(
pba_ödex
);

448 i‡(
node
) {

449 
	`COPY_BUFFER_TO_PAGE
(
node
->
∑ge
, 
i‹eque°
->
i‹_bv_buf„r
);

450 
	`_RELEASE_BEC_LOCK_READ
();

451 
	`DZ_BEC_IOREQUEST_DONE
(
i‹eque°
);

452 
RETURNS
;

454 
	`_RELEASE_BEC_LOCK_READ
();

456 
node
 = 
	`dz_bec_node_Æloc
();

457 i‡(!
node
) {

458 
exô_hîe
:

459 
	`DZ_BEC_IOREQUEST_DONE
(
i‹eque°
);

460 
	`LOGBECW
("Write:All PBA CacheÇodesáreÉxhausted. TimeÅoÉvict LRUÖages\n");

461 
	`dz_bec_¥öt_cou¡îs
();

463 
	`_ACQUIRE_BEC_LOCK_WRITE
();

464 
	`dz_bec_˛ór
(
bec_cutoff_nodes
);

465 
	`_RELEASE_BEC_LOCK_WRITE
();

467 
RETURNF
;

469 
node
->
∑ge
 = 
	`dz_bec_∑ge_Æloc
();

470 i‡(!
node
->
∑ge
) {

471 
	`LOGBECW
("READ:All PBA CacheÖagesáreÉxhausted. TimeÅoÉvict LRUÖages\n");

472 
exô_hîe
;

476 
	`COPY_BUFFER_TO_PAGE
(
node
->
∑ge
, 
i‹eque°
->
i‹_bv_buf„r
);

477 
	`DZ_BEC_IOREQUEST_DONE
(
i‹eque°
);

478 
node
->
pba_ödex
 =Öba_index;

480 
	`_ACQUIRE_BEC_LOCK_WRITE
();

481 
ªt
 = 
	`dz_bec_ødix_åì_node_ö£π
(
node
);

482 i‡(
ªt
 =
SUCCESS
) {

483 
	`BEC_ADD_NODE_TO_LIST
(
node
);

484 
	`_RELEASE_BEC_LOCK_WRITE
();

486 
	`LOGD
("NodêaddedÅÿBEC Cache:pba_ödex = %Œi\n", 
pba_ödex
);

487 
	`ATOMIC64_INC
(
bec_pba_∑ge_cou¡
);

488 i‡(
	`ATOMIC64_READ
(
bec_pba_∑ge_cou¡
Ë>
bec_size
) {

489 
	`LOGBEC
("Write:Invoking bec clear sinceÖage cache is full\n");

490 
	`dz_bec_¥öt_cou¡îs
();

492 
	`_ACQUIRE_BEC_LOCK_WRITE
();

493 
	`dz_bec_˛ór
(
bec_cutoff_nodes
);

494 
	`_RELEASE_BEC_LOCK_WRITE
();

497 i‡(
	`ødix_åì_¥ñﬂd
(
GFP_KERNEL
)) {

498 
	`LOGBECE
("Write:RadixÅreeÖreload failed\n");

502 
RETURNS
;

504 
	`_RELEASE_BEC_LOCK_WRITE
();

506 
	`LOGBECW
("Write:UnableÅoáddÇode intoÑadixÅree. InvokingÑadix_tree_preload\n");

507 
	`dz_bec_∑ge_‰ì
(
node
->
∑ge
);

508 
	`dz_bec_node_‰ì
(
node
);

509 
	`dz_bec_¥öt_cou¡îs
();

510 i‡(
	`ødix_åì_¥ñﬂd
(
GFP_KERNEL
)) {

511 
	`LOGBECE
("Write:RadixÅreeÖreload failed\n");

514 
RETURNF
;

515 
	}
}

517 
RINT
 
	$dz_bec_pba_∑ge_dñëe
(
U64
 
pba_ödex
, 
PIOREQUEST
 
i‹eque°
 , 
UINT
 
d©a_size
)

519 
INT
 
ªt
 = 
SUCCESS
;

520 
	`_ACQUIRE_BEC_LOCK_WRITE
();

521 
ªt
 = 
	`dz_bec_ødix_åì_node_dñëe
(
i‹eque°
->
i‹_£˘‹
);

522 
	`_RELEASE_BEC_LOCK_WRITE
();

524 
	`i‹eque°_put
(
i‹eque°
);

525 i‡(
ªt
 =
SUCCESS
) {

526 
	`ATOMIC64_INC
(
bec_ˇche_dñëe
);

528 
RETURNS
;

529 
	}
}

533 
RINT
 
	$dz_bec_˛ór
(
INT
 
node_cou¡_cutoff
)

535 
PBEC_NODE
 
node
 = 
NULL
;

536 
INT
 
˛óªd_nodes
 = 0;

537 
INT
 
ªt
 = 
SUCCESS
;

538 
INT
 
cou¡
 = 0;

540 
	`LOGBEC
("Dñëög %dÖage†‰om bec\n", 
node_cou¡_cutoff
);

545  
cou¡
++ < 
node_cou¡_cutoff
) {

546 i‡(!
	`li°_em±y
(&
bec_li°_hód
)) {

547 
node
 = 
	`li°_fú°_íåy
(&
bec_li°_hód
, 
dz_bec_node_s
, 
pba_li°
);

548 i‡((
ªt
 = 
	`dz_bec_ødix_åì_node_dñëe
(
node
->
pba_ödex
))) {

550 
	`LOGBEC
("Page deletion failure forÖba_index = %lli, TC = %li\n",

551 
node
->
pba_ödex
, 
	`ATOMIC64_READ
(
bec_pba_∑ge_cou¡
));

552  -
EINVAL
;

554 
˛óªd_nodes
++;

562 i‡(!
ªt
) {

563  
BEC_CLEARED
;

565 i‡(
˛óªd_nodes
) {

566  
BEC_PARTIAL_CLEARED
;

568  
BEC_FAILED_TO_CLEAR
;

572 
	}
}

574 
BOOL
 
	$dz_bec_pba_∑ge_lookup
(
U64
 
pba_ödex
, 
PBIO
 
bio
)

576 
PBEC_NODE
 
node
 = 
NULL
;

577 
BOOL
 
°©us
 = 
TRUE
;

579 
	`_ACQUIRE_BEC_LOCK_READ
();

580 
node
 = 
	`dz_bec_ødix_åì_node_föd
(
pba_ödex
);

581 i‡(!
node
) {

582 
	`_RELEASE_BEC_LOCK_READ
();

584 
	`ATOMIC64_INC
(
bec_ˇche_miss
);

585  
FALSE
;

588 
	`_RELEASE_BEC_LOCK_READ
();

591 
	`COPY_PAGE_TO_BIO_ATOMIC
(
bio
, 
node
->
∑ge
, 
°©us
);

592 
	`ATOMIC64_INC
(
bec_ˇche_hô
);

593  
°©us
;

594 
	}
}

595 
EXPORT_SYMBOL
(
dz_bec_pba_∑ge_lookup
);

597 
	$dz_bec_ígöe_moduÀ_öô
()

599 
	`LOGBEC
(" ______________________________________________________ \n");

600 
	`LOGBEC
("| |\n");

601 
	`LOGBEC
("| ZAIDSTOR BEC Engine Module Loaded |\n");

602 
	`LOGBEC
("|______________________________________________________|\n");

604 
RETURNS
;

605 
	}
}

607 
	$dz_bec_ígöe_moduÀ_exô
()

609 
	`LOGBEC
(" ______________________________________________________ \n");

610 
	`LOGBEC
("| |\n");

611 
	`LOGBEC
("| ZAIDSTOR BEC Engine Module UnLoaded |\n");

612 
	`LOGBEC
("|______________________________________________________|\n");

613 
	}
}

615 
moduÀ_öô
(
dz_bec_ígöe_moduÀ_öô
);

616 
moduÀ_exô
(
dz_bec_ígöe_moduÀ_exô
);

617 
MODULE_LICENSE
(
DZ_MODULE_LICENSE
);

618 
MODULE_AUTHOR
(
DZ_MODULE_AUTHOR
);

	@bec_engine/bec_engine_mempool.c

9 
	~"bec_ígöe.h
"

10 
	~"mem‹y_poﬁ_ígöe.h
"

11 
	~"thªad_poﬁ_ígöe.h
"

12 
	~"¥ŸŸy≥s.h
"

14 
	#NUMBER_OF_BEC_NODE_POOL_ENTRIES
 
_128K


	)

15 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

16 
INT
 
dz_pba_∑ge_mempoﬁ_cou¡
;

18 
kmem_ˇche
 *
	gdz_bec_node_ˇche
 = 
NULL
;

19 
PMEMPOOL
 
	gdz_bec_node_mempoﬁ
 = 
NULL
;

20 
PMEMPOOL
 
	gdz_bec_∑ge_mempoﬁ
 = 
NULL
;

23 
RINT
 
	$dz_¸óã_bec_node_poﬁ
(
SIZE
 
num_nodes
)

25 
	#DZ_UNIT_SIZE
 ((
dz_bec_node_s
))

	)

27 
dz_bec_node_ˇche
 = 
	`KMEM_CACHE
(
dz_bec_node_s
, 0);

28 
dz_bec_node_mempoﬁ
 = 
	`mempoﬁ_¸óã_¶ab_poﬁ
(
num_nodes
, 
dz_bec_node_ˇche
);

29 i‡(
dz_bec_node_mempoﬁ
) {

30 
	`LOGBEC
("BEC Nodêpoﬁ cª©ed f‹ %dÉ¡rõs\n", (
INT
)
num_nodes
);

31 
	`log_mem‹y_ußge
(
num_nodes
 * 
DZ_UNIT_SIZE
);

32 
RETURNS
;

34 
	`LOGBECE
("BEC NodeÖool creation failed\n");

35 
RETURNF
;

38 #unde‡
DZ_UNIT_SIZE


39 
	}
}

41 
RVOID
 
	$dz_de°roy_bec_node_poﬁ
(
SIZE
 
num_nodes
)

43 
	#DZ_UNIT_SIZE
 ((
dz_bec_node_s
))

	)

44 
	`LOGBEC
("Destroying BEC Node Pool\n");

45 i‡(
dz_bec_node_mempoﬁ
) {

46 
	`mempoﬁ_de°roy
(
dz_bec_node_mempoﬁ
);

47 
	`kmem_ˇche_de°roy
(
dz_bec_node_ˇche
);

48 
	`ªdu˚_mem‹y_ußge
(
num_nodes
 * 
DZ_UNIT_SIZE
);

50 
	`LOGBEC
("dz_bec_node_mempool isálready NULL\n");

52 #unde‡
DZ_UNIT_SIZE


53 
	}
}

55 
RPVOID
 
	$dz_bec_node_Æloc
(
VOID
)

57 
PVOID
 
±r
 = 
NULL
;

58 i‡(!
dz_bec_node_mempoﬁ
Ë 
NULL
;

59 
±r
 = 
	`mempoﬁ_Æloc
(
dz_bec_node_mempoﬁ
, 
GFP_NOIO
);

60 i‡(
±r
) {

61 
	`BEC_COUNTER_ATOMIC64_INC
(
bec_node_Æloc_˙t
);

62  
±r
;

65  
NULL
;

67 
	}
}

69 
RVOID
 
	$dz_bec_node_‰ì
(
PBEC_NODE
 
node
)

71 i‡(!
node
) {

72 
	`LOGBECW
("node is NULL\n");

75 
	`BEC_COUNTER_ATOMIC64_INC
(
bec_node_‰ì_˙t
);

76 
	`mempoﬁ_‰ì
(
node
, 
dz_bec_node_mempoﬁ
);

77 
	}
}

80 
RINT
 
	$dz_¸óã_bec_∑ge_poﬁ
(
SIZE
 
num_∑ges
)

82 
	#DZ_UNIT_SIZE
 ( 
PAGE_SIZE
 )

	)

84 
dz_bec_∑ge_mempoﬁ
 = 
	`mempoﬁ_¸óã_∑ge_poﬁ
(
num_∑ges
, 0);

85 i‡(
dz_bec_∑ge_mempoﬁ
) {

86 
	`LOGBEC
("PB Pagêpoﬁ cª©ed f‹ %dÖages\n", (
INT
)
num_∑ges
);

87 
	`log_mem‹y_ußge
(
num_∑ges
 * 
DZ_UNIT_SIZE
);

88 
RETURNS
;

90 
	`LOGBECE
("PB PageÖool creation failed\n");

91 
RETURNF
;

94 #unde‡
DZ_UNIT_SIZE


95 
	}
}

97 
RVOID
 
	$dz_de°roy_bec_∑ge_poﬁ
(
SIZE
 
num_∑ges
)

99 
	`LOGBEC
("Destroying PB Page Pool\n");

100 i‡(
dz_bec_∑ge_mempoﬁ
) {

101 
	`mempoﬁ_de°roy
(
dz_bec_∑ge_mempoﬁ
);

102 
	`ªdu˚_mem‹y_ußge
(
num_∑ges
 * 
PAGE_SIZE
);

104 
	`LOGBEC
("dz_bec_page_mempool isálready NULL\n");

106 
	}
}

108 
RPVOID
 
	$dz_bec_∑ge_Æloc
(
VOID
)

110 
PVOID
 
±r
 = 
NULL
;

111 i‡(!
dz_bec_∑ge_mempoﬁ
Ë 
NULL
;

112 
±r
 = 
	`mempoﬁ_Æloc
(
dz_bec_∑ge_mempoﬁ
, 
GFP_NOIO
);

113 i‡(
±r
) {

114 
	`BEC_COUNTER_ATOMIC64_INC
(
bec_∑ge_Æloc_˙t
);

115  
±r
;

117  
NULL
;

119 
	}
}

120 
EXPORT_SYMBOL
(
dz_bec_∑ge_Æloc
);

122 
RVOID
 
	$dz_bec_∑ge_‰ì
(
PPAGE
 
∑ge
)

124 i‡(!
∑ge
) {

125 
	`LOGBECW
("Page is NULL\n");

128 
	`BEC_COUNTER_ATOMIC64_INC
(
bec_∑ge_‰ì_˙t
);

129 
	`mempoﬁ_‰ì
(
∑ge
, 
dz_bec_∑ge_mempoﬁ
);

130 
	}
}

131 
EXPORT_SYMBOL
(
dz_bec_∑ge_‰ì
);

	@bec_engine/bec_engine_radix_tree.c

9 
	~"bec_ígöe.h
"

10 
	~"mem‹y_poﬁ_ígöe.h
"

11 
	~"thªad_poﬁ_ígöe.h
"

12 
	~"¥ŸŸy≥s.h
"

14 
PPBA_BLOCK
 
pba_èbÀ
;

15 
USHORT
 
num_bec_thªads
;

16 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

17 
INT
 
dz_pba_∑ge_mempoﬁ_cou¡
;

19 
LIST_HEAD
 
bec_li°_hód
;

20 
PRADIX_TREE_ROOT
 
bec_ødix_åì
;

22 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

23 
ATOMIC64
 
pba_ˇche_job_cou¡
;

24 
INT
 
bec_cutoff_nodes
;

26 
ULONG
 
bec_size
;

27 
rw_£m≠h‹e
 
bec_lock
;

29 
PBEC_NODE
 
	$dz_bec_ødix_åì_node_föd
(
U64
 
pba_ödex
)

31 
PBEC_NODE
 
node
 = 
NULL
;

33 
node
 = 
	`ødix_åì_lookup
(
bec_ødix_åì
, 
pba_ödex
);

34 i‡(
node
) {

36 
	`li°_dñ
(&
node
->
pba_li°
);

37 
	`BEC_ADD_NODE_TO_LIST
(
node
);

40  
node
;

41 
	}
}

43 
RINT
 
	$dz_bec_ødix_åì_node_ö£π
(
PPBA_CACHE_NODE
 
node_íåy
)

45  
	`ødix_åì_ö£π
(
bec_ødix_åì
, 
node_íåy
->
pba_ödex
,Çode_entry);

46 
	}
}

48 
RINT
 
	$dz_bec_ødix_åì_node_dñëe
(
U64
 
pba_ödex
)

50 
PBEC_NODE
 
node
 = 
NULL
;

51 
node
 = 
	`ødix_åì_dñëe
(
bec_ødix_åì
, 
pba_ödex
);

52 i‡(
node
) {

53 
	`li°_dñ
(&
node
->
pba_li°
);

54 
	`dz_bec_∑ge_‰ì
(
node
->
∑ge
);

55 
	`dz_bec_node_‰ì
(
node
);

56 
	`ATOMIC64_DEC
(
bec_pba_∑ge_cou¡
);

57 
	`LOGBEC
("Page deleted from Page Cache forÖba_index = %lli, TC = %li\n",

58 
node
->
pba_ödex
, 
	`ATOMIC64_READ
(
bec_pba_∑ge_cou¡
));

59 
RETURNS
;

61 
	`LOGBECW
("U«bÀÅÿdñëê∑gê@pba_ödex %Œi. Look†likêPagênŸ found\n", 
pba_ödex
);

63 
RETURNF
;

64 
	}
}

	@bec_engine/bec_engine_sysfs_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

18 
INT
 
dz_swôch_„c_ígöe
;

19 
INT
 
dz_swôch_bec_ígöe
;

20 
INT
 
dz_swôch_dedu≥_ígöe
;

21 
INT
 
dz_swôch_Æignmít_ígöe
;

23 
USHORT
 
num_bec_thªads
;

24 
ULONG
 
bec_size
;

25 
INT
 
bec_cutoff_≥r˚¡
;

29 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

30 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

35 
SIZE
 
TARGET_DEVICE_SIZE
;

37 
NAME
 
DATA_DISK_DEVICE_NAME
;

39 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

40 
ATOMIC64
 
bec_ˇche_hô
;

41 
ATOMIC64
 
bec_ˇche_miss
;

42 
ATOMIC64
 
bec_ˇche_dñëe
;

43 
ULONG
 
bec_size
;

44 
INT
 
bec_cutoff_nodes
;

45 
INT
 
bec_cutoff_≥r˚¡
;

46 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

48 
PSUPERBLOCK
 
su≥rblock
;

50 
CHAR
 
avm_sysfs_íåy_gë_bec_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
];

51 
INT
 
	$avm_gë_bec_cou¡îs
(
CHAR
 *
buf
)

53 
INT
 
cou¡
 = 0;

54 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_bec_cou¡îs
;

55 
	`mem£t
(
avm_sysfs_íåy_gë_bec_cou¡îs
, 0, 
DZ_SYSFS_PAGE_SIZE
);

56 
	`mem˝y
(
±r
, "\n", 1);

57 
±r
 += 1;

58 
±r
 +
	`•rötf
(ptr, "=================================\n");

59 
±r
 +
	`•rötf
(ptr, "BEC ENGINE COUNTERS\n");

60 
±r
 +
	`•rötf
(ptr, "=================================\n");

61 i‡(!
su≥rblock
) {

62 
±r
 +
	`•rötf
(ptr, "Superblock is NULL");

66 i‡(
dz_swôch_bec_ígöe
 =
DZ_DISABLED
) {

67 
±r
 +
	`•rötf
(ptr, "BEC ENGINE DISABLED");

72 
cou¡
 = 
	`•rötf
(
±r
,

81 (
U64
)
	`READ_COUNTER
(
bec_pba_∑ge_cou¡
),

82 (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_hô
),

83 (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_miss
),

84 (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_dñëe
),

85 (
U64
)
bec_size
,

86 (
U64
)
bec_cutoff_nodes
,

87 (
U64
)
bec_cutoff_≥r˚¡
,

88 (
U64
)
dz_bec_node_mempoﬁ_cou¡
);

93 
	`LOGD
("Buf„∏Byã†u£d = %d\n", 
cou¡
);

96 
	}
}

99 
U64
 
avm_sysfs_íåy_gë_£t_swôch_bec
;

100 
INT
 
	$avm_gë_swôch_bec
(
CHAR
 *
buf
)

102 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_bec
, 
dz_swôch_bec_ígöe
);

103 
	}
}

104 
INT
 
	$avm_£t_swôch_bec
(
U64
 
buf
)

106 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_bec_ígöe
, 
buf
);

107 
	}
}

109 
U64
 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size
;

110 
INT
 
	$avm_gë_tu«bÀ_bec_size
(
CHAR
 *
buf
)

112 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size
, 
dz_swôch_bec_ígöe
);

113 
	}
}

115 
INT
 
	$avm_£t_tu«bÀ_bec_size
(
U64
 
buf
)

117 
	`DZ_SYS_SET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size
, 
buf
);

118 
	}
}

120 
U64
 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads
;

121 
INT
 
	$avm_gë_tu«bÀ_bec_thªads
(
CHAR
 *
buf
)

123 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads
, 
num_bec_thªads
);

124 
	}
}

126 
INT
 
	$avm_£t_tu«bÀ_bec_thªads
(
U64
 
buf
)

128 
	`DZ_SYS_SET_SWITCH
(
num_bec_thªads
, 
buf
);

129 
	}
}

131 
U64
 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï
;

132 
INT
 
	$avm_gë_tu«bÀ_bec_ï
(
CHAR
 *
buf
)

134 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï
, 
bec_cutoff_≥r˚¡
);

135 
	}
}

137 
INT
 
	$avm_£t_tu«bÀ_bec_ï
(
U64
 
buf
)

139 
	`DZ_SYS_SET_SWITCH
(
bec_cutoff_≥r˚¡
, 
buf
);

140 
	}
}

	@bec_engine/datumsoft_zaidstor_avm_4_B_bec_engine_module.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

6 
MODULE_INFO
(
«me
, 
KBUILD_MODNAME
);

8 
__visibÀ
 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
KBUILD_MODNAME
,

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

15 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

18 #ifde‡
CONFIG_RETPOLINE


19 
MODULE_INFO
(
ªçﬁöe
, "Y");

22 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

23 
__u£d


24 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

25 { 0xe783361, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

26 { 0x53326531, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_Æloc_∑ges
) },

27 { 0x94d683f, 
__VMLINUX_SYMBOL_STR
(
kmem_ˇche_de°roy
) },

28 { 0xa9abbfb6, 
__VMLINUX_SYMBOL_STR
(
bec_cutoff_≥r˚¡
) },

29 { 0xe198d8af, 
__VMLINUX_SYMBOL_STR
(
dz_avm_log_fûe_wrôe
) },

30 { 0xa598d2fb, 
__VMLINUX_SYMBOL_STR
(
pdz_bec_cou¡îs
) },

31 { 0x9edbbbØ, 
__VMLINUX_SYMBOL_STR
(
ªdu˚_mem‹y_ußge
) },

32 { 0x382ddbd1, 
__VMLINUX_SYMBOL_STR
(
num_bec_thªads
) },

33 { 0x75afd1db, 
__VMLINUX_SYMBOL_STR
(
log_mem‹y_ußge
) },

34 { 0xc3d2c1fd, 
__VMLINUX_SYMBOL_STR
(
dz_mem‹y_ªdu˘i⁄
) },

35 { 0x4c7a8Áe, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_de°roy
) },

36 { 0x˚935a56, 
__VMLINUX_SYMBOL_STR
(
dz_k‰ì
) },

37 { 0x8631ddaf, 
__VMLINUX_SYMBOL_STR
(
_ACQUIRE_BEC_LOCK_WRITE
) },

38 { 0x7a2af7b4, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

39 { 0x97651e6c, 
__VMLINUX_SYMBOL_STR
(
vmemm≠_ba£
) },

40 { 0x32óc50b, 
__VMLINUX_SYMBOL_STR
(
bec_ødix_åì
) },

41 { 0x183Á88b, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_Æloc_¶ab
) },

42 { 0x26313„f, 
__VMLINUX_SYMBOL_STR
(
bec_thªad_poﬁ
) },

43 { 0xf2a2c67d, 
__VMLINUX_SYMBOL_STR
(
dz_de°roy_thªad_poﬁ
) },

44 { 0x446c4f88, 
__VMLINUX_SYMBOL_STR
(
bec_ˇche_dñëe
) },

45 { 0x4ff67Áb, 
__VMLINUX_SYMBOL_STR
(
cuºít_èsk
) },

46 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

47 { 0xa1c76e0a, 
__VMLINUX_SYMBOL_STR
(
_c⁄d_ªsched
) },

48 { 0xe9eb9c31, 
__VMLINUX_SYMBOL_STR
(
bec_size
) },

49 { 0xÁ89cf66, 
__VMLINUX_SYMBOL_STR
(
bec_ˇche_miss
) },

50 { 0xd985dc99, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_‰ì_∑ges
) },

51 { 0x8a99a016, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_‰ì_¶ab
) },

52 { 0xc25419c9, 
__VMLINUX_SYMBOL_STR
(
bio_ídio
) },

53 { 0x7e880422, 
__VMLINUX_SYMBOL_STR
(
ødix_åì_dñëe
) },

54 { 0xeÁ08cc4, 
__VMLINUX_SYMBOL_STR
(
bio_put
) },

55 { 0x36513a3, 
__VMLINUX_SYMBOL_STR
(
bec_ˇche_hô
) },

56 { 0x7cd8d75e, 
__VMLINUX_SYMBOL_STR
(
∑ge_off£t_ba£
) },

57 { 0xd24da7de, 
__VMLINUX_SYMBOL_STR
(
dz_gë_mem‹y_ußge
) },

58 { 0xc25c3c0d, 
__VMLINUX_SYMBOL_STR
(
bec_li°_hód
) },

59 { 0x4cd73b7e, 
__VMLINUX_SYMBOL_STR
(
bec_cutoff_nodes
) },

60 { 0x1d1dc„e, 
__VMLINUX_SYMBOL_STR
(
dz_mem‹y_c⁄sum±i⁄
) },

61 { 0x9a6f2471, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_Æloc
) },

62 { 0x4a9865a8, 
__VMLINUX_SYMBOL_STR
(
dz_¸óã_thªad_poﬁ
) },

63 { 0x519b2bd6, 
__VMLINUX_SYMBOL_STR
(
BEC_THREAD_POOL_SHORT_NAME
) },

64 { 0x56de9a08, 
__VMLINUX_SYMBOL_STR
(
dz_swôch_„c_ígöe
) },

65 { 0x4d834179, 
__VMLINUX_SYMBOL_STR
(
BEC_THREAD_POOL_NAME
) },

66 { 0x696727a5, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_¸óã
) },

67 { 0x6b2dc060, 
__VMLINUX_SYMBOL_STR
(
dump_°ack
) },

68 { 0xeÁ7d515, 
__VMLINUX_SYMBOL_STR
(
bec_pba_∑ge_cou¡
) },

69 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

70 { 0xec018b66, 
__VMLINUX_SYMBOL_STR
(
__ødix_åì_ö£π
) },

71 { 0xe5c6´21, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_‰ì
) },

72 { 0x92f41a66, 
__VMLINUX_SYMBOL_STR
(
_RELEASE_BEC_LOCK_WRITE
) },

73 { 0x961d8335, 
__VMLINUX_SYMBOL_STR
(
kmem_ˇche_¸óã
) },

74 { 0x3f8˚405, 
__VMLINUX_SYMBOL_STR
(
dz_q_i‹eque°
) },

75 { 0x9754ec10, 
__VMLINUX_SYMBOL_STR
(
ødix_åì_¥ñﬂd
) },

76 { 0xe607e98a, 
__VMLINUX_SYMBOL_STR
(
dz_swôch_bec_ígöe
) },

77 { 0x92a6f160, 
__VMLINUX_SYMBOL_STR
(
ødix_åì_lookup
) },

78 { 0x74b99461, 
__VMLINUX_SYMBOL_STR
(
i‹eque°_gë
) },

79 { 0xbdab0f63, 
__VMLINUX_SYMBOL_STR
(
dz_bec_node_mempoﬁ_cou¡
) },

80 { 0x64865f89, 
__VMLINUX_SYMBOL_STR
(
_ACQUIRE_BEC_LOCK_READ
) },

81 { 0x775a6˚6, 
__VMLINUX_SYMBOL_STR
(
i‹eque°_put
) },

82 { 0x´bd92d, 
__VMLINUX_SYMBOL_STR
(
dz_kmÆloc
) },

83 { 0xa01dd995, 
__VMLINUX_SYMBOL_STR
(
_RELEASE_BEC_LOCK_READ
) },

86 c⁄° 
	g__moduÀ_dïíds
[]

87 
__u£d


88 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

92 
MODULE_INFO
(
§cvîsi⁄
, "DC7EF8799CEEA2F459EC778");

	@dedupe_engine/datumsoft_zaidstor_avm_6_B_dedupe_engine_module.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

6 
MODULE_INFO
(
«me
, 
KBUILD_MODNAME
);

8 
__visibÀ
 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
KBUILD_MODNAME
,

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

15 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

18 #ifde‡
CONFIG_RETPOLINE


19 
MODULE_INFO
(
ªçﬁöe
, "Y");

22 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

23 
__u£d


24 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

25 { 0xe783361, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

26 { 0x9f9a3495, 
__VMLINUX_SYMBOL_STR
(
dz_bio_∑ge_‰ì
) },

27 { 0x94d683f, 
__VMLINUX_SYMBOL_STR
(
kmem_ˇche_de°roy
) },

28 { 0x7Ødc27a, 
__VMLINUX_SYMBOL_STR
(
DEDUPE_WRITE_THREAD_POOL_SHORT_NAME
) },

29 { 0xf9a482f9, 
__VMLINUX_SYMBOL_STR
(
m¶ìp
) },

30 { 0xe2decbaf, 
__VMLINUX_SYMBOL_STR
(
dz_gíî©e_hash
) },

31 { 0xd6ì688f, 
__VMLINUX_SYMBOL_STR
(
vmÆloc
) },

32 { 0x672edad8, 
__VMLINUX_SYMBOL_STR
(
pv_lock_›s
) },

33 { 0xe198d8af, 
__VMLINUX_SYMBOL_STR
(
dz_avm_log_fûe_wrôe
) },

34 { 0xd3Ø8b4f, 
__VMLINUX_SYMBOL_STR
(
dedu≥_zî€d_out_∑ge_ªads
) },

35 { 0x2570ˇe1, 
__VMLINUX_SYMBOL_STR
(
_RELEASE_LBA_LOCK_READ
) },

36 { 0x754d539c, 
__VMLINUX_SYMBOL_STR
(
°æí
) },

37 { 0x5e1f6b50, 
__VMLINUX_SYMBOL_STR
(
dz_bio_Æloc
) },

38 { 0x9a19868e, 
__VMLINUX_SYMBOL_STR
(
dedu≥_tŸ_physiˇl_•a˚
) },

39 { 0x9edbbbØ, 
__VMLINUX_SYMBOL_STR
(
ªdu˚_mem‹y_ußge
) },

40 { 0xb2d2ec6c, 
__VMLINUX_SYMBOL_STR
(
dedu≥_disk_ªads
) },

41 { 0xef6832„, 
__VMLINUX_SYMBOL_STR
(
lba_èbÀ_size
) },

42 { 0x9a3d333d, 
__VMLINUX_SYMBOL_STR
(
TARGET_DEVICE_SIZE
) },

43 { 0x86ab69f2, 
__VMLINUX_SYMBOL_STR
(
dedu≥_cur_physiˇl_•a˚
) },

44 { 0x75afd1db, 
__VMLINUX_SYMBOL_STR
(
log_mem‹y_ußge
) },

45 { 0xc3d2c1fd, 
__VMLINUX_SYMBOL_STR
(
dz_mem‹y_ªdu˘i⁄
) },

46 { 0x4c7a8Áe, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_de°roy
) },

47 { 0x´eff187, 
__VMLINUX_SYMBOL_STR
(
dedu≥_hash_èbÀ
) },

48 { 0x˚935a56, 
__VMLINUX_SYMBOL_STR
(
dz_k‰ì
) },

49 { 0xdf3df2da, 
__VMLINUX_SYMBOL_STR
(
dedu≥_dñëed_íåõs
) },

50 { 0x5bab484b, 
__VMLINUX_SYMBOL_STR
(
_ACQUIRE_PBA_LOCK
) },

51 { 0xc57904d4, 
__VMLINUX_SYMBOL_STR
(
dz_swôch_dedu≥_ígöe
) },

52 { 0x964b32b0, 
__VMLINUX_SYMBOL_STR
(
dz_ªad_∑ge_sync
) },

53 { 0xb686300d, 
__VMLINUX_SYMBOL_STR
(
_RELEASE_LBA_LOCK_WRITE
) },

54 { 0x999e8297, 
__VMLINUX_SYMBOL_STR
(
v‰ì
) },

55 { 0x118950c1, 
__VMLINUX_SYMBOL_STR
(
dz_bec_¥o˚ed_pba_∑ge_dñëe
) },

56 { 0x7a2af7b4, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

57 { 0xb175e60d, 
__VMLINUX_SYMBOL_STR
(
dz_wrôe_∑ge_Æloc
) },

58 { 0x97651e6c, 
__VMLINUX_SYMBOL_STR
(
vmemm≠_ba£
) },

59 { 0x4eb˚310, 
__VMLINUX_SYMBOL_STR
(
numbî_of_l⁄gs_f‹_lba
) },

60 { 0x2266e6c6, 
__VMLINUX_SYMBOL_STR
(
DEDUPE_READ_THREAD_POOL_NAME
) },

61 { 0x56bc3d41, 
__VMLINUX_SYMBOL_STR
(
_DZ_DDE_RELEASE_HBA_LOCK
) },

62 { 0x3f4b90ba, 
__VMLINUX_SYMBOL_STR
(
gpba_bôm≠
) },

63 { 0xa6682fdd, 
__VMLINUX_SYMBOL_STR
(
__öô_waôqueue_hód
) },

64 { 0x183Á88b, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_Æloc_¶ab
) },

65 { 0xb1904934, 
__VMLINUX_SYMBOL_STR
(
waô_f‹_com∂ëi⁄
) },

66 { 0x638b14e6, 
__VMLINUX_SYMBOL_STR
(
dedu≥_num_thªads
) },

67 { 0xfb578fc5, 
__VMLINUX_SYMBOL_STR
(
mem£t
) },

68 { 0xf2a2c67d, 
__VMLINUX_SYMBOL_STR
(
dz_de°roy_thªad_poﬁ
) },

69 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

70 { 0x449ad0a7, 
__VMLINUX_SYMBOL_STR
(
memcmp
) },

71 { 0x42f23226, 
__VMLINUX_SYMBOL_STR
(
bio_add_∑ge
) },

72 { 0x48b52b5d, 
__VMLINUX_SYMBOL_STR
(
dedu≥_pba_èbÀ
) },

73 { 0x7089ad04, 
__VMLINUX_SYMBOL_STR
(
dedu≥_lba_èbÀ
) },

74 { 0xa1c76e0a, 
__VMLINUX_SYMBOL_STR
(
_c⁄d_ªsched
) },

75 { 0xìff0455, 
__VMLINUX_SYMBOL_STR
(
pba_èbÀ_size
) },

76 { 0x1a58118e, 
__VMLINUX_SYMBOL_STR
(
_ACQUIRE_LBA_LOCK_READ
) },

77 { 0xd3db4„9, 
__VMLINUX_SYMBOL_STR
(
gíîic_make_ªque°
) },

78 { 0x8a99a016, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_‰ì_¶ab
) },

79 { 0x92710dda, 
__VMLINUX_SYMBOL_STR
(
numbî_of_l⁄gs_f‹_gpba
) },

80 { 0xc25419c9, 
__VMLINUX_SYMBOL_STR
(
bio_ídio
) },

81 { 0xeÁ08cc4, 
__VMLINUX_SYMBOL_STR
(
bio_put
) },

82 { 0xf11543ff, 
__VMLINUX_SYMBOL_STR
(
föd_fú°_zîo_bô
) },

83 { 0x4a79de8a, 
__VMLINUX_SYMBOL_STR
(
dz_mëad©a_upd©e
) },

84 { 0x7cd8d75e, 
__VMLINUX_SYMBOL_STR
(
∑ge_off£t_ba£
) },

85 { 0x23844˚c, 
__VMLINUX_SYMBOL_STR
(
dz_bec_¥o˚ed_pba_∑ge_add_ªad
) },

86 { 0xd24da7de, 
__VMLINUX_SYMBOL_STR
(
dz_gë_mem‹y_ußge
) },

87 { 0x1d1dc„e, 
__VMLINUX_SYMBOL_STR
(
dz_mem‹y_c⁄sum±i⁄
) },

88 { 0x9a6f2471, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_Æloc
) },

89 { 0xdb1a1e40, 
__VMLINUX_SYMBOL_STR
(
pba_bôm≠
) },

90 { 0x4a9865a8, 
__VMLINUX_SYMBOL_STR
(
dz_¸óã_thªad_poﬁ
) },

91 { 0x772´b24, 
__VMLINUX_SYMBOL_STR
(
dz_wrôe_biod⁄e_sync
) },

92 { 0x5635a60a, 
__VMLINUX_SYMBOL_STR
(
vmÆloc_u£r
) },

93 { 0x3c3825b1, 
__VMLINUX_SYMBOL_STR
(
pdz_dde_cou¡îs
) },

94 { 0x´569e6c, 
__VMLINUX_SYMBOL_STR
(
dz_∑ge_‰ì
) },

95 { 0x1c0529b1, 
__VMLINUX_SYMBOL_STR
(
dz_io_‰ì
) },

96 { 0xb7a0a67e, 
__VMLINUX_SYMBOL_STR
(
¥öt_biom
) },

97 { 0x696727a5, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_¸óã
) },

98 { 0x6b2dc060, 
__VMLINUX_SYMBOL_STR
(
dump_°ack
) },

99 { 0x7ff6484c, 
__VMLINUX_SYMBOL_STR
(
lba_bôm≠
) },

100 { 0xf5ef1c13, 
__VMLINUX_SYMBOL_STR
(
_ACQUIRE_HBA_LOCK
) },

101 { 0x3c525f53, 
__VMLINUX_SYMBOL_STR
(
dedu≥_ˇche_hôs
) },

102 { 0x54730b37, 
__VMLINUX_SYMBOL_STR
(
numbî_of_l⁄gs_f‹_pba
) },

103 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

104 { 0xe5c6´21, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_‰ì
) },

105 { 0x56321´2, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock
) },

106 { 0x8f5136ef, 
__VMLINUX_SYMBOL_STR
(
hash_èbÀ_size
) },

107 { 0x961d8335, 
__VMLINUX_SYMBOL_STR
(
kmem_ˇche_¸óã
) },

108 { 0x6bb4641f, 
__VMLINUX_SYMBOL_STR
(
_ACQUIRE_LBA_LOCK_WRITE
) },

109 { 0xc238146f, 
__VMLINUX_SYMBOL_STR
(
dz_bec_pba_∑ge_lookup
) },

110 { 0x5c6d5076, 
__VMLINUX_SYMBOL_STR
(
dz_io_Æloc
) },

111 { 0xda2af4e7, 
__VMLINUX_SYMBOL_STR
(
DEDUPE_READ_THREAD_POOL_SHORT_NAME
) },

112 { 0x273a080c, 
__VMLINUX_SYMBOL_STR
(
DEDUPE_WRITE_THREAD_POOL_NAME
) },

113 { 0x2ac56908, 
__VMLINUX_SYMBOL_STR
(
DATA_DISK_DEVICE
) },

114 { 0x„94db38, 
__VMLINUX_SYMBOL_STR
(
dedu≥_cur_du∂iˇã_•a˚
) },

115 { 0x2b000831, 
__VMLINUX_SYMBOL_STR
(
_DZ_DDE_RELEASE_PBA_LOCK
) },

116 { 0x74b99461, 
__VMLINUX_SYMBOL_STR
(
i‹eque°_gë
) },

117 { 0x„50d590, 
__VMLINUX_SYMBOL_STR
(
dz_c⁄vît_lba_to_£˘‹
) },

118 { 0x58cc04a3, 
__VMLINUX_SYMBOL_STR
(
dedu≥_cur_logiˇl_•a˚
) },

119 { 0x28318305, 
__VMLINUX_SYMBOL_STR
(
¢¥ötf
) },

120 { 0x86421af2, 
__VMLINUX_SYMBOL_STR
(
dedu≥_tŸ_logiˇl_•a˚
) },

121 { 0x775a6˚6, 
__VMLINUX_SYMBOL_STR
(
i‹eque°_put
) },

122 { 0x´9629e2, 
__VMLINUX_SYMBOL_STR
(
dz_bio_∑ge_Æloc
) },

123 { 0x´bd92d, 
__VMLINUX_SYMBOL_STR
(
dz_kmÆloc
) },

124 { 0x72Ø95db, 
__VMLINUX_SYMBOL_STR
(
dz_ªad_biod⁄e_sync
) },

125 { 0x865e055, 
__VMLINUX_SYMBOL_STR
(
dedu≥_disk_wrôes
) },

128 c⁄° 
	g__moduÀ_dïíds
[]

129 
__u£d


130 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

134 
MODULE_INFO
(
§cvîsi⁄
, "748D8058EE06FDEC13C666A");

	@dedupe_engine/dedupe_engine.c

9 
	~"dedu≥_ígöe.h
"

10 
	~"¥ŸŸy≥s.h
"

12 
INT
 
dz_swôch_„c_ígöe
;

13 
INT
 
dz_swôch_dedu≥_ígöe
;

14 
SIZE
 
TARGET_DEVICE_SIZE
;

15 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

17 
PBLOCK_DEVICE
 
avm_mëad©a_bdev
;

18 
PMD_LOCK
 
md_lock_èbÀ
;

20 
U32
 
numbî_of_l⁄gs_f‹_pba
;

21 
U32
 
numbî_of_l⁄gs_f‹_lba
;

22 
U32
 
numbî_of_l⁄gs_f‹_gpba
;

23 
INT
 
dz_hash_mempoﬁ_cou¡
;

24 
INT
 
dz_dedu≥_mempoﬁ_cou¡
;

26 
U64
 
pba_èbÀ_size
;

27 
U64
 
hash_èbÀ_size
;

28 
U64
 
lba_èbÀ_size
;

30 
PPBA_BLOCK
 
dedu≥_pba_èbÀ
;

31 
PHASH_BLOCK
 
dedu≥_hash_èbÀ
;

32 
PLBA_BLOCK
 
dedu≥_lba_èbÀ
;

34 
SPINLOCK
 
	glba_èbÀ_lock
;

35 
SPINLOCK
 
	ghash_èbÀ_lock
;

36 
SPINLOCK
 
	gpba_èbÀ_lock
;

38 
BITMAP
 
pba_bôm≠
;

39 
BITMAP
 
gpba_bôm≠
;

40 
BITMAP
 
lba_bôm≠
;

44 
USHORT
 
dedu≥_num_thªads
;

45 
ATOMIC64
 
dedu≥_disk_ªads
;

46 
ATOMIC64
 
dedu≥_disk_wrôes
;

47 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

48 
ATOMIC64
 
dedu≥_ˇche_hôs
;

49 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

51 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

52 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

53 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

54 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

55 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

58 
U64
 
	$dz_dedu≥_gë_lba_èbÀ_size
(
VOID
)

60  
lba_èbÀ_size
;

61 
	}
}

62 
EXPORT_SYMBOL
(
dz_dedu≥_gë_lba_èbÀ_size
);

64 
U64
 
	$dz_dedu≥_gë_pba_èbÀ_size
(
VOID
)

66  
pba_èbÀ_size
;

67 
	}
}

68 
EXPORT_SYMBOL
(
dz_dedu≥_gë_pba_èbÀ_size
);

70 
U64
 
	$dz_dedu≥_gë_hash_èbÀ_size
(
VOID
)

72  
hash_èbÀ_size
;

73 
	}
}

74 
EXPORT_SYMBOL
(
dz_dedu≥_gë_hash_èbÀ_size
);

77 
BOOL
 
	$com∑ª_∑ges
(
PPAGE
 
s1
 , PPAGE 
s2
)

79 
PVOID
 
s1∑gebuf
 = 
NULL
;

80 
PVOID
 
s2∑gebuf
 = 
NULL
;

82 
s1∑gebuf
 = 
	`km≠
(
s1
);

83 
s2∑gebuf
 = 
	`km≠
(
s2
);

84 i‡(
	`memcmp
(
s1∑gebuf
, 
s2∑gebuf
, 
PAGE_SIZE
) == 0) {

85 
	`kunm≠
(
s1
);

86 
	`kunm≠
(
s2
);

87  
åue
;

89 
	`kunm≠
(
s1
);

90 
	`kunm≠
(
s2
);

91  
Ál£
;

93 
	}
}

95 
PPBA_BLOCK
 
	$dz_föd_m≠≥d_pba
(
U64
 
hash_cﬁlisi⁄_èg
, U64 
pba_ödex
)

97 
PPBA_BLOCK
 
tmp_pba_íåy
 = 
NULL
;

100 
åue
) {

101 
tmp_pba_íåy
 = 
	`GET_PBA_ENTRY
(
pba_ödex
);

102 i‡(
tmp_pba_íåy
->
hash_cﬁlisi⁄_èg
 == hash_collision_tag) {

103  
tmp_pba_íåy
;

106 
pba_ödex
 = 
tmp_pba_íåy
->
√xt_íåy_ö_cﬁlisi⁄_li°
;

107 i‡(
pba_ödex
 == 0) {

112  
NULL
;

113 
	}
}

115 
RVOID
 
	$dz_dedu≥_io_ﬁd
(
PIOREQUEST
 
i‹eque°
)

117 
PBIO
 
bio
 = 
i‹eque°
->
i‹_bio
;

119 i‡(
	`bio_d©a_dú
(
bio
Ë=
WRITE
) {

120 i‡(!
i‹eque°
->
i‹_∑ª¡
) {

122 
	`FAKE_IO_DONE
(
i‹eque°
);

123 
	`dz_io_‰ì
(
i‹eque°
);

125 
	`FAKE_IO_DONE
(
i‹eque°
);

131 i‡(!
i‹eque°
->
i‹_∑ª¡
) {

132 
	`FAKE_IO_DONE
(
i‹eque°
);

135 
	`dz_io_‰ì
(
i‹eque°
);

137 
	`FAKE_IO_DONE
(
i‹eque°
);

140 
	}
}

142 
VOID
 
	$dz_dedu≥_¥öt_cou¡îs
(
VOID
)

144 
	`LOG
("lba_èbÀ_sizê = %Œi\n", (
U64
)
lba_èbÀ_size
);

145 
	`LOG
("hash_èbÀ_sizê = %Œi\n", (
U64
)
hash_èbÀ_size
);

146 
	`LOG
("pba_èbÀ_sizê = %Œi\n", (
U64
)
pba_èbÀ_size
);

147 
	`LOG
("numbî_of_l⁄gs_f‹_pb® = %Œi\n", (
U64
)
numbî_of_l⁄gs_f‹_pba
);

148 
	`LOG
("numbî_of_l⁄gs_f‹_lb® = %Œi\n", (
U64
)
numbî_of_l⁄gs_f‹_lba
);

149 
	}
}

150 
VOID
 
	$dz_dedu≥_öô_cou¡îs
(
VOID
)

152 
	`ATOMIC64_SET
(
dedu≥_disk_ªads
, 0);

153 
	`ATOMIC64_SET
(
dedu≥_disk_wrôes
, 0);

154 
	`ATOMIC64_SET
(
dedu≥_ˇche_hôs
, 0);

155 
	`ATOMIC64_SET
(
dedu≥_dñëed_íåõs
 , 0);

156 
	`ATOMIC64_SET
(
dedu≥_cur_logiˇl_•a˚
, 0);

157 
	`ATOMIC64_SET
(
dedu≥_cur_physiˇl_•a˚
, 0);

158 
	`ATOMIC64_SET
(
dedu≥_cur_du∂iˇã_•a˚
, 0);

159 
	`ATOMIC64_SET
(
dedu≥_zî€d_out_∑ge_ªads
, 0);

163 i‡(
pba_èbÀ_size
 == 0) {

164 
pba_èbÀ_size
 = 
TARGET_DEVICE_SIZE
;

170 i‡(
hash_èbÀ_size
 == 0) {

171 
hash_èbÀ_size
 = 
TARGET_DEVICE_SIZE
;

175 
lba_èbÀ_size
 = 
TARGET_DEVICE_SIZE
;

177 
dedu≥_tŸ_logiˇl_•a˚
 = 
lba_èbÀ_size
;

178 
dedu≥_tŸ_physiˇl_•a˚
 = 
pba_èbÀ_size
;

180 
	`DDE_COUNTER_U64_SET
(
dedu≥_ígöe_mem‹y_ußge
, 0);

181 
	`dz_dedu≥_¥öt_cou¡îs
();

182 
	}
}

184 
INT
 
	$dz_dedu≥_ígöe_öô
(
VOID
)

186 
INT
 
ªt
 = 
SUCCESS
;

187 
	`MARK_MEMORY_USAGE
();

189 i‡(
dz_swôch_dedu≥_ígöe
 =
DZ_DISABLED
) {

190 
	`LOGDDEF
(" ______________________________________________________ \n");

191 
	`LOGDDEF
("| |\n");

192 
	`LOGDDEF
("| Dedupe Engine Disabled |\n");

193 
	`LOGDDEF
("|______________________________________________________|\n");

194 
	`PRINT_MEMORY_USAGE
–
	`DDE_COUNTER_U64_GET
(
dedu≥_ígöe_mem‹y_ußge
), "Dedupe Engine");

195 
RETURNS
;

198 
	`LOGDDE
(" ______________________________________________________ \n");

199 
	`LOGDDE
("| |\n");

200 
	`LOGDDE
("| Dedupe Engine Initialization Begin |\n");

201 
	`LOGDDE
("|______________________________________________________|\n");

203 
	`dz_dedu≥_öô_cou¡îs
();

204 
ªt
 = 
	`dz_¸óã_dedu≥_thªad_poﬁ
(
dedu≥_num_thªads
);

208 
dedu≥_pba_èbÀ
 = 
	`dz_¸óã_pba_èbÀ
(
pba_èbÀ_size
);

209 i‡(!
dedu≥_pba_èbÀ
) {

210 
exô_Áûuª
;

214 
dedu≥_hash_èbÀ
 = 
	`dz_¸óã_hash_èbÀ
(
hash_èbÀ_size
);

215 i‡(!
dedu≥_hash_èbÀ
) {

216 
exô_Áûuª
;

221 
dedu≥_lba_èbÀ
 = 
	`dz_¸óã_lba_èbÀ
(
lba_èbÀ_size
);

222 i‡(!
dedu≥_lba_èbÀ
) {

223 
exô_Áûuª
;

226 
ªt
 = 
	`dz_¸óã_hash_poﬁ
 (
dz_hash_mempoﬁ_cou¡
);

227 
ªt
 = 
	`dz_¸óã_dedu≥_poﬁ
 (
dz_dedu≥_mempoﬁ_cou¡
);

229 
	`PRINT_MEMORY_USAGE
–
	`DDE_COUNTER_U64_GET
(
dedu≥_ígöe_mem‹y_ußge
), "Dedupe Engine");

230 
	`LOGDDE
(" ______________________________________________________ \n");

231 
	`LOGDDE
("| |\n");

232 
	`LOGDDE
("| Dedupe Engine Initialization End |\n");

233 
	`LOGDDE
("|______________________________________________________|\n");

234 
RETURNS
;

236 
exô_Áûuª
:

237 
	`dz_dedu≥_ígöe_exô
();

238 
	`LOGDDE
(" ______________________________________________________ \n");

239 
	`LOGDDE
("| |\n");

240 
	`LOGDDE
("| Dedupe Engine Initialization Failed |\n");

241 
	`LOGDDE
("|______________________________________________________|\n");

242 
RETURNF
;

243 
	}
}

244 
EXPORT_SYMBOL
(
dz_dedu≥_ígöe_öô
);

246 
RVOID
 
	$dz_dedu≥_ígöe_exô
(
VOID
)

248 
	`MARK_MEMORY_USAGE
();

249 i‡(
dz_swôch_dedu≥_ígöe
 =
DZ_DISABLED
) {

250 
	`LOGDDEF
(" ______________________________________________________ \n");

251 
	`LOGDDEF
("| |\n");

252 
	`LOGDDEF
("| Dedupe Engine Disabled |\n");

253 
	`LOGDDEF
("|______________________________________________________|\n");

254 
	`PRINT_MEMORY_USAGE
–
	`DDE_COUNTER_U64_GET
(
dedu≥_ígöe_mem‹y_ußge
), "Dedupe Engine");

258 
	`LOGDDE
(" ______________________________________________________ \n");

259 
	`LOGDDE
("| |\n");

260 
	`LOGDDE
("| Dedupe Engine Exit Begin |\n");

261 
	`LOGDDE
("|______________________________________________________|\n");

263 
	`dz_dedu≥_¥öt_cou¡îs
();

265 
	`dz_de°roy_pba_èbÀ
(
dedu≥_pba_èbÀ
);

266 
	`dz_de°roy_hash_èbÀ
(
dedu≥_hash_èbÀ
);

267 
	`dz_de°roy_lba_èbÀ
(
dedu≥_lba_èbÀ
);

268 
	`dz_de°roy_hash_poﬁ
(
dz_hash_mempoﬁ_cou¡
);

269 
	`dz_de°roy_dedu≥_poﬁ
(
dz_dedu≥_mempoﬁ_cou¡
);

270 
	`dz_de°roy_dedu≥_thªad_poﬁ
();

272 
	`PRINT_MEMORY_FREED
–
	`DDE_COUNTER_U64_GET
(
dedu≥_ígöe_mem‹y_ußge
), "Dedupe Engine");

273 
	`LOGDDE
(" ______________________________________________________ \n");

274 
	`LOGDDE
("| |\n");

275 
	`LOGDDE
("| Dedupe Engine Exit End |\n");

276 
	`LOGDDE
("|______________________________________________________|\n");

277 
	}
}

278 
EXPORT_SYMBOL
(
dz_dedu≥_ígöe_exô
);

280 
RVOID
 
	$dz_dedu≥_io_ﬁd2
(
PIOREQUEST
 
i‹eque°
)

282 i‡(
	`bio_d©a_dú
(
i‹eque°
->
i‹_bio
Ë=
WRITE
) {

283 i‡(!
i‹eque°
->
i‹_∑ª¡
) {

285 
	`FAKE_IO_DONE
(
i‹eque°
);

286 
	`dz_io_‰ì
(
i‹eque°
);

288 
	`FAKE_IO_DONE
(
i‹eque°
);

291 
	`dz_dedu≥_ªad_io
(
i‹eque°
);

299 
	}
}

301 
RVOID
 
	$dz_dedu≥_io
(
PIOREQUEST
 
i‹eque°
)

309 
	`IF_WRITE_IOREQUEST
(
i‹eque°
) {

311 
	`dz_dedu≥_wrôe_io
(
i‹eque°
);

313 
	`dz_dedu≥_ªad_io
(
i‹eque°
);

315 
	}
}

317 
ölöe
 
PLBA_BLOCK
 
	$GET_LBA_ENTRY
(
U64
 
lba
)

319  (&
dedu≥_lba_èbÀ
[
lba
]);

320 
	}
}

321 
EXPORT_SYMBOL
(
GET_LBA_ENTRY
);

323 
ölöe
 
PPBA_BLOCK
 
	$GET_PBA_ENTRY
(
U64
 
pba
)

325  (&
dedu≥_pba_èbÀ
[
pba
]);

326 
	}
}

327 
EXPORT_SYMBOL
(
GET_PBA_ENTRY
);

329 
ölöe
 
PHASH_BLOCK
 
	$GET_HASH_ENTRY
(
U64
 
hash
)

331  (&
dedu≥_hash_èbÀ
[
hash
]);

332 
	}
}

333 
EXPORT_SYMBOL
(
GET_HASH_ENTRY
);

335 
ölöe
 
PHASH_BLOCK
 
	$GET_HBA_ENTRY
(
U64
 
hash
)

337  
	`GET_HASH_ENTRY
(
hash
);

338 
	}
}

339 
EXPORT_SYMBOL
(
GET_HBA_ENTRY
);

341 
	$dz_dedu≥_ígöe_moduÀ_öô
()

343 
	`LOGDDE
(" ______________________________________________________ \n");

344 
	`LOGDDE
("| |\n");

345 
	`LOGDDE
("| ZAIDSTOR Dedupe Engine Module Loaded |\n");

346 
	`LOGDDE
("|______________________________________________________|\n");

348 
RETURNS
;

349 
	}
}

351 
	$dz_dedu≥_ígöe_moduÀ_exô
()

353 
	`LOGDDE
(" ______________________________________________________ \n");

354 
	`LOGDDE
("| |\n");

355 
	`LOGDDE
("| ZAIDSTOR Dedupe Engine Module Unloaded |\n");

356 
	`LOGDDE
("|______________________________________________________|\n");

357 
	}
}

359 
moduÀ_öô
(
dz_dedu≥_ígöe_moduÀ_öô
);

360 
moduÀ_exô
(
dz_dedu≥_ígöe_moduÀ_exô
);

361 
MODULE_LICENSE
(
DZ_MODULE_LICENSE
);

362 
MODULE_AUTHOR
(
DZ_MODULE_AUTHOR
);

	@dedupe_engine/dedupe_engine_hash.c

9 
	~"dedu≥_ígöe.h
"

10 
	~"¥ŸŸy≥s.h
"

12 
U64
 
hash_èbÀ_size
;

14 
BOOL
 
	$dz_ßme_hash
(
PHASH
 
hash1
, PHASH 
hash2
)

16 
i
;

20 
i
 = 0; i < 4; i++) {

21 i‡(
hash1
->
hash
[
i
] !
hash2
->hash[i]){

22  
Ál£
;

25  
åue
;

26 
	}
}

27 
EXPORT_SYMBOL
(
dz_ßme_hash
);

29 
U32
 
	$dz_gë_hash_ödex
(
U32
 
hash
)

31 
hash
 = (hash & (
hash_èbÀ_size
 -1));

32 i‡(
hash
 == 0) {

33 
	`LOGD
("hash = %u, hash_èbÀ_sizê%Œi\n", 
hash
, 
hash_èbÀ_size
);

35 i‡(
hash
 == 0) {

36 
hash
 = 1;

38  
hash
;

39 
	}
}

41 
VOID
 
	$ã°_hash
(
PVOID
 
d©a
, 
UINT
 
size
)

43 
PPAGE
 
∑ge
 = 
	`dz_wrôe_∑ge_Æloc
();

44 
CHAR
 *
°r
 = 
AISA_MODULE_AUTHOR
;

45 
PHASH
 
hash
 = 
	`dz_hash_Æloc
();

46 
PHASH
 
hash2
 = 
	`dz_hash_Æloc
();

48 
	`mem£t
(
hash
, 0, (
HASH
));

49 
	`mem£t
(
hash2
, 0, (
HASH
));

52 
	`WRITE_PAGE
(
∑ge
, 
°r
, 
	`°æí
(str));

54 
d©a
 = 
	`km≠
(
∑ge
);

55 
	`dz_gíî©e_hash
(
d©a
, 
	`°æí
(
°r
), 
hash
);

56 
	`kunm≠
(
∑ge
);

58 
	`LOG
("I≈uàD©®: %s\n", 
°r
);

60 
	`LOG
("TEST1 : HASH1: %x, %x, %x, %x\n", 
hash
->hash[0], hash->hash[1], hash->hash[2], hash->hash[3]);

61 
	`LOG
("TEST1 : HASH1: %Œx, %Œx\n", 
hash
->
hash64
[0], hash->hash64[1]);

64 
	`mem£t
(
hash2
, 0, (
HASH
));

65 
	`dz_gíî©e_hash
(
°r
, 
	`°æí
(°r), 
hash2
);

67 
	`LOG
("TEST2 : HASH1: %x, %x, %x, %x\n", 
hash2
->
hash
[0], hash2->hash[1], hash2->hash[2], hash2->hash[3]);

68 
	`LOG
("TEST2 : HASH1: %Œx, %Œx\n", 
hash2
->
hash64
[0], hash2->hash64[1]);

70 
	`LOG
("RESULT : BŸh hashe†¨ê%s", 
	`dz_ßme_hash
(
hash
, 
hash2
) ? "Equal" : "Different");

72 
	`dz_hash_‰ì
(
hash
);

73 
	`dz_hash_‰ì
(
hash2
);

74 
	}
}

76 
VOID
 
	$ã°_hash2
(*
°r1
, *
°r2
)

78 
PHASH
 
hash
 = 
	`dz_hash_Æloc
();

79 
PHASH
 
hash2
 = 
	`dz_hash_Æloc
();

81 
	`mem£t
(
hash
, 0, (
HASH
));

82 
	`mem£t
(
hash2
, 0, (
HASH
));

84 
	`dz_gíî©e_hash
(
°r1
, 
	`°æí
(°r1), 
hash
);

86 
	`LOG
("I≈uàD©®: %s\n", 
°r1
);

87 
	`LOG
("I≈uàD©®: %s\n", 
°r2
);

89 
	`LOG
("TEST1 : HASH1: %x, %x, %x, %x\n", 
hash
->hash[0], hash->hash[1], hash->hash[2], hash->hash[3]);

90 
	`LOG
("TEST1 : HASH1: %Œx, %Œx\n", 
hash
->
hash64
[0], hash->hash64[1]);

93 
	`mem£t
(
hash2
, 0, (
HASH
));

94 
	`dz_gíî©e_hash
(
°r2
, 
	`°æí
(°r2), 
hash2
);

96 
	`LOG
("TEST2 : HASH1: %x, %x, %x, %x\n", 
hash2
->
hash
[0], hash2->hash[1], hash2->hash[2], hash2->hash[3]);

97 
	`LOG
("TEST2 : HASH1: %Œx, %Œx\n", 
hash2
->
hash64
[0], hash2->hash64[1]);

99 
	`LOG
("RESULT : BŸh hashe†¨ê%s", 
	`dz_ßme_hash
(
hash
, 
hash2
) ? "Equal" : "Different");

101 
	`dz_hash_‰ì
(
hash
);

102 
	`dz_hash_‰ì
(
hash2
);

103 
	}
}

	@dedupe_engine/dedupe_engine_pools.c

9 
	~"dedu≥_ígöe.h
"

10 
	~"¥ŸŸy≥s.h
"

12 
INT
 
dz_swôch_„c_ígöe
;

15 
PCHAR
 
DEDUPE_THREAD_POOL_NAME
;

16 
PCHAR
 
DEDUPE_THREAD_POOL_SHORT_NAME
;

18 
PCHAR
 
DEDUPE_READ_THREAD_POOL_NAME
;

19 
PCHAR
 
DEDUPE_READ_THREAD_POOL_SHORT_NAME
;

21 
PCHAR
 
DEDUPE_WRITE_THREAD_POOL_NAME
;

22 
PCHAR
 
DEDUPE_WRITE_THREAD_POOL_SHORT_NAME
;

24 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

25 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

27 
	#NUMBER_OF_HASH_POOL_ENTRIES
 
_256K


	)

28 
	#NUMBER_OF_DEDUPE_POOL_ENTRIES
 
_256K


	)

30 
SIZE
 
TARGET_DEVICE_SIZE
;

31 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

33 
PDZ_THREAD_POOL
 
	gdedu≥_thªad_poﬁ
 = 
NULL
;

34 
EXPORT_SYMBOL
(
dedu≥_thªad_poﬁ
);

36 
PDZ_THREAD_POOL
 
	grdedu≥_thªad_poﬁ
 = 
NULL
;

37 
EXPORT_SYMBOL
(
rdedu≥_thªad_poﬁ
);

39 
PDZ_THREAD_POOL
 
	gwdedu≥_thªad_poﬁ
 = 
NULL
;

40 
EXPORT_SYMBOL
(
wdedu≥_thªad_poﬁ
);

42 
PMEMPOOL
 
	gdz_hash_mempoﬁ
 = 
NULL
;

43 
PMEMPOOL
 
	gdz_dedu≥_mempoﬁ
 = 
NULL
;

44 
kmem_ˇche
 *
	gdz_hash_ˇche
 = 
NULL
;

45 
kmem_ˇche
 *
	gdz_dedu≥_ˇche
 = 
NULL
;

46 
INT
 
	gdz_hash_mempoﬁ_cou¡
 = 
NUMBER_OF_HASH_POOL_ENTRIES
;

47 
INT
 
	gdz_dedu≥_mempoﬁ_cou¡
 = 
NUMBER_OF_DEDUPE_POOL_ENTRIES
;

51 
RINT
 
	$dz_¸óã_dedu≥_poﬁ
(
UINT
 
num_dedu≥s
)

53 
	#DZ_UNIT_SIZE
 ((
dz_dedu≥_öfo_s
))

	)

54 
dz_dedu≥_ˇche
 = 
	`KMEM_CACHE
(
dz_dedu≥_öfo_s
, 0);

55 
dz_dedu≥_mempoﬁ
 = 
	`mempoﬁ_¸óã_¶ab_poﬁ
(
num_dedu≥s
, 
dz_dedu≥_ˇche
);

56 i‡(
dz_dedu≥_mempoﬁ
) {

57 
	`LOG
("dedupeÖool created foráccomodating %u units. Unit Size %lu \n",

58 
num_dedu≥s
, 
DZ_UNIT_SIZE
);

59 
	`log_mem‹y_ußge
(
num_dedu≥s
 * 
DZ_UNIT_SIZE
);

60 
RETURNS
;

62 
	`LOGE
("dedupeÖool creation failed\n");

63 
RETURNF
;

65 #unde‡
DZ_UNIT_SIZE


66 
	}
}

68 
RVOID
 
	$dz_de°roy_dedu≥_poﬁ
(
UINT
 
num_dedu≥s
)

70 
	#DZ_UNIT_SIZE
 ((
dz_dedu≥_öfo_s
))

	)

71 
	`LOG
("Destroying dedupe Pool\n");

72 
	`mempoﬁ_de°roy
(
dz_dedu≥_mempoﬁ
);

73 
	`kmem_ˇche_de°roy
(
dz_dedu≥_ˇche
);

74 
	`ªdu˚_mem‹y_ußge
(
num_dedu≥s
 * 
DZ_UNIT_SIZE
);

75 #unde‡
DZ_UNIT_SIZE


76 
	}
}

78 
RPVOID
 
	$dz_dedu≥_Æloc
(
VOID
)

80 
	`LOGD
("dedupe Space Allocated\n");

81 i‡(!
dz_dedu≥_mempoﬁ
Ë 
NULL
;

82  
	`mempoﬁ_Æloc
(
dz_dedu≥_mempoﬁ
 , 
GFP_KERNEL
);

83 
	}
}

85 
RVOID
 
	$dz_dedu≥_‰ì
(
PVOID
 
dedu≥
)

87 i‡(!
dedu≥
) {

88 
	`LOGW
("dedupe is NULL\n");

91 
	`mempoﬁ_‰ì
(
dedu≥
, 
dz_dedu≥_mempoﬁ
 );

92 
	`LOGD
("dedu≥ S∑˚ Fªed %p\n", 
dedu≥
);

93 
	}
}

96 
RINT
 
	$dz_¸óã_hash_poﬁ
(
UINT
 
num_hashs
)

98 
	#DZ_UNIT_SIZE
 ((
dz_hash_s
))

	)

99 
dz_hash_ˇche
 = 
	`KMEM_CACHE
(
dz_hash_s
, 0);

100 
dz_hash_mempoﬁ
 = 
	`mempoﬁ_¸óã_¶ab_poﬁ
(
num_hashs
, 
dz_hash_ˇche
);

101 i‡(
dz_hash_mempoﬁ
) {

102 
	`LOG
("HashÖool created foráccomodating %u units. Unit Size %lu \n",

103 
num_hashs
, 
DZ_UNIT_SIZE
);

104 
	`log_mem‹y_ußge
(
num_hashs
 * 
DZ_UNIT_SIZE
);

105 
RETURNS
;

107 
	`LOGE
("hashÖool creation failed\n");

108 
RETURNF
;

110 #unde‡
DZ_UNIT_SIZE


111 
	}
}

113 
RVOID
 
	$dz_de°roy_hash_poﬁ
(
UINT
 
num_hashs
)

115 
	#DZ_UNIT_SIZE
 ((
dz_hash_s
))

	)

116 
	`LOG
("Destroying hash Pool\n");

117 
	`mempoﬁ_de°roy
(
dz_hash_mempoﬁ
);

118 
	`kmem_ˇche_de°roy
(
dz_hash_ˇche
);

119 
	`ªdu˚_mem‹y_ußge
(
num_hashs
 * 
DZ_UNIT_SIZE
);

120 #unde‡
DZ_UNIT_SIZE


121 
	}
}

123 
RPVOID
 
	$dz_hash_Æloc
(
VOID
)

125 
	`LOG
("Hash Space Allocated\n");

126 i‡(!
dz_hash_mempoﬁ
Ë 
NULL
;

127  
	`mempoﬁ_Æloc
(
dz_hash_mempoﬁ
 , 
GFP_KERNEL
);

128 
	}
}

130 
RVOID
 
	$dz_hash_‰ì
(
PVOID
 
hash
)

132 i‡(!
hash
) {

133 
	`LOGW
("Hash is NULL\n");

136 
	`mempoﬁ_‰ì
(
hash
, 
dz_hash_mempoﬁ
 );

137 
	`LOG
("Hash S∑˚ Fªed %p\n", 
hash
);

138 
	}
}

141 
RVOID
 
	$dz_de°roy_dedu≥_thªad_poﬁ
(
VOID
)

144 
	`dz_de°roy_thªad_poﬁ
(
rdedu≥_thªad_poﬁ
);

145 
	`dz_de°roy_thªad_poﬁ
(
wdedu≥_thªad_poﬁ
);

146 
	}
}

148 
RINT
 
	$dz_¸óã_dedu≥_thªad_poﬁ
(
INT
 
num_thªads
)

150 
PDZ_THREAD_POOL
 
ç
 = 
NULL
;

167 
ç
 = 
	`dz_¸óã_thªad_poﬁ
(

168 
DEDUPE_READ_THREAD_POOL_NAME
, 
DEDUPE_READ_THREAD_POOL_SHORT_NAME
,

169 
num_thªads
, 
NULL
, NULL, 
dz_dedu≥_ªad_io
);

170 i‡(
ç
) {

171 
	`LOG
("%s created successfully for %dÅhreads \n",

172 
DEDUPE_READ_THREAD_POOL_NAME
, 
num_thªads
);

173 
rdedu≥_thªad_poﬁ
 = 
ç
;

176 
	`LOGE
("%†¸óti⁄ faûed \n", 
DEDUPE_READ_THREAD_POOL_NAME
);

177 
RETURNF
;

181 
ç
 = 
	`dz_¸óã_thªad_poﬁ
(

182 
DEDUPE_WRITE_THREAD_POOL_NAME
, 
DEDUPE_WRITE_THREAD_POOL_SHORT_NAME
,

183 
num_thªads
, 
NULL
, NULL, 
dz_dedu≥_wrôe_io
);

184 i‡(
ç
) {

185 
	`LOG
("%s created successfully for %dÅhreads \n",

186 
DEDUPE_WRITE_THREAD_POOL_NAME
, 
num_thªads
);

187 
wdedu≥_thªad_poﬁ
 = 
ç
;

188 
RETURNS
;

190 
	`LOGE
("%†¸óti⁄ faûed \n", 
DEDUPE_WRITE_THREAD_POOL_NAME
);

191 
	`dz_de°roy_thªad_poﬁ
(
rdedu≥_thªad_poﬁ
);

192 
RETURNF
;

203  
SUCCESS
;

204 
	}
}

	@dedupe_engine/dedupe_engine_read.c

9 
	~"¥ŸŸy≥s.h
"

11 
PBLOCK_DEVICE
 
DATA_DISK_DEVICE
;

12 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

13 
SIZE
 
dz_pba_∑ge_mempoﬁ_cou¡
;

14 
BITMAP
 
pba_bôm≠
;

15 
PPBA_BLOCK
 
pba_èbÀ
;

16 
PHASH_BLOCK
 
hash_èbÀ
;

17 
CHAR
 
sysfs_avm_gë_èrgë_«me
[
DZ_SYSFS_PAGE_SIZE
];

18 
SIZE
 
dz_pba_∑ge_mempoﬁ_cou¡
;

19 
U64
 
lba_èbÀ_size
;

20 
U64
 
pba_èbÀ_size
;

21 
U64
 
hash_èbÀ_size
;

22 
BITMAP
 
pba_bôm≠
;

23 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

24 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

26 
SPINLOCK
 
lba_èbÀ_lock
;

27 
SPINLOCK
 
hash_èbÀ_lock
;

28 
SPINLOCK
 
pba_èbÀ_lock
;

30 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

31 
U64
 
dz_disk_io_£˘‹
;

32 
PBLOCK_DEVICE
 
avm_mëad©a_bdev
;

33 
PMD_LOCK
 
md_lock_èbÀ
;

40 
RVOID
 
	$dz_ªad_block_‰om_øw_disk_sync_öã∫Æ
(
PIOREQUEST
 
i‹eque°
,

41 
SECTOR
 
£˘‹
,

42 
PLBA_BLOCK
 
lba_íåy
)

44 
PBIO
 
bio
 = 
i‹eque°
->
i‹_bio
;

45 
INT
 
îr‹
 = 
SUCCESS
;

46 
DZ_COMPLETION
 
io_com∂ëi⁄
;

47 
BIODONE
 
‹ig_biod⁄e
 = 
bio
->
bi_íd_io
;

48 
SECTOR
 
‹ig_£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

51 
io_com∂ëi⁄
.
îr‹
 = 
SUCCESS
;

52 
	`DZ_BIO_SET_DEV
(
bio
, 
DATA_DISK_DEVICE
);

53 
	`DZ_BIO_SET_SECTOR
(
bio
, 
£˘‹
);

54 
	`DZ_BIO_SET_END_IO
(
bio
, 
dz_ªad_biod⁄e_sync
);

55 
	`DZ_BIO_SET_ZIDX
(
bio
);

56 
	`DZ_BIO_SET_READ
(
bio
);

57 
	`DZ_BIO_SET_NEXT
(
bio
, 
NULL
);

58 
bio
->
bi_¥iv©e
 = (
VOID
 *)&
io_com∂ëi⁄
;

61 
	`öô_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

62 
	`DZ_OS_KERNEL_GENERIC_MAKE_REQUEST
(
bio
);

63 
	`waô_f‹_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

67 
îr‹
 = 
io_com∂ëi⁄
.error;

68 i‡(
	`u∆ikñy
(
îr‹
)){

69 
	`LOGE
("Eº‹ i¿ªadögÑaw d©a. Eº‹ Codê: %d", 
îr‹
);

70 
	`¥öt_biom
(
bio
, "bio withÉrror");

71 
exô_d⁄e
;

74 
exô_d⁄e
:

75 
bio
->
bi_¥iv©e
 = 
i‹eque°
;

76 
	`DZ_BIO_SET_END_IO
(
bio
, 
‹ig_biod⁄e
);

77 
	`DZ_BIO_SET_SECTOR
(
bio
, 
‹ig_£˘‹
);

78 
	`_RELEASE_LBA_LOCK_READ
(
lba_íåy
);

79 
	`dz_bec_¥o˚ed_pba_∑ge_add_ªad
(
i‹eque°
);

80 
	`READ_IO_DONE_STATUS
(
i‹eque°
, 
îr‹
);

85 
	}
}

93 
RVOID
 
	$dz_ªad_block_‰om_øw_disk_sync
(
PIOREQUEST
 
i‹eque°
,

94 
SECTOR
 
£˘‹
,

95 
PLBA_BLOCK
 
lba_íåy
)

97 
PBIO
 
∑ª¡_bio
 = 
i‹eque°
->
i‹_bio
;

98 
PBIO
 
bio
 = 
NULL
;

99 
INT
 
îr‹
 = 
SUCCESS
;

100 #ifde‡
DZ_KERNEL_VERSION_4


101 
bvec_ôî
 
ôî
;

102 
BIOVEC
 
bvec
;

104 
INT
 
cou¡
 = 0;

105 
PBIOVEC
 
bvec
 = 
NULL
;

107 
DZ_COMPLETION
 
io_com∂ëi⁄
;

110 
bio
 = 
	`dz_bio_Æloc
(
∑ª¡_bio
->
bi_v˙t
);

111 i‡(!
bio
) {

112 
	`LOGE
("UnableÅo get free bio\n");

113 
îr‹
 = 
IO_ERROR_ENOMEM
;

114 
exô_d⁄e
;

117 
io_com∂ëi⁄
.
îr‹
 = 
SUCCESS
;

118 
	`DZ_BIO_SET_DEV
(
bio
, 
DATA_DISK_DEVICE
);

119 
	`DZ_BIO_SET_SECTOR
(
bio
, 
£˘‹
);

120 
	`DZ_BIO_SET_END_IO
(
bio
, 
dz_ªad_biod⁄e_sync
);

121 
	`DZ_BIO_SET_ZIDX
(
bio
);

122 
	`DZ_BIO_SET_READ
(
bio
);

123 
	`DZ_BIO_SET_NEXT
(
bio
, 
NULL
);

124 
bio
->
bi_¥iv©e
 = (
VOID
 *)&
io_com∂ëi⁄
;

140 #ifde‡
DZ_KERNEL_VERSION_4


141 
	`bio_f‹_óch_£gmít
(
bvec
, 
∑ª¡_bio
, 
ôî
) {

142 i‡(!
	`bio_add_∑ge
(
bio
, 
bvec
.
bv_∑ge
, bvec.
bv_Àn
, bvec.
bv_off£t
)) {

143 
	`LOGE
("UnableÅoáddÖageÅo bio\n");

144 
îr‹
 = 
IO_ERROR_EIO
;

145 
exô_Áûuª
;

149 
	`bio_f‹_óch_£gmít
(
bvec
, 
∑ª¡_bio
, 
cou¡
) {

150 i‡(!
	`bio_add_∑ge
(
bio
, 
bvec
->
bv_∑ge
, bvec->
bv_Àn
, bvec->
bv_off£t
)) {

151 
	`LOGE
("UnableÅoáddÖageÅo bio\n");

152 
îr‹
 = 
IO_ERROR_EIO
;

153 
exô_Áûuª
;

157 
	`öô_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

159 
	`DZ_OS_KERNEL_GENERIC_MAKE_REQUEST
(
bio
);

160 
	`waô_f‹_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

164 
îr‹
 = 
io_com∂ëi⁄
.error;

165 i‡(
	`u∆ikñy
(
îr‹
)){

166 
	`LOGE
("Eº‹ i¿ªadögÑaw d©a. Eº‹ Codê: %d", 
îr‹
);

167 
	`¥öt_biom
(
bio
, "bio withÉrror");

168 
exô_Áûuª
;

171 
exô_d⁄e
:

172 
	`_RELEASE_LBA_LOCK_READ
(
lba_íåy
);

174 
i‹eque°
->
i‹_£˘‹
 = 
£˘‹
;

179 
	`DZ_OS_KERNEL_BIO_GET
(
i‹eque°
->
i‹_bio
);

180 
	`READ_IO_DONE_STATUS
(
i‹eque°
, 
îr‹
);

181 
	`dz_bec_¥o˚ed_pba_∑ge_add_ªad
(
i‹eque°
);

185 
exô_Áûuª
:

186 
	`_RELEASE_LBA_LOCK_READ
(
lba_íåy
);

187 
	`READ_IO_DONE_STATUS
(
i‹eque°
, 
îr‹
);

188 
	`i‹eque°_put
(
i‹eque°
);

189 
	}
}

191 
RVOID
 
	$dz_dedu≥_fûl_öô_d©a
(
PBIO
 
bio
, 
LBA
 
lba
)

193 
CHAR
 *
±r
 = 
NULL
;

194 
INT
 
˙t
 = 0;

195 
INT
 
idx
 = 0;

196 
CHAR
 *
buf„r_4k_lba
 = 
	`vmÆloc
(
PAGE_SIZE
+1);

197 
CHAR
 
buÊöe
[65];

198 i‡(!
buf„r_4k_lba
) {

199 
	`BUG_ON
(1);

202 
±r
 = 
buf„r_4k_lba
;

203 
	`mem£t
(
±r
, 0, 
PAGE_SIZE
+1);

204 
	`mem£t
(
buÊöe
, 0, 65);

207 
idx
 = 0; idx < 64; idx++) {

208 
˙t
 = 
	`¢¥ötf
(
buÊöe
, 65,

210 (
INT
)
lba
, 
idx
+1, idx+1);

212 
	`mem˝y
(
±r
, 
buÊöe
, 64);

215 
±r
 =Öå + 
˙t
;

216 
	`mem£t
(
buÊöe
, 0, 65);

221 
	`COPY_TO_BIO
(
bio
, 
buf„r_4k_lba
);

227 
	`v‰ì
(
buf„r_4k_lba
);

228 
	}
}

230 
RVOID
 
	$dz_dedu≥_ªad_io
(
PIOREQUEST
 
i‹eque°
)

232 
PBIO
 
bio
 = 
i‹eque°
->
i‹_bio
;

233 
SECTOR
 
£˘‹
 = 0;

234 
LBA
 
lba
 = 
i‹eque°
->
i‹_lba
;

236 
PLBA_BLOCK
 
lba_íåy
 = 
NULL
;

238 
lba_íåy
 = 
	`GET_LBA_ENTRY
(
lba
);

240 
	`_ACQUIRE_LBA_LOCK_READ
(
lba_íåy
);

242 i‡(
lba_íåy
->
hash_ödex
 == 0) {

245 
	`ATOMIC64_INC
(
dedu≥_zî€d_out_∑ge_ªads
);

246 
zîo_out_bio_∑ge
;

248 
	`BUG_ON
(1);

249 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba_íåy
->
pba_ödex
);

252 if(
	`dz_bec_pba_∑ge_lookup
(
£˘‹
, 
bio
)) {

253 
exô_d⁄e
;

257 i‡(
i‹eque°
->
i‹_∑ª¡
) {

259 
	`LOG
("Disk Ród @ se˘‹ %Œòf‹ i¡î«»biÿ\n", (
U64
)
£˘‹
);

260 
	`dz_ªad_block_‰om_øw_disk_sync_öã∫Æ
(
i‹eque°
, 
£˘‹
, 
lba_íåy
);

265 
	`dz_ªad_block_‰om_øw_disk_sync
(
i‹eque°
, 
£˘‹
, 
lba_íåy
);

269 
zîo_out_bio_∑ge
:

270 
	`DZ_ZERO_PAGE
(
bio
);

271 
	`dz_dedu≥_fûl_öô_d©a
(
bio
, 
lba
);

273 
exô_d⁄e
:

274 
	`_RELEASE_LBA_LOCK_READ
(
lba_íåy
);

275 i‡(
i‹eque°
->
i‹_∑ª¡
) {

276 
	`LOGD
("P¨íàFound f‹ i‹eque° %p. i‹_ty≥ = %u\n", 
i‹eque°
, i‹eque°->
i‹_ty≥
);

277 
	`IO_DONE
(
i‹eque°
);

283 
	`LOGD
("P¨íàô£l‡Found f‹ i‹eque° %p. i‹_ty≥ = %u\n", 
i‹eque°
, i‹eque°->
i‹_ty≥
);

284 
	`IO_DONE
(
i‹eque°
);

285 
	`dz_io_‰ì
(
i‹eque°
);

286 
	}
}

287 
EXPORT_SYMBOL
(
dz_dedu≥_ªad_io
);

	@dedupe_engine/dedupe_engine_sysfs_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

18 
INT
 
dz_swôch_„c_ígöe
;

19 
INT
 
dz_swôch_bec_ígöe
;

20 
INT
 
dz_swôch_dedu≥_ígöe
;

21 
INT
 
dz_swôch_Æignmít_ígöe
;

25 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

26 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

31 
SIZE
 
TARGET_DEVICE_SIZE
;

33 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

34 
NAME
 
DATA_DISK_DEVICE_NAME
;

35 
OBJECT_LIST
 
globÆ_obje˘_li°
;

36 
U64
 
lba_èbÀ_size
;

37 
U64
 
pba_èbÀ_size
;

38 
U64
 
hash_èbÀ_size
;

39 
U32
 
numbî_of_l⁄gs_f‹_pba
;

40 
U32
 
numbî_of_l⁄gs_f‹_lba
;

41 
U32
 
numbî_of_l⁄gs_f‹_gpba
;

42 
ULONG
 
mëad©a_Êush_öãrvÆ
;

43 
U64
 
mëad©a_lba_èbÀ_size
;

44 
U64
 
mëad©a_lba_lock_èbÀ_size
;

45 
U64
 
avm_sysfs_íåy_‰ì_∑ge_cou¡
;

46 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes
[
DZ_SYSFS_PAGE_SIZE
];

47 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
[
DZ_SYSFS_PAGE_SIZE
];

48 
PPBA_BLOCK
 
pba_èbÀ
;

49 
PHASH_BLOCK
 
hash_èbÀ
;

50 
PLBA_BLOCK
 
lba_èbÀ
;

52 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

53 
ATOMIC64
 
bec_ˇche_hô
;

54 
ATOMIC64
 
bec_ˇche_miss
;

55 
ATOMIC64
 
bec_ˇche_dñëe
;

56 
ULONG
 
bec_size
;

57 
INT
 
bec_cutoff_nodes
;

58 
INT
 
bec_cutoff_≥r˚¡
;

59 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

60 
U64
 
time_Êush_¥ï¨e_°¨t
;

61 
U64
 
time_Êush_°¨t
;

62 
U64
 
time_Êush_íd
;

63 
U64
 
time_„c_wrôe_°¨t
;

64 
U64
 
time_„c_wrôe_swôch
;

65 
PFEC_TABLE
 
„c_èbÀs_Êush
;

66 
ATOMIC64
 
„c_a˘ive_cou¡_£quí˚
;

67 
ATOMIC64
 
„c_‰ì_cou¡_£quí˚
;

68 
ATOMIC64
 
„c_cur_Êush_cou¡
;

69 
ATOMIC64
 
„c_Êush_›s_cou¡
;

70 
ATOMIC64
 
„c_cur_Êush_›s_cou¡
;

71 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

72 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

73 
U64
 
„c_a˘ive_cou¡
;

74 
ATOMIC64
 
dedu≥_disk_ªads
;

75 
ATOMIC64
 
dedu≥_disk_wrôes
;

76 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

77 
ATOMIC64
 
dedu≥_ˇche_hôs
;

78 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

79 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

80 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

81 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

82 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

83 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

84 
USHORT
 
dedu≥_num_thªads
;

85 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

86 
PDZ_THREAD_POOL
 
rdedu≥_thªad_poﬁ
;

87 
PDZ_THREAD_POOL
 
wdedu≥_thªad_poﬁ
;

88 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

89 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

90 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

91 
PDZ_THREAD_POOL
 
Æign_wrôe_thªad_poﬁ
;

92 
PDZ_THREAD_POOL
 
Êush_thªad_poﬁ
;

93 
PDZ_THREAD_POOL
 
mëad©a_Êush_thªad_poﬁ
;

94 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡
;

95 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads
;

96 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
;

97 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
;

98 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
;

99 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

100 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

101 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

102 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

103 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

104 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

105 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

107 
ATOMIC64
 
Æign_iocou¡_disk_ªad
;

108 
ATOMIC64
 
Æign_iocou¡_disk_ªad_öã∫Æ
;

109 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

110 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

111 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

112 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

113 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

114 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

115 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

117 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes
;

118 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
;

119 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
;

120 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
;

121 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

122 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

123 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

124 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

125 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

126 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

127 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

129 
ATOMIC64
 
Æign_iocou¡_disk_wrôe
;

130 
ATOMIC64
 
Æign_iocou¡_disk_wrôe_öã∫Æ
;

131 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

132 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

133 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

134 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

135 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

136 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

137 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

139 
PSUPERBLOCK
 
su≥rblock
;

141 
CHAR
 
avm_sysfs_íåy_gë_dedu≥_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
];

142 
INT
 
	$avm_gë_dedu≥_cou¡îs
(
CHAR
 *
buf
)

144 
INT
 
cou¡
 = 0;

145 
UINT
 
≥ndög_i‹eque°s
;

146 
UINT
 
≥ndög_thªads
;

147 
UINT
 
≥ndög_jobs
;

149 
UINT
 
≥ndög_ri‹eque°s
;

150 
UINT
 
≥ndög_πhªads
;

151 
UINT
 
≥ndög_rjobs
;

153 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_dedu≥_cou¡îs
;

154 
	`mem£t
(
avm_sysfs_íåy_gë_dedu≥_cou¡îs
, 0, 
DZ_SYSFS_PAGE_SIZE
);

155 
	`mem˝y
(
±r
, "\n", 1);

156 
±r
 += 1;

157 
±r
 +
	`•rötf
(ptr, "==============================================\n");

158 
±r
 +
	`•rötf
(ptr, "DEDUPE ENGINE COUNTERS\n");

159 
±r
 +
	`•rötf
(ptr, "==============================================\n");

160 i‡(!
su≥rblock
) {

161 
±r
 +
	`•rötf
(ptr, "Superblock is NULL");

165 i‡(
dz_swôch_dedu≥_ígöe
 =
DZ_DISABLED
) {

166 
±r
 +
	`•rötf
(ptr, "DEDUPE ENGINE DISABLED");

170 
≥ndög_i‹eque°s
 = 
	`©omic_ªad
(&
wdedu≥_thªad_poﬁ
->
ioq_num_ios
);

171 
≥ndög_thªads
 = 
	`©omic_ªad
(&
wdedu≥_thªad_poﬁ
->
num_a˘ive_thªads
);

172 
≥ndög_jobs
 = 
	`©omic_ªad
(&
wdedu≥_thªad_poﬁ
->
num_jobs
);

174 
≥ndög_ri‹eque°s
 = 
	`©omic_ªad
(&
rdedu≥_thªad_poﬁ
->
ioq_num_ios
);

175 
≥ndög_πhªads
 = 
	`©omic_ªad
(&
rdedu≥_thªad_poﬁ
->
num_a˘ive_thªads
);

176 
≥ndög_rjobs
 = 
	`©omic_ªad
(&
rdedu≥_thªad_poﬁ
->
num_jobs
);

179 
cou¡
 = 
	`•rötf
(
±r
,

203 (
U64
)
dedu≥_tŸ_logiˇl_•a˚
,

204 (
U64
)
dedu≥_tŸ_physiˇl_•a˚
,

205 (
U64
)
	`READ_COUNTER
(
dedu≥_cur_logiˇl_•a˚
),

206 (
U64
)
	`READ_COUNTER
(
dedu≥_cur_physiˇl_•a˚
),

207 (
U64
)
	`READ_COUNTER
(
dedu≥_cur_du∂iˇã_•a˚
),

208 (
U64
)
	`READ_COUNTER
(
dedu≥_dñëed_íåõs
),

209 (
U64
)
	`READ_COUNTER
(
dedu≥_ˇche_hôs
),

210 (
U64
)
	`READ_COUNTER
(
dedu≥_disk_ªads
),

211 (
U64
)
	`READ_COUNTER
(
dedu≥_disk_wrôes
),

212 (
U64
)
	`READ_COUNTER
(
dedu≥_zî€d_out_∑ge_ªads
),

213 
rdedu≥_thªad_poﬁ
->
num_thªads
,

214 
rdedu≥_thªad_poﬁ
->
«me
,

215 
wdedu≥_thªad_poﬁ
->
num_thªads
,

216 
wdedu≥_thªad_poﬁ
->
«me
,

217 
≥ndög_ri‹eque°s
,

218 
≥ndög_πhªads
,

219 
≥ndög_rjobs
,

220 
≥ndög_i‹eque°s
,

221 
≥ndög_thªads
,

222 
≥ndög_jobs
,

223 
wdedu≥_thªad_poﬁ
->
quõs˚
,

224 
wdedu≥_thªad_poﬁ
->
ioq_›í
,

225 (
U64
)(
	`GET_CURRENT_TIME
()));

227 
±r
 +
cou¡
;

228 
±r
 +
	`•rötf
’å, "DEDUPE LBA TabÀ Size........................%Œu (4K sizêblocksË", 
lba_èbÀ_size
);

229 
±r
 +
	`•rötf
’å, "%Œu GB ", (
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
/
GB
));

230 
±r
 +
	`•rötf
’å, "%Œu MB ", (
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
/
MB
));

231 
±r
 +
	`•rötf
’å, "%Œu KB ", (
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
/
KB
));

232 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
);

234 
±r
 +
	`•rötf
’å, "LBA Bôm≠:Üba_èbÀ_size...................%Œi\n", 
lba_èbÀ_size
);

235 
±r
 +
	`•rötf
’å, "LBA Bôm≠:Çumbî_of_l⁄gs_f‹_lba..........%u\n", 
numbî_of_l⁄gs_f‹_lba
);

236 
±r
 +
	`•rötf
’å, "LBA Bôm≠: Bôm≠ Size......................%lu\n", 
numbî_of_l⁄gs_f‹_lba
 * ());

239 
±r
 +
	`•rötf
’å, "DEDUPE HASH TabÀ Size.......................%Œu (4K sizêblocksË", 
hash_èbÀ_size
);

240 
±r
 +
	`•rötf
’å, "%Œu GB ", (
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
/
GB
));

241 
±r
 +
	`•rötf
’å, "%Œu MB ", (
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
/
MB
));

242 
±r
 +
	`•rötf
’å, "%Œu KB ", (
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
/
KB
));

243 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
);

245 
±r
 +
	`•rötf
’å, "DEDUPE PBA TabÀ Size........................%Œu (4K sizêblocksË", 
pba_èbÀ_size
);

246 
±r
 +
	`•rötf
’å, "%Œu GB ", (
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
/
GB
));

247 
±r
 +
	`•rötf
’å, "%Œu MB ", (
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
/
MB
));

248 
±r
 +
	`•rötf
’å, "%Œu KB ", (
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
/
KB
));

249 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
);

250 
±r
 +
	`•rötf
’å, "PBA Bôm≠:Öba_èbÀ_size...................%Œi\n", 
pba_èbÀ_size
);

251 
±r
 +
	`•rötf
’å, "PBA Bôm≠:Çumbî_of_l⁄gs_f‹_pba..........%u\n", 
numbî_of_l⁄gs_f‹_pba
);

252 
±r
 +
	`•rötf
’å, "PBA Bôm≠: Bôm≠ Size......................%lu\n", 
numbî_of_l⁄gs_f‹_pba
 * ());

253 
±r
 +
	`•rötf
’å, "G¨bagêPBA Bôm≠:Öba_èbÀ_size...........%Œi\n", 
pba_èbÀ_size
);

254 
±r
 +
	`•rötf
’å, "G¨bagêPBA Bôm≠:Çumbî_of_l⁄gs_f‹_gpba.%u\n", 
numbî_of_l⁄gs_f‹_gpba
);

255 
±r
 +
	`•rötf
’å, "G¨bagêPBA Bôm≠: Bôm≠ Size..............%lu\n", 
numbî_of_l⁄gs_f‹_gpba
 * ());

258 
	}
}

260 
U64
 
avm_sysfs_íåy_gë_pba_èbÀ_size
;

261 
INT
 
	$avm_pba_èbÀ_size_show
(
CHAR
 *
buf
)

263 
avm_sysfs_íåy_gë_pba_èbÀ_size
 = 
pba_èbÀ_size
;

265 
	}
}

267 
U64
 
avm_sysfs_íåy_gë_hash_èbÀ_size
;

268 
INT
 
	$avm_gë_hash_èbÀ_size
(
CHAR
 *
buf
)

270 
avm_sysfs_íåy_gë_hash_èbÀ_size
 = 
hash_èbÀ_size
;

272 
	}
}

274 
U64
 
avm_sysfs_íåy_gë_£t_swôch_dde
;

275 
INT
 
	$avm_gë_swôch_dde
(
CHAR
 *
buf
)

277 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_dde
, 
dz_swôch_dedu≥_ígöe
);

278 
	}
}

280 
INT
 
	$avm_£t_swôch_dde
(
U64
 
buf
)

282 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_dedu≥_ígöe
, 
buf
);

283 
	}
}

285 
PPBA_BLOCK
 
pba_èbÀ
;

286 
PHASH_BLOCK
 
hash_èbÀ
;

287 
PLBA_BLOCK
 
lba_èbÀ
;

288 
U64
 
avm_sysfs_íåy_gë_£t_lba_íåy
;

289 
U64
 
avm_sysfs_íåy_gë_£t_pba_íåy
;

290 
BITMAP
 
pba_bôm≠
;

291 
INT
 
	$avm_gë_lba_íåy
(
CHAR
 *
buf
)

293 
UINT
 
i
 = 0;

294 
PLBA_BLOCK
 
lba_íåy
 = 
NULL
;

295 
PPBA_BLOCK
 
pba_íåy
 = 
NULL
;

296 
PHASH_BLOCK
 
hash_íåy
 = 
NULL
;

297 
U64
 
tŸÆ_pba_íåõs_Æloˇãd
 = 0;

299 i‡(
avm_sysfs_íåy_gë_£t_lba_íåy
 > 
lba_èbÀ_size
) {

300 
	`LOGE
("Index is greaterÅhanÜbaÅable size\n");

304 
	`f‹_óch_£t_bô
(
i
, 
pba_bôm≠
.
bôm≠
, (pba_bôm≠.
num_of_l⁄gs
) * ()) {

305 
tŸÆ_pba_íåõs_Æloˇãd
++;

307 
	`LOG
("TŸÆ PBA E¡rõ†AŒoˇãd %Œu\n", 
tŸÆ_pba_íåõs_Æloˇãd
);

308 
	`¥ötk
(
KERN_ERR
"\n");

309 
lba_íåy
 = 
	`GET_LBA_ENTRY
(
avm_sysfs_íåy_gë_£t_lba_íåy
);

310 
	`LOG
("Üb®%Œu\n", 
avm_sysfs_íåy_gë_£t_lba_íåy
);

311 
	`LOG
("Üba_íåy->hash_ödex = %u\n", 
lba_íåy
->
hash_ödex
);

312 
	`LOG
("Üba_íåy->hash_cﬁlisi⁄_èg = %Œu\n", (
U64
)
lba_íåy
->
hash_cﬁlisi⁄_èg
);

313 
	`¥ötk
(
KERN_ERR
"\n");

315 
hash_íåy
 = 
	`GET_HASH_ENTRY
(
lba_íåy
->
hash_ödex
);

316 
	`LOG
(" hash = %Œu\n", (
U64
)
lba_íåy
->
hash_ödex
);

317 
	`LOG
(" hash_íåy->pba_ödex = %lu\n", (
ULONG
)
hash_íåy
->
pba_ödex
);

318 
	`¥ötk
(
KERN_ERR
"\n");

320 
pba_íåy
 = 
	`GET_PBA_ENTRY
(
hash_íåy
->
pba_ödex
);

321 
	`LOG
("Öba_ödex = %lu\n", (
ULONG
)
hash_íåy
->
pba_ödex
);

322 
	`LOG
("Öba_íåy->hash_cﬁlisi⁄_èg = %Œu\n", (
U64
)
pba_íåy
->
hash_cﬁlisi⁄_èg
);

323 
	`LOG
("Öba_íåy->sizê%Œu\n", (
U64
)
pba_íåy
->
size
);

324 
	`LOG
("Öba_íåy->ªf_˙à%Œu\n", (
U64
)
pba_íåy
->
ªf_˙t
);

325 
	`LOG
("pba_íåy->√xt_hash_cﬁlisi⁄_íåy = %Œu\n", (
U64
)
pba_íåy
->
√xt_íåy_ö_cﬁlisi⁄_li°
);

326 
	`¥ötk
(
KERN_ERR
"\n");

328 
	}
}

330 
CHAR
 
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex
[
DZ_SYSFS_PAGE_SIZE
];

331 
INT
 
	$avm_gë_£t_lba_èbÀ_ödex
(
CHAR
 *
buf
)

333 
ssize_t
 
ªt
;

334 
ULONG
 
lba_ödex
 = 0;

335 
UINT
 
i
 = 0;

336 
PLBA_BLOCK
 
lba_íåy
 = 
NULL
;

337 
PPBA_BLOCK
 
pba_íåy
 = 
NULL
;

338 
PHASH_BLOCK
 
hash_íåy
 = 
NULL
;

339 
PMDD_BLOCK
 
mëad©a_íåy
 = 
NULL
;

340 
U64
 
tŸÆ_pba_íåõs_Æloˇãd
 = 0;

341 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex
;

342 
ªt
 = 
	`k°πoul
(
±r
, 10, &
lba_ödex
);

343 i‡(
ªt
) {

344 
	`mem£t
(
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex
, 0, 
DZ_SYSFS_PAGE_SIZE
);

345 
	`mem˝y
(
±r
, "\n", 1);

346 
±r
 += 1;

347 
±r
 +
	`•rötf
(ptr, "=================================\n");

348 i‡(
ªt
 =-
EINVAL
) {

349 
±r
 +
	`•rötf
(ptr, "UnableÅo convertÅo index. Invalid Index\n");

351 
±r
 +
	`•rötf
’å, "U«bÀÅÿc⁄vîàtÿödex.Ñë = %zd\n", 
ªt
) ;

353 
±r
 +
	`•rötf
(ptr, "=================================\n");

354  
ªt
;

357 
	`mem£t
(
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex
, 0, 
DZ_SYSFS_PAGE_SIZE
);

358 
	`mem˝y
(
±r
, "\n", 1);

359 
±r
 += 1;

360 
±r
 +
	`•rötf
(ptr, "========================================\n");

361 
±r
 +
	`•rötf
’å, "LBA TabÀ E¡ry f‹ Index %lu\n", 
lba_ödex
);

362 
±r
 +
	`•rötf
(ptr, "========================================\n");

363 
±r
 +
	`•rötf
’å, "LBA TabÀ E¡ry f‹ Index %lu\n", 
lba_ödex
);

365 i‡(
lba_ödex
 > 
lba_èbÀ_size
) {

366 
±r
 +
	`•rötf
(ptr, "Index %lu is greaterÅhanÜbaÅable size %llu\n",

367 
lba_ödex
, 
lba_èbÀ_size
);

370 
	`f‹_óch_£t_bô
(
i
, 
pba_bôm≠
.
bôm≠
, (pba_bôm≠.
num_of_l⁄gs
) * ()) {

371 
tŸÆ_pba_íåõs_Æloˇãd
++;

373 
	`LOG
("TŸÆ PBA E¡rõ†AŒoˇãd %Œu\n", 
tŸÆ_pba_íåõs_Æloˇãd
);

374 
lba_íåy
 = 
	`GET_LBA_ENTRY
(
lba_ödex
);

375 
±r
 +
	`•rötf
’å, "Üb® = %lu\n", 
lba_ödex
);

376 
±r
 +
	`•rötf
’å, "Üba_íåy->hash_ödex = %u\n", 
lba_íåy
->
hash_ödex
);

377 
±r
 +
	`•rötf
’å, "Üba_íåy->hash_cﬁlisi⁄_èg = %Œu\n", (
U64
)
lba_íåy
->
hash_cﬁlisi⁄_èg
);

379 
±r
 +
	`•rötf
(ptr, "========================================\n");

380 
±r
 +
	`•rötf
’å, "Hash TabÀ E¡ry f‹ LBA Index %lu\n", 
lba_ödex
);

381 
±r
 +
	`•rötf
(ptr, "========================================\n");

382 
hash_íåy
 = 
	`GET_HASH_ENTRY
(
lba_íåy
->
hash_ödex
);

383 
±r
 +
	`•rötf
’å, " hash = %Œu\n", (
U64
)
lba_íåy
->
hash_ödex
);

384 
±r
 +
	`•rötf
’å, " hash_íåy->pba_ödex = %lu\n", (
ULONG
)
hash_íåy
->
pba_ödex
);

386 
±r
 +
	`•rötf
(ptr, "========================================\n");

387 
±r
 +
	`•rötf
’å, "PBA TabÀ E¡ry f‹ LBA Index %lu\n", 
lba_ödex
);

388 
±r
 +
	`•rötf
(ptr, "========================================\n");

389 
pba_íåy
 = 
	`GET_PBA_ENTRY
(
hash_íåy
->
pba_ödex
);

390 
±r
 +
	`•rötf
’å, "Öba_ödex = %lu\n", (
ULONG
)
hash_íåy
->
pba_ödex
);

391 
±r
 +
	`•rötf
’å, "Öba_íåy->hash_cﬁlisi⁄_èg = %Œu\n", (
U64
)
pba_íåy
->
hash_cﬁlisi⁄_èg
);

392 
±r
 +
	`•rötf
’å, "Öba_íåy->sizê = %Œu\n", (
U64
)
pba_íåy
->
size
);

393 
±r
 +
	`•rötf
’å, "Öba_íåy->ªf_˙à = %Œu\n", (
U64
)
pba_íåy
->
ªf_˙t
);

394 
±r
 +
	`•rötf
’å, "pba_íåy->√xt_hash_cﬁlisi⁄_íåy = %Œu\n", (
U64
)
pba_íåy
->
√xt_íåy_ö_cﬁlisi⁄_li°
);

396 
±r
 +
	`•rötf
(ptr, "========================================\n");

397 
±r
 +
	`•rötf
’å, "Mëad©®TabÀ E¡ry f‹ LBA Index %lu\n", 
lba_ödex
);

398 
±r
 +
	`•rötf
(ptr, "========================================\n");

399 
mëad©a_íåy
 = 
	`GET_MDB_ENTRY
(
lba_ödex
);

400 
±r
 +
	`•rötf
’å, " mëad©a_íåy->mdd_lb® = %Œu\n", (
U64
)
mëad©a_íåy
->
mdd_lba
);

401 
±r
 +
	`•rötf
(ptr, " metadata_entry->mdd_hash = %llx %llx %llx %llx \n",

402 (
U64
)
mëad©a_íåy
->
mdd_hash
.
hash32
[0], (U64)metadata_entry->mdd_hash.hash32[1],

403 (
U64
)
mëad©a_íåy
->
mdd_hash
.
hash32
[2], (U64)metadata_entry->mdd_hash.hash32[3]);

404 
±r
 +
	`•rötf
’å, " mëad©a_íåy->mdd_hash_ödex = %u\n", (
U32
)
mëad©a_íåy
->
mdd_hash_ödex
);

405 
±r
 +
	`•rötf
’å, " mëad©a_íåy->mdd_pba_ödex = %Œu\n", (
U64
)
mëad©a_íåy
->
mdd_pba_ödex
);

406 
±r
 +
	`•rötf
’å, " mëad©a_íåy->mdd_dd_£˘‹ = %Œu\n", (
U64
)
mëad©a_íåy
->
mdd_dd_£˘‹
);

407 
±r
 +
	`•rötf
’å, " mëad©a_íåy->mdd_dúty = %d\n", (
INT
)
mëad©a_íåy
->
mdd_dúty
);

409 
	}
}

411 
INT
 
	$avm_gë_pba_íåy
(
CHAR
 *
buf
)

413 
PPBA_BLOCK
 
pba_íåy
 = 
NULL
;

415 i‡(
avm_sysfs_íåy_gë_£t_pba_íåy
 > 
pba_èbÀ_size
) {

416 
	`LOGE
("Index is greaterÅhanÜbaÅable size\n");

420 
	`¥ötk
(
KERN_ERR
"\n");

421 
pba_íåy
 = 
	`GET_PBA_ENTRY
(
avm_sysfs_íåy_gë_£t_pba_íåy
);

422 
	`LOG
("Öba_ödex = %lu\n", (
ULONG
)
avm_sysfs_íåy_gë_£t_pba_íåy
);

423 
	`LOG
("Öba_íåy->hash_cﬁlisi⁄_èg = %Œu\n", (
U64
)
pba_íåy
->
hash_cﬁlisi⁄_èg
);

424 
	`LOG
("Öba_íåy->sizê%Œu\n", (
U64
)
pba_íåy
->
size
);

425 
	`LOG
("Öba_íåy->ªf_˙à%Œu\n", (
U64
)
pba_íåy
->
ªf_˙t
);

426 
	`LOG
("pba_íåy->√xt_hash_cﬁlisi⁄_íåy = %Œu\n", (
U64
)
pba_íåy
->
√xt_íåy_ö_cﬁlisi⁄_li°
);

427 
	`¥ötk
(
KERN_ERR
"\n");

429 
	}
}

431 
CHAR
 
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex
[
DZ_SYSFS_PAGE_SIZE
];

432 
INT
 
	$avm_gë_£t_pba_èbÀ_ödex
(
CHAR
 *
buf
)

434 
ssize_t
 
ªt
;

435 
ULONG
 
pba_ödex
 = 0;

436 
PPBA_BLOCK
 
pba_íåy
 = 
NULL
;

437 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex
;

438 
ªt
 = 
	`k°πoul
(
±r
, 10, &
pba_ödex
);

439 i‡(
ªt
) {

440 
	`mem£t
(
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex
, 0, 
DZ_SYSFS_PAGE_SIZE
);

441 
	`mem˝y
(
±r
, "\n", 1);

442 
±r
 += 1;

443 
±r
 +
	`•rötf
(ptr, "=================================\n");

444 i‡(
ªt
 =-
EINVAL
) {

445 
±r
 +
	`•rötf
(ptr, "UnableÅo convertÅo index. Invalid Index\n");

447 
±r
 +
	`•rötf
’å, "U«bÀÅÿc⁄vîàtÿödex.Ñë = %zd\n", 
ªt
) ;

449 
±r
 +
	`•rötf
(ptr, "=================================\n");

450  
ªt
;

452 
	`mem£t
(
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex
, 0, 
DZ_SYSFS_PAGE_SIZE
);

453 
	`mem˝y
(
±r
, "\n", 1);

454 
±r
 += 1;

455 
±r
 +
	`•rötf
(ptr, "=================================\n");

456 
±r
 +
	`•rötf
’å, "PBA TabÀ E¡ry f‹ Index %lu\n", 
pba_ödex
);

457 
±r
 +
	`•rötf
(ptr, "=================================\n");

459 i‡(
pba_ödex
 > 
pba_èbÀ_size
) {

460 
	`LOGE
("Index is greaterÅhanÜbaÅable size\n");

461 
±r
 +
	`•rötf
(ptr, "Index %lu is greaterÅhanÖbaÅable size %llu\n",

462 
pba_ödex
, 
pba_èbÀ_size
);

466 
pba_íåy
 = 
	`GET_PBA_ENTRY
(
pba_ödex
);

467 
±r
 +
	`•rötf
’å, "Öba_ödex = %lu\n", (
ULONG
)
pba_ödex
);

468 
±r
 +
	`•rötf
’å, "Öba_íåy->hash_cﬁlisi⁄_èg = %Œu\n", (
U64
)
pba_íåy
->
hash_cﬁlisi⁄_èg
);

469 
±r
 +
	`•rötf
’å, "Öba_íåy->sizê%Œu\n", (
U64
)
pba_íåy
->
size
);

470 
±r
 +
	`•rötf
’å, "Öba_íåy->ªf_˙à%Œu\n", (
U64
)
pba_íåy
->
ªf_˙t
);

471 
±r
 +
	`•rötf
’å, "pba_íåy->√xt_hash_cﬁlisi⁄_íåy = %Œu\n", (
U64
)
pba_íåy
->
√xt_íåy_ö_cﬁlisi⁄_li°
);

473 
	}
}

475 
ATOMIC64
 
dedu≥_disk_ªads
;

476 
ATOMIC64
 
dedu≥_disk_wrôes
;

477 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

478 
ATOMIC64
 
dedu≥_ˇche_hôs
;

479 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

480 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

481 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

482 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

483 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

484 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

487 
INT
 
	$sys_dedu≥_show
(
CHAR
 *
buf
)

489 
INT
 
cou¡
 = 0;

491 
cou¡
 = 
	`•rötf
(
buf
,

502 (
U64
)
dedu≥_tŸ_logiˇl_•a˚
,

503 (
U64
)
dedu≥_tŸ_physiˇl_•a˚
,

504 (
U64
)
	`ATOMIC64_READ
(
dedu≥_cur_logiˇl_•a˚
),

505 (
U64
)
	`ATOMIC64_READ
(
dedu≥_cur_physiˇl_•a˚
),

506 (
U64
)
	`ATOMIC64_READ
(
dedu≥_cur_du∂iˇã_•a˚
),

507 (
U64
)
	`ATOMIC64_READ
(
dedu≥_dñëed_íåõs
),

508 (
U64
)
	`ATOMIC64_READ
(
dedu≥_ˇche_hôs
),

509 (
U64
)
	`ATOMIC64_READ
(
dedu≥_disk_ªads
),

510 (
U64
)
	`ATOMIC64_READ
(
dedu≥_disk_wrôes
),

511 (
U64
)(
	`GET_CURRENT_TIME
()));

513 
	`LOGR
("<------------ Dedupe Show ----------->\n");

514 
	`LOGR
("%s",
buf
);

516 
	`LOGD
("Buf„∏Byã†u£d = %d\n", 
cou¡
);

517  
cou¡
;

519 
	}
}

521 
CHAR
 
avm_sysfs_íåy_gë_èbÀ_size
[
DZ_SYSFS_PAGE_SIZE
];

522 
INT
 
	$avm_gë_èbÀ_size
(
CHAR
 *
buf
)

524 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_èbÀ_size
;

525 
	`mem£t
(
avm_sysfs_íåy_gë_èbÀ_size
, 0, 
DZ_SYSFS_PAGE_SIZE
);

526 
	`mem˝y
(
±r
, "\n", 1);

527 
±r
 += 1;

528 
±r
 +
	`•rötf
(ptr, "================================\n");

529 
±r
 +
	`•rötf
(ptr, "InMemory Tables Size Information\n");

530 
±r
 +
	`•rötf
(ptr, "================================\n");

531 
±r
 +
	`•rötf
’å, "LBA TabÀ Size............%Œu (%lu sizêblocksË", 
lba_èbÀ_size
, 
LBA_BLOCK_SIZE
);

532 
±r
 +
	`•rötf
’å, "%Œu GB ", (
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
/
GB
));

533 
±r
 +
	`•rötf
’å, "%Œu MB ", (
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
/
MB
));

534 
±r
 +
	`•rötf
’å, "%Œu KB ", (
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
/
KB
));

535 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
);

537 
±r
 +
	`•rötf
’å, "HASH TabÀ Size...........%Œu (%lu sizêblocksË", 
hash_èbÀ_size
, 
HBA_BLOCK_SIZE
);

538 
±r
 +
	`•rötf
’å, "%Œu GB ", (
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
/
GB
));

539 
±r
 +
	`•rötf
’å, "%Œu MB ", (
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
/
MB
));

540 
±r
 +
	`•rötf
’å, "%Œu KB ", (
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
/
KB
));

541 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
);

543 
±r
 +
	`•rötf
’å, "PBA TabÀ Size............%Œu (%lu sizêblocksË", 
pba_èbÀ_size
, 
PBA_BLOCK_SIZE
);

544 
±r
 +
	`•rötf
’å, "%Œu GB ", (
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
/
GB
));

545 
±r
 +
	`•rötf
’å, "%Œu MB ", (
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
/
MB
));

546 
±r
 +
	`•rötf
’å, "%Œu KB ", (
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
/
KB
));

547 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
);

549 
±r
 +
	`•rötf
’å, "MDE LBA TabÀ Size........%Œu ", 
mëad©a_lba_èbÀ_size
);

550 
±r
 +
	`•rötf
’å, "%Œu GB ", (
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
/
GB
));

551 
±r
 +
	`•rötf
’å, "%Œu MB ", (
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
/
MB
));

552 
±r
 +
	`•rötf
’å, "%Œu KB ", (
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
/
KB
));

553 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
);

555 
±r
 +
	`•rötf
’å, "MDE LBA Lock TabÀ Size...%Œu ", 
mëad©a_lba_lock_èbÀ_size
);

556 
±r
 +
	`•rötf
’å, "%Œu GB ", (
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
)/
GB
));

557 
±r
 +
	`•rötf
’å, "%Œu MB ", (
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
)/
MB
));

558 
±r
 +
	`•rötf
’å, "%Œu KB ", (
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
)/
KB
));

559 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
));

561 
±r
 +
	`•rötf
’å, "TAGET_DEVICE_SIZE.........%zu (%lu sizêblocksË", 
TARGET_DEVICE_SIZE
, 
LBA_BLOCK_SIZE
);

562 
±r
 +
	`•rötf
’å, "%zu GB ", (
TARGET_DEVICE_SIZE
 * 
LBA_BLOCK_SIZE
/
GB
));

563 
±r
 +
	`•rötf
’å, "%zu MB ", (
TARGET_DEVICE_SIZE
 * 
LBA_BLOCK_SIZE
/
MB
));

564 
±r
 +
	`•rötf
’å, "%zu KB ", (
TARGET_DEVICE_SIZE
 * 
LBA_BLOCK_SIZE
/
KB
));

565 
±r
 +
	`•rötf
’å, "%zu byãs\n", 
TARGET_DEVICE_SIZE
 * 
LBA_BLOCK_SIZE
);

567 
	}
}

569 
PPBA_BLOCK
 
pba_èbÀ
;

570 
PHASH_BLOCK
 
hash_èbÀ
;

571 
PLBA_BLOCK
 
lba_èbÀ
;

572 
BITMAP
 
pba_bôm≠
;

574 
ATOMIC64
 
dedu≥_disk_ªads
;

575 
ATOMIC64
 
dedu≥_disk_wrôes
;

576 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

577 
ATOMIC64
 
dedu≥_ˇche_hôs
;

578 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

579 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

580 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

581 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

582 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

583 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

	@dedupe_engine/dedupe_engine_tables.c

9 
	~"¥ŸŸy≥s.h
"

11 
SIZE
 
dz_pba_∑ge_mempoﬁ_cou¡
;

12 
U64
 
lba_èbÀ_size
;

13 
U64
 
pba_èbÀ_size
;

14 
U64
 
hash_èbÀ_size
;

15 
BITMAP
 
gpba_bôm≠
;

16 
BITMAP
 
pba_bôm≠
;

17 
BITMAP
 
lba_bôm≠
;

19 
SPINLOCK
 
lba_èbÀ_lock
;

20 
SPINLOCK
 
hash_èbÀ_lock
;

21 
SPINLOCK
 
pba_èbÀ_lock
;

23 
U32
 
numbî_of_l⁄gs_f‹_pba
;

24 
U32
 
numbî_of_l⁄gs_f‹_lba
;

27 
U32
 
numbî_of_l⁄gs_f‹_gpba
;

29 
U64
 
	gdz_disk_io_£˘‹
 = 0;

32 
RINT
 
	$dz_pba_bôm≠_öô
(
VOID
)

34 
	`MEMSET
(&
pba_bôm≠
);

35 
	`©omic64_£t
(&
pba_bôm≠
.
num_ôems
, 0);

36 
	`•ö_lock_öô
(&
pba_bôm≠
.
bôm≠_lock
);

39 
numbî_of_l⁄gs_f‹_pba
 = 
	`BITS_TO_LONGS
(
pba_èbÀ_size
 + 1);

40 
pba_bôm≠
.
bôm≠
 = 
	`dz_kmÆloc
(
numbî_of_l⁄gs_f‹_pba
 * (), 
GFP_KERNEL
);

41 i‡(!
pba_bôm≠
.
bôm≠
) {

42 
	`LOGDDEE
("UnableÅoállocate memory forÖba bitmap\n");

43 
RETURNF
;

45 
	`mem£t
(
pba_bôm≠
.
bôm≠
 , 0, 
numbî_of_l⁄gs_f‹_pba
 * ());

46 
pba_bôm≠
.
num_of_l⁄gs
 = 
numbî_of_l⁄gs_f‹_pba
;

48 
	`ã°_™d_£t_bô
(0, 
pba_bôm≠
.
bôm≠
);

51 
	`LOGDDEF
("PBA Bôm≠:Öba_èbÀ_sizê = %Œi\n", 
pba_èbÀ_size
);

52 
	`LOGDDEF
("PBA Bôm≠:Çumbî_of_l⁄gs_f‹_pb® = %u\n", 
numbî_of_l⁄gs_f‹_pba
);

53 
	`LOGDDEF
("PBA Bôm≠: Bôm≠ Sizê = %lu\n", 
numbî_of_l⁄gs_f‹_pba
 * ());

55 
RETURNS
;

57 
	}
}

60 
RINT
 
	$dz_g¨bage_pba_bôm≠_öô
(
VOID
)

62 
	`MEMSET
(&
gpba_bôm≠
);

63 
	`©omic64_£t
(&
gpba_bôm≠
.
num_ôems
, 0);

64 
	`•ö_lock_öô
(&
gpba_bôm≠
.
bôm≠_lock
);

67 
numbî_of_l⁄gs_f‹_gpba
 = 
	`BITS_TO_LONGS
(
pba_èbÀ_size
 + 1);

68 
gpba_bôm≠
.
bôm≠
 = 
	`dz_kmÆloc
(
numbî_of_l⁄gs_f‹_gpba
 * (), 
GFP_KERNEL
);

69 i‡(!
gpba_bôm≠
.
bôm≠
) {

70 
	`LOGDDEE
("UnableÅoállocate memory for garbageÖba bitmap\n");

71 
RETURNF
;

73 
	`mem£t
(
gpba_bôm≠
.
bôm≠
 , 0, 
numbî_of_l⁄gs_f‹_gpba
 * ());

74 
gpba_bôm≠
.
num_of_l⁄gs
 = 
numbî_of_l⁄gs_f‹_gpba
;

76 
	`ã°_™d_£t_bô
(0, 
gpba_bôm≠
.
bôm≠
);

79 
	`LOGDDEF
("G¨bagêPBA Bôm≠:Öba_èbÀ_sizê = %Œi\n", 
pba_èbÀ_size
);

80 
	`LOGDDEF
("G¨bagêPBA Bôm≠:Çumbî_of_l⁄gs_f‹_gpb®%u\n", 
numbî_of_l⁄gs_f‹_gpba
);

81 
	`LOGDDEF
("G¨bagêPBA Bôm≠: Bôm≠ Sizê = %lu\n", 
numbî_of_l⁄gs_f‹_gpba
 * ());

82 
RETURNS
;

83 
	}
}

85 
RVOID
 
	$dz_¥öt_bôm≠
(
BITMAP
 *
bôm≠
)

87 
CHAR
 *
buf
 = 
NULL
;

88 
U64
 *
v¨
 = 
NULL
;

89 
U64
 
i
 = 0;

91 
U32
 
numbî_of_l⁄gs
 = 
bôm≠
->
num_of_l⁄gs
;

95 
buf
 = 
	`dz_kmÆloc
((
numbî_of_l⁄gs
 * ()Ë+ 1, 
GFP_KERNEL
);

96 
	`mem£t
(
buf
 , 0, (
numbî_of_l⁄gs
 * ()) + 1);

98 
v¨
 = (
U64
 *)
bôm≠
->bitmap;

99 
i
 = 0; i < 
numbî_of_l⁄gs
; i++) {

100 i‡(*
v¨
 != 0) {

101 
	`LOG
("[%Œu] Bôm≠ Buf„∏Såög = 0x%Œx\n",
i
, *
v¨
++);

105 
	}
}

108 
RINT
 
	$dz_lba_bôm≠_öô
(
VOID
)

110 
U64
 
tmp_v¨
;

111 
	`MEMSET
(&
lba_bôm≠
);

112 
	`©omic64_£t
(&
lba_bôm≠
.
num_ôems
, 0);

113 
	`•ö_lock_öô
(&
lba_bôm≠
.
bôm≠_lock
);

115 
numbî_of_l⁄gs_f‹_lba
 = 
	`BITS_TO_LONGS
(
lba_èbÀ_size
);

116 
lba_bôm≠
.
bôm≠
 = 
	`dz_kmÆloc
(
numbî_of_l⁄gs_f‹_lba
 * (), 
GFP_KERNEL
);

117 i‡(!
lba_bôm≠
.
bôm≠
) {

118 
	`LOGDDEE
("UnableÅoállocate memory forÜba bitmap\n");

119 
RETURNF
;

121 
	`mem£t
(
lba_bôm≠
.
bôm≠
 , 0, 
numbî_of_l⁄gs_f‹_lba
 * ());

122 
lba_bôm≠
.
num_of_l⁄gs
 = 
numbî_of_l⁄gs_f‹_lba
;

123 
	`LOGDDEF
("LBA Bôm≠:Üba_èbÀ_sizê = %Œi\n", 
lba_èbÀ_size
);

124 
	`LOGDDEF
("LBA Bôm≠:Çumbî_of_l⁄gs_f‹_lb® = %u\n", 
numbî_of_l⁄gs_f‹_lba
);

125 
	`LOGDDEF
("LBA Bôm≠: Bôm≠ Sizê = %lu\n", 
numbî_of_l⁄gs_f‹_lba
 * ());

128 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

129 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

131 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

132 
	`PRINT_U64
(
tmp_v¨
);

133 
	`dz_¥öt_bôm≠
(&
lba_bôm≠
);

135 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

136 
	`PRINT_U64
(
tmp_v¨
);

137 
	`dz_¥öt_bôm≠
(&
lba_bôm≠
);

139 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

140 
	`PRINT_U64
(
tmp_v¨
);

141 
	`dz_¥öt_bôm≠
(&
lba_bôm≠
);

143 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

144 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

145 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

146 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

147 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

148 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

149 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

150 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

151 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

152 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

153 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

154 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

155 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

156 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

157 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

158 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

159 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

160 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

161 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

162 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

163 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

164 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

165 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

166 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

167 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

168 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

169 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

170 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

171 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

172 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

173 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

174 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

175 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

176 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

177 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

178 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

179 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

180 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

181 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

182 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

183 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

184 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

185 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

186 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

187 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

188 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

189 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

190 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

191 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

192 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

193 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

194 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

195 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

196 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

197 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

198 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

199 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

200 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

201 
	`PRINT_U64
(
tmp_v¨
);

202 
	`dz_¥öt_bôm≠
(&
lba_bôm≠
);

203 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

204 
	`PRINT_U64
(
tmp_v¨
);

205 
	`dz_¥öt_bôm≠
(&
lba_bôm≠
);

206 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

207 
	`PRINT_U64
(
tmp_v¨
);

208 
	`dz_¥öt_bôm≠
(&
lba_bôm≠
);

209 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

210 
	`PRINT_U64
(
tmp_v¨
);

211 
	`dz_¥öt_bôm≠
(&
lba_bôm≠
);

213 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

214 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

215 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

216 
tmp_v¨
 = 
	`dz_gë_‰ì_lba_ödex
();

217 
	`PRINT_U64
(
tmp_v¨
);

218 
	`dz_put_lba_ödex
(0);

219 
	`dz_¥öt_bôm≠
(&
lba_bôm≠
);

220 
RETURNS
;

221 
	}
}

223 
U64
 
	$dz_gë_‰ì_pba_ödex
(
VOID
)

225 
U64
 
pba_ödex
;

226 
	`•ö_lock
(&
pba_bôm≠
.
bôm≠_lock
);

227 
pba_ödex
 = 
	`föd_fú°_zîo_bô
(
pba_bôm≠
.
bôm≠
, 
pba_èbÀ_size
);

228 i‡(
pba_ödex
 >
pba_èbÀ_size
) {

229 
	`LOGDDEE
("All PBAsáreÉxausted\n");

230 
	`•ö_u∆ock
(&
pba_bôm≠
.
bôm≠_lock
);

231 
	`BUG_ON
(1);

232 
RETURNF
;

234 
	`ã°_™d_£t_bô
(
pba_ödex
, 
pba_bôm≠
.
bôm≠
);

235 
	`•ö_u∆ock
(&
pba_bôm≠
.
bôm≠_lock
);

236 
	`LOGD
("pba_ödex %Œòacquúed\n", 
pba_ödex
);

238  
pba_ödex
;

239 
	}
}

241 
RINT
 
	$dz_put_pba_ödex
(
U64
 
pba_ödex
)

243 
	`•ö_lock
(&
pba_bôm≠
.
bôm≠_lock
);

244 i‡(
pba_ödex
 >
pba_èbÀ_size
) {

245 
	`LOGDDEE
("InvalidÖba_indexÑeceived\n");

246 
	`BUG_ON
(1);

248 i‡(!
	`ã°_™d_˛ór_bô
(
pba_ödex
, 
pba_bôm≠
.
bôm≠
)){

249 
	`LOGDDEE
("ã°_™d_˛ór_bô faûed f‹Öba_ödex %Œi\n", 
pba_ödex
);

252 
	`•ö_u∆ock
(&
pba_bôm≠
.
bôm≠_lock
);

253 
	`LOGD
("pba_ödex %ŒòªÀa£d\n", 
pba_ödex
);

254  
pba_ödex
;

255 
	}
}

257 
U64
 
	$dz_£t_g¨bage_pba_ödex
(
U64
 
pba_ödex
)

259 
	`•ö_lock
(&
gpba_bôm≠
.
bôm≠_lock
);

260 i‡(
pba_ödex
 >
pba_èbÀ_size
) {

261 
	`LOGDDEE
("InvalidÖba_indexÑeceived\n");

262 
	`BUG_ON
(1);

264 
	`ã°_™d_£t_bô
(
pba_ödex
, 
gpba_bôm≠
.
bôm≠
);

266 
	`•ö_u∆ock
(&
gpba_bôm≠
.
bôm≠_lock
);

267 
	`LOGD
("pba_ödex %Œò£àf‹ g¨bagêcﬁÀ˘i⁄\n", 
pba_ödex
);

268  
pba_ödex
;

269 
	}
}

272 
S64
 
	$dz_gë_‰ì_lba_ödex
(
VOID
)

274 
U64
 
lba_ödex
;

275 
	`•ö_lock
(&
lba_bôm≠
.
bôm≠_lock
);

276 
lba_ödex
 = 
	`föd_fú°_zîo_bô
(
lba_bôm≠
.
bôm≠
, 
lba_èbÀ_size
);

277 i‡(
lba_ödex
 >
lba_èbÀ_size
) {

278 
	`LOGDDEE
("All LBAsáreÉxausted\n");

279 
	`•ö_u∆ock
(&
lba_bôm≠
.
bôm≠_lock
);

280 
RETURNF
;

282 
	`ã°_™d_£t_bô
(
lba_ödex
, 
lba_bôm≠
.
bôm≠
);

283 
	`•ö_u∆ock
(&
lba_bôm≠
.
bôm≠_lock
);

286  
lba_ödex
;

287 
	}
}

288 
EXPORT_SYMBOL
(
dz_gë_‰ì_lba_ödex
);

290 
RINT
 
	$dz_put_lba_ödex
(
U64
 
lba_ödex
)

292 
	`•ö_lock
(&
lba_bôm≠
.
bôm≠_lock
);

293 i‡(
lba_ödex
 >
lba_èbÀ_size
) {

294 
	`LOGDDEE
("InvalidÜba_indexÑeceived\n");

295 
	`BUG_ON
(1);

297 i‡(!
	`ã°_™d_˛ór_bô
(
lba_ödex
, 
lba_bôm≠
.
bôm≠
)){

298 
	`LOGDDEE
("ã°_™d_˛ór_bô faûed f‹Üba_ödex %Œi\n", 
lba_ödex
);

301 
	`•ö_u∆ock
(&
lba_bôm≠
.
bôm≠_lock
);

303  
lba_ödex
;

304 
	}
}

305 
EXPORT_SYMBOL
(
dz_put_lba_ödex
);

309 
RPVOID
 
	$dz_¸óã_hash_èbÀ
(
SIZE
 
èbÀ_size
)

312 
PVOID
 
±r
 = 
	`vmÆloc_u£r
(
èbÀ_size
 * (
HASH_BLOCK
));

313 i‡(!
±r
) {

314 
	`LOGDDEE
("UnableÅoállocate memory for Hash Table\n");

315  
NULL
;

317 
	`LOGDDEF
("HASH Table created ofÉntries %zu, size %zu bytes\n",

318 
èbÀ_size
,ÅabÀ_sizê* (
HASH_BLOCK
));

320 
	`log_mem‹y_ußge
(
èbÀ_size
 * (
HASH_BLOCK
));

321 
	`mem£t
(
±r
, 0, 
èbÀ_size
 * (
HASH_BLOCK
));

323 
	`•ö_lock_öô
(&
hash_èbÀ_lock
);

325  
±r
;

326 
	}
}

328 
RVOID
 
	$dz_de°roy_hash_èbÀ
(
PVOID
 
±r
)

330 i‡(
±r
) {

331 
	`v‰ì
(
±r
);

332 
±r
 = 
NULL
;

333 
	`ªdu˚_mem‹y_ußge
(
hash_èbÀ_size
 * (
HASH_BLOCK
));

334 
	`LOGDDEF
("HASH Table destroyed\n");

336 
	}
}

338 
RPVOID
 
	$dz_¸óã_pba_èbÀ
(
SIZE
 
èbÀ_size
)

340 
PPBA_BLOCK
 
±r
 = (PPBA_BLOCK)
	`vmÆloc_u£r
(
èbÀ_size
 * (
PBA_BLOCK
));

341 i‡(!
±r
) {

342 
	`LOGDDEE
("UnableÅoállocate memory for Pba Table\n");

343  
NULL
;

345 
	`LOGDDEF
("PBA Table created ofÉntries %zu, size %zu bytes\n",

346 
èbÀ_size
,ÅabÀ_sizê* (
PBA_BLOCK
));

348 
	`mem£t
(
±r
, 0, 
èbÀ_size
 * (
PBA_BLOCK
));

349 
	`log_mem‹y_ußge
(
èbÀ_size
 * (
PBA_BLOCK
));

351 
	`•ö_lock_öô
(&
pba_èbÀ_lock
);

352 
	`dz_pba_bôm≠_öô
();

353 
	`dz_g¨bage_pba_bôm≠_öô
();

355  
±r
;

356 
	}
}

358 
RVOID
 
	$dz_de°roy_pba_èbÀ
(
PPBA_BLOCK
 
±r
)

360 i‡(
±r
) {

361 
	`dz_k‰ì
(
pba_bôm≠
.
bôm≠
, (
numbî_of_l⁄gs_f‹_pba
 * ()));

362 
	`dz_k‰ì
(
gpba_bôm≠
.
bôm≠
, (
numbî_of_l⁄gs_f‹_gpba
 * ()));

363 
	`v‰ì
(
±r
);

364 
±r
 = 
NULL
;

365 
	`ªdu˚_mem‹y_ußge
(
pba_èbÀ_size
 * (
PBA_BLOCK
));

366 
	`LOGDDEF
("PBA Table destroyed\n");

368 
	}
}

370 
RPVOID
 
	$dz_¸óã_lba_èbÀ
(
SIZE
 
èbÀ_size
)

373 
INT
 
i
 = 0;

374 
PVOID
 
±r
 = 
	`vmÆloc_u£r
(
èbÀ_size
 * (
LBA_BLOCK
));

375 
PLBA_BLOCK
 
lb
 = 
NULL
;

376 i‡(!
±r
) {

377 
	`LOGDDEE
("UnableÅoállocate memory for LBA Table\n");

378  
NULL
;

380 
	`LOGDDEF
("LBA Table created ofÉntries %zu, size %zu bytes\n",

381 
èbÀ_size
,ÅabÀ_sizê* (
LBA_BLOCK
));

383 
	`mem£t
(
±r
, 0, 
èbÀ_size
 * (
LBA_BLOCK
));

384 
	`log_mem‹y_ußge
(
èbÀ_size
 * (
LBA_BLOCK
));

387 
lb
 = (
PLBA_BLOCK
)
±r
;

388 
	`•ö_lock_öô
(&
lba_èbÀ_lock
);

389 
i
=0; i < 
èbÀ_size
; i++) {

390 
	`INIT_LIST_HEAD
(&
lb
[
i
].
ioq_hód
);

393 
	`dz_lba_bôm≠_öô
();

394  
±r
;

395 
	}
}

397 
RVOID
 
	$dz_de°roy_lba_èbÀ
(
PVOID
 
±r
)

399 i‡(
±r
) {

400 
	`dz_k‰ì
(
lba_bôm≠
.
bôm≠
, (
numbî_of_l⁄gs_f‹_lba
 * ()));

401 
	`v‰ì
(
±r
);

402 
±r
 = 
NULL
;

403 
	`ªdu˚_mem‹y_ußge
(
lba_èbÀ_size
 * (
LBA_BLOCK
));

404 
	`LOGDDEF
("LBA Table destroyed\n");

406 
	}
}

408 
VOID
 
	$dz_upd©e_pba_íåy
(
PPBA_BLOCK
 
pba_íåy
, 
U64
 
èg
, 
U32
 
size
, U64 
ªf_˙t
, U64 
√xt
)

410 
pba_íåy
->
hash_cﬁlisi⁄_èg
 = 
èg
;

411 
pba_íåy
->
size
 = size;

412 
pba_íåy
->
ªf_˙t
 =Ñef_cnt;

413 
pba_íåy
->
√xt_íåy_ö_cﬁlisi⁄_li°
 = 
√xt
;

414 
	`LOGD
("pb®íåy upd©ed f‹Åag %Œi\n", (
U64
Ë
èg
);

415 
	}
}

417 
VOID
 
	$dz_upd©e_lba_íåy
(
PLBA_BLOCK
 
lba_íåy
, 
U32
 
hash_ödex
, 
U64
 
èg
)

419 
lba_íåy
->
hash_ödex
 = hash_index;

420 
lba_íåy
->
hash_cﬁlisi⁄_èg
 = 
èg
;

421 
	`LOGD
("lbaÉntry updated\n");

422 
	}
}

424 
VOID
 
	$dz_upd©e_hash_íåy
(
PHASH_BLOCK
 
hash_íåy
, 
U64
 
pba_ödex
)

426 
hash_íåy
->
pba_ödex
 =Öba_index;

427 
	`LOGD
("hashÉ¡ry upd©ed f‹Öba_ödex %Œi\n", (
U64
)
pba_ödex
);

428 
	}
}

	@dedupe_engine/dedupe_engine_write.c

9 
	~"¥ŸŸy≥s.h
"

11 
PBLOCK_DEVICE
 
DATA_DISK_DEVICE
;

12 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

13 
SIZE
 
dz_pba_∑ge_mempoﬁ_cou¡
;

14 
BITMAP
 
pba_bôm≠
;

15 
PHASH_BLOCK
 
hash_èbÀ
;

16 
CHAR
 
sysfs_avm_gë_èrgë_«me
[
DZ_SYSFS_PAGE_SIZE
];

17 
SIZE
 
dz_pba_∑ge_mempoﬁ_cou¡
;

18 
U64
 
lba_èbÀ_size
;

19 
U64
 
pba_èbÀ_size
;

20 
U64
 
hash_èbÀ_size
;

21 
BITMAP
 
pba_bôm≠
;

22 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

23 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

25 
SPINLOCK
 
lba_èbÀ_lock
;

26 
SPINLOCK
 
hash_èbÀ_lock
;

27 
SPINLOCK
 
pba_èbÀ_lock
;

29 
U64
 
dz_disk_io_£˘‹
;

30 
PBLOCK_DEVICE
 
avm_mëad©a_bdev
;

31 
PMD_LOCK
 
md_lock_èbÀ
;

33 
ATOMIC64
 
dedu≥_disk_ªads
;

34 
ATOMIC64
 
dedu≥_disk_wrôes
;

35 
ATOMIC64
 
dedu≥_ˇche_hôs
;

36 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

37 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

38 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

39 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

40 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

41 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

49 
RINT
 
	$dz_wrôe_block_to_øw_disk_sync_öã∫Æ
(
PIOREQUEST
 
i‹eque°
,

50 
SECTOR
 
£˘‹
,

51 
PLBA_BLOCK
 
lba_íåy
)

53 
PBIO
 
bio
 = 
NULL
;

54 
INT
 
îr‹
 = 
SUCCESS
;

55 
PVOID
 
buf„r
 = 
i‹eque°
->
i‹_bv_buf„r
;

56 
PDD_INFO
 
ddöfo
 = 
i‹eque°
->
i‹_ddöfo
;

57 
DZ_COMPLETION
 
io_com∂ëi⁄
;

59 
PPAGE
 
∑gîef
 = 
NULL
;

60 
lba_íåy
 = 
ddöfo
->lba_entry;

63 
io_com∂ëi⁄
.
îr‹
 = 
SUCCESS
;

66 
bio
 = 
	`dz_bio_∑ge_Æloc
(
DATA_DISK_DEVICE
);

68 
∑gîef
 = 
	`bio_∑ge
(
bio
);

69 
	`LOGD
("Bef‹êPagêCou¡ = %d\n", 
	`©omic_ªad
(&((
∑gîef
)->
_cou¡
)));

71 
	`DZ_BIO_SET_SECTOR
(
bio
, 
£˘‹
);

72 
	`DZ_BIO_SET_END_IO
(
bio
, 
dz_wrôe_biod⁄e_sync
);

73 
	`DZ_BIO_SET_ZIDX
(
bio
);

74 
	`DZ_BIO_SET_WRITE
(
bio
);

75 
	`DZ_BIO_SET_NEXT
(
bio
, 
NULL
);

76 
bio
->
bi_¥iv©e
 = (
VOID
 *)&
io_com∂ëi⁄
;

79 
	`COPY_BUFFER_TO_PAGE
(
	`bio_∑ge
(
bio
), 
buf„r
);

81 
	`öô_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

83 
	`DZ_OS_KERNEL_BIO_GET
(
bio
);

85 
	`DZ_OS_KERNEL_GENERIC_MAKE_REQUEST
(
bio
);

87 
	`LOGD
("Waiting for completion for iorequest %p @Üba %lli\n",

88 
i‹eque°
, (
U64
)i‹eque°->
i‹_lba
);

96 
	`ATOMIC64_INC
(
dedu≥_disk_wrôes
);

97 
	`waô_f‹_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

102 
îr‹
 = 
io_com∂ëi⁄
.error;

104 i‡(
	`u∆ikñy
(
îr‹
)){

105 
	`LOGE
("Eº‹ i¿wrôêtÿøw disk . Eº‹ Codê: %d", 
îr‹
);

106 
	`¥öt_biom
(
bio
, "bio withÉrror");

107 
	`BUG_ON
(1);

110 i‡(!
îr‹
) {

112 
	`_RELEASE_LBA_LOCK_WRITE
(
lba_íåy
);

113 
	`dz_dedu≥_‰ì
(
i‹eque°
->
i‹_ddöfo
);

122 
	`DZ_DDE_IOREQUEST_DONE
(
i‹eque°
);

131 
	`dz_∑ge_‰ì
(
∑gîef
);

132 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

134 
RETURNS
;

138 
	`_RELEASE_LBA_LOCK_WRITE
(
lba_íåy
);

139 
	`dz_dedu≥_‰ì
(
i‹eque°
->
i‹_ddöfo
);

140 
	`DZ_DDE_IOREQUEST_DONE_ERROR
(
i‹eque°
);

146 
	`dz_∑ge_‰ì
(
∑gîef
);

147 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

149 
RETURNF
;

150 
	}
}

154 
VOID
 
	$dz_dedu≥_ovîwrôe_upd©e_ﬁd_íåõs
(
PIOREQUEST
 
i‹eque°
, 
U32
 
lba_hash_ödex
, 
U64
 
lba_hash_cﬁlisi⁄_ödex
)

156 
PPBA_BLOCK
 
ovîwrôe_pba_íåy
 = 
NULL
;

157 
PPBA_BLOCK
 
hód_pba_li°
 = 
NULL
;

158 
U64
 
ovîwrôe_pba_ödex
 = 0;

159 
U64
 
¥ev_to_ovîwrôe_ödex
 = 0;

160 
PHASH_BLOCK
 
ﬁd_hash_íåy
 = 
NULL
;

161 
PIOREQUEST
 
i‹eque°_dñ
 = 
NULL
;

162 
U64
 
ªåy_˙t
 = 0;

172 
ﬁd_hash_íåy
 = 
	`GET_HBA_ENTRY
(
lba_hash_ödex
);

173 
	`_ACQUIRE_HBA_LOCK
(
ﬁd_hash_íåy
);

176 
ovîwrôe_pba_ödex
 = 
ﬁd_hash_íåy
->
pba_ödex
;

177 
ovîwrôe_pba_íåy
 = 
	`GET_PBA_ENTRY
(
ovîwrôe_pba_ödex
);

178 
hód_pba_li°
 = 
ovîwrôe_pba_íåy
;

180 
	`_ACQUIRE_PBA_LOCK
(
hód_pba_li°
);

182 
¥ev_to_ovîwrôe_ödex
 = 0;

185 
ovîwrôe_pba_íåy
->
hash_cﬁlisi⁄_èg
 !
lba_hash_cﬁlisi⁄_ödex
) {

186 
¥ev_to_ovîwrôe_ödex
 = 
ovîwrôe_pba_ödex
;

187 
ovîwrôe_pba_ödex
 = 
ovîwrôe_pba_íåy
->
√xt_íåy_ö_cﬁlisi⁄_li°
;

188 
ovîwrôe_pba_íåy
 = 
	`GET_PBA_ENTRY
(
ovîwrôe_pba_ödex
);

189 i‡(
ªåy_˙t
++ > 16) {

190 
	`LOGR
("ªåy_˙à%Œò@lba_hash_ödex = %Œi\n", 
ªåy_˙t
++, (
U64
)
lba_hash_ödex
);

191 
SL1
;

195 i‡(
ovîwrôe_pba_íåy
->
ªf_˙t
 == 0) {

196 
	`LOGE
("overwrite_pba_entry->ref_cnt cannot be zero\n");

198 
	`BUG_ON
(1);

200 
ovîwrôe_pba_íåy
->
ªf_˙t
-- ;

202 
	`LOGD
("ReducedÑef count ofÖba_index %lli = %llu\n",

203 (
U64
)
ovîwrôe_pba_ödex
,

204 (
U64
)
ovîwrôe_pba_íåy
->
ªf_˙t
);

208 i‡(
ovîwrôe_pba_íåy
->
ªf_˙t
) {

210 
	`_DZ_DDE_RELEASE_PBA_LOCK
(
hód_pba_li°
);

211 
	`_DZ_DDE_RELEASE_HBA_LOCK
(
ﬁd_hash_íåy
);

212 i‡(
i‹eque°
) {

213 
	`i‹eque°_put
(
i‹eque°
);

219 i‡(
¥ev_to_ovîwrôe_ödex
 == 0) {

221 
	`DZ_DDE_UPDATE_HASH_TABLE
(
ﬁd_hash_íåy
, 
ovîwrôe_pba_íåy
->
√xt_íåy_ö_cﬁlisi⁄_li°
);

227 (
	`GET_PBA_ENTRY
(
¥ev_to_ovîwrôe_ödex
))->
√xt_íåy_ö_cﬁlisi⁄_li°
 = 
ovîwrôe_pba_íåy
->next_entry_in_collision_list;

229 
	`_DZ_DDE_RELEASE_PBA_LOCK
(
hód_pba_li°
);

230 
	`_DZ_DDE_RELEASE_HBA_LOCK
(
ﬁd_hash_íåy
);

234 
	`dz_put_pba_ödex
(
ovîwrôe_pba_ödex
);

237 i‡(
i‹eque°
) {

238 
i‹eque°
->
i‹_£˘‹
 = 
ovîwrôe_pba_ödex
;

239 
	`dz_bec_¥o˚ed_pba_∑ge_dñëe
(
i‹eque°
);

241 
i‹eque°_dñ
 = 
	`dz_io_Æloc
();

242 if(
i‹eque°_dñ
) {

243 
i‹eque°_dñ
->
i‹_£˘‹
 = 
ovîwrôe_pba_ödex
;

244 
	`i‹eque°_gë
(
i‹eque°_dñ
);

245 
	`dz_bec_¥o˚ed_pba_∑ge_dñëe
(
i‹eque°_dñ
);

248 
	`ATOMIC64_INC
(
dedu≥_dñëed_íåõs
);

250 
	}
}

251 
BOOL
 
	$com∑ª_∑ge_™d_buf„r
(
PPAGE
 
s1
 , 
PVOID
 
s2
)

253 
PVOID
 
s1∑gebuf
 = 
NULL
;

254 
PVOID
 
s2∑gebuf
 = 
s2
;

256 
s1∑gebuf
 = 
	`km≠
(
s1
);

257 i‡(
	`memcmp
(
s1∑gebuf
, 
s2∑gebuf
, 
PAGE_SIZE
) == 0) {

258 
	`kunm≠
(
s1
);

259  
åue
;

261 
	`kunm≠
(
s1
);

262  
Ál£
;

264 
	}
}

277 
PDD_INFO
 
	$dz_¸óã_dedu≥_öfo
(
PIOREQUEST
 
i‹eque°
)

279 
U32
 *
hash_¨øy
 = 
NULL
;

280 
PVOID
 
∑gebuf
 = 
i‹eque°
->
i‹_bv_buf„r
;

281 
PDD_INFO
 
ddöfo
 = 
NULL
;

283 
ddöfo_Æloc
:

284 
ddöfo
 = 
	`dz_dedu≥_Æloc
();

285 i‡(!
ddöfo
) {

286 
	`SLEEP_MILLI_SECONDS
(1);

287 
ddöfo_Æloc
;

289 
	`MEMSET
(
ddöfo
);

290 
hash_¨øy
 = 
ddöfo
->
hash
;

291 
	`dz_gíî©e_hash
(
∑gebuf
, 
PAGE_SIZE
, 
hash_¨øy
);

293 
ddöfo
->
√w_hash_ödex
 = 
	`dz_gë_hash_ödex
(
hash_¨øy
[0]);

295 
	`LOGD
("Hash generated forÜba %lli New hash index = %lli\n",

296 (
U64
)
i‹eque°
->
i‹_lba
, 
ddöfo
->
√w_hash_ödex
);

298 
ddöfo
->
lba_íåy
 = 
	`GET_LBA_ENTRY
(
i‹eque°
->
i‹_lba
);

299 
ddöfo
->
hba_íåy
 = 
	`GET_HBA_ENTRY
(ddöfo->
√w_hash_ödex
);

300 
i‹eque°
->
i‹_ddöfo
 = 
ddöfo
;

301  
ddöfo
;

302 
	}
}

310 
U64
 
	$dz_dedu≥_gë_pba_ödex
(
PIOREQUEST
 
i‹eque°
, 
U64
 
hash_pba_ödex
,

311 
U64
 *
œ°_pba_ödex
, U64 *
√xt_hash_cﬁlisi⁄_èg
 )

313 
U64
 
pba_ödex
 = 0;

314 
U64
 
¥ev_pba_ödex
 = 0;

315 
PPBA_BLOCK
 
pba_íåy
 = 
NULL
;

316 
PPAGE
 
ªad_∑ge
 = 
NULL
;

317 
PDD_INFO
 
ddöfo
 = 
i‹eque°
->
i‹_ddöfo
;

319 
PBIO
 
bio
 = 
	`dz_bio_∑ge_Æloc
(
DATA_DISK_DEVICE
);

320 
INT
 
ªåy_˙t
 = 0;

321 
INT
 
diskr_˙t
 = 0;

323 i‡(!
bio
) {

325 
	`BUG_ON
(1);

328 
pba_ödex
 = 
hash_pba_ödex
;

331 if(
	`dz_bec_pba_∑ge_lookup
(
pba_ödex
, 
bio
)) {

332 
ªad_∑ge
 = 
	`bio_∑ge
(
bio
);

333 
	`ATOMIC64_INC
(
dedu≥_ˇche_hôs
);

335 
	`DZ_BIO_SET_SECTOR
(
bio
, 
	`dz_c⁄vît_lba_to_£˘‹
(
pba_ödex
));

336 
ªad_∑ge
 = 
	`dz_ªad_∑ge_sync
(
bio
);

338 
	`ATOMIC64_INC
(
dedu≥_disk_ªads
);

339 
diskr_˙t
++;

341 i‡(
ªåy_˙t
 >= 0) {

345 
pba_íåy
 = 
	`GET_PBA_ENTRY
(
pba_ödex
);

347 i‡(
ªåy_˙t
 == 0) {

360 i‡(
ªad_∑ge
) {

361 i‡(
	`com∑ª_∑ge_™d_buf„r
(
ªad_∑ge
 , 
i‹eque°
->
i‹_bv_buf„r
 )) {

366 
	`dz_bio_∑ge_‰ì
(
bio
);

369 
ddöfo
->
dedu≥_pba_ödex
 = 
pba_ödex
;

370  
DZ_DDE_WRITE_TYPE_DEDUPE
 ;

378 
	`LOGE
("Read IO Failure during dedupe detection\n");

380 
	`BUG_ON
(1);

381 
RETURNF
;

383 
¥ev_pba_ödex
 = 
pba_ödex
;

384 
pba_ödex
 = 
pba_íåy
->
√xt_íåy_ö_cﬁlisi⁄_li°
;

387 } 
pba_ödex
 != 0);

391 *
œ°_pba_ödex
 = 
¥ev_pba_ödex
;

392 *
√xt_hash_cﬁlisi⁄_èg
 = (
pba_íåy
->
hash_cﬁlisi⁄_èg
 + 1);

393 
	`dz_bio_∑ge_‰ì
(
bio
);

394  
DZ_DDE_WRITE_TYPE_HASH_COLLISON
;

396 
	}
}

398 
RINT
 
	$dz_dedu≥_check_wrôe_ty≥
(
PIOREQUEST
 
i‹eque°
, 
U64
 
hash_pba_ödex
,

399 
U64
 *
œ°_pba_ödex
, U64 *
√xt_hash_cﬁlisi⁄_èg
 )

402 
U64
 
pba_ödex
 = 0;

403 
U64
 
¥ev_pba_ödex
 = 0;

404 
PPBA_BLOCK
 
pba_íåy
 = 
NULL
;

406 
PPAGE
 
ªad_∑ge
 = 
NULL
;

407 
PDD_INFO
 
ddöfo
 = 
i‹eque°
->
i‹_ddöfo
;

408 
PLBA_BLOCK
 
lba_íåy
 = 
ddöfo
->lba_entry;

409 
PBIO
 
bio
 = 
	`dz_bio_∑ge_Æloc
(
DATA_DISK_DEVICE
);

410 
INT
 
ªåy_˙t
 = 0;

411 
INT
 
diskr_˙t
 = 0;

413 i‡(!
bio
) {

415 
	`BUG_ON
(1);

418 
pba_ödex
 = 
hash_pba_ödex
;

421 if(
	`dz_bec_pba_∑ge_lookup
(
pba_ödex
, 
bio
)) {

422 
ªad_∑ge
 = 
	`bio_∑ge
(
bio
);

423 
	`ATOMIC64_INC
(
dedu≥_ˇche_hôs
);

425 
	`DZ_BIO_SET_SECTOR
(
bio
, 
	`dz_c⁄vît_lba_to_£˘‹
(
pba_ödex
));

426 
ªad_∑ge
 = 
	`dz_ªad_∑ge_sync
(
bio
);

427 
	`ATOMIC64_INC
(
dedu≥_disk_ªads
);

428 
diskr_˙t
++;

430 i‡(
ªåy_˙t
 >= 0) {

434 
pba_íåy
 = 
	`GET_PBA_ENTRY
(
pba_ödex
);

436 i‡(
ªåy_˙t
 == 0) {

450 i‡(
ªad_∑ge
) {

451 i‡(
	`com∑ª_∑ge_™d_buf„r
(
ªad_∑ge
 , 
i‹eque°
->
i‹_bv_buf„r
 )) {

456 
	`dz_bio_∑ge_‰ì
(
bio
);

457 i‡(
lba_íåy
->
pba_ödex
 ==Öba_index) {

458 i‡(
pba_íåy
->
hash_cﬁlisi⁄_èg
 !
lba_íåy
->hash_collision_tag) {

459 
	`LOGR
("Returned Inside writeÅypeÖba_index = %lli,Ñetry_cnt=%d\n",

460 
pba_ödex
, 
ªåy_˙t
++);

461 
	`LOG
("lba_tag = %lli,Öba_tag = %lli\n",

462 (
U64
)
lba_íåy
->
hash_cﬁlisi⁄_èg
,

463 (
U64
)
pba_íåy
->
hash_cﬁlisi⁄_èg
);

464 
SL1
;

465 
	`BUG_ON
(1);

469 i‡(
lba_íåy
->
pba_ödex
 ==Öba_index) {

470  
DZ_DDE_WRITE_TYPE_OVERWRITE
 ;

473 
ddöfo
->
dedu≥_pba_ödex
 = 
pba_ödex
;

474  
DZ_DDE_WRITE_TYPE_DEDUPE
 ;

483 
	`LOGE
("Read IO Failure during dedupe detection\n");

485 
	`BUG_ON
(1);

486 
RETURNF
;

488 
¥ev_pba_ödex
 = 
pba_ödex
;

489 
pba_ödex
 = 
pba_íåy
->
√xt_íåy_ö_cﬁlisi⁄_li°
;

492 } 
pba_ödex
 != 0);

496 *
œ°_pba_ödex
 = 
¥ev_pba_ödex
;

497 *
√xt_hash_cﬁlisi⁄_èg
 = (
pba_íåy
->
hash_cﬁlisi⁄_èg
 + 1);

498 
	`dz_bio_∑ge_‰ì
(
bio
);

499  
DZ_DDE_WRITE_TYPE_HASH_COLLISON
;

500 
	}
}

527 
RVOID
 
	$dz_dedu≥_wrôe_io
(
PIOREQUEST
 
i‹eque°
)

529 
INT
 
ªt
 = 
SUCCESS
;

530 
PLBA_BLOCK
 
lba_íåy
 = 
NULL
;

531 
PHBA_BLOCK
 
hba_íåy
 = 
NULL
;

532 
PPBA_BLOCK
 
pba_íåy_cuº
 = 
NULL
;

534 
PPBA_BLOCK
 
pba_íåy_dedu≥

NULL
;

535 
PDD_INFO
 
ddöfo
 = 
NULL
;

536 
PPBA_BLOCK
 
‰ì_pba_íåy
 = 
NULL
;

537 
U64
 
‰ì_pba_ödex
 = 0;

539 
SECTOR
 
£˘‹
 = 0;

540 
U64
 
ﬁd_lba_hash_ödex
 = 0;

541 
U64
 
ﬁd_lba_hash_cﬁlisi⁄_èg
 = 0;

542 
U64
 
œ°_pba_ödex
 = 0;

543 
U64
 
√xt_hash_cﬁlisi⁄_èg
 = 0;

546 
ddöfo
 = 
	`dz_¸óã_dedu≥_öfo
(
i‹eque°
);

547 
lba_íåy
 = 
ddöfo
->lba_entry;

550 
	`_ACQUIRE_LBA_LOCK_WRITE
(
lba_íåy
);

553 
hba_íåy
 = 
ddöfo
->hba_entry;

556 
	`_ACQUIRE_HBA_LOCK
(
hba_íåy
);

565 i‡(
hba_íåy
->
hash_pba_ödex
 == 0) {

566 i‡(
lba_íåy
->
hash_ödex
 == 0) {

568 
	`LOGD
("STAGE_1:FRESH FIRST TIME WRITE @lb®%Œi\n", 
i‹eque°
->
i‹_lba
);

571 
	`DZ_DDE_FETCH_FREE_PBA_ENTRY
(
‰ì_pba_íåy
, 
‰ì_pba_ödex
);

574 
	`DZ_DDE_UPDATE_PBA_TABLE_FOR_NEW_PBA
(
‰ì_pba_íåy
);

580 
	`DZ_DDE_UPDATE_HASH_TABLE
(
hba_íåy
, 
‰ì_pba_ödex
);

583 
	`_DZ_DDE_RELEASE_HBA_LOCK
(
hba_íåy
);

586 
	`DZ_DDE_UPDATE_LBA_TABLE_FOR_NEW_PBA
(
lba_íåy
, 
ddöfo
->
√w_hash_ödex
);

593 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
‰ì_pba_ödex
);

594 
lba_íåy
->
pba_ödex
 = 
‰ì_pba_ödex
;

602 
	`LOG
("Ca£1:DDE:Phsyiˇ»Disk Wrôê@ se˘‹ %Œòf‹ i¡î«»iÿ\n", (
U64
)
£˘‹
);

607 
	`IO_METADATA_UPDATE
(
i‹eque°
, 
‰ì_pba_ödex
, 
£˘‹
);

608 
ªt
 = 
	`dz_wrôe_block_to_øw_disk_sync_öã∫Æ
(
i‹eque°
, 
£˘‹
, 
lba_íåy
);

609 i‡(
ªt
 =
SUCCESS
) {

612 
	`ATOMIC64_INC
(
dedu≥_cur_physiˇl_•a˚
);

613 
	`ATOMIC64_INC
(
dedu≥_cur_logiˇl_•a˚
);

628 
	`LOGD
("Ca£2:DDE:OVERWRITE_WITH_DIFFERENT_DATA @lb®%Œi\n", 
i‹eque°
->
i‹_lba
);

630 
ﬁd_lba_hash_ödex
 = 
lba_íåy
->
hash_ödex
;

631 
ﬁd_lba_hash_cﬁlisi⁄_èg
 = 
lba_íåy
->
hash_cﬁlisi⁄_èg
;

634 
	`DZ_DDE_FETCH_FREE_PBA_ENTRY
(
‰ì_pba_íåy
, 
‰ì_pba_ödex
);

639 
	`DZ_DDE_UPDATE_PBA_TABLE_FOR_NEW_PBA
(
‰ì_pba_íåy
);

642 
	`DZ_DDE_UPDATE_HASH_TABLE
(
hba_íåy
, 
‰ì_pba_ödex
);

643 
	`_DZ_DDE_RELEASE_HBA_LOCK
(
hba_íåy
);

646 
	`DZ_DDE_UPDATE_LBA_TABLE_FOR_NEW_PBA
(
lba_íåy
, 
ddöfo
->
√w_hash_ödex
);

649 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
‰ì_pba_ödex
);

650 
lba_íåy
->
pba_ödex
 = 
‰ì_pba_ödex
;

655 
	`LOGD
("Ca£2:DDE:Physiˇ»Disk Wrôê@ se˘‹ %Œòf‹ i¡î«»iÿ\n", (
U64
)
£˘‹
);

661 
ªt
 = 
	`dz_wrôe_block_to_øw_disk_sync_öã∫Æ
(
i‹eque°
, 
£˘‹
, 
lba_íåy
);

662 i‡(
ªt
 =
SUCCESS
) {

663 
	`ATOMIC64_INC
(
dedu≥_cur_physiˇl_•a˚
);

664 
	`ATOMIC64_INC
(
dedu≥_cur_logiˇl_•a˚
);

672 
	`LOGD
("Case2:DDE:Updating oldÉntries\n");

673 
	`dz_dedu≥_ovîwrôe_upd©e_ﬁd_íåõs
(
NULL
, 
ﬁd_lba_hash_ödex
, 
ﬁd_lba_hash_cﬁlisi⁄_èg
);

677 
	`LOG
("Ca£2:Disk WrôêFaûed @ se˘‹ %Œòf‹ i¡î«»iÿ\n", (
U64
)
£˘‹
);

688 i‡(
lba_íåy
->
hash_ödex
 == 0) {

706 
pba_íåy_cuº
 = 
	`GET_PBA_ENTRY
(
hba_íåy
->
hash_pba_ödex
);

707 
	`_ACQUIRE_PBA_LOCK
(
pba_íåy_cuº
);

715 
ªt
 = 
	`dz_dedu≥_gë_pba_ödex
(
i‹eque°
, 
hba_íåy
->
hash_pba_ödex
,

716 &
œ°_pba_ödex
, &
√xt_hash_cﬁlisi⁄_èg
);

718 
ªt
) {

719 
DZ_DDE_WRITE_TYPE_DEDUPE
: {

721 
	`LOGD
("GET_PBA:DEDUPE:FRESH FIRST TIME WRITE EXT @lb®%Œi\n", 
i‹eque°
->
lba
);

722 
pba_íåy_dedu≥
 = 
	`GET_PBA_ENTRY
(
ddöfo
->
dedu≥_pba_ödex
);

726 
pba_íåy_dedu≥
->
ªf_˙t
++;

730 
	`DZ_DDE_UPDATE_LBA_TABLE
(
lba_íåy
, 
ddöfo
->
√w_hash_ödex
, 
pba_íåy_dedu≥
->
hash_cﬁlisi⁄_èg
);

732 
	`_DZ_DDE_RELEASE_PBA_LOCK
(
pba_íåy_cuº
);

735 
	`_DZ_DDE_RELEASE_HBA_LOCK
(
hba_íåy
);

737 
lba_íåy
->
pba_ödex
 = 
ddöfo
->
dedu≥_pba_ödex
;

739 
	`_RELEASE_LBA_LOCK_WRITE
(
lba_íåy
);

742 
	`DZ_DDE_IOREQUEST_DONE
(
i‹eque°
);

743 
	`dz_dedu≥_‰ì
(
ddöfo
);

744 
	`ATOMIC64_INC
(
dedu≥_cur_logiˇl_•a˚
);

745 
	`ATOMIC64_INC
(
dedu≥_cur_du∂iˇã_•a˚
);

749 
DZ_DDE_WRITE_TYPE_HASH_COLLISON
: {

754 
	`LOGD
("GET_PBA:HASH_COLLISON:OVERWRITE WITH DIFFERENT DATA @lb®%Œi\n", 
i‹eque°
->
lba
);

757 
	`DZ_DDE_FETCH_FREE_PBA_ENTRY
(
‰ì_pba_íåy
, 
‰ì_pba_ödex
);

761 
	`DZ_DDE_ADD_NEW_PBA_TO_HASH_COLLISION_LIST
(
œ°_pba_ödex
, 
‰ì_pba_ödex
);

762 
	`DZ_DDE_UPDATE_PBA_TABLE
(
‰ì_pba_íåy
, 
√xt_hash_cﬁlisi⁄_èg
 );

767 
	`DZ_DDE_UPDATE_LBA_TABLE
(
lba_íåy
, 
ddöfo
->
√w_hash_ödex
, 
√xt_hash_cﬁlisi⁄_èg
);

769 
	`_DZ_DDE_RELEASE_PBA_LOCK
(
pba_íåy_cuº
);

774 
	`_DZ_DDE_RELEASE_HBA_LOCK
(
hba_íåy
);

777 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
‰ì_pba_ödex
);

778 
lba_íåy
->
pba_ödex
 = 
‰ì_pba_ödex
;

782 
	`LOGD
("3:Disk Wrôê@ se˘‹ %Œòf‹ i¡î«»iÿ\n", (
U64
)
£˘‹
);

785 
ªt
 = 
	`dz_wrôe_block_to_øw_disk_sync_öã∫Æ
(
i‹eque°
, 
£˘‹
, 
lba_íåy
);

786 i‡(
ªt
 =
SUCCESS
) {

787 
	`ATOMIC64_INC
(
dedu≥_cur_physiˇl_•a˚
);

788 
	`ATOMIC64_INC
(
dedu≥_cur_logiˇl_•a˚
);

795 
	`LOGD
("lba->pba_ödex = %Œò@lb®%Œi\n",(
U64
)
lba_íåy
->
pba_ödex
, 
i‹eque°
->
i‹_lba
);

796 
	`LOGD
("hba->hash_pba_ödex = %Œò@lb®%Œi\n", (
U64
)
hba_íåy
->
hash_pba_ödex
, 
i‹eque°
->
i‹_lba
);

805 
pba_íåy_cuº
 = 
	`GET_PBA_ENTRY
(
hba_íåy
->
hash_pba_ödex
);

806 
	`_ACQUIRE_PBA_LOCK
(
pba_íåy_cuº
);

810 i‡(
lba_íåy
->
pba_ödex
 =
hba_íåy
->
hash_pba_ödex
) {

813 
	`_DZ_DDE_RELEASE_PBA_LOCK
(
pba_íåy_cuº
);

816 
	`_DZ_DDE_RELEASE_HBA_LOCK
(
hba_íåy
);

819 
	`_RELEASE_LBA_LOCK_WRITE
(
lba_íåy
);

821 
	`DZ_DDE_IOREQUEST_DONE
(
i‹eque°
);

822 
	`dz_dedu≥_‰ì
(
ddöfo
);

823 
	`ATOMIC64_INC
(
dedu≥_cur_logiˇl_•a˚
);

824 
	`ATOMIC64_INC
(
dedu≥_cur_du∂iˇã_•a˚
);

840 
ªt
 = 
	`dz_dedu≥_check_wrôe_ty≥
(
i‹eque°
, 
hba_íåy
->
hash_pba_ödex
,

841 &
œ°_pba_ödex
, &
√xt_hash_cﬁlisi⁄_èg
);

843 
ªt
) {

845 
DZ_DDE_WRITE_TYPE_OVERWRITE
: {

846 
	`LOGD
("DZ_DDE_WRITE_TYPE_OVERWRITE:OVERWRITE WITH SAME DATA @lb®%Œi\n", 
i‹eque°
->
i‹_lba
);

851 
	`_DZ_DDE_RELEASE_PBA_LOCK
(
pba_íåy_cuº
);

854 
	`_DZ_DDE_RELEASE_HBA_LOCK
(
hba_íåy
);

857 
	`_RELEASE_LBA_LOCK_WRITE
(
lba_íåy
);

859 
	`DZ_DDE_IOREQUEST_DONE
(
i‹eque°
);

860 
	`dz_dedu≥_‰ì
(
ddöfo
);

861 
	`ATOMIC64_INC
(
dedu≥_cur_logiˇl_•a˚
);

862 
	`ATOMIC64_INC
(
dedu≥_cur_du∂iˇã_•a˚
);

866 
DZ_DDE_WRITE_TYPE_DEDUPE
: {

869 
	`LOGD
("DDE_WRITE_TYPE_DEDUPE:OVERWRITE WITH DIFFERENT DATA @lb®%Œi\n", 
i‹eque°
->
i‹_lba
);

871 
ﬁd_lba_hash_ödex
 = 
lba_íåy
->
hash_ödex
;

872 
ﬁd_lba_hash_cﬁlisi⁄_èg
 = 
lba_íåy
->
hash_cﬁlisi⁄_èg
;

876 
	`i‹eque°_gë
(
i‹eque°
);

880 
pba_íåy_dedu≥
 = 
	`GET_PBA_ENTRY
(
ddöfo
->
dedu≥_pba_ödex
);

881 
pba_íåy_dedu≥
->
ªf_˙t
++;

883 
	`DZ_DDE_UPDATE_LBA_TABLE
(
lba_íåy
, 
ddöfo
->
√w_hash_ödex
, 
pba_íåy_dedu≥
->
hash_cﬁlisi⁄_èg
);

884 
	`_DZ_DDE_RELEASE_PBA_LOCK
(
pba_íåy_cuº
);

889 
	`_DZ_DDE_RELEASE_HBA_LOCK
(
hba_íåy
);

893 
lba_íåy
->
pba_ödex
 = 
ddöfo
->
dedu≥_pba_ödex
;

894 
	`_RELEASE_LBA_LOCK_WRITE
(
lba_íåy
);

897 
	`DZ_DDE_IOREQUEST_DONE
(
i‹eque°
);

898 
	`LOGD
("Updating oldÉntries\n");

899 
	`dz_dedu≥_ovîwrôe_upd©e_ﬁd_íåõs
(
i‹eque°
, 
ﬁd_lba_hash_ödex
, 
ﬁd_lba_hash_cﬁlisi⁄_èg
);

900 
	`dz_dedu≥_‰ì
(
ddöfo
);

901 
	`ATOMIC64_INC
(
dedu≥_cur_logiˇl_•a˚
);

902 
	`ATOMIC64_INC
(
dedu≥_cur_du∂iˇã_•a˚
);

905 
DZ_DDE_WRITE_TYPE_HASH_COLLISON
: {

907 
	`LOGD
("DZ_DDE_WRITE_TYPE_HASH_COLLISON:OVERWRITE WITH DIFFERENT DATA @lb®%Œi\n", 
i‹eque°
->
i‹_lba
);

909 
ﬁd_lba_hash_ödex
 = 
lba_íåy
->
hash_ödex
;

910 
ﬁd_lba_hash_cﬁlisi⁄_èg
 = 
lba_íåy
->
hash_cﬁlisi⁄_èg
;

913 
	`DZ_DDE_FETCH_FREE_PBA_ENTRY
(
‰ì_pba_íåy
, 
‰ì_pba_ödex
);

917 
	`DZ_DDE_ADD_NEW_PBA_TO_HASH_COLLISION_LIST
(
œ°_pba_ödex
, 
‰ì_pba_ödex
);

918 
	`DZ_DDE_UPDATE_PBA_TABLE
(
‰ì_pba_íåy
, 
√xt_hash_cﬁlisi⁄_èg
 );

923 
	`DZ_DDE_UPDATE_LBA_TABLE
(
lba_íåy
, 
ddöfo
->
√w_hash_ödex
, 
√xt_hash_cﬁlisi⁄_èg
);

925 
	`_DZ_DDE_RELEASE_PBA_LOCK
(
pba_íåy_cuº
);

930 
	`_DZ_DDE_RELEASE_HBA_LOCK
(
hba_íåy
);

933 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
‰ì_pba_ödex
);

934 
lba_íåy
->
pba_ödex
 = 
‰ì_pba_ödex
;

938 
	`LOGD
("4:Disk Wrôê@ se˘‹ %Œòf‹ i¡î«»iÿ\n", (
U64
)
£˘‹
);

941 
ªt
 = 
	`dz_wrôe_block_to_øw_disk_sync_öã∫Æ
(
i‹eque°
, 
£˘‹
, 
lba_íåy
);

942 i‡(
ªt
 =
SUCCESS
) {

943 
	`LOGD
("Updating oldÉntries\n");

946 
	`ATOMIC64_INC
(
dedu≥_cur_physiˇl_•a˚
);

947 
	`ATOMIC64_INC
(
dedu≥_cur_logiˇl_•a˚
);

948 
	`dz_dedu≥_ovîwrôe_upd©e_ﬁd_íåõs
(
NULL
, 
ﬁd_lba_hash_ödex
, 
ﬁd_lba_hash_cﬁlisi⁄_èg
);

963 
	}
}

	@fec_engine/datumsoft_zaidstor_avm_8_B_fec_engine_module.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

6 
MODULE_INFO
(
«me
, 
KBUILD_MODNAME
);

8 
__visibÀ
 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
KBUILD_MODNAME
,

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

15 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

18 #ifde‡
CONFIG_RETPOLINE


19 
MODULE_INFO
(
ªçﬁöe
, "Y");

22 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

23 
__u£d


24 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

25 { 0xe783361, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

26 { 0xe3c64865, 
__VMLINUX_SYMBOL_STR
(
num_Êush_thªads
) },

27 { 0xaÁ0f9d5, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
) },

28 { 0x206c61d2, 
__VMLINUX_SYMBOL_STR
(
_ACQUIRE_FEC_LOCK_READ
) },

29 { 0xf9a482f9, 
__VMLINUX_SYMBOL_STR
(
m¶ìp
) },

30 { 0x36286558, 
__VMLINUX_SYMBOL_STR
(
dz_ªad_∑ge_Æloc
) },

31 { 0xe73492e2, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_ªads_sögÀ_∑ge
) },

32 { 0x86bc7368, 
__VMLINUX_SYMBOL_STR
(
„c_a˘ive_cou¡_£quí˚
) },

33 { 0x672edad8, 
__VMLINUX_SYMBOL_STR
(
pv_lock_›s
) },

34 { 0xe198d8af, 
__VMLINUX_SYMBOL_STR
(
dz_avm_log_fûe_wrôe
) },

35 { 0xc857168c, 
__VMLINUX_SYMBOL_STR
(
dz_c⁄vît_£˘‹_to_lba
) },

36 { 0x5e1f6b50, 
__VMLINUX_SYMBOL_STR
(
dz_bio_Æloc
) },

37 { 0x9edbbbØ, 
__VMLINUX_SYMBOL_STR
(
ªdu˚_mem‹y_ußge
) },

38 { 0x72d6f9f, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
) },

39 { 0x44ba2a60, 
__VMLINUX_SYMBOL_STR
(
dz_thªad_exô
) },

40 { 0x2876Øbb, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_ªads_mu…i_èû_u«lig√d_∑ge
) },

41 { 0x95d24c89, 
__VMLINUX_SYMBOL_STR
(
„c_Êush_›s_cou¡
) },

42 { 0x9741a857, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_wrôes_∑πül_∑ge
) },

43 { 0x2a3f0cdf, 
__VMLINUX_SYMBOL_STR
(
time_Êush_¥ï¨e_°¨t
) },

44 { 0xc3896dØ, 
__VMLINUX_SYMBOL_STR
(
READ_THREAD_POOL_SHORT_NAME
) },

45 { 0x75afd1db, 
__VMLINUX_SYMBOL_STR
(
log_mem‹y_ußge
) },

46 { 0x71446fbf, 
__VMLINUX_SYMBOL_STR
(
„c_‰ì_cou¡_£quí˚
) },

47 { 0xc3d2c1fd, 
__VMLINUX_SYMBOL_STR
(
dz_mem‹y_ªdu˘i⁄
) },

48 { 0x˚935a56, 
__VMLINUX_SYMBOL_STR
(
dz_k‰ì
) },

49 { 0xóe3dfd6, 
__VMLINUX_SYMBOL_STR
(
__c⁄°_udñay
) },

50 { 0xa3e0a3f3, 
__VMLINUX_SYMBOL_STR
(
ªad_thªad_poﬁ
) },

51 { 0xb„ed88e, 
__VMLINUX_SYMBOL_STR
(
„c_a˘ive_thªshﬁd_≥rc
) },

52 { 0x72d95c˚, 
__VMLINUX_SYMBOL_STR
(
WRITE_THREAD_POOL_SHORT_NAME
) },

53 { 0xc5a657da, 
__VMLINUX_SYMBOL_STR
(
„c_cur_Êush_›s_cou¡
) },

54 { 0x9afff994, 
__VMLINUX_SYMBOL_STR
(
WRITE_THREAD_POOL_NAME
) },

55 { 0x999e8297, 
__VMLINUX_SYMBOL_STR
(
v‰ì
) },

56 { 0x7a2af7b4, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

57 { 0xb7a6abe, 
__VMLINUX_SYMBOL_STR
(
¥öt_i‹eque°_lock
) },

58 { 0x97651e6c, 
__VMLINUX_SYMBOL_STR
(
vmemm≠_ba£
) },

59 { 0xd46119a2, 
__VMLINUX_SYMBOL_STR
(
_RELEASE_FEC_LOCK_WRITE
) },

60 { 0xc4b19d63, 
__VMLINUX_SYMBOL_STR
(
kthªad_¸óã_⁄_node
) },

61 { 0x15ba50a6, 
__VMLINUX_SYMBOL_STR
(
jiffõs
) },

62 { 0x9534db0, 
__VMLINUX_SYMBOL_STR
(
_ACQUIRE_FEC_LOCK_WRITE
) },

63 { 0xf2ó068c, 
__VMLINUX_SYMBOL_STR
(
time_Êush_íd
) },

64 { 0xde9d2Ø6, 
__VMLINUX_SYMBOL_STR
(
„c_f‹w¨ded_ªads_cou¡
) },

65 { 0xa6682fdd, 
__VMLINUX_SYMBOL_STR
(
__öô_waôqueue_hód
) },

66 { 0xb1904934, 
__VMLINUX_SYMBOL_STR
(
waô_f‹_com∂ëi⁄
) },

67 { 0xdf101094, 
__VMLINUX_SYMBOL_STR
(
dedu≥_thªad_poﬁ
) },

68 { 0x64739013, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
) },

69 { 0x8df65063, 
__VMLINUX_SYMBOL_STR
(
„c_èbÀ_size
) },

70 { 0xfb578fc5, 
__VMLINUX_SYMBOL_STR
(
mem£t
) },

71 { 0xf2a2c67d, 
__VMLINUX_SYMBOL_STR
(
dz_de°roy_thªad_poﬁ
) },

72 { 0x4f26c6b1, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
) },

73 { 0xìb40040, 
__VMLINUX_SYMBOL_STR
(
GET_LBA_ENTRY
) },

74 { 0x4ff67Áb, 
__VMLINUX_SYMBOL_STR
(
cuºít_èsk
) },

75 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

76 { 0xb5275728, 
__VMLINUX_SYMBOL_STR
(
kthªad_°›
) },

77 { 0xfdfc8c01, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
) },

78 { 0x42f23226, 
__VMLINUX_SYMBOL_STR
(
bio_add_∑ge
) },

79 { 0xa1c76e0a, 
__VMLINUX_SYMBOL_STR
(
_c⁄d_ªsched
) },

80 { 0x99645325, 
__VMLINUX_SYMBOL_STR
(
dz_dedu≥_ªad_io
) },

81 { 0xc83b8a40, 
__VMLINUX_SYMBOL_STR
(
FLUSH_THREAD_POOL_NAME
) },

82 { 0xc35666f5, 
__VMLINUX_SYMBOL_STR
(
„c_èbÀs_a˘ive
) },

83 { 0x4b45f33b, 
__VMLINUX_SYMBOL_STR
(
„c_mem‹y_ªads_cou¡
) },

84 { 0xc25419c9, 
__VMLINUX_SYMBOL_STR
(
bio_ídio
) },

85 { 0xeÁ08cc4, 
__VMLINUX_SYMBOL_STR
(
bio_put
) },

86 { 0x3d94a5af, 
__VMLINUX_SYMBOL_STR
(
„c_Êush_cou¡
) },

87 { 0xf11543ff, 
__VMLINUX_SYMBOL_STR
(
föd_fú°_zîo_bô
) },

88 { 0x7cd8d75e, 
__VMLINUX_SYMBOL_STR
(
∑ge_off£t_ba£
) },

89 { 0xd24da7de, 
__VMLINUX_SYMBOL_STR
(
dz_gë_mem‹y_ußge
) },

90 { 0xd8944221, 
__VMLINUX_SYMBOL_STR
(
num_ªad_thªads
) },

91 { 0x133f6a9c, 
__VMLINUX_SYMBOL_STR
(
¥öt_i‹eque°
) },

92 { 0x585cdd4, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
) },

93 { 0x1d1dc„e, 
__VMLINUX_SYMBOL_STR
(
dz_mem‹y_c⁄sum±i⁄
) },

94 { 0x2ccfd234, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_wrôes_mu…i_∑ge
) },

95 { 0x4a9865a8, 
__VMLINUX_SYMBOL_STR
(
dz_¸óã_thªad_poﬁ
) },

96 { 0x834d015b, 
__VMLINUX_SYMBOL_STR
(
num_wrôe_thªads
) },

97 { 0xf4f37145, 
__VMLINUX_SYMBOL_STR
(
dz_ªad_∑ge_‰ì
) },

98 { 0x5bfd8a11, 
__VMLINUX_SYMBOL_STR
(
„c_a˘ive_cou¡
) },

99 { 0xbcc8b4cd, 
__VMLINUX_SYMBOL_STR
(
„c_a˘ive_thªshﬁd
) },

100 { 0xc028c237, 
__VMLINUX_SYMBOL_STR
(
„c_ªad_thªad_poﬁ
) },

101 { 0x3fc45e93, 
__VMLINUX_SYMBOL_STR
(
dz_q_chûd_i‹eque°_to_∑ª¡_q
) },

102 { 0x5635a60a, 
__VMLINUX_SYMBOL_STR
(
vmÆloc_u£r
) },

103 { 0x56de9a08, 
__VMLINUX_SYMBOL_STR
(
dz_swôch_„c_ígöe
) },

104 { 0x8ddd8Ød, 
__VMLINUX_SYMBOL_STR
(
scheduÀ_timeout
) },

105 { 0x1c0529b1, 
__VMLINUX_SYMBOL_STR
(
dz_io_‰ì
) },

106 { 0xb7a0a67e, 
__VMLINUX_SYMBOL_STR
(
¥öt_biom
) },

107 { 0x1f44babd, 
__VMLINUX_SYMBOL_STR
(
_RELEASE_FEC_LOCK_READ
) },

108 { 0x6b2dc060, 
__VMLINUX_SYMBOL_STR
(
dump_°ack
) },

109 { 0xf2e52d81, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_ªads_mu…i_∑ge
) },

110 { 0xb12d4891, 
__VMLINUX_SYMBOL_STR
(
„c_èbÀs_Êush
) },

111 { 0x70ffc26b, 
__VMLINUX_SYMBOL_STR
(
dz_bec_¥o˚ed_pba_∑ge_add_wrôe
) },

112 { 0x13bb1b43, 
__VMLINUX_SYMBOL_STR
(
wake_up_¥o˚ss
) },

113 { 0x8e8a34c0, 
__VMLINUX_SYMBOL_STR
(
dz_q_i‹eque°_thªad_poﬁ
) },

114 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

115 { 0x56321´2, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock
) },

116 { 0xb3f7646e, 
__VMLINUX_SYMBOL_STR
(
kthªad_should_°›
) },

117 { 0x5c6d5076, 
__VMLINUX_SYMBOL_STR
(
dz_io_Æloc
) },

118 { 0x17e4b4a6, 
__VMLINUX_SYMBOL_STR
(
„c_Êush_thªad_poﬁ
) },

119 { 0x3f8˚405, 
__VMLINUX_SYMBOL_STR
(
dz_q_i‹eque°
) },

120 { 0x3c8dcd67, 
__VMLINUX_SYMBOL_STR
(
time_„c_wrôe_swôch
) },

121 { 0x69acdf38, 
__VMLINUX_SYMBOL_STR
(
mem˝y
) },

122 { 0xbc1fd179, 
__VMLINUX_SYMBOL_STR
(
¥öt_bio
) },

123 { 0xe1fbb„b, 
__VMLINUX_SYMBOL_STR
(
„c_cur_Êush_cou¡
) },

124 { 0xd3131b67, 
__VMLINUX_SYMBOL_STR
(
FLUSH_THREAD_POOL_SHORT_NAME
) },

125 { 0xed9óda3, 
__VMLINUX_SYMBOL_STR
(
„c_wrôe_thªad_poﬁ
) },

126 { 0x74b99461, 
__VMLINUX_SYMBOL_STR
(
i‹eque°_gë
) },

127 { 0x„50d590, 
__VMLINUX_SYMBOL_STR
(
dz_c⁄vît_lba_to_£˘‹
) },

128 { 0x606cf726, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
) },

129 { 0x19cf472b, 
__VMLINUX_SYMBOL_STR
(
com∂ëe
) },

130 { 0x8562547a, 
__VMLINUX_SYMBOL_STR
(
bdgë
) },

131 { 0x7a5ó59b, 
__VMLINUX_SYMBOL_STR
(
time_„c_wrôe_°¨t
) },

132 { 0xe13924c9, 
__VMLINUX_SYMBOL_STR
(
dz_öô_chûd_bio
) },

133 { 0x9957b84f, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
) },

134 { 0x8b8e7a6e, 
__VMLINUX_SYMBOL_STR
(
Êush_thªad_poﬁ
) },

135 { 0x5˚1ff1e, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_wrôes_sögÀ_∑ge
) },

136 { 0x7f02188f, 
__VMLINUX_SYMBOL_STR
(
__m£cs_to_jiffõs
) },

137 { 0x775a6˚6, 
__VMLINUX_SYMBOL_STR
(
i‹eque°_put
) },

138 { 0x5a656236, 
__VMLINUX_SYMBOL_STR
(
READ_THREAD_POOL_NAME
) },

139 { 0x´bd92d, 
__VMLINUX_SYMBOL_STR
(
dz_kmÆloc
) },

140 { 0x25125d2b, 
__VMLINUX_SYMBOL_STR
(
pdz_„c_cou¡îs
) },

141 { 0x2da3b904, 
__VMLINUX_SYMBOL_STR
(
¥öt_d©a
) },

142 { 0x76ì3ì1, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_ªads_mu…i_bŸh_u«lig√d_∑ge
) },

143 { 0x3afd005, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_ªads_mu…i_hód_u«lig√d_∑ge
) },

144 { 0x23f1c30d, 
__VMLINUX_SYMBOL_STR
(
„c_iocou¡_ªads_∑πül_∑ge
) },

145 { 0x6f887134, 
__VMLINUX_SYMBOL_STR
(
dz_mîge_∑ª¡_loˇl_q_to_thªadpoﬁ_q
) },

148 c⁄° 
	g__moduÀ_dïíds
[]

149 
__u£d


150 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

154 
MODULE_INFO
(
§cvîsi⁄
, "B2D831A82006F9C988FC9E6");

	@fec_engine/fec_engine.c

9 
	~"„c_ígöe.h
"

11 
SPINLOCK
 
¥öt_i‹eque°_lock
;

12 
SPINLOCK
 
	g„c_a˘ive_lock
;

13 
SPINLOCK
 
	g„c_Êush_lock
;

14 
SPINLOCK
 
	g„c_ªad_Êush_lock
;

16 
INT
 
dz_swôch_„c_ígöe
;

17 
U64
 
„c_èbÀ_size
;

18 
U64
 
„c_a˘ive_thªshﬁd_≥rc
;

19 
U64
 
„c_a˘ive_thªshﬁd
;

20 
U64
 
„c_a˘ive_cou¡
;

21 
U64
 
„c_Êush_cou¡
;

22 
ATOMIC64
 
„c_a˘ive_cou¡_£quí˚
;

23 
ATOMIC64
 
„c_‰ì_cou¡_£quí˚
;

24 
ATOMIC64
 
„c_cur_Êush_cou¡
;

25 
ATOMIC64
 
„c_Êush_›s_cou¡
;

26 
ATOMIC64
 
„c_cur_Êush_›s_cou¡
;

27 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

28 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

29 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

30 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

31 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

32 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

33 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

34 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

35 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

36 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_èû_u«lig√d_∑ge
;

37 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_hód_u«lig√d_∑ge
;

38 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_bŸh_u«lig√d_∑ge
;

39 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

40 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

41 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

42 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

43 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

44 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

45 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

49 
PFEC_TABLE
 
	g„c_èbÀs_1
 = 
NULL
;

50 
PFEC_WRITE
 
	g„c_èbÀ_wrôe_a˘ive_1
 = 
NULL
;

55 
PFEC_TABLE
 
„c_èbÀs_a˘ive
;

56 
PFEC_TABLE
 
„c_èbÀs_Êush
 ;

58 
THREAD
 *
	g„c_Êush_timî_thªad
 = 
NULL
;

60 
BOOL
 
	g„c_Êush_timî_°›
 = 
FALSE
;

61 
ULONG
 
	g„c_Êush_öãrvÆ
 = 
DZ_FEC_FLUSH_INTERVAL
;

62 
PIOREQUEST
 
	g„c_Êush_i‹eque°
 = 
NULL
;

63 
IOREQUEST
 
	g_„c_Êush_i‹eque°
;

65 
PDZ_THREAD_POOL
 
Êush_thªad_poﬁ
;

66 
USHORT
 
num_ªad_thªads
;

67 
USHORT
 
num_wrôe_thªads
;

68 
USHORT
 
num_Êush_thªads
;

74 
U64
 
time_„c_wrôe_°¨t
;

75 
U64
 
time_„c_wrôe_swôch
;

77 
VOID
 
	$dz_„c_öô_cou¡îs
(
VOID
)

79 
„c_èbÀ_size
 = 
ONE_MILLION_IOPS
;

81 
„c_a˘ive_cou¡
 = 0;

82 
„c_Êush_cou¡
 = 0;

83 
„c_a˘ive_thªshﬁd
 = (
„c_a˘ive_thªshﬁd_≥rc
 * 
„c_èbÀ_size
) / 100;

84 
	`SET_COUNTER
(
„c_a˘ive_cou¡_£quí˚
);

85 
	`SET_COUNTER
(
„c_‰ì_cou¡_£quí˚
);

86 
	`SET_COUNTER
(
„c_cur_Êush_cou¡
);

87 
	`SET_COUNTER
(
„c_Êush_›s_cou¡
);

88 
	`SET_COUNTER
(
„c_cur_Êush_›s_cou¡
);

89 
	`SET_COUNTER
(
„c_mem‹y_ªads_cou¡
);

90 
	`SET_COUNTER
(
„c_f‹w¨ded_ªads_cou¡
);

92 
	`SET_COUNTER
(
„c_iocou¡_ªads_∑πül_∑ge
);

93 
	`SET_COUNTER
(
„c_iocou¡_ªads_sögÀ_∑ge
);

94 
	`SET_COUNTER
(
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
);

95 
	`SET_COUNTER
(
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
);

96 
	`SET_COUNTER
(
„c_iocou¡_ªads_mu…i_∑ge
);

97 
	`SET_COUNTER
(
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
);

98 
	`SET_COUNTER
(
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
);

99 
	`SET_COUNTER
(
„c_iocou¡_ªads_mu…i_èû_u«lig√d_∑ge
);

100 
	`SET_COUNTER
(
„c_iocou¡_ªads_mu…i_hód_u«lig√d_∑ge
);

101 
	`SET_COUNTER
(
„c_iocou¡_ªads_mu…i_bŸh_u«lig√d_∑ge
);

103 
	`SET_COUNTER
(
„c_iocou¡_wrôes_∑πül_∑ge
);

104 
	`SET_COUNTER
(
„c_iocou¡_wrôes_sögÀ_∑ge
);

105 
	`SET_COUNTER
(
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
);

106 
	`SET_COUNTER
(
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
);

107 
	`SET_COUNTER
(
„c_iocou¡_wrôes_mu…i_∑ge
);

108 
	`SET_COUNTER
(
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
);

109 
	`SET_COUNTER
(
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
);

111 
	`FEC_COUNTER_U64_SET
(
„c_ígöe_mem‹y_ußge
, 0);

112 
	}
}

113 
EXPORT_SYMBOL
(
dz_„c_öô_cou¡îs
);

115 
INT
 
	$dz_„c_ígöe_öô
(
VOID
)

117 
INT
 
ªt
 = 
SUCCESS
;

118 
	`MARK_MEMORY_USAGE
();

120 i‡(
dz_swôch_„c_ígöe
 =
DZ_DISABLED
) {

121 
	`LOGFECF
(" ______________________________________________________ \n");

122 
	`LOGFECF
("| |\n");

123 
	`LOGFECF
("| Frontend Cache (FEC) Engine Disabled |\n");

124 
	`LOGFECF
("|______________________________________________________|\n");

125 
	`PRINT_MEMORY_USAGE
(
	`FEC_COUNTER_U64_GET
(
„c_ígöe_mem‹y_ußge
), "FEC Engine");

126 
RETURNS
;

129 
	`LOGFECF
(" ______________________________________________________ \n");

130 
	`LOGFECF
("| |\n");

131 
	`LOGFECF
("| Frontend Cache (FEC) Engine Initialization Begin |\n");

132 
	`LOGFECF
("|______________________________________________________|\n");

133 
	`dz_„c_öô_cou¡îs
();

134 
ªt
 = 
	`dz_¸óã_ªad_thªad_poﬁ
(
num_ªad_thªads
);

136 
ªt
 = 
	`dz_¸óã_wrôe_thªad_poﬁ
(
num_wrôe_thªads
);

137 
ªt
 = 
	`dz_¸óã_Êush_thªad_poﬁ
(
num_Êush_thªads
);

139 
„c_èbÀ_wrôe_a˘ive_1
 = 
	`dz_¸óã_„c_d©a_wrôe_èbÀ
(
„c_èbÀ_size
);

140 i‡(
„c_èbÀ_wrôe_a˘ive_1
 =
NULL
)

141 
exô_Áûuª
;

144 
„c_èbÀs_1
 = 
	`dz_kmÆloc
((
FEC_TABLE
), 
GFP_KERNEL
);

145 i‡(
„c_èbÀs_1
 =
NULL
) {

146 
exô_Áûuª
;

149 
	`INIT_LIST_HEAD
(&
„c_èbÀs_1
->
Êushq_hód
);

151 
„c_èbÀs_1
->
wrôe_èbÀ
 = 
„c_èbÀ_wrôe_a˘ive_1
;

153 
„c_èbÀs_a˘ive
 = 
„c_èbÀs_1
;

155 
„c_èbÀs_Êush
 = 
„c_èbÀs_1
;

156 
„c_èbÀs_Êush
->
Êush_ö_¥ogªss
 = 
FALSE
;

157 
„c_èbÀs_Êush
->
tŸÆ_Êush_˙t
 = 0;

159 
	`•ö_lock_öô
(&
¥öt_i‹eque°_lock
);

160 
	`•ö_lock_öô
(&
„c_a˘ive_lock
);

161 
	`•ö_lock_öô
(&
„c_Êush_lock
);

162 
	`•ö_lock_öô
(&
„c_ªad_Êush_lock
);

166 
	`SLEEP_MILLI_SECONDS
(300);

167 
„c_Êush_timî_thªad
 = 
	`kthªad_run
 (
dz_„c_Êush_timî
, 
NULL
, "flush_timer_thread");

168 i‡(
	`IS_ERR
(
„c_Êush_timî_thªad
)) {

169 
	`LOGFECE
("UnableÅo create flushÅimerÅhread\n");

170 
exô_Áûuª
;

172 
	`MEMSET
(&
_„c_Êush_i‹eque°
);

173 
„c_Êush_i‹eque°
 = & 
_„c_Êush_i‹eque°
;

174 
„c_Êush_i‹eque°
->
i‹_thªad_poﬁ
 = 
Êush_thªad_poﬁ
;

176 
	`PRINT_MEMORY_USAGE
(
	`FEC_COUNTER_U64_GET
(
„c_ígöe_mem‹y_ußge
), "FEC Engine");

178 
	`LOGFECF
(" ______________________________________________________ \n");

179 
	`LOGFECF
("| |\n");

180 
	`LOGFECF
("| Frontend Cache (FEC) Engine Initialization End |\n");

181 
	`LOGFECF
("|______________________________________________________|\n");

182 
RETURNS
;

184 
exô_Áûuª
:

185 i‡(
„c_èbÀ_wrôe_a˘ive_1
) {

186 
	`dz_de°roy_„c_d©a_wrôe_èbÀ
(
„c_èbÀ_wrôe_a˘ive_1
, 
„c_èbÀ_size
);

189 i‡(
„c_èbÀs_1
) {

190 
	`dz_k‰ì
(
„c_èbÀs_1
, (
FEC_TABLE
));

192 
	`dz_de°roy_ªad_thªad_poﬁ
();

193 
	`dz_de°roy_wrôe_thªad_poﬁ
();

194 
	`dz_de°roy_Êush_thªad_poﬁ
();

195 
RETURNF
;

196 
	}
}

197 
EXPORT_SYMBOL
(
dz_„c_ígöe_öô
);

199 
RVOID
 
	$dz_„c_ígöe_exô
(
VOID
)

201 
	`MARK_MEMORY_USAGE
();

202 i‡(
dz_swôch_„c_ígöe
 =
DZ_DISABLED
) {

203 
	`LOGFECF
(" ______________________________________________________ \n");

204 
	`LOGFECF
("| |\n");

205 
	`LOGFECF
("| Frontend Cache (FEC) Engine Disabled |\n");

206 
	`LOGFECF
("|______________________________________________________|\n");

207 
	`PRINT_MEMORY_USAGE
(
	`FEC_COUNTER_U64_GET
(
„c_ígöe_mem‹y_ußge
), "FEC Engine");

210 
	`LOGFECF
(" ______________________________________________________ \n");

211 
	`LOGFECF
("| |\n");

212 
	`LOGFECF
("| Frontend Cache (FEC) Engine Exit Begin |\n");

213 
	`LOGFECF
("|______________________________________________________|\n");

215 
	`dz_„c_Êush_timî_°›
();

217 i‡(
„c_èbÀs_1
) {

218 
	`dz_k‰ì
(
„c_èbÀs_1
, (
FEC_TABLE
));

221 
	`dz_de°roy_„c_d©a_wrôe_èbÀ
(
„c_èbÀ_wrôe_a˘ive_1
, 
„c_èbÀ_size
);

222 
	`dz_de°roy_ªad_thªad_poﬁ
();

223 
	`dz_de°roy_wrôe_thªad_poﬁ
();

224 
	`dz_de°roy_Êush_thªad_poﬁ
();

225 
	`PRINT_MEMORY_FREED
(
	`FEC_COUNTER_U64_GET
(
„c_ígöe_mem‹y_ußge
), "FEC Engine");

226 
	`LOGFECF
(" ______________________________________________________ \n");

227 
	`LOGFECF
("| |\n");

228 
	`LOGFECF
("| Frontend Cache (FEC) Engine Exit End |\n");

229 
	`LOGFECF
("|______________________________________________________|\n");

231 
	}
}

232 
EXPORT_SYMBOL
(
dz_„c_ígöe_exô
);

235 
RVOID
 
	$dz_„c_èbÀ_ª£t
(
PFEC_TABLE
 
èbÀs
)

237 
èbÀs
->
tŸÆ_Êush_˙t
 = 0;

239 
	}
}

242 
RVOID
 
	$¥öt_„cws
(
PFEC_WRITE
 
„cw
, 
CHAR
 *
°r
)

244 i‡(
°r
) {

245 
	`LOGFEC
(" ______________________________________________________ \n");

246 
	`LOGFEC
("| |\n");

247 
	`LOGFEC
("| Prötög fecw Begö %† |\n", 
°r
);

248 
	`LOGFEC
("|______________________________________________________|\n");

252 
	`LOGFEC
(" ______________________________________________________ \n");

253 
	`LOGFEC
("| |\n");

254 
	`LOGFEC
("| Printing fecw Begin |\n");

255 
	`LOGFEC
("|______________________________________________________|\n");

258 
	`LOGFEC
("„cw = %p\n", 
„cw
);

259 
	`LOGFEC
("„cw->°©ê = %d\n", (
UINT
)
„cw
->
°©e
);

260 
	`LOGFEC
("„cw->ªad_ªf_˙à%d\n", (
UINT
)
„cw
->
ªad_ªf_˙t
);

261 
	`LOGFEC
("„cw->lb® = %Œi\n", 
„cw
->
lba
);

262 
	`¥öt_d©a
(
„cw
->
bv_∑ge
);

264 i‡(
°r
) {

265 
	`LOGFEC
(" ______________________________________________________ \n");

266 
	`LOGFEC
("| Prötög fecw End %† |\n", 
°r
);

267 
	`LOGFEC
("|______________________________________________________|\n");

269 
	`LOGFEC
(" ______________________________________________________ \n");

270 
	`LOGFEC
("| Printing fecw End |\n");

271 
	`LOGFEC
("|______________________________________________________|\n");

273 
	}
}

275 
RVOID
 
	$dz_„c_io
(
PIOREQUEST
 
i‹eque°
)

277 
	`bio_d©a_dú
(
i‹eque°
->
i‹_bio
Ë=
WRITE
 ?

278 
	`dz_„c_Æign_wrôe_io
(
i‹eque°
) :

279 
	`dz_„c_Æign_ªad_io
(
i‹eque°
);

280 
	}
}

282 
	$dz_„c_ígöe_moduÀ_öô
()

284 
	`LOGFEC
(" ______________________________________________________ \n");

285 
	`LOGFEC
("| |\n");

286 
	`LOGFEC
("| ZAIDSTOR FEC Engine Module Loaded |\n");

287 
	`LOGFEC
("|______________________________________________________|\n");

289 
RETURNS
;

290 
	}
}

293 
	$dz_„c_ígöe_moduÀ_exô
()

295 
	`LOGFEC
(" ______________________________________________________ \n");

296 
	`LOGFEC
("| |\n");

297 
	`LOGFEC
("| ZAIDSTOR FEC Engine Module UnLoaded |\n");

298 
	`LOGFEC
("|______________________________________________________|\n");

299 
	}
}

301 
moduÀ_öô
(
dz_„c_ígöe_moduÀ_öô
);

302 
moduÀ_exô
(
dz_„c_ígöe_moduÀ_exô
);

303 
MODULE_LICENSE
(
DZ_MODULE_LICENSE
);

304 
MODULE_AUTHOR
(
DZ_MODULE_AUTHOR
);

	@fec_engine/fec_engine_align_read.c

9 
	~"„c_ígöe.h
"

11 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

12 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

14 
U64
 
„c_èbÀ_size
;

15 
SPINLOCK
 
„c_a˘ive_lock
;

16 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

17 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

20 
PFEC_TABLE
 
„c_èbÀs_a˘ive
;

21 
PFEC_TABLE
 
„c_èbÀs_Êush
;

22 
PLBA_BLOCK
 
lba_èbÀ
;

24 
SPINLOCK
 
¥öt_i‹eque°_lock
;

26 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

29 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_hÆig√d_∑ge
;

32 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_èlig√d_∑ge
;

36 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_•ûÀd_∑ge
;

41 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_absﬁuã_∑ge
;

43 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

44 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

45 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

46 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

47 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

48 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

50 
RVOID
 
	$dz_„c_Æign_ªad_io_dúe˘
(
PIOREQUEST
 
i‹eque°
)

52 
PLBA_BLOCK
 
lba_íåy
 = 
NULL
;

53 
PFEC_WRITE
 
„cw
 = 
NULL
;

54 
PBIO
 
bio
 = 
i‹eque°
->
i‹_bio
;

55 
LBA
 
lba
 = 
i‹eque°
->
i‹_lba
;

57 
lba_íåy
 = 
	`GET_LBA_ENTRY
(
lba
);

59 
	`LOGFEC
("Bef‹e:Ród Reque°Ñe˚ivedáàlb®%Œi\n", 
lba
);

60 
	`_ACQUIRE_FEC_LOCK_READ
(
lba_íåy
);

64 i‡(
	`li°_em±y
(&
lba_íåy
->
ioq_hód
)) {

71 
	`ATOMIC64_INC
(
„c_f‹w¨ded_ªads_cou¡
);

72 
	`_RELEASE_FEC_LOCK_READ
(
lba_íåy
);

74 
	`dz_dedu≥_ªad_io
(
i‹eque°
);

78 
°¨t_¥o˚ssög
:

79 
	`LOGFEC
("A·î:Ród Reque°Ñe˚ivedáàlb®%Œi\n", 
lba
);

80 
„cw
 = 
	`li°_fú°_íåy
(&
lba_íåy
->
ioq_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

82 
	`FEC_ENTRY_WRITE_LOCK
(
„cw
);

84 
„cw
->
°©e
) {

86 
FECBUF_STATE_IDLE
:

87 
FECBUF_STATE_ALLOCATED
:

88 
FECBUF_STATE_MEMORY_WRITE_ERROR
:

89 
FECBUF_STATE_FLUSH_COMPLETED
:

90 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

91 
	`_RELEASE_FEC_LOCK_READ
(
lba_íåy
);

92 
	`ATOMIC64_INC
(
„c_f‹w¨ded_ªads_cou¡
);

93 
	`dz_dedu≥_ªad_io
(
i‹eque°
);

96 
FECBUF_STATE_MEMORY_WRITE_IN_PROGRESS
:

97 
	`LOGFEC
("WrôêöÖrogªs†f‹Üb®%Œi\n", 
„cw
->
lba
);

98 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

99 
	`DELAY_MILLI_SECONDS
(100);

100 
°¨t_¥o˚ssög
;

104 
„cw
->
ªad_ªf_˙t
++;

106 i‡(
„cw
->
ªad_ªf_˙t
 >
DZ_FEC_CONCURRENT_READS_LIMIT
) {

107 
„cw
->
ªad_ªf_˙t
--;

109 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

110 
	`_RELEASE_FEC_LOCK_READ
(
lba_íåy
);

112 
	`DELAY_MILLI_SECONDS
(100);

114 
	`IO_DONE_BUSY
(
i‹eque°
);

115 
	`i‹eque°_put
(
i‹eque°
);

119 
	`COPY_TO_BIO
(
bio
, 
„cw
->
bv_∑ge
);

120 
„cw
->
ªad_ªf_˙t
--;

122 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

123 
	`_RELEASE_FEC_LOCK_READ
(
lba_íåy
);

125 
	`ATOMIC64_INC
(
„c_mem‹y_ªads_cou¡
);

128 i‡(
i‹eque°
->
i‹_∑ª¡
) {

130 
	`READ_IO_DONE
(
i‹eque°
);

135 
	`READ_IO_DONE
(
i‹eque°
);

136 
	`i‹eque°_put
(
i‹eque°
);

151 
	}
}

153 
RVOID
 
	$dz_„c_ªad_io
(
PIOREQUEST
 
i‹eque°
)

155 
	`LOGD
("Ród Reque°Ñe˚ivedáàlb®%Œi\n", 
lba
);

156 
	`dz_„c_Æign_ªad_io
(
i‹eque°
);

158 
	}
}

160 
RVOID
 
	$dz_„c_Æign_ªad_io
(
PIOREQUEST
 
pi‹eque°
)

163 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
pi‹eque°
->
i‹_bio
);

168 
	`INIT_LIST_HEAD
(&
pi‹eque°
->
i‹_ioq_hód_loˇl
);

169 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

171 i‡(
io_size
 < 
LBA_BLOCK_SIZE
) {

173 
	`LOGFEC
("Read Processing io_size %lli forÖartial blockát sector %lli\n",

174 (
U64
)
io_size
, (U64)
	`DZ_BIO_GET_SECTOR
(
pi‹eque°
->
i‹_bio
));

175 
	`INC_COUNTER
(
„c_iocou¡_ªads_∑πül_∑ge
);

176 
	`dz_„c_Æign_ªad_f‹_∑πül_block
(
pi‹eque°
);

178 } i‡(
io_size
 =
LBA_BLOCK_SIZE
) {

180 
	`LOGFEC
("Read Processing io_size %lli for single blockát sector %lli\n",

181 (
U64
)
io_size
, (U64)
	`DZ_BIO_GET_SECTOR
(
pi‹eque°
->
i‹_bio
));

182 
	`INC_COUNTER
(
„c_iocou¡_ªads_sögÀ_∑ge
);

183 
	`dz_„c_Æign_ªad_f‹_sögÀ_block
(
pi‹eque°
);

185 } i‡(
io_size
 > 
LBA_BLOCK_SIZE
) {

186 
	`LOGFEC
("Read Processing io_size %lli for multiple blocksát sector %lli\n",

187 (
U64
)
io_size
, (U64)
	`DZ_BIO_GET_SECTOR
(
pi‹eque°
->
i‹_bio
));

188 
	`INC_COUNTER
(
„c_iocou¡_ªads_mu…i_∑ge
);

189 
	`dz_„c_Æign_ªad_f‹_mu…i_block
(
pi‹eque°
);

193 
	`BUG_ON
(1);

197 
	}
}

	@fec_engine/fec_engine_align_read_multi.c

9 
	~"„c_ígöe.h
"

11 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

12 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

14 
U64
 
„c_èbÀ_size
;

15 
SPINLOCK
 
„c_a˘ive_lock
;

18 
PFEC_TABLE
 
„c_èbÀs_a˘ive
;

19 
PFEC_TABLE
 
„c_èbÀs_Êush
;

20 
PLBA_BLOCK
 
lba_èbÀ
;

22 
SPINLOCK
 
¥öt_i‹eque°_lock
;

24 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

27 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_hÆig√d_∑ge
;

30 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_èlig√d_∑ge
;

34 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_•ûÀd_∑ge
;

39 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_absﬁuã_∑ge
;

41 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

42 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

43 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

44 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

45 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

46 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

47 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_èû_u«lig√d_∑ge
;

48 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_hód_u«lig√d_∑ge
;

49 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_bŸh_u«lig√d_∑ge
;

52 
RVOID
 
	$dz_Ár_∑ª¡_biod⁄e
(
PBIO
 
bio
)

54 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

55 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

56 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

58 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

62 
	`IOREQUEST_DONE_STATUS
(
pi‹eque°
);

63 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

64 
	`i‹eque°_put
(
ci‹eque°
);

66 
	`bio_d©a_dú
(
pi‹eque°
->
i‹_bio
Ë=
WRITE
 ?

67 
	`i‹eque°_put
(
pi‹eque°
) :

68 
	`i‹eque°_put
(
pi‹eque°
);

71 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

72 
	`i‹eque°_put
(
ci‹eque°
);

75 
	}
}

80 
RVOID
 
	$dz_Ár_mu…i_block_hód_u«lig√d_biod⁄e
(
PBIO
 
bio
)

84 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

85 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

86 
PVOID
 
˝agebuf
 = 
NULL
;

87 
PVOID
 
µagebuf
 = 
NULL
;

88 
BIOVEC
 
cbvec
;

89 
BIOVEC
 
pbvec
;

90 
PBIO
 
pbio
 = 
pi‹eque°
->
i‹_bio
;

92 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
pbio
);

93 
UINT
 
£˘‹_pos_ö_lba
 = 0;

94 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

95 
INT
 
bv_Àn
 = 0;

96 
bvec_ôî
 
ôî
;

97 
INT
 
∑πül_byãs_hód
;

109 i‡(
bio
->
bi_°©us
 !
BLK_STS_OK
) {

110 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

111 
exô
;

113 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

114 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

117 
cbvec
 = 
	`bio_iovec
(
bio
);

118 
˝agebuf
 = 
	`km≠
(
cbvec
.
bv_∑ge
);

119 
˝agebuf
 +
£˘‹_pos_ö_lba
;

123 
	`bio_f‹_óch_£gmít
(
pbvec
, 
pbio
, 
ôî
) {

124 
µagebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

125 
µagebuf
 +
pbvec
.
bv_off£t
;

126 
bv_Àn
 = 
pbvec
.bv_len;

127 i‡(
∑πül_byãs_hód
 > 
bv_Àn
) {

137 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
bv_Àn
);

138 
˝agebuf
 +
bv_Àn
;

139 
∑πül_byãs_hód
 -
bv_Àn
;

140 
	`kunm≠
(
pbvec
.
bv_∑ge
);

145 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
∑πül_byãs_hód
);

146 
	`kunm≠
(
pbvec
.
bv_∑ge
);

150 
	`kunm≠
(
cbvec
.
bv_∑ge
);

152 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

155 
	`IOREQUEST_DONE_STATUS
(
pi‹eque°
);

156 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

157 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

158 
	`i‹eque°_put
(
ci‹eque°
);

159 
	`i‹eque°_put
(
pi‹eque°
);

163 
exô
:

164 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

165 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

166 
	`i‹eque°_put
(
ci‹eque°
);

170 
	}
}

176 
RVOID
 
	$dz_Ár_mu…i_block_èû_u«lig√d_biod⁄e
(
PBIO
 
bio
)

179 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

180 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

181 
PVOID
 
˝agebuf
 = 
NULL
;

182 
PVOID
 
µagebuf
 = 
NULL
;

183 
BIOVEC
 
cbvec
;

184 
BIOVEC
 
pbvec
;

185 
PBIO
 
pbio
 = 
pi‹eque°
->
i‹_bio
;

187 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
pbio
);

188 
UINT
 
£˘‹_pos_ö_lba
 = 0;

189 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

190 
SIZE
 
size
 = 
	`DZ_BIO_GET_SIZE
(
pbio
);

191 
PBIOVEC
 
œ°_bvec
 = 
NULL
;

192 
INT
 
bi_v˙t
 = 0;

193 
INT
 
bi_v˙t_max
 = 0;

194 
INT
 
bv_Àn
 = 0;

195 
INT
 
bv_off£t
 = 0;

196 
INT
 
∑πül_byãs_èû
;

197 
INT
 
∑πül_byãs_hód
;

198 
INT
 
∑πül_byãs
;

211 i‡(
bio
->
bi_°©us
 !
BLK_STS_OK
) {

212 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

213 
exô
;

215 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

216 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

217 
∑πül_byãs_èû
 = 
size
 - 
∑πül_byãs_hód
;

218 
∑πül_byãs
 = 
∑πül_byãs_èû
;

221 
cbvec
 = 
	`bio_iovec
(
bio
);

222 
˝agebuf
 = 
	`km≠
(
cbvec
.
bv_∑ge
);

223 
˝agebuf
 +
£˘‹_pos_ö_lba
;

226 
bi_v˙t_max
 = 
pbio
->
bi_v˙t
;

227 
pbvec
 = 
	`bio_iovec
(
pbio
);

228 
bi_v˙t
 = 
pbio
->bi_vcnt - 1;

230 
∑πül_byãs
 > 0) {

231 
bi_v˙t
 >= 0) {

232 
œ°_bvec
 = &
pbio
->
bi_io_vec
[
bi_v˙t
];

233 
bv_Àn
 = 
œ°_bvec
->bv_len;

234 
∑πül_byãs
 -
bv_Àn
 ;

235 i‡(
∑πül_byãs
 <= 0) {

237 
bv_off£t
 = 
œ°_bvec
->bv_off£à- 
∑πül_byãs
;

238 
µagebuf
 = 
	`km≠
(
œ°_bvec
->
bv_∑ge
);

239 
µagebuf
 +
bv_off£t
;

240 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
∑πül_byãs_èû
);

241 
	`kunm≠
(
œ°_bvec
->
bv_∑ge
);

244 
bv_off£t
 = 
œ°_bvec
->bv_offset;

245 
µagebuf
 = 
	`km≠
(
œ°_bvec
->
bv_∑ge
);

246 
µagebuf
 +
bv_off£t
;

247 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
bv_Àn
);

248 
	`kunm≠
(
œ°_bvec
->
bv_∑ge
);

249 
˝agebuf
 +
bv_Àn
;

250 
bi_v˙t
--;

255 
	`kunm≠
(
cbvec
.
bv_∑ge
);

256 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

259 
	`IOREQUEST_DONE_STATUS
(
pi‹eque°
);

260 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

261 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

262 
	`i‹eque°_put
(
ci‹eque°
);

264 
	`i‹eque°_put
(
pi‹eque°
);

268 
exô
:

269 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

270 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

271 
	`i‹eque°_put
(
ci‹eque°
);

275 
	}
}

278 
RVOID
 
	$dz_Ár_mu…i_block_bŸh_Æig√d_biod⁄e
(
PBIO
 
bio
)

294 
	`dz_Ár_∑ª¡_biod⁄e
(
bio
);

295 
	}
}

304 
RVOID
 
	$dz_Ár_mu…i_block_bŸh_u«lig√d
 (
PIOREQUEST
 
pi‹eque°
)

306 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

307 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

308 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

309 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

310 
PBIOVEC
 
cur_bvec
 = 
NULL
;

311 
INT
 
bi_v˙t
 = 0;

312 
INT
 
bi_v˙t_max
 = 0;

313 
INT
 
bv_Àn
 = 0;

314 
INT
 
ªmaöög_bv_Àn
 = 0;

315 
UINT
 
£˘‹_pos_ö_lba
 = 0;

316 
SIZE
 
£˘‹_byãs
 = 0;

317 
U64
 
tŸ_byãs
 = 0;

318 
INT
 
d©a_byãs
 = 0;

319 
INT
 
Æig√d_byãs
 = 0;

320 
INT
 
∑πül_byãs_hód
 = 0;

321 
INT
 
∑πül_byãs_èû
 = 0;

322 
INT
 
tŸÆ_blocks_√eded
 = 0;

323 
LIST_HEAD
 
‰ì_li°_hód
 ;

324 
PIOREQUEST
 
chûd_i‹eque°
 = 
NULL
;

325 
PIOREQUEST
 
chûd_i‹eque°_hód

NULL
;

326 
PIOREQUEST
 
chûd_i‹eque°_èû

NULL
;

327 
PBIO
 
chûd_bio
 = 
NULL
;

328 
PPAGE
 
∑ge_hód
 = 
NULL
;

329 
PPAGE
 
∑ge_èû
 = 
NULL
;

330 
INT
 
ªt
 = 
SUCCESS
;

331 
INT
 
cou¡
;

332 
INT
 
ƒ_iovecs
 = 0;

336 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

337 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

338 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

339 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

340 
∑πül_byãs_èû
 = 
tŸ_byãs
 % 
LBA_BLOCK_SIZE
;

341 
Æig√d_byãs
 = 
io_size
 - 
∑πül_byãs_hód
 - 
∑πül_byãs_èû
 ;

344 
tŸÆ_blocks_√eded
 = 1 + 1 + (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

349 
ƒ_iovecs
 = (
bio
->
bi_max_vecs
 / 
tŸÆ_blocks_√eded
) + 1;

351 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

352 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

353 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

355 
chûd_i‹eque°
 = 
	`dz_io_Æloc
();

356 i‡(!
chûd_i‹eque°
) {

357 
	`LOGFECE
("UnableÅo get free iorequest\n");

358 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

359 
exô_Áûuª
;

361 
chûd_bio
 = 
	`dz_bio_Æloc
(
ƒ_iovecs
);

362 i‡(!
chûd_bio
) {

363 
	`LOGFECE
("UnableÅo get free child bio\n");

364 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

365 
exô_Áûuª
;

368 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio
, 
£˘‹
,

369 
dz_Ár_mu…i_block_bŸh_Æig√d_biod⁄e
, 
chûd_i‹eque°
);

370 
	`©omic_£t
(&
chûd_i‹eque°
->
i‹_chûd_˙t
, 0);

371 
chûd_i‹eque°
->
i‹_thªad_poﬁ

ªad_thªad_poﬁ
;

372 
chûd_i‹eque°
->
i‹_bio
 = 
chûd_bio
;

374 
chûd_i‹eque°
->
i‹_∑ª¡
 = 
pi‹eque°
;

375 
chûd_i‹eque°
->
i‹_lba
 = 
lba
;

376 
chûd_i‹eque°
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
;

378 
	`li°_add_èû
(&(
chûd_i‹eque°
->
i‹_ioq
), &
‰ì_li°_hód
);

379 
£˘‹
 +
SECTORS_PER_PAGE
;

380 
	`©omic_öc
(&
pi‹eque°
->
i‹_chûd_˙t
);

381 
lba
++;

383 i‡(
cou¡
 == 0) {

384 
chûd_i‹eque°_hód
 = 
chûd_i‹eque°
;

389 
∑ge_hód
 = 
	`dz_ªad_∑ge_Æloc
();

390 i‡(!
∑ge_hód
) {

391 
exô_Áûuª
;

394 
ªt
 = 
	`bio_add_∑ge
(
chûd_i‹eque°_hód
->
i‹_bio
, 
∑ge_hód
, 
PAGE_SIZE
, 0);

395 i‡(!
ªt
) {

397 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

398 
	`LOGFECE
("UnableÅoádd PageÅo child bio head\n");

399 
exô_∑ge_add
;

403 
chûd_i‹eque°_hód
->
i‹_bio
->
bi_íd_io
 = 
dz_Ár_mu…i_block_hód_u«lig√d_biod⁄e
;

406 
chûd_i‹eque°_èû
 = 
chûd_i‹eque°
;

407 
∑ge_èû
 = 
	`dz_ªad_∑ge_Æloc
();

408 i‡(!
∑ge_èû
) {

409 
exô_Áûuª
;

412 
ªt
 = 
	`bio_add_∑ge
(
chûd_i‹eque°_èû
->
i‹_bio
, 
∑ge_èû
, 
PAGE_SIZE
, 0);

413 i‡(!
ªt
) {

415 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

416 
	`LOGFECE
("UnableÅoádd PageÅo child bioÅail\n");

417 
exô_∑ge_add
;

421 
chûd_i‹eque°
->
i‹_bio
->
bi_íd_io
 = 
dz_Ár_mu…i_block_èû_u«lig√d_biod⁄e
;

430 
chûd_i‹eque°_hód
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

431 
	`li°_dñ
(&
chûd_i‹eque°_hód
->
i‹_ioq
);

432 
	`dz_q_chûd_i‹eque°_to_∑ª¡_q
(
pi‹eque°
, 
chûd_i‹eque°_hód
);

433 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

434 
d©a_byãs
 = 
∑πül_byãs_hód
;

435 
	`LOGFEC
("Printing HeadÖart\n");

440 
bi_v˙t
 < 
bi_v˙t_max
) {

441 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

442 
bv_Àn
 = 
cur_bvec
->bv_len;

444 i‡(
bv_Àn
 >
d©a_byãs
) {

445 i‡(
bv_Àn
 =
d©a_byãs
) {

446 
bi_v˙t
++;

448 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

452 
d©a_byãs
 -
bv_Àn
;

453 
bi_v˙t
++;

457 
£˘‹
 +(
∑πül_byãs_hód
 / 
SECTOR_SIZE
);

458 
lba
++;

460 
	`LOGFEC
("Printing Intermediate AlignedÖart\n");

464 
Æig√d_byãs
) {

466 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

467 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

468 
	`dz_q_chûd_i‹eque°_to_∑ª¡_q
(
pi‹eque°
, 
chûd_i‹eque°
);

469 
chûd_bio
 = 
chûd_i‹eque°
->
i‹_bio
;

470 
chûd_i‹eque°
->
i‹_£˘‹
 = 
£˘‹
;

471 
chûd_i‹eque°
->
i‹_lba
 = 
lba
;

472 
	`PRINT_POINTER
(
chûd_i‹eque°
);

474 
d©a_byãs
 = 
PAGE_SIZE
;

476 i‡(
ªmaöög_bv_Àn
) {

477 
d©a_byãs
 -
ªmaöög_bv_Àn
;

478 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
ªmaöög_bv_Àn
,

479 
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
));

480 i‡(!
ªt
) {

482 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

483 
	`LOGFECE
("UnableÅoádd PageÅo child bio\n");

484 
exô_∑ge_add
;

486 
bi_v˙t
++;

487 
ªmaöög_bv_Àn
 = 0;

491 
bi_v˙t
 < 
bi_v˙t_max
) {

492 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

493 
bv_Àn
 = 
cur_bvec
->bv_len;

495 i‡(
bv_Àn
 >
d©a_byãs
) {

496 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
d©a_byãs
, cur_bvec->
bv_off£t
);

497 i‡(!
ªt
) {

499 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

500 
	`LOGFECE
("UnableÅoádd PageÅo child bio\n");

501 
exô_∑ge_add
;

504 i‡(
bv_Àn
 =
d©a_byãs
) {

505 
bi_v˙t
++;

507 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

509 
Æig√d_byãs
 -
PAGE_SIZE
;

513 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
bv_Àn
, cur_bvec->
bv_off£t
);

514 i‡(!
ªt
) {

515 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

516 
	`LOGFECE
("UnableÅoádd PageÅo child bio\n");

517 
exô_∑ge_add
;

519 
d©a_byãs
 -
bv_Àn
;

520 
bi_v˙t
++;

523 
£˘‹
 +
SECTORS_PER_PAGE
;

524 
lba
++;

530 
	`LOGFEC
("Printing TailÖart\n");

532 i‡(
	`li°_em±y
(&
‰ì_li°_hód
)) {

533 
	`BUG_ON
(1);

536 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

537 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

538 
	`dz_q_chûd_i‹eque°_to_∑ª¡_q
(
pi‹eque°
, 
chûd_i‹eque°
);

540 
	`dz_mîge_∑ª¡_loˇl_q_to_thªadpoﬁ_q
(
pi‹eque°
->
i‹_thªad_poﬁ
,Öiorequest);

543 
exô_Áûuª
:

545 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

546 
	`i‹eque°_put
(
pi‹eque°
);

547 i‡(
∑ge_hód
) {

548 
	`dz_ªad_∑ge_‰ì
(
∑ge_hód
);

550 i‡(
∑ge_èû
) {

551 
	`dz_ªad_∑ge_‰ì
(
∑ge_èû
);

553 i‡(
chûd_i‹eque°
) {

554 
	`dz_io_‰ì
(
chûd_i‹eque°
);

556 i‡(
chûd_bio
) {

557 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio
);

559 
exô_∑ge_add
:

560 
bv_Àn
 = 0; bv_À¿< 
tŸÆ_blocks_√eded
; bv_len++) {

562 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

563 i‡(
chûd_i‹eque°
) {

564 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_i‹eque°
->
i‹_bio
);

565 
	`dz_io_‰ì
(
chûd_i‹eque°
);

566 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

569 
	}
}

578 
RVOID
 
	$dz_Ár_mu…i_block_hód_u«lig√d
 (
PIOREQUEST
 
pi‹eque°
)

580 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

581 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

582 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

583 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

584 
PBIOVEC
 
cur_bvec
 = 
NULL
;

585 
INT
 
bi_v˙t
 = 0;

586 
INT
 
bi_v˙t_max
 = 0;

587 
INT
 
bv_Àn
 = 0;

588 
INT
 
ªmaöög_bv_Àn
 = 0;

589 
UINT
 
£˘‹_pos_ö_lba
 = 0;

590 
SIZE
 
£˘‹_byãs
 = 0;

591 
U64
 
tŸ_byãs
 = 0;

592 
INT
 
d©a_byãs
 = 0;

593 
INT
 
Æig√d_byãs
 = 0;

594 
INT
 
∑πül_byãs_hód
 = 0;

595 
INT
 
tŸÆ_blocks_√eded
 = 0;

596 
PIOREQUEST
 
chûd_i‹eque°
 = 
NULL
;

597 
PIOREQUEST
 
chûd_i‹eque°_hód

NULL
;

598 
PBIO
 
chûd_bio
 = 
NULL
;

599 
PPAGE
 
∑ge
 = 
NULL
;

600 
INT
 
ªt
 = 
SUCCESS
;

601 
LIST_HEAD
 
‰ì_li°_hód
 ;

602 
INT
 
cou¡
;

603 
INT
 
ƒ_iovecs
 = 0;

607 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

608 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

609 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

610 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

611 
Æig√d_byãs
 = 
io_size
 - 
∑πül_byãs_hód
 ;

614 
tŸÆ_blocks_√eded
 = 1 + (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

619 
ƒ_iovecs
 = (
bio
->
bi_max_vecs
 / 
tŸÆ_blocks_√eded
) + 1;

621 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

623 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

624 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

626 
chûd_i‹eque°
 = 
	`dz_io_Æloc
();

627 i‡(!
chûd_i‹eque°
) {

628 
	`LOGFECE
("UnableÅo get free iorequest\n");

629 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

630 
exô_Áûuª
;

632 
chûd_bio
 = 
	`dz_bio_Æloc
(
ƒ_iovecs
);

633 i‡(!
chûd_bio
) {

634 
	`LOGFECE
("UnableÅo get free child bio\n");

635 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

636 
exô_Áûuª
;

639 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio
, 
£˘‹
,

640 
dz_Ár_mu…i_block_bŸh_Æig√d_biod⁄e
, 
chûd_i‹eque°
);

642 
	`©omic_£t
(&
chûd_i‹eque°
->
i‹_chûd_˙t
, 0);

644 
chûd_i‹eque°
->
i‹_thªad_poﬁ

ªad_thªad_poﬁ
;

645 
chûd_i‹eque°
->
i‹_bio
 = 
chûd_bio
;

647 
chûd_i‹eque°
->
i‹_∑ª¡
 = 
pi‹eque°
;

648 
chûd_i‹eque°
->
i‹_lba
 = 
lba
;

649 
chûd_i‹eque°
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
;

651 
	`li°_add_èû
(&(
chûd_i‹eque°
->
i‹_ioq
), &
‰ì_li°_hód
);

652 
	`©omic_öc
(&
pi‹eque°
->
i‹_chûd_˙t
);

654 i‡(
cou¡
 == 0) {

655 
chûd_i‹eque°_hód
 = 
chûd_i‹eque°
;

660 
∑ge
 = 
	`dz_ªad_∑ge_Æloc
();

661 i‡(!
∑ge
) {

662 
exô_Áûuª
;

665 
ªt
 = 
	`bio_add_∑ge
(
chûd_i‹eque°_hód
->
i‹_bio
, 
∑ge
, 
PAGE_SIZE
, 0);

666 i‡(!
ªt
) {

668 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

669 
	`LOGFECE
("UnableÅoádd PageÅo child bio\n");

670 
exô_∑ge_add
;

674 
chûd_i‹eque°_hód
->
i‹_bio
->
bi_íd_io
 = 
dz_Ár_mu…i_block_hód_u«lig√d_biod⁄e
;

683 
chûd_i‹eque°_hód
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

684 
	`li°_dñ
(&
chûd_i‹eque°_hód
->
i‹_ioq
);

685 
	`dz_q_chûd_i‹eque°_to_∑ª¡_q
(
pi‹eque°
, 
chûd_i‹eque°_hód
);

686 
chûd_i‹eque°_hód
->
i‹_lba
 = 
lba
;

687 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

689 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

690 
d©a_byãs
 = 
∑πül_byãs_hód
;

691 
	`LOGFEC
("Printing HeadÖart\n");

696 
bi_v˙t
 < 
bi_v˙t_max
) {

697 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

698 
bv_Àn
 = 
cur_bvec
->bv_len;

700 i‡(
bv_Àn
 >
d©a_byãs
) {

701 i‡(
bv_Àn
 =
d©a_byãs
) {

702 
bi_v˙t
++;

704 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

708 
d©a_byãs
 -
bv_Àn
;

709 
bi_v˙t
++;

713 
£˘‹
 +(
∑πül_byãs_hód
 / 
SECTOR_SIZE
);

714 
lba
++;

717 
	`LOGFEC
("Printing Tail AlignedÖart\n");

721 
Æig√d_byãs
) {

723 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

724 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

725 
	`dz_q_chûd_i‹eque°_to_∑ª¡_q
(
pi‹eque°
, 
chûd_i‹eque°
);

726 
chûd_bio
 = 
chûd_i‹eque°
->
i‹_bio
;

727 
	`PRINT_POINTER
(
chûd_i‹eque°
);

728 
chûd_i‹eque°
->
i‹_lba
 = 
lba
;

729 
chûd_i‹eque°
->
i‹_£˘‹
 = 
£˘‹
;

731 
d©a_byãs
 = 
PAGE_SIZE
;

733 i‡(
ªmaöög_bv_Àn
) {

734 
d©a_byãs
 -
ªmaöög_bv_Àn
;

735 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
ªmaöög_bv_Àn
,

736 
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
));

737 i‡(!
ªt
) {

739 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

740 
	`LOGFECE
("UnableÅoádd PageÅo child bio\n");

741 
exô_∑ge_add
;

743 
bi_v˙t
++;

744 
ªmaöög_bv_Àn
 = 0;

748 
bi_v˙t
 < 
bi_v˙t_max
) {

749 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

750 
bv_Àn
 = 
cur_bvec
->bv_len;

752 i‡(
bv_Àn
 >
d©a_byãs
) {

753 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
d©a_byãs
, cur_bvec->
bv_off£t
);

754 i‡(!
ªt
) {

755 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

756 
	`LOGFECE
("UnableÅoádd PageÅo child bio\n");

757 
exô_∑ge_add
;

760 i‡(
bv_Àn
 =
d©a_byãs
) {

761 
bi_v˙t
++;

763 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

765 
Æig√d_byãs
 -
PAGE_SIZE
;

769 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
bv_Àn
, cur_bvec->
bv_off£t
);

770 i‡(!
ªt
) {

771 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

772 
	`LOGFECE
("UnableÅoádd PageÅo child bio\n");

773 
exô_∑ge_add
;

775 
d©a_byãs
 -
bv_Àn
;

776 
bi_v˙t
++;

779 
£˘‹
 +
SECTORS_PER_PAGE
;

780 
lba
++;

783 i‡(!
	`li°_em±y
(&
‰ì_li°_hód
)) {

784 
	`BUG_ON
(1);

790 
	`dz_mîge_∑ª¡_loˇl_q_to_thªadpoﬁ_q
(
pi‹eque°
->
i‹_thªad_poﬁ
,Öiorequest);

792 
exô_Áûuª
:

794 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

795 
	`i‹eque°_put
(
pi‹eque°
);

796 i‡(
∑ge
) {

797 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

799 i‡(
chûd_i‹eque°
) {

800 
	`dz_io_‰ì
(
chûd_i‹eque°
);

802 i‡(
chûd_bio
) {

803 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio
);

805 
exô_∑ge_add
:

806 
bv_Àn
 = 0; bv_À¿< 
tŸÆ_blocks_√eded
; bv_len++) {

808 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

809 i‡(
chûd_i‹eque°
) {

810 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_i‹eque°
->
i‹_bio
);

811 
	`dz_io_‰ì
(
chûd_i‹eque°
);

812 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

815 
	}
}

830 
RVOID
 
	$dz_Ár_mu…i_block_èû_u«lig√d
(
PIOREQUEST
 
pi‹eque°
)

832 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

833 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

834 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

835 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

836 
PBIOVEC
 
cur_bvec
 = 
NULL
;

837 
INT
 
bi_v˙t
 = 0;

838 
INT
 
bi_v˙t_max
 = 0;

839 
INT
 
bv_Àn
 = 0;

840 
INT
 
ªmaöög_bv_Àn
 = 0;

841 
UINT
 
£˘‹_pos_ö_lba
 = 0;

842 
SIZE
 
£˘‹_byãs
 = 0;

843 
U64
 
tŸ_byãs
 = 0;

844 
INT
 
d©a_byãs
 = 0;

845 
INT
 
Æig√d_byãs
 = 0;

846 
INT
 
∑πül_byãs_èû
 = 0;

847 
INT
 
tŸÆ_blocks_√eded
 = 0;

848 
PIOREQUEST
 
chûd_i‹eque°
 = 
NULL
;

849 
PIOREQUEST
 
chûd_i‹eque°_èû

NULL
;

850 
PBIO
 
chûd_bio
 = 
NULL
;

851 
PPAGE
 
∑ge
 = 
NULL
;

852 
LIST_HEAD
 
‰ì_li°_hód
;

853 
INT
 
cou¡
;

854 
INT
 
ªt
;

855 
PIOREQUEST
 
¥ev_chûd_i‹eque°

NULL
;

856 
INT
 
ƒ_iovecs
 = 0;

859 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

860 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

861 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

862 
∑πül_byãs_èû
 = 
tŸ_byãs
 % 
LBA_BLOCK_SIZE
;

863 
Æig√d_byãs
 = 
io_size
 - 
∑πül_byãs_èû
 ;

867 
tŸÆ_blocks_√eded
 = 1 + (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

872 
ƒ_iovecs
 = (
bio
->
bi_max_vecs
 / 
tŸÆ_blocks_√eded
) + 1;

874 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

876 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

879 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

881 
chûd_i‹eque°
 = 
	`dz_io_Æloc
();

882 i‡(!
chûd_i‹eque°
) {

883 
	`LOGFECE
("UnableÅo get free iorequest\n");

884 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

885 
exô_Áûuª
;

887 
	`MEMSET
(
chûd_i‹eque°
);

888 i‡(
chûd_i‹eque°
 =
¥ev_chûd_i‹eque°
) {

889 
	`LOGFEC
("Fú° AŒo¯chûd_i‹eque° = %p\n", 
chûd_i‹eque°
);

890 
	`LOGFEC
("Pªv AŒo¯chûd_i‹eque° = %p\n", 
¥ev_chûd_i‹eque°
);

891 
	`LOGFEC
("Botháre same\n");

892 
SL1
;

893 
	`BUG_ON
(1);

897 
chûd_bio
 = 
	`dz_bio_Æloc
(
ƒ_iovecs
);

898 i‡(!
chûd_bio
) {

899 
	`LOGFECE
("UnableÅo get free child bio\n");

900 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

901 
exô_Áûuª
;

906 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio
, 
£˘‹
,

907 
dz_Ár_mu…i_block_bŸh_Æig√d_biod⁄e
, 
chûd_i‹eque°
);

909 
	`©omic_£t
(&
chûd_i‹eque°
->
i‹_chûd_˙t
, 0);

910 
chûd_i‹eque°
->
i‹_thªad_poﬁ
 = 
ªad_thªad_poﬁ
;

911 
chûd_i‹eque°
->
i‹_bio
 = 
chûd_bio
;

913 
chûd_i‹eque°
->
i‹_∑ª¡
 = 
pi‹eque°
;

914 
chûd_i‹eque°
->
i‹_lba
 = 
lba
;

915 
chûd_i‹eque°
->
i‹_£˘‹
 = 
£˘‹
;

916 
chûd_i‹eque°
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
;

922 
	`li°_add_èû
(&(
chûd_i‹eque°
->
i‹_ioq
), &
‰ì_li°_hód
);

924 
£˘‹
 +
SECTORS_PER_PAGE
;

927 
	`©omic_öc
(&
pi‹eque°
->
i‹_chûd_˙t
);

931 
lba
++;

933 
¥ev_chûd_i‹eque°
 = 
chûd_i‹eque°
;

942 
chûd_i‹eque°_èû
 = 
chûd_i‹eque°
;

943 
∑ge
 = 
	`dz_ªad_∑ge_Æloc
();

944 i‡(!
∑ge
) {

945 
exô_Áûuª
;

949 
ªt
 = 
	`bio_add_∑ge
(
chûd_i‹eque°_èû
->
i‹_bio
, 
∑ge
, 
∑πül_byãs_èû
, 0);

950 i‡(!
ªt
) {

951 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

952 
	`LOGFECE
("UnableÅoádd PageÅo child bio\n");

953 
exô_∑ge_add
;

958 
chûd_i‹eque°_èû
->
i‹_bio
->
bi_íd_io
 = 
dz_Ár_mu…i_block_èû_u«lig√d_biod⁄e
;

965 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

967 
Æig√d_byãs
) {

970 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

973 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

974 
	`dz_q_chûd_i‹eque°_to_∑ª¡_q
(
pi‹eque°
, 
chûd_i‹eque°
);

975 
chûd_bio
 = 
chûd_i‹eque°
->
i‹_bio
;

976 
	`PRINT_POINTER
(
chûd_i‹eque°
);

978 
d©a_byãs
 = 
PAGE_SIZE
;

980 i‡(
ªmaöög_bv_Àn
) {

981 
d©a_byãs
 -
ªmaöög_bv_Àn
;

982 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
ªmaöög_bv_Àn
,

983 
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
));

984 i‡(!
ªt
) {

985 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

986 
	`LOGFECE
("UnableÅoádd PageÅo child bio\n");

987 
exô_∑ge_add
;

989 
bi_v˙t
++;

990 
ªmaöög_bv_Àn
 = 0;

993 
bi_v˙t
 < 
bi_v˙t_max
) {

994 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

995 
bv_Àn
 = 
cur_bvec
->bv_len;

997 i‡(
bv_Àn
 >
d©a_byãs
) {

999 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
d©a_byãs
, cur_bvec->
bv_off£t
);

1000 i‡(!
ªt
) {

1001 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1002 
	`LOGFECE
("UnableÅoádd PageÅo child bio\n");

1003 
exô_∑ge_add
;

1006 i‡(
bv_Àn
 =
d©a_byãs
) {

1007 
bi_v˙t
++;

1009 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

1011 
Æig√d_byãs
 -
PAGE_SIZE
;

1015 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
bv_Àn
, cur_bvec->
bv_off£t
);

1016 i‡(!
ªt
) {

1017 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1018 
	`LOGFECE
("UnableÅoádd PageÅo child bio\n");

1019 
exô_∑ge_add
;

1021 
d©a_byãs
 -
bv_Àn
;

1022 
bi_v˙t
++;

1028 
	`dz_q_i‹eque°
(
ªad_thªad_poﬁ
, 
chûd_i‹eque°
);

1031 
	`LOGFEC
("Printing TailÖart\n");

1035 i‡(
	`li°_em±y
(&
‰ì_li°_hód
)) {

1036 
	`BUG_ON
(1);

1038 
chûd_i‹eque°_èû
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

1039 
	`li°_dñ
(&
chûd_i‹eque°_èû
->
i‹_ioq
);

1042 
	`dz_q_i‹eque°
(
ªad_thªad_poﬁ
, 
chûd_i‹eque°_èû
);

1048 
exô_Áûuª
:

1050 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1051 
	`i‹eque°_put
(
pi‹eque°
);

1052 i‡(
∑ge
) {

1053 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

1055 i‡(
chûd_i‹eque°
) {

1056 
	`dz_io_‰ì
(
chûd_i‹eque°
);

1058 i‡(
chûd_bio
) {

1059 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio
);

1061 
exô_∑ge_add
:

1062 
bv_Àn
 = 0; bv_À¿< 
tŸÆ_blocks_√eded
; bv_len++) {

1064 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

1065 i‡(
chûd_i‹eque°
) {

1066 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_i‹eque°
->
i‹_bio
);

1067 
	`dz_io_‰ì
(
chûd_i‹eque°
);

1068 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

1071 
	}
}

1082 
RVOID
 
	$dz_Ár_mu…i_block_bŸh_Æig√d
(
PIOREQUEST
 
pi‹eque°
)

1085 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

1086 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

1087 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

1088 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

1089 
PBIOVEC
 
cur_bvec
 = 
NULL
;

1090 
INT
 
bi_v˙t
 = 0;

1091 
INT
 
bi_v˙t_max
 = 0;

1092 
INT
 
bv_Àn
 = 0;

1093 
INT
 
ªmaöög_bv_Àn
 = 0;

1094 
UINT
 
£˘‹_pos_ö_lba
 = 0;

1095 
SIZE
 
£˘‹_byãs
 = 0;

1096 
U64
 
tŸ_byãs
 = 0;

1097 
INT
 
d©a_byãs
 = 0;

1098 
INT
 
Æig√d_byãs
 = 0;

1099 
INT
 
tŸÆ_blocks_√eded
 = 0;

1100 
PIOREQUEST
 
chûd_i‹eque°
 = 
NULL
;

1101 
PBIO
 
chûd_bio
 = 
NULL
;

1102 
LIST_HEAD
 
‰ì_li°_hód
;

1103 
INT
 
cou¡
;

1104 
INT
 
ªt
;

1105 
PIOREQUEST
 
¥ev_chûd_i‹eque°

NULL
;

1106 
INT
 
ƒ_iovecs
 = 0;

1110 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

1111 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

1112 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

1113 
Æig√d_byãs
 = 
io_size
 ;

1118 
tŸÆ_blocks_√eded
 = (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

1125 
ƒ_iovecs
 = (
bio
->
bi_max_vecs
 / 
tŸÆ_blocks_√eded
) + 1;

1127 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

1130 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

1133 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

1135 
chûd_i‹eque°
 = 
	`dz_io_Æloc
();

1136 i‡(!
chûd_i‹eque°
) {

1137 
	`LOGFECE
("UnableÅo get free iorequest\n");

1138 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

1139 
exô_Áûuª
;

1141 
	`MEMSET
(
chûd_i‹eque°
);

1143 i‡(
chûd_i‹eque°
 =
¥ev_chûd_i‹eque°
) {

1144 
	`LOGFEC
("Fú° AŒo¯chûd_i‹eque° = %p\n", 
chûd_i‹eque°
);

1145 
	`LOGFEC
("Pªv AŒo¯chûd_i‹eque° = %p\n", 
¥ev_chûd_i‹eque°
);

1146 
	`LOGFEC
("Botháre same\n");

1147 
SL1
;

1148 
	`BUG_ON
(1);

1150 
chûd_bio
 = 
	`dz_bio_Æloc
(
ƒ_iovecs
);

1151 i‡(!
chûd_bio
) {

1152 
	`LOGFECE
("UnableÅo get free child bio\n");

1153 
tŸÆ_blocks_√eded
 = 
cou¡
 + 1;

1154 
exô_Áûuª
;

1159 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio
, 
£˘‹
,

1160 
dz_Ár_mu…i_block_bŸh_Æig√d_biod⁄e
, 
chûd_i‹eque°
);

1162 
	`©omic_£t
(&
chûd_i‹eque°
->
i‹_chûd_˙t
, 0);

1163 
chûd_i‹eque°
->
i‹_thªad_poﬁ

ªad_thªad_poﬁ
;

1164 
chûd_i‹eque°
->
i‹_bio
 = 
chûd_bio
;

1166 
chûd_i‹eque°
->
i‹_∑ª¡
 = 
pi‹eque°
;

1167 
chûd_i‹eque°
->
i‹_lba
 = 
lba
;

1168 
chûd_i‹eque°
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ_SHARE_PAGE
;

1174 
	`li°_add_èû
(&(
chûd_i‹eque°
->
i‹_ioq
), &
‰ì_li°_hód
);

1176 
£˘‹
 +
SECTORS_PER_PAGE
;

1179 
	`©omic_öc
(&
pi‹eque°
->
i‹_chûd_˙t
);

1183 
lba
++;

1184 
¥ev_chûd_i‹eque°
 = 
chûd_i‹eque°
;

1195 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

1197 
Æig√d_byãs
) {

1200 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

1205 
	`li°_dñ
(&(
chûd_i‹eque°
->
i‹_ioq
));

1209 
chûd_bio
 = 
chûd_i‹eque°
->
i‹_bio
;

1212 
d©a_byãs
 = 
PAGE_SIZE
;

1214 i‡(
ªmaöög_bv_Àn
) {

1217 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
ªmaöög_bv_Àn
,

1218 
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
));

1219 i‡(!
ªt
) {

1220 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1221 
	`LOGFECE
("UnableÅoádd PageÅo child bio\n");

1222 
exô_∑ge_add
;

1224 
d©a_byãs
 -
ªmaöög_bv_Àn
;

1225 
bi_v˙t
++;

1226 
ªmaöög_bv_Àn
 = 0;

1229 
bi_v˙t
 < 
bi_v˙t_max
) {

1230 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

1231 
bv_Àn
 = 
cur_bvec
->bv_len;

1238 i‡(
bv_Àn
 >
d©a_byãs
) {

1240 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
d©a_byãs
, cur_bvec->
bv_off£t
);

1241 i‡(!
ªt
) {

1242 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1243 
	`LOGFECE
("UnableÅoádd PageÅo child bio instance\n");

1244 
exô_∑ge_add
;

1247 i‡(
bv_Àn
 =
d©a_byãs
) {

1248 
bi_v˙t
++;

1250 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

1252 
Æig√d_byãs
 -
PAGE_SIZE
;

1256 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
cur_bvec
->
bv_∑ge
, 
bv_Àn
, cur_bvec->
bv_off£t
);

1257 i‡(!
ªt
) {

1258 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1259 
	`LOGFECE
("UnableÅoádd PageÅo child bioÉxtended\n");

1260 
exô_∑ge_add
;

1262 
d©a_byãs
 -
bv_Àn
;

1263 
bi_v˙t
++;

1272 
	`dz_q_i‹eque°
(
ªad_thªad_poﬁ
, 
chûd_i‹eque°
);

1276 
	`LOGD
("AVERMA:SET COMPLETED %d \n", 
avîma_˙t
++);

1284 
exô_Áûuª
:

1286 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

1287 
	`i‹eque°_put
(
pi‹eque°
);

1288 i‡(
chûd_i‹eque°
) {

1289 
	`dz_io_‰ì
(
chûd_i‹eque°
);

1291 i‡(
chûd_bio
) {

1292 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio
);

1294 
exô_∑ge_add
:

1295 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

1297 
chûd_i‹eque°
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

1298 i‡(
chûd_i‹eque°
) {

1299 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_i‹eque°
->
i‹_bio
);

1302 
	`dz_io_‰ì
(
chûd_i‹eque°
);

1303 
	`li°_dñ
(&
chûd_i‹eque°
->
i‹_ioq
);

1306 
	}
}

1314 
RINT
 
	$dz_„c_Æign_ªad_f‹_mu…i_block
(
PIOREQUEST
 
pi‹eque°
)

1316 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

1317 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

1318 
LBA
 
lba
 = 0;

1319 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

1321 
SIZE
 
£˘‹_byãs
 = 0;

1322 
U64
 
tŸ_byãs
 = 0;

1323 
INT
 
ba
 = 0;

1324 
INT
 
bu
 = 0;

1325 
INT
 
hu
 = 0;

1326 
INT
 
tu
 = 0;

1329 
lba
 = 
	`dz_c⁄vît_£˘‹_to_lba
(
£˘‹
);

1331 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

1342 i‡((
£˘‹_byãs
 % 
LBA_BLOCK_SIZE
) == 0 ) {

1345 i‡(((
£˘‹_byãs
 + 
io_size
Ë% 
LBA_BLOCK_SIZE
) == 0 ) {

1353 i‡(
ba
++ == 0) {

1354 
	`LOGD
("Ca£1:READ BIO i†Hód Alig√dánd Taû Alig√d. io_sizê%zu byãs\n", 
io_size
);

1356 
	`LOGFEC
("Ca£1:READ BIO i†Hód Alig√dánd Taû Alig√d. io_sizê%zu byãs\n", 
io_size
);

1357 
	`INC_COUNTER
(
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
);

1358 
	`dz_Ár_mu…i_block_bŸh_Æig√d
(
pi‹eque°
);

1359 
RETURNS
;

1366 i‡(
tu
++ == 0) {

1367 
	`LOGD
("Case2:Read BIO is Head Alignedánd Tail UnAligned\n");

1369 
	`LOGFEC
("%s", "Case2:Read BIO is Head Alignedánd Tail UnAligned\n");

1370 
	`INC_COUNTER
(
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
);

1371 
	`INC_COUNTER
(
„c_iocou¡_ªads_mu…i_èû_u«lig√d_∑ge
);

1372 
	`dz_Ár_mu…i_block_èû_u«lig√d
(
pi‹eque°
);

1373 
RETURNS
;

1376 } i‡(((
tŸ_byãs
 = (
£˘‹_byãs
 + 
io_size
)Ë% 
LBA_BLOCK_SIZE
) == 0 ) {

1386 i‡(
hu
++ == 0) {

1387 
	`LOGD
("Case3:Read BIO is Head UnAlignedánd Tail Aligned\n");

1389 
	`LOGFEC
("%s", "Case3:Read BIO is Head UnAlignedánd Tail Aligned\n");

1390 
	`INC_COUNTER
(
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
);

1391 
	`INC_COUNTER
(
„c_iocou¡_ªads_mu…i_hód_u«lig√d_∑ge
);

1392 
	`dz_Ár_mu…i_block_hód_u«lig√d
(
pi‹eque°
);

1393 
RETURNS
;

1404 i‡(
bu
++ == 0) {

1405 
	`LOGD
("Case4:Read BIO is Neither Head Aligned Nor Tail Aligned\n");

1407 
	`LOGFEC
("%s", "Case4:Read BIO is Neither Head Aligned Nor Tail Aligned\n");

1408 
	`INC_COUNTER
(
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
);

1409 
	`INC_COUNTER
(
„c_iocou¡_ªads_mu…i_bŸh_u«lig√d_∑ge
);

1410 
	`dz_Ár_mu…i_block_bŸh_u«lig√d
(
pi‹eque°
);

1411 
RETURNS
;

1413 
	}
}

	@fec_engine/fec_engine_align_read_partial.c

9 
	~"„c_ígöe.h
"

11 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

12 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

14 
U64
 
„c_èbÀ_size
;

15 
SPINLOCK
 
„c_a˘ive_lock
;

18 
PFEC_TABLE
 
„c_èbÀs_a˘ive
;

19 
PFEC_TABLE
 
„c_èbÀs_Êush
;

20 
PLBA_BLOCK
 
lba_èbÀ
;

22 
SPINLOCK
 
¥öt_i‹eque°_lock
;

24 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

27 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_hÆig√d_∑ge
;

30 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_èlig√d_∑ge
;

34 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_•ûÀd_∑ge
;

39 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_absﬁuã_∑ge
;

41 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

42 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

43 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

44 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

45 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

46 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

49 
RVOID
 
	$dz_Ár_f‹_∑πül_block_biod⁄e_èû
(
PBIO
 
bio
)

51 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

52 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

53 
PVOID
 
˝agebuf
 = 
NULL
;

54 
PVOID
 
µagebuf
 = 
NULL
;

55 
BIOVEC
 
cbvec
;

56 
BIOVEC
 
pbvec
;

57 
PBIO
 
pbio
 = 
pi‹eque°
->
i‹_bio
;

59 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
pbio
);

60 
UINT
 
£˘‹_pos_ö_lba
 = 0;

61 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

62 
SIZE
 
size
 = 
	`DZ_BIO_GET_SIZE
(
pbio
);

63 
PBIOVEC
 
œ°_bvec
 = 
NULL
;

64 
INT
 
bi_v˙t
 = 0;

65 
INT
 
bi_v˙t_max
 = 0;

66 
INT
 
bv_Àn
 = 0;

67 
INT
 
bv_off£t
 = 0;

68 
INT
 
∑πül_byãs_èû
;

69 
INT
 
∑πül_byãs_hód
;

70 
INT
 
∑πül_byãs
;

83 i‡(
bio
->
bi_°©us
 !
BLK_STS_OK
) {

84 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

85 
exô
;

88 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

89 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

90 
∑πül_byãs_èû
 = 
size
 - 
∑πül_byãs_hód
;

91 
∑πül_byãs
 = 
∑πül_byãs_èû
;

94 
cbvec
 = 
	`bio_iovec
(
bio
);

95 
˝agebuf
 = 
	`km≠
(
cbvec
.
bv_∑ge
);

96 
˝agebuf
 +
£˘‹_pos_ö_lba
;

99 
bi_v˙t_max
 = 
pbio
->
bi_v˙t
;

100 
pbvec
 = 
	`bio_iovec
(
pbio
);

101 
bi_v˙t
 = 
pbio
->bi_vcnt - 1;

103 
∑πül_byãs
 > 0) {

104 
bi_v˙t
 >= 0) {

105 
œ°_bvec
 = &
pbio
->
bi_io_vec
[
bi_v˙t
];

106 
bv_Àn
 = 
œ°_bvec
->bv_len;

107 
∑πül_byãs
 -
bv_Àn
 ;

108 i‡(
∑πül_byãs
 <= 0) {

110 
bv_off£t
 = 
œ°_bvec
->bv_off£à- 
∑πül_byãs
;

111 
µagebuf
 = 
	`km≠
(
œ°_bvec
->
bv_∑ge
);

112 
µagebuf
 +
bv_off£t
;

113 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
∑πül_byãs_èû
);

114 
	`kunm≠
(
œ°_bvec
->
bv_∑ge
);

117 
bv_off£t
 = 
œ°_bvec
->bv_offset;

118 
µagebuf
 = 
	`km≠
(
œ°_bvec
->
bv_∑ge
);

119 
µagebuf
 +
bv_off£t
;

120 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
bv_Àn
);

121 
	`kunm≠
(
œ°_bvec
->
bv_∑ge
);

122 
˝agebuf
 +
bv_Àn
;

123 
bi_v˙t
--;

128 
	`kunm≠
(
cbvec
.
bv_∑ge
);

129 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

132 
	`IOREQUEST_DONE_STATUS
(
pi‹eque°
);

133 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

134 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

135 
	`i‹eque°_put
(
ci‹eque°
);

137 
	`bio_d©a_dú
(
pi‹eque°
->
i‹_bio
Ë=
WRITE
 ?

138 
	`i‹eque°_put
(
pi‹eque°
) :

139 
	`i‹eque°_put
(
pi‹eque°
);

143 
exô
:

144 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

145 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

146 
	`i‹eque°_put
(
ci‹eque°
);

150 
	}
}

153 
RVOID
 
	$dz_Ár_f‹_∑πül_block_biod⁄e_hód
(
PBIO
 
bio
)

155 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

156 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

157 
PVOID
 
˝agebuf
 = 
NULL
;

158 
PVOID
 
µagebuf
 = 
NULL
;

159 
BIOVEC
 
cbvec
;

160 
BIOVEC
 
pbvec
;

161 
PBIO
 
pbio
 = 
pi‹eque°
->
i‹_bio
;

163 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
pbio
);

164 
UINT
 
£˘‹_pos_ö_lba
 = 0;

165 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

166 
INT
 
bv_Àn
 = 0;

167 
bvec_ôî
 
ôî
;

168 
INT
 
∑πül_byãs_hód
;

181 i‡(
bio
->
bi_°©us
 !
BLK_STS_OK
) {

182 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

183 
exô
;

185 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

186 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

189 
cbvec
 = 
	`bio_iovec
(
bio
);

190 
˝agebuf
 = 
	`km≠
(
cbvec
.
bv_∑ge
);

191 
˝agebuf
 +
£˘‹_pos_ö_lba
;

195 
	`bio_f‹_óch_£gmít
(
pbvec
, 
pbio
, 
ôî
) {

196 
µagebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

197 
µagebuf
 +
pbvec
.
bv_off£t
;

198 
bv_Àn
 = 
pbvec
.bv_len;

199 i‡(
∑πül_byãs_hód
 > 
bv_Àn
) {

209 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
bv_Àn
);

210 
˝agebuf
 +
bv_Àn
;

211 
∑πül_byãs_hód
 -
bv_Àn
;

212 
	`kunm≠
(
pbvec
.
bv_∑ge
);

217 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
∑πül_byãs_hód
);

218 
	`kunm≠
(
pbvec
.
bv_∑ge
);

222 
	`kunm≠
(
cbvec
.
bv_∑ge
);

224 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

227 
	`IOREQUEST_DONE_STATUS
(
pi‹eque°
);

228 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

229 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

230 
	`i‹eque°_put
(
ci‹eque°
);

232 
	`bio_d©a_dú
(
pi‹eque°
->
i‹_bio
Ë=
WRITE
 ?

233 
	`i‹eque°_put
(
pi‹eque°
) :

234 
	`i‹eque°_put
(
pi‹eque°
);

238 
exô
:

239 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

240 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

241 
	`i‹eque°_put
(
ci‹eque°
);

245 
	}
}

248 
RVOID
 
	$dz_Ár_f‹_∑πül_block_biod⁄e
(
PBIO
 
bio
)

250 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

251 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

252 
PVOID
 
˝agebuf
 = 
NULL
;

253 
PVOID
 
µagebuf
 = 
NULL
;

254 
BIOVEC
 
cbvec
;

255 
BIOVEC
 
pbvec
;

256 
PBIO
 
pbio
 = 
pi‹eque°
->
i‹_bio
;

257 
INT
 
ªt
 = 
SUCCESS
;

258 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
pbio
);

259 
UINT
 
£˘‹_pos_ö_lba
 = 0;

260 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

261 
SIZE
 
size
 = 
	`DZ_BIO_GET_SIZE
(
pbio
);

262 
INT
 
bv_Àn
 = 0;

263 
bvec_ôî
 
ôî
;

275 i‡(
bio
->
bi_°©us
 !
BLK_STS_OK
) {

276 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

277 
exô
;

281 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

282 
cbvec
 = 
	`bio_iovec
(
bio
);

283 
˝agebuf
 = 
	`km≠
(
cbvec
.
bv_∑ge
);

284 
˝agebuf
 +
£˘‹_pos_ö_lba
;

287 
	`bio_f‹_óch_£gmít
(
pbvec
, 
pbio
, 
ôî
) {

292 
µagebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

293 
µagebuf
 +
pbvec
.
bv_off£t
;

294 
bv_Àn
 = 
pbvec
.bv_len;

295 i‡(
size
 > 
bv_Àn
) {

296 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
bv_Àn
);

297 
˝agebuf
 +
bv_Àn
;

298 
size
 -
bv_Àn
;

299 
	`kunm≠
(
pbvec
.
bv_∑ge
);

302 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
size
);

303 
	`kunm≠
(
pbvec
.
bv_∑ge
);

307 
	`kunm≠
(
cbvec
.
bv_∑ge
);

308 
	`READ_IO_DONE
(
pi‹eque°
);

310 
exô
:

311 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

312 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

313 
	`i‹eque°_put
(
ci‹eque°
);

314 
	`i‹eque°_put
(
pi‹eque°
);

317 
	}
}

319 
RVOID
 
	$dz_„c_Æign_ªad_sögÀ_∑ge_async
(
PIOREQUEST
 
∑ª¡_i‹eque°
, 
BIODONE
 
d⁄e_func
)

321 
INT
 
ªt
 = 
SUCCESS
;

322 
PIOREQUEST
 
chûd_i‹eque°
 = 
NULL
;

323 
PBIO
 
chûd_bio
 = 
NULL
;

324 
PBIO
 
bio
 = 
∑ª¡_i‹eque°
->
i‹_bio
;

325 
PPAGE
 
∑ge
 = 
NULL
;

326 
SECTOR
 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
∑ª¡_i‹eque°
->
i‹_lba
);

328 
chûd_i‹eque°
 = 
	`dz_io_Æloc
();

329 i‡(!
chûd_i‹eque°
) {

330 
	`LOGFECE
("UnableÅo get free iorequest\n");

331 
exô_Áûuª
;

333 
	`MEMSET
(
chûd_i‹eque°
);

334 
chûd_bio
 = 
	`dz_bio_Æloc
(1);

335 i‡(!
chûd_bio
) {

336 
	`LOGFECE
("UnableÅo get free child bio\n");

337 
exô_Áûuª
;

339 
∑ge
 = 
	`dz_ªad_∑ge_Æloc
();

340 i‡(!
∑ge
) {

341 
	`LOGFECE
("UnableÅo get freeÑeadÖage\n");

342 
exô_Áûuª
;

344 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio
, 
£˘‹
, 
d⁄e_func
, 
chûd_i‹eque°
);

346 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio
, 
∑ge
, 
PAGE_SIZE
, 0);

347 i‡(!
ªt
) {

348 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

349 
	`LOGFECE
("UnableÅoádd PageÅo child bio\n");

350 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

351 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio
);

352 
	`dz_io_‰ì
(
chûd_i‹eque°
);

355 
	`©omic_£t
(&
chûd_i‹eque°
->
i‹_chûd_˙t
, 0);

356 
chûd_i‹eque°
->
i‹_thªad_poﬁ

ªad_thªad_poﬁ
;

357 
chûd_i‹eque°
->
i‹_bio
 = 
chûd_bio
;

359 
chûd_i‹eque°
->
i‹_lba
 = 
∑ª¡_i‹eque°
->ior_lba;

360 
chûd_i‹eque°
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

361 
chûd_i‹eque°
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
;

362 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

366 
	`dz_„c_Æign_ªad_io_dúe˘
(
chûd_i‹eque°
);

369 
exô_Áûuª
:

371 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

372 i‡(
chûd_i‹eque°
) {

373 
	`dz_io_‰ì
(
chûd_i‹eque°
);

375 i‡(
∑ge
) {

376 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

378 i‡(
chûd_bio
) {

379 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio
);

381 
	}
}

387 
RVOID
 
	$dz_„c_Æign_ªad_f‹_∑πül_block
(
PIOREQUEST
 
pi‹eque°
)

389 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

390 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

391 
INT
 
size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

392 
UINT
 
£˘‹_pos_ö_lba
 = 0;

393 
BOOL
 
Æign_Êag
 = 
åue
;

395 i‡(((
£˘‹
 * 
SECTOR_SIZE
Ë% 
LBA_BLOCK_SIZE
) == 0 ) {

397 
∑πül_io
:

398 i‡(
Æign_Êag
 =
åue
) {

399 
	`LOGD
("Case1: Partial Block IO: Start Block Aligned. Only one Child will be created\n");

403 
	`dz_„c_Æign_ªad_sögÀ_∑ge_async
(
pi‹eque°
, 
dz_Ár_f‹_∑πül_block_biod⁄e
);

407 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
pi‹eque°
->
i‹_lba
 * 
LBA_BLOCK_SIZE
);

409 i‡((
£˘‹_pos_ö_lba
 + 
size
Ë<
LBA_BLOCK_SIZE
) {

412 
	`LOGD
("Case2: Partial Block IO: NO Start Block Aligned. Falls into Single Block butÇo Spillover.\n");

413 
Æign_Êag
 = 
Ál£
;

414 
∑πül_io
;

417 
	`LOGD
("Case3: Partial Block IO: Spill overÅoÇext block. Two children will be created\n");

420 
	`dz_„c_Æign_ªad_doubÀ_∑ge_async
(
pi‹eque°
,

421 
dz_Ár_f‹_∑πül_block_biod⁄e_hód
,

422 
dz_Ár_f‹_∑πül_block_biod⁄e_èû
);

426 
	}
}

	@fec_engine/fec_engine_align_read_single.c

9 
	~"„c_ígöe.h
"

11 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

12 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

15 
PFEC_TABLE
 
„c_èbÀs_a˘ive
;

16 
PFEC_TABLE
 
„c_èbÀs_Êush
;

17 
PLBA_BLOCK
 
lba_èbÀ
;

19 
SPINLOCK
 
¥öt_i‹eque°_lock
;

21 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

22 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

23 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

30 
RVOID
 
	$dz_Ár_f‹_sögÀ_block_biod⁄e_èû
(
PBIO
 
bio
)

32 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

33 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

34 
PVOID
 
˝agebuf
 = 
NULL
;

35 
PVOID
 
µagebuf
 = 
NULL
;

36 
BIOVEC
 
cbvec
;

37 
BIOVEC
 
pbvec
;

38 
PBIO
 
pbio
 = 
pi‹eque°
->
i‹_bio
;

40 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
pbio
);

41 
UINT
 
£˘‹_pos_ö_lba
 = 0;

42 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

43 
SIZE
 
size
 = 
	`DZ_BIO_GET_SIZE
(
pbio
);

44 
PBIOVEC
 
œ°_bvec
 = 
NULL
;

45 
INT
 
bi_v˙t
 = 0;

46 
INT
 
bi_v˙t_max
 = 0;

47 
INT
 
bv_Àn
 = 0;

48 
INT
 
bv_off£t
 = 0;

49 
INT
 
∑πül_byãs_èû
;

50 
INT
 
∑πül_byãs_hód
;

51 
INT
 
∑πül_byãs
;

60 i‡(
bio
->
bi_°©us
 !
BLK_STS_OK
) {

61 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

62 
exô
;

65 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

66 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

67 
∑πül_byãs_èû
 = 
size
 - 
∑πül_byãs_hód
;

68 
∑πül_byãs
 = 
∑πül_byãs_èû
;

71 
cbvec
 = 
	`bio_iovec
(
bio
);

72 
˝agebuf
 = 
	`km≠
(
cbvec
.
bv_∑ge
);

73 
˝agebuf
 +
£˘‹_pos_ö_lba
;

77 
bi_v˙t_max
 = 
pbio
->
bi_v˙t
;

78 
pbvec
 = 
	`bio_iovec
(
pbio
);

79 
bi_v˙t
 = 
pbio
->bi_vcnt - 1;

81 
∑πül_byãs
 > 0) {

82 
bi_v˙t
 >= 0) {

83 
œ°_bvec
 = &
pbio
->
bi_io_vec
[
bi_v˙t
];

84 
bv_Àn
 = 
œ°_bvec
->bv_len;

85 
∑πül_byãs
 -
bv_Àn
 ;

86 i‡(
∑πül_byãs
 <= 0) {

88 
bv_off£t
 = 
œ°_bvec
->bv_off£à- 
∑πül_byãs
;

89 
µagebuf
 = 
	`km≠
(
œ°_bvec
->
bv_∑ge
);

90 
µagebuf
 +
bv_off£t
;

91 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
∑πül_byãs_èû
);

92 
	`kunm≠
(
œ°_bvec
->
bv_∑ge
);

95 
bv_off£t
 = 
œ°_bvec
->bv_offset;

96 
µagebuf
 = 
	`km≠
(
œ°_bvec
->
bv_∑ge
);

97 
µagebuf
 +
bv_off£t
;

98 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
bv_Àn
);

99 
	`kunm≠
(
œ°_bvec
->
bv_∑ge
);

100 
˝agebuf
 +
bv_Àn
;

101 
bi_v˙t
--;

106 
	`kunm≠
(
cbvec
.
bv_∑ge
);

107 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

110 
	`IOREQUEST_DONE_STATUS
(
pi‹eque°
);

111 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

112 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

113 
	`i‹eque°_put
(
ci‹eque°
);

114 
	`i‹eque°_put
(
pi‹eque°
);

119 
exô
:

120 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

121 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

122 
	`i‹eque°_put
(
ci‹eque°
);

125 
	}
}

131 
RVOID
 
	$dz_Ár_f‹_sögÀ_block_biod⁄e_hód
(
PBIO
 
bio
)

133 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

134 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

135 
PVOID
 
˝agebuf
 = 
NULL
;

136 
PVOID
 
µagebuf
 = 
NULL
;

137 
BIOVEC
 
cbvec
;

138 
BIOVEC
 
pbvec
;

139 
PBIO
 
pbio
 = 
pi‹eque°
->
i‹_bio
;

141 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
pbio
);

142 
UINT
 
£˘‹_pos_ö_lba
 = 0;

143 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

144 
INT
 
bv_Àn
 = 0;

145 
bvec_ôî
 
ôî
;

146 
INT
 
∑πül_byãs_hód
;

160 i‡(
bio
->
bi_°©us
 !
BLK_STS_OK
) {

161 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

162 
exô
;

168 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

169 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

172 
cbvec
 = 
	`bio_iovec
(
bio
);

173 
˝agebuf
 = 
	`km≠
(
cbvec
.
bv_∑ge
);

174 
˝agebuf
 +
£˘‹_pos_ö_lba
;

178 
	`bio_f‹_óch_£gmít
(
pbvec
, 
pbio
, 
ôî
) {

179 
µagebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

180 
µagebuf
 +
pbvec
.
bv_off£t
;

181 
bv_Àn
 = 
pbvec
.bv_len;

182 i‡(
∑πül_byãs_hód
 > 
bv_Àn
) {

192 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
bv_Àn
);

193 
˝agebuf
 +
bv_Àn
;

194 
∑πül_byãs_hód
 -
bv_Àn
;

195 
	`kunm≠
(
pbvec
.
bv_∑ge
);

200 
	`PMEMCPY
(
µagebuf
, 
˝agebuf
, 
∑πül_byãs_hód
);

201 
	`kunm≠
(
pbvec
.
bv_∑ge
);

205 
	`kunm≠
(
cbvec
.
bv_∑ge
);

207 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

210 
	`IOREQUEST_DONE_STATUS
(
pi‹eque°
);

211 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

212 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

213 
	`i‹eque°_put
(
ci‹eque°
);

214 
	`i‹eque°_put
(
pi‹eque°
);

218 
exô
:

219 
	`dz_ªad_∑ge_‰ì
(
cbvec
.
bv_∑ge
);

220 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

221 
	`i‹eque°_put
(
ci‹eque°
);

224 
	}
}

230 
RVOID
 
	$dz_„c_Æign_ªad_doubÀ_∑ge_async
(
PIOREQUEST
 
∑ª¡_i‹eque°
,

231 
BIODONE
 
d⁄e_hód
, BIODONE 
d⁄e_èû
)

233 
INT
 
ªt
 = 
SUCCESS
;

234 
PIOREQUEST
 
chûd_i‹eque°_hód
 = 
NULL
;

235 
PIOREQUEST
 
chûd_i‹eque°_èû
 = 
NULL
;

236 
PBIO
 
chûd_bio_hód
 = 
NULL
;

237 
PBIO
 
chûd_bio_èû
 = 
NULL
;

238 
PPAGE
 
∑ge_hód
 = 
NULL
;

239 
PPAGE
 
∑ge_èû
 = 
NULL
;

240 
PBIO
 
bio
 = 
∑ª¡_i‹eque°
->
i‹_bio
;

241 
LBA
 
lba
 = 
∑ª¡_i‹eque°
->
i‹_lba
;

242 
SECTOR
 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba
);

246 
chûd_i‹eque°_hód
 = 
	`dz_io_Æloc
();

247 i‡(!
chûd_i‹eque°_hód
) {

248 
	`LOGFECE
("UnableÅo get free iorequest\n");

249 
exô_Áûuª
;

251 
	`MEMSET
(
chûd_i‹eque°_hód
);

254 
chûd_bio_hód
 = 
	`dz_bio_Æloc
(1);

255 i‡(!
chûd_bio_hód
) {

256 
	`LOGFECE
("UnableÅo get free child bio\n");

257 
exô_Áûuª
;

261 
∑ge_hód
 = 
	`dz_ªad_∑ge_Æloc
();

262 i‡(!
∑ge_hód
) {

263 
	`LOGFECE
("UnableÅo get freeÑeadÖage\n");

264 
exô_Áûuª
;

266 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio_hód
, 
£˘‹
, 
d⁄e_hód
, 
chûd_i‹eque°_hód
);

269 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio_hód
, 
∑ge_hód
, 
PAGE_SIZE
, 0);

270 i‡(!
ªt
) {

271 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

272 
	`LOGFECE
("UnableÅoádd PageÅo child bio head\n");

273 
exô_Æloc
;

276 
	`©omic_£t
(&
chûd_i‹eque°_hód
->
i‹_chûd_˙t
, 0);

277 
chûd_i‹eque°_hód
->
i‹_thªad_poﬁ
 = 
ªad_thªad_poﬁ
;

278 
chûd_i‹eque°_hód
->
i‹_bio
 = 
chûd_bio_hód
;

280 
chûd_i‹eque°_hód
->
i‹_lba
 = 
lba
;

281 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

282 
chûd_i‹eque°_hód
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

283 
chûd_i‹eque°_hód
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
;

286 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

290 
lba
++;

291 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba
);

294 
chûd_i‹eque°_èû
 = 
	`dz_io_Æloc
();

295 i‡(!
chûd_i‹eque°_èû
) {

296 
	`LOGFECE
("UnableÅo get free iorequestÅail\n");

297 
exô_Áûuª
;

299 
	`MEMSET
(
chûd_i‹eque°_èû
);

302 
chûd_bio_èû
 = 
	`dz_bio_Æloc
(1);

303 i‡(!
chûd_bio_èû
) {

304 
	`LOGFECE
("UnableÅo get free child bioÅail\n");

305 
exô_Áûuª
;

309 
∑ge_èû
 = 
	`dz_ªad_∑ge_Æloc
();

310 i‡(!
∑ge_èû
) {

311 
	`LOGFECE
("UnableÅo get freeÑeadÖageÅail\n");

312 
exô_Áûuª
;

314 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio_èû
, 
£˘‹
, 
d⁄e_èû
, 
chûd_i‹eque°_èû
);

316 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio_èû
, 
∑ge_èû
, 
PAGE_SIZE
, 0);

317 i‡(!
ªt
) {

318 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

319 
	`LOGFECE
("UnableÅoádd PageÅo child bioÅail\n");

320 
exô_Æloc
;

322 
	`©omic_£t
(&
chûd_i‹eque°_èû
->
i‹_chûd_˙t
, 0);

323 
chûd_i‹eque°_èû
->
i‹_thªad_poﬁ
 = 
ªad_thªad_poﬁ
;

324 
chûd_i‹eque°_èû
->
i‹_bio
 = 
chûd_bio_èû
;

326 
chûd_i‹eque°_èû
->
i‹_lba
 = 
lba
;

327 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

328 
chûd_i‹eque°_èû
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

329 
chûd_i‹eque°_èû
->
i‹_ty≥
 = 
DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
;

332 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

335 
chûd_bio_hód
->
bi_√xt
 = 
chûd_bio_èû
;

336 
chûd_bio_èû
->
bi_√xt
 = 
chûd_bio_hód
;

340 
	`dz_q_i‹eque°_thªad_poﬁ
(
chûd_i‹eque°_hód
);

341 
	`dz_q_i‹eque°_thªad_poﬁ
(
chûd_i‹eque°_èû
);

344 
exô_Áûuª
:

346 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

348 
exô_Æloc
:

349 i‡(
∑ge_hód
) {

350 
	`dz_ªad_∑ge_‰ì
(
∑ge_hód
);

352 i‡(
∑ge_èû
) {

353 
	`dz_ªad_∑ge_‰ì
(
∑ge_èû
);

355 i‡(
chûd_bio_hód
) {

356 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio_hód
);

358 i‡(
chûd_bio_èû
) {

359 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio_èû
);

361 i‡(
chûd_i‹eque°_hód
) {

362 
	`dz_io_‰ì
(
chûd_i‹eque°_hód
);

364 i‡(
chûd_i‹eque°_èû
) {

365 
	`dz_io_‰ì
(
chûd_i‹eque°_èû
);

367 
	`i‹eque°_put
(
∑ª¡_i‹eque°
);

368 
	}
}

374 
RVOID
 
	$dz_„c_Æign_ªad_f‹_sögÀ_block
(
PIOREQUEST
 
pi‹eque°
)

376 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

377 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

379 i‡(((
£˘‹
 * 
SECTOR_SIZE
Ë% 
LBA_BLOCK_SIZE
) == 0 ) {

381 
	`LOGD
("Case1: Aligned Single Page\n");

382 
	`INC_COUNTER
(
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
);

383 
	`dz_„c_Æign_ªad_io_dúe˘
(
pi‹eque°
);

391 
	`LOGFEC
("Case2: UnAligned Single Page\n");

392 
	`INC_COUNTER
(
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
);

393 
	`dz_„c_Æign_ªad_doubÀ_∑ge_async
(
pi‹eque°
,

394 
dz_Ár_f‹_sögÀ_block_biod⁄e_hód
,

395 
dz_Ár_f‹_sögÀ_block_biod⁄e_èû
);

398 
	}
}

	@fec_engine/fec_engine_align_write.c

9 
	~"„c_ígöe.h
"

11 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

12 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

13 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

14 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

15 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

16 
U64
 
„c_èbÀ_size
;

17 
U64
 
„c_a˘ive_cou¡
;

18 
SPINLOCK
 
„c_a˘ive_lock
;

19 
SPINLOCK
 
„c_Êush_lock
;

20 
BITMAP
 
„c_buf„r_bôm≠
;

21 
PFEC_TABLE
 
„c_èbÀs_a˘ive
;

22 
PFEC_TABLE
 
„c_èbÀs_Êush
;

23 
PIOREQUEST
 
„c_Êush_i‹eque°
;

25 
U64
 
time_„c_wrôe_°¨t
;

26 
U64
 
time_„c_wrôe_swôch
;

27 
U64
 
„c_a˘ive_thªshﬁd
;

38 
ölöe
 
PFEC_WRITE
 
	$GET_FEC_SINGLE_FREE_BUFFER
(
VOID
)

40 
U64
 
tmp_cou¡
 = 0;

41 
PFEC_WRITE
 
wrôe_íåy
 = 
NULL
;

42 
U64
 
ödex
 = 0;

45 
	`•ö_lock
(&
„c_a˘ive_lock
);

47 
tmp_cou¡
 = 
„c_a˘ive_cou¡
++;

49 
ödex
 = 
	`dz_„c_gë_‰ì_buf„r_ödex
(
„c_èbÀ_size
);

54 i‡((
ödex
 =
FAILURE
Ë|| (
„c_a˘ive_cou¡
 > 
„c_a˘ive_thªshﬁd
)) {

56 
	`GET_TIME_STAMP
(
time_„c_wrôe_swôch
);

57 
„c_èbÀs_Êush
->
Êush_ö_¥ogªss
 = 
TRUE
;

58 
„c_a˘ive_cou¡
 = 0;

59 
	`•ö_u∆ock
(&
„c_a˘ive_lock
);

60 
	`LOGFEC
("Time To start flushÅhread. Index = %lli, Active Count = %lli, Threshold = %lli\n",

61 
ödex
, 
„c_a˘ive_cou¡
, 
„c_a˘ive_thªshﬁd
);

63 
	`dz_„c_¸óã_Êush_i‹eque°
();

65 i‡(
ödex
 =
FAILURE
) {

66 
	`SLEEP_MILLI_SECONDS
(3000);

68 
	`SLEEP_MILLI_SECONDS
(1000);

70 
RETURNN
;

72 
wrôe_íåy
 = 
	`GET_FEC_ACTIVE_WRITE_ENTRY
(
ödex
);

73 i‡(!
wrôe_íåy
) {

74 
	`LOGFECE
("Write Entry NULL. Index = %lli, Active Count = %lli, Threshold = %lli\n",

75 
ödex
, 
„c_a˘ive_cou¡
, 
„c_a˘ive_thªshﬁd
);

76 
	`SLEEP_MILLI_SECONDS
(1000);

77 
RETURNN
;

79 
	`MEMSET
(
wrôe_íåy
);

80 
wrôe_íåy
->
°©e
 = 
FECBUF_STATE_ALLOCATED
;

81 
wrôe_íåy
->
ödex
 = index;

83 i‡(
„c_èbÀs_Êush
->
Êush_ö_¥ogªss
) {

84 
	`DELAY_MILLI_SECONDS
(2);

93 i‡(
„c_a˘ive_cou¡
 == 1) {

94 
	`GET_TIME_STAMP
(
time_„c_wrôe_°¨t
);

97 
	`•ö_u∆ock
(&
„c_a˘ive_lock
);

99  
wrôe_íåy
;

100 
	}
}

107 
ölöe
 
PFEC_WRITE
 
	$GET_FEC_MULTIPLE_FREE_BUFFERS
(
INT
 
num_bufs
)

110 
U64
 
föÆ_cou¡
 = 0;

111 
PFEC_WRITE
 
wrôe_íåy
 = 
NULL
;

113 
	`•ö_lock
(&
„c_a˘ive_lock
);

114 
föÆ_cou¡
 = 
„c_a˘ive_cou¡
 + 
num_bufs
;

117 i‡(
föÆ_cou¡
 > 
„c_èbÀ_size
) {

123 i‡(
„c_èbÀs_Êush
->
Êush_ö_¥ogªss
) {

126 
	`•ö_u∆ock
(&
„c_a˘ive_lock
);

128 
	`SLEEP_MILLI_SECONDS
(1);

129 
RETURNN
;

134 
	`dz_„c_Êush_swôchovî
();

135 
„c_a˘ive_cou¡
 +
num_bufs
;

136 
„c_èbÀs_Êush
->
Êush_ö_¥ogªss
 = 
TRUE
;

139 
wrôe_íåy
 = 
	`GET_FEC_ACTIVE_WRITE_ENTRY
(0);

140 
wrôe_íåy
->
°©e
 = 
FECBUF_STATE_ALLOCATED
;

141 
	`•ö_u∆ock
(&
„c_a˘ive_lock
);

143 
	`LOGD
("Time To start flushÅhread\n");

144 
	`dz_q_i‹eque°
(
„c_Êush_i‹eque°
->
i‹_thªad_poﬁ
, fec_flush_iorequest);

145  
wrôe_íåy
;

147 
wrôe_íåy
 = 
	`GET_FEC_ACTIVE_WRITE_ENTRY
(
„c_a˘ive_cou¡
);

148 
wrôe_íåy
->
°©e
 = 
FECBUF_STATE_ALLOCATED
;

149 
„c_a˘ive_cou¡
 = 
föÆ_cou¡
;

150 
	`•ö_u∆ock
(&
„c_a˘ive_lock
);

152  
wrôe_íåy
;

153 
	}
}

155 
RVOID
 
	$dz_„c_Æign_wrôe_io
(
PIOREQUEST
 
i‹eque°
)

157 
PBIO
 
bio
 = 
i‹eque°
->
i‹_bio
;

158 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

161 i‡(
io_size
 < 
LBA_BLOCK_SIZE
) {

162 
	`LOGFEC
("Case1: Write Processing io_size forÖartial blockátÜba %lli\n",

163 
	`dz_c⁄vît_£˘‹_to_lba
(
	`DZ_BIO_GET_SECTOR
(
bio
)));

165 
	`INC_COUNTER
(
„c_iocou¡_wrôes_∑πül_∑ge
);

166 
	`dz_„c_Æign_wrôe_f‹_∑πül_block
(
i‹eque°
);

169 } i‡(
io_size
 =
LBA_BLOCK_SIZE
) {

171 
	`LOGFEC
("Case2: Write Processing io_size for single blockátÜba %lli\n",

172 
	`dz_c⁄vît_£˘‹_to_lba
(
	`DZ_BIO_GET_SECTOR
(
bio
)));

174 
	`INC_COUNTER
(
„c_iocou¡_wrôes_sögÀ_∑ge
);

176 
	`dz_„c_Æign_wrôe_f‹_sögÀ_block
(
i‹eque°
);

179 } i‡(
io_size
 > 
LBA_BLOCK_SIZE
) {

180 
	`LOGFEC
("Case3: Write Processing io_size for multiple blocksátÜba %lli\n",

181 
	`dz_c⁄vît_£˘‹_to_lba
(
	`DZ_BIO_GET_SECTOR
(
bio
)));

183 
	`INC_COUNTER
(
„c_iocou¡_wrôes_mu…i_∑ge
);

184 
	`dz_„c_Æign_wrôe_f‹_mu…i_block
(
i‹eque°
);

189 
	`BUG_ON
(1);

192 
	}
}

194 
RVOID
 
	$dz_„c_wrôe_io
(
PIOREQUEST
 
i‹eque°
)

197 
	`dz_„c_Æign_wrôe_io
(
i‹eque°
);

199 
	}
}

	@fec_engine/fec_engine_align_write_multi.c

9 
	~"„c_ígöe.h
"

10 
U64
 
„c_èbÀ_size
;

11 
U64
 
„c_a˘ive_cou¡
;

13 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

15 
SPINLOCK
 
„c_a˘ive_lock
;

16 
SPINLOCK
 
„c_Êush_lock
;

19 
PFEC_TABLE
 
„c_èbÀs_a˘ive
;

20 
PFEC_TABLE
 
„c_èbÀs_Êush
;

21 
FEC_WRITE
 
„c_èbÀ_a˘ive
;

22 
PIOREQUEST
 
„c_Êush_i‹eque°
;

24 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

25 
PLBA_BLOCK
 
lba_èbÀ
;

26 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

27 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

28 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

29 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

30 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

32 
RVOID
 
	$dz_Áw_mu…i_block_ªad_∑ge_async_∑ª¡_biod⁄e
(
PBIO
 
bio
)

34 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

35 
PIOREQUEST
 
pi‹eque°
 = 
NULL
;

36 i‡(
ci‹eque°
->
i‹_∑ª¡
) {

37 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

38 
	`PRINT_ATOMIC
(
pi‹eque°
->
i‹_chûd_˙t
);

39 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

42 
	`LOGFEC
("Parent IO Done\n");

44 
	`IOREQUEST_DONE_STATUS
(
pi‹eque°
);

45 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

46 
	`i‹eque°_put
(
ci‹eque°
);

48 
	`bio_d©a_dú
(
pi‹eque°
->
i‹_bio
Ë=
WRITE
 ?

49 
	`i‹eque°_put
(
pi‹eque°
) :

50 
	`i‹eque°_put
(
pi‹eque°
);

54 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

55 
	`i‹eque°_put
(
ci‹eque°
);

58 
	}
}

60 
RVOID
 
	$dz_Áw_mu…i_∑ge_ªad_∑ge_async_biod⁄e_hód
(
PBIO
 
bio
)

62 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUEST)(
bio
->
bi_¥iv©e
);

63 
PFEC_WRITE
 
„cw
 = (PFEC_WRITE)(
ci‹eque°
->
i‹_¥iv©e
);

64 
PVOID
 
∑gebuf
 = 
NULL
;

65 
BIOVEC
 
pbvec
;

67 
INT
 
bv_off£t
 = 
ci‹eque°
->
i‹_bv_off£t
;

68 
bvec_ôî
 
ôî
;

69 
INT
 
îr‹
 = 0;

72 
	`IF_BIO_ERROR_SET_IO_ERROR
(
bio
, 
îr‹
);

75 
	`LOGFEC
("Inside biodone Head\n");

76 
	`PRINT_POINTER
(
„cw
);

80 
	`bio_f‹_óch_£gmít
(
pbvec
, 
bio
, 
ôî
) {

82 
∑gebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

89 
	`PMEMCPY
(
„cw
->
bv_∑ge
, 
∑gebuf
, 
bv_off£t
 );

90 
	`kunm≠
(
pbvec
.
bv_∑ge
);

93 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

96 
	`dz_Áw_mu…i_block_ªad_∑ge_async_∑ª¡_biod⁄e
(
bio
);

98 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
ci‹eque°
->
i‹_lba
);

100 
	`¥öt_„cws
(
„cw
, "Head Last");

101 
	}
}

103 
RVOID
 
	$dz_Áw_mu…i_∑ge_ªad_∑ge_async_biod⁄e_èû
(
PBIO
 
bio
)

105 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUEST)(
bio
->
bi_¥iv©e
);

106 
PFEC_WRITE
 
„cw
 = (PFEC_WRITE)(
ci‹eque°
->
i‹_¥iv©e
);

107 
PVOID
 
∑gebuf
 = 
NULL
;

108 
BIOVEC
 
pbvec
;

110 
INT
 
bv_Àn
 = 
ci‹eque°
->
i‹_bv_Àn
;

111 
ITERATOR
 
ôî
;

112 
INT
 
îr‹
 = 0;

114 
	`IF_BIO_ERROR_SET_IO_ERROR
(
bio
, 
îr‹
);

116 
	`LOGFEC
("Inside biodone Tail\n");

117 
	`PRINT_POINTER
(
„cw
);

121 
	`bio_f‹_óch_£gmít
(
pbvec
, 
bio
, 
ôî
) {

122 
∑gebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

123 
∑gebuf
 +
bv_Àn
;

124 
	`PMEMCPY
((
„cw
->
bv_∑ge
 + 
bv_Àn
), 
∑gebuf
, 
PAGE_SIZE
 - bv_len);

126 
	`kunm≠
(
pbvec
.
bv_∑ge
);

129 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

132 
	`dz_Áw_mu…i_block_ªad_∑ge_async_∑ª¡_biod⁄e
(
bio
);

134 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
ci‹eque°
->
i‹_lba
);

137 
	`¥öt_„cws
(
„cw
, "Tail Last");

138 
	}
}

140 
PIOREQUEST
 
	$dz_Áw_mu…i_block_ªad_∑ge_async
(
PIOREQUEST
 
pi‹eque°
, 
PBIO
 
∑ª¡_bio
,

141 
SECTOR
 
£˘‹
, 
PBIOVEC
 
biovec
, 
BIODONE
 
biod⁄e
)

143 
PPAGE
 
∑ge
 = 
NULL
;

144 
PBIO
 
bio
 = 
NULL
;

145 
PVOID
 
∑gebuf
 = 
NULL
;

146 
PIOREQUEST
 
i‹eque°
 = 
NULL
;

148 
i‹eque°
 = 
	`dz_io_Æloc
();

149 i‡(!
i‹eque°
) {

150 
	`LOGFECE
("UnableÅoállocate memory for iorequest\n");

151 
RETURNN
;

153 
	`mem£t
(
i‹eque°
, 0, (
IOREQUEST
));

155 
∑ge
 = 
	`dz_ªad_∑ge_Æloc
();

156 i‡(!
∑ge
) {

157 
	`LOGFECE
("UnableÅo get freeÑeadÖage\n");

158 
	`dz_io_‰ì
(
i‹eque°
);

159 
RETURNN
;

162 
bio
 = 
	`dz_bio_Æloc
(1);

163 i‡(!
bio
) {

164 
	`LOGFECE
("UnableÅo get free bio\n");

165 
	`dz_io_‰ì
(
i‹eque°
);

166 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

167 
RETURNN
;

170 
∑gebuf
 = 
	`km≠
(
∑ge
);

171 
	`mem£t
(
∑gebuf
, 0, 
PAGE_SIZE
);

172 
	`kunm≠
(
∑ge
);

174 
biovec
->
bv_∑ge
 = 
∑ge
;

175 
biovec
->
bv_off£t
 = 0;

176 
biovec
->
bv_Àn
 = 
PAGE_SIZE
;

179 
	`DZ_BIO_SET_BDEV
(
bio
, 
	`DZ_BIO_GET_BDEV
(
∑ª¡_bio
));

180 
	`DZ_BIO_SET_SECTOR
(
bio
, 
£˘‹
);

181 
	`DZ_BIO_SET_BIODONE
(
bio
,
biod⁄e
);

182 
	`DZ_BIO_SET_ZIDX
(
bio
);

184 
	`DZ_BIO_SET_READ
(
bio
);

185 
bio
->
bi_√xt
 = 
NULL
;

186 
bio
->
bi_¥iv©e
 = 
i‹eque°
;

190 i‡(!
	`bio_add_∑ge
(
bio
, 
∑ge
, 
biovec
->
bv_Àn
, biovec->
bv_off£t
)) {

191 
	`LOGFECE
("UnableÅoáddÖageÅo bio\n");

192 
	`dz_io_‰ì
(
i‹eque°
);

193 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

194 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

195 
RETURNN
;

197 
i‹eque°
->
i‹_bio
 = 
bio
;

198 
i‹eque°
->
i‹_thªad_poﬁ
 = 
ªad_thªad_poﬁ
;

199 
i‹eque°
->
i‹_∑ª¡
 = 
pi‹eque°
;

200 
	`©omic_öc
(&
pi‹eque°
->
i‹_chûd_˙t
);

202  
i‹eque°
;

203 
	}
}

208 
RVOID
 
	$dz_Áw_mu…i_block_Æl_Æig√d
(
PIOREQUEST
 
pi‹eque°
)

210 
PFEC_WRITE
 
„cw
 = 
NULL
;

211 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

213 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

214 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

215 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

216 
PVOID
 
p„cw∑ge
 = 
NULL
;

217 
PBIOVEC
 
cur_bvec
 = 
NULL
;

218 
INT
 
bi_v˙t
 = 0;

219 
INT
 
bi_v˙t_max
 = 0;

220 
INT
 
bv_Àn
 = 0;

221 
INT
 
ªmaöög_bv_Àn
 = 0;

222 
UINT
 
£˘‹_pos_ö_lba
 = 0;

223 
PVOID
 
∑gebuf
 = 
NULL
;

224 
SIZE
 
£˘‹_byãs
 = 0;

225 
U64
 
tŸ_byãs
 = 0;

226 
INT
 
d©a_byãs
 = 0;

227 
INT
 
Æig√d_byãs
 = 0;

228 
INT
 
tŸÆ_blocks_√eded
 = 0;

229 
INT
 
cou¡
 = 0;

230 
LIST_HEAD
 
‰ì_li°_hód
;

231 
UINT
 
ªåy_˙t
 = 0;

235 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

236 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

237 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

238 
Æig√d_byãs
 = 
io_size
 ;

241 
tŸÆ_blocks_√eded
 = (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

242 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

243 
°¨t_¥o˚ssög
:

245 i‡(!(
„cw
 = 
	`GET_FEC_MULTIPLE_FREE_BUFFERS
(
tŸÆ_blocks_√eded
))) {

246 i‡(
ªåy_˙t
++ >= 1048576) {

247 
	`IO_DONE_BUSY
(
pi‹eque°
);

250 
	`DELAY_MICRO_SECONDS
(2);

251 
°¨t_¥o˚ssög
;

255 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

257 
	`li°_add_èû
(&(
„cw
->
ioq
), &
‰ì_li°_hód
);

258 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_IN_PROGRESS
);

259 
„cw
++;

269 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

271 
Æig√d_byãs
) {

273 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

274 
	`li°_dñ
(&
„cw
->
ioq
);

277 
„cw
->
lba
 =Üba;

278 
d©a_byãs
 = 
PAGE_SIZE
;

279 
p„cw∑ge
 = 
„cw
->
bv_∑ge
;

281 i‡(
ªmaöög_bv_Àn
) {

282 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

283 
∑gebuf
 +
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
);

284 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
ªmaöög_bv_Àn
);

285 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

286 
p„cw∑ge
 +
ªmaöög_bv_Àn
;

287 
d©a_byãs
 -
ªmaöög_bv_Àn
;

288 
bi_v˙t
++;

289 
ªmaöög_bv_Àn
 = 0;

292 
bi_v˙t
 < 
bi_v˙t_max
) {

293 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

294 
bv_Àn
 = 
cur_bvec
->bv_len;

296 i‡(
bv_Àn
 >
d©a_byãs
) {

297 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

298 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

300 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

301 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

303 i‡(
bv_Àn
 =
d©a_byãs
) {

304 
bi_v˙t
++;

306 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

308 
Æig√d_byãs
 -
PAGE_SIZE
;

310 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

311 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
lba
);

315 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

316 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

318 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

319 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

321 
d©a_byãs
 -
bv_Àn
;

322 
bi_v˙t
++;

323 
p„cw∑ge
 +
bv_Àn
;

327 
lba
++;

330 
	`WRITE_IO_DONE
(
pi‹eque°
);

331 
	`i‹eque°_put
(
pi‹eque°
);

333 i‡(
pi‹eque°
->
i‹_∑ª¡
) {

334 
	`BUG_ON
(1);

338 
	}
}

345 
RVOID
 
	$dz_Áw_mu…i_block_èû_u«lig√d
(
PIOREQUEST
 
pi‹eque°
)

347 
PFEC_WRITE
 
„cw
 = 
NULL
;

348 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

350 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

351 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

352 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

353 
PVOID
 
p„cw∑ge
 = 
NULL
;

354 
PBIOVEC
 
cur_bvec
 = 
NULL
;

355 
INT
 
bi_v˙t
 = 0;

356 
INT
 
bi_v˙t_max
 = 0;

357 
INT
 
bv_Àn
 = 0;

358 
INT
 
ªmaöög_bv_Àn
 = 0;

359 
UINT
 
£˘‹_pos_ö_lba
 = 0;

360 
PVOID
 
∑gebuf
 = 
NULL
;

361 
SIZE
 
£˘‹_byãs
 = 0;

362 
U64
 
tŸ_byãs
 = 0;

363 
INT
 
d©a_byãs
 = 0;

364 
INT
 
Æig√d_byãs
 = 0;

365 
INT
 
∑πül_byãs_èû
 = 0;

366 
PIOREQUEST
 
i‹eque°_èû
 = 
NULL
;

367 
BIOVEC
 
biovec2
;

368 
INT
 
tŸÆ_blocks_√eded
 = 0;

369 
INT
 
cou¡
 = 0;

370 
LIST_HEAD
 
‰ì_li°_hód
 ;

374 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

375 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

376 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

377 
∑πül_byãs_èû
 = 
tŸ_byãs
 % 
LBA_BLOCK_SIZE
;

378 
Æig√d_byãs
 = 
io_size
 - 
∑πül_byãs_èû
 ;

381 
tŸÆ_blocks_√eded
 = 1 + (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

383 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

385 i‡(!(
„cw
 = 
	`GET_FEC_MULTIPLE_FREE_BUFFERS
(
tŸÆ_blocks_√eded
))) {

386 
exô_Áûuª
;

388 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

389 
	`PRINT_POINTER
(
„cw
);

390 
	`li°_add_èû
(&(
„cw
->
ioq
), &
‰ì_li°_hód
);

391 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_IN_PROGRESS
);

392 
„cw
++;

395 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

401 
i‹eque°_èû
 = 
	`dz_Áw_mu…i_block_ªad_∑ge_async
(
pi‹eque°
, 
bio
, 
£˘‹
, &
biovec2
,

402 
dz_Áw_mu…i_∑ge_ªad_∑ge_async_biod⁄e_èû
);

403 i‡(!
i‹eque°_èû
) {

404 
exô_Áûuª
;

411 
	`¥öt_bio
(
bio
);

413 
	`LOGFEC
("Printing Head AlignedÖart\n");

420 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

421 
Æig√d_byãs
) {

423 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

424 
	`li°_dñ
(&
„cw
->
ioq
);

425 
	`PRINT_POINTER
(
„cw
);

427 
„cw
->
lba
 =Üba;

430 
d©a_byãs
 = 
PAGE_SIZE
;

431 
p„cw∑ge
 = 
„cw
->
bv_∑ge
;

433 i‡(
ªmaöög_bv_Àn
) {

434 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

435 
∑gebuf
 +
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
);

436 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
ªmaöög_bv_Àn
);

437 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

438 
p„cw∑ge
 +
ªmaöög_bv_Àn
;

439 
d©a_byãs
 -
ªmaöög_bv_Àn
;

440 
bi_v˙t
++;

441 
ªmaöög_bv_Àn
 = 0;

445 
bi_v˙t
 < 
bi_v˙t_max
) {

446 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

447 
bv_Àn
 = 
cur_bvec
->bv_len;

449 i‡(
bv_Àn
 >
d©a_byãs
) {

450 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

451 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

453 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

454 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

456 i‡(
bv_Àn
 =
d©a_byãs
) {

457 
bi_v˙t
++;

459 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

461 
Æig√d_byãs
 -
PAGE_SIZE
;

462 
	`¥öt_„cws
(
„cw
, "Aligned Part");

463 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

464 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
lba
);

467 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

468 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

470 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

471 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

473 
d©a_byãs
 -
bv_Àn
;

474 
bi_v˙t
++;

475 
p„cw∑ge
 +
bv_Àn
;

479 
£˘‹
 +
SECTORS_PER_PAGE
;

480 
lba
++;

486 
	`LOGFEC
("Printing TailÖart\n");

489 i‡(!(
	`li°_em±y
(&
‰ì_li°_hód
))) {

490 
	`BUG_ON
(1);

492 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

493 
	`li°_dñ
(&
„cw
->
ioq
);

494 
	`PRINT_POINTER
(
„cw
);

496 
i‹eque°_èû
->
i‹_lba
 = 
lba
;

497 
i‹eque°_èû
->
i‹_¥iv©e
 = 
„cw
;

498 
i‹eque°_èû
->
i‹_bv_off£t
 = 0;

499 
i‹eque°_èû
->
i‹_bv_Àn
 = 
∑πül_byãs_èû
;

500 
„cw
->
lba
 =Üba;

503 
d©a_byãs
 = 
∑πül_byãs_èû
;

504 
p„cw∑ge
 = 
„cw
->
bv_∑ge
;

507 i‡(
ªmaöög_bv_Àn
) {

508 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

509 
∑gebuf
 +
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
);

510 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
ªmaöög_bv_Àn
);

511 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

512 
p„cw∑ge
 +
ªmaöög_bv_Àn
;

513 
d©a_byãs
 -
ªmaöög_bv_Àn
;

514 
bi_v˙t
++;

515 
ªmaöög_bv_Àn
 = 0;

519 
bi_v˙t
 < 
bi_v˙t_max
) {

520 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

521 
bv_Àn
 = 
cur_bvec
->bv_len;

523 i‡(
bv_Àn
 >
d©a_byãs
) {

524 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

525 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

527 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

528 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

530 i‡(
bv_Àn
 =
d©a_byãs
) {

531 
bi_v˙t
++;

533 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

538 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

539 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

541 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

542 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

544 
d©a_byãs
 -
bv_Àn
;

545 
bi_v˙t
++;

546 
p„cw∑ge
 +
bv_Àn
;

552 
	`dz_q_i‹eque°_thªad_poﬁ
(
i‹eque°_èû
);

555 
exô_Áûuª
:

556 
	`DELAY_MICRO_SECONDS
(1);

557 
	`IO_DONE_BUSY
(
pi‹eque°
);

558 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

560 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

561 i‡(!
„cw
) ;

562 
	`li°_dñ
(&
„cw
->
ioq
);

563 
	`FEC_ENTRY_WRITE_LOCK
(
„cw
);

564 
„cw
->
°©e
 = 
FECBUF_STATE_IDLE
;

565 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

567 
	}
}

574 
RVOID
 
	$dz_Áw_mu…i_block_hód_u«lig√d
(
PIOREQUEST
 
pi‹eque°
)

576 
PFEC_WRITE
 
„cw
 = 
NULL
;

577 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

579 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

580 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

581 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

582 
PVOID
 
p„cw∑ge
 = 
NULL
;

583 
PBIOVEC
 
cur_bvec
 = 
NULL
;

584 
INT
 
bi_v˙t
 = 0;

585 
INT
 
bi_v˙t_max
 = 0;

586 
INT
 
bv_Àn
 = 0;

587 
INT
 
ªmaöög_bv_Àn
 = 0;

588 
UINT
 
£˘‹_pos_ö_lba
 = 0;

589 
PVOID
 
∑gebuf
 = 
NULL
;

590 
SIZE
 
£˘‹_byãs
 = 0;

591 
U64
 
tŸ_byãs
 = 0;

592 
INT
 
d©a_byãs
 = 0;

593 
INT
 
Æig√d_byãs
 = 0;

594 
INT
 
∑πül_byãs_hód
 = 0;

595 
PIOREQUEST
 
i‹eque°_hód
 = 
NULL
;

596 
BIOVEC
 
biovec
;

597 
INT
 
tŸÆ_blocks_√eded
 = 0;

598 
INT
 
cou¡
 = 0;

599 
LIST_HEAD
 
‰ì_li°_hód
 ;

603 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

604 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

605 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

606 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

607 
Æig√d_byãs
 = 
io_size
 - 
∑πül_byãs_hód
 ;

610 
tŸÆ_blocks_√eded
 = 1 + (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

612 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

614 i‡(!(
„cw
 = 
	`GET_FEC_MULTIPLE_FREE_BUFFERS
(
tŸÆ_blocks_√eded
))) {

615 
exô_Áûuª
;

617 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

618 
	`PRINT_POINTER
(
„cw
);

619 
	`li°_add_èû
(&(
„cw
->
ioq
), &
‰ì_li°_hód
);

620 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_IN_PROGRESS
);

621 
„cw
++;

624 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

628 
i‹eque°_hód
 = 
	`dz_Áw_mu…i_block_ªad_∑ge_async
(
pi‹eque°
, 
bio
, 
£˘‹
, &
biovec
,

629 
dz_Áw_mu…i_∑ge_ªad_∑ge_async_biod⁄e_hód
);

630 i‡(!
i‹eque°_hód
) {

631 
exô_Áûuª
;

638 
	`¥öt_bio
(
bio
);

641 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

642 
	`li°_dñ
(&
„cw
->
ioq
);

643 
	`PRINT_POINTER
(
„cw
);

645 
„cw
->
lba
 =Üba;

646 
i‹eque°_hód
->
i‹_¥iv©e
 = 
„cw
;

647 
i‹eque°_hód
->
i‹_lba
 = 
lba
;

648 
i‹eque°_hód
->
i‹_bv_off£t
 = 
£˘‹_pos_ö_lba
;

653 
p„cw∑ge
 = 
„cw
->
bv_∑ge
 + 
£˘‹_pos_ö_lba
;

654 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

655 
d©a_byãs
 = 
∑πül_byãs_hód
;

656 
	`LOGFEC
("Printing HeadÖart\n");

661 
bi_v˙t
 < 
bi_v˙t_max
) {

662 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

663 
bv_Àn
 = 
cur_bvec
->bv_len;

665 i‡(
bv_Àn
 >
d©a_byãs
) {

666 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

667 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

669 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

670 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

672 i‡(
bv_Àn
 =
d©a_byãs
) {

673 
bi_v˙t
++;

675 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

680 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

681 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

683 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

684 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

686 
d©a_byãs
 -
bv_Àn
;

687 
bi_v˙t
++;

688 
p„cw∑ge
 +
bv_Àn
;

693 
£˘‹
 +(
∑πül_byãs_hód
 / 
SECTOR_SIZE
);

694 
lba
++;

697 
	`LOGFEC
("Printing Tail AlignedÖart\n");

705 
Æig√d_byãs
) {

707 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

708 
	`li°_dñ
(&
„cw
->
ioq
);

709 
	`PRINT_POINTER
(
„cw
);

711 
„cw
->
lba
 =Üba;

714 
d©a_byãs
 = 
PAGE_SIZE
;

715 
p„cw∑ge
 = 
„cw
->
bv_∑ge
;

717 i‡(
ªmaöög_bv_Àn
) {

718 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

719 
∑gebuf
 +
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
);

720 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
ªmaöög_bv_Àn
);

721 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

722 
p„cw∑ge
 +
ªmaöög_bv_Àn
;

723 
d©a_byãs
 -
ªmaöög_bv_Àn
;

724 
bi_v˙t
++;

725 
ªmaöög_bv_Àn
 = 0;

729 
bi_v˙t
 < 
bi_v˙t_max
) {

730 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

731 
bv_Àn
 = 
cur_bvec
->bv_len;

733 i‡(
bv_Àn
 >
d©a_byãs
) {

734 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

735 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

737 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

738 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

740 i‡(
bv_Àn
 =
d©a_byãs
) {

741 
bi_v˙t
++;

743 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

745 
Æig√d_byãs
 -
PAGE_SIZE
;

746 
	`¥öt_„cws
(
„cw
, "Aligned Part");

747 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

748 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
lba
);

751 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

752 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

754 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

755 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

757 
d©a_byãs
 -
bv_Àn
;

758 
bi_v˙t
++;

759 
p„cw∑ge
 +
bv_Àn
;

763 
£˘‹
 +
SECTORS_PER_PAGE
;

764 
lba
++;

768 
	`dz_q_i‹eque°_thªad_poﬁ
(
i‹eque°_hód
);

771 
exô_Áûuª
:

772 
	`DELAY_MICRO_SECONDS
(1);

773 
	`IO_DONE_BUSY
(
pi‹eque°
);

774 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

776 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

777 i‡(!
„cw
) ;

778 
	`li°_dñ
(&
„cw
->
ioq
);

779 
	`FEC_ENTRY_WRITE_LOCK
(
„cw
);

780 
„cw
->
°©e
 = 
FECBUF_STATE_IDLE
;

781 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

783 
	}
}

792 
RVOID
 
	$dz_Áw_mu…i_block_bŸh_u«lig√d
(
PIOREQUEST
 
pi‹eque°
)

794 
PFEC_WRITE
 
„cw
 = 
NULL
;

795 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

797 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

798 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

799 
LBA
 
lba
 = 
pi‹eque°
->
i‹_lba
;

800 
PVOID
 
p„cw∑ge
 = 
NULL
;

801 
PBIOVEC
 
cur_bvec
 = 
NULL
;

802 
INT
 
bi_v˙t
 = 0;

803 
INT
 
bi_v˙t_max
 = 0;

804 
INT
 
bv_Àn
 = 0;

805 
INT
 
ªmaöög_bv_Àn
 = 0;

806 
UINT
 
£˘‹_pos_ö_lba
 = 0;

807 
PVOID
 
∑gebuf
 = 
NULL
;

808 
SIZE
 
£˘‹_byãs
 = 0;

809 
U64
 
tŸ_byãs
 = 0;

810 
INT
 
d©a_byãs
 = 0;

811 
INT
 
Æig√d_byãs
 = 0;

812 
INT
 
∑πül_byãs_hód
 = 0;

813 
INT
 
∑πül_byãs_èû
 = 0;

814 
PIOREQUEST
 
i‹eque°_hód
 = 
NULL
;

815 
PIOREQUEST
 
i‹eque°_èû
 = 
NULL
;

816 
BIOVEC
 
biovec
;

817 
BIOVEC
 
biovec2
;

818 
INT
 
tŸÆ_blocks_√eded
 = 0;

819 
INT
 
cou¡
 = 0;

820 
LIST_HEAD
 
‰ì_li°_hód
 ;

824 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

825 
£˘‹_pos_ö_lba
 = 
£˘‹_byãs
 - (
lba
 * 
LBA_BLOCK_SIZE
);

826 
tŸ_byãs
 = 
£˘‹_byãs
 + 
io_size
;

827 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

828 
∑πül_byãs_èû
 = 
tŸ_byãs
 % 
LBA_BLOCK_SIZE
;

829 
Æig√d_byãs
 = 
io_size
 - 
∑πül_byãs_hód
 - 
∑πül_byãs_èû
 ;

832 
tŸÆ_blocks_√eded
 = 1 + 1 + (
Æig√d_byãs
 / 
LBA_BLOCK_SIZE
);

834 
	`INIT_LIST_HEAD
(&
‰ì_li°_hód
);

836 i‡(!(
„cw
 = 
	`GET_FEC_MULTIPLE_FREE_BUFFERS
(
tŸÆ_blocks_√eded
))) {

837 
exô_Áûuª
;

839 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

840 
	`PRINT_POINTER
(
„cw
);

841 
	`li°_add_èû
(&(
„cw
->
ioq
), &
‰ì_li°_hód
);

842 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_IN_PROGRESS
);

843 
„cw
++;

847 
	`©omic_£t
(&
pi‹eque°
->
i‹_chûd_˙t
, 0);

851 
i‹eque°_hód
 = 
	`dz_Áw_mu…i_block_ªad_∑ge_async
(
pi‹eque°
, 
bio
, 
£˘‹
, &
biovec
,

852 
dz_Áw_mu…i_∑ge_ªad_∑ge_async_biod⁄e_hód
);

853 i‡(!
i‹eque°_hód
) {

854 
exô_Áûuª
;

859 
i‹eque°_èû
 = 
	`dz_Áw_mu…i_block_ªad_∑ge_async
(
pi‹eque°
, 
bio
, 
£˘‹
, &
biovec2
,

860 
dz_Áw_mu…i_∑ge_ªad_∑ge_async_biod⁄e_èû
);

861 i‡(!
i‹eque°_èû
) {

862 
exô_Áûuª
;

869 
	`¥öt_bio
(
bio
);

872 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

873 
	`li°_dñ
(&
„cw
->
ioq
);

874 
	`PRINT_POINTER
(
„cw
);

876 
„cw
->
lba
 =Üba;

877 
i‹eque°_hód
->
i‹_¥iv©e
 = 
„cw
;

878 
i‹eque°_hód
->
i‹_lba
 = 
lba
;

879 
i‹eque°_hód
->
i‹_bv_off£t
 = 
£˘‹_pos_ö_lba
;

880 
i‹eque°_hód
->
i‹_bv_Àn
 = 
∑πül_byãs_hód
;

885 
p„cw∑ge
 = 
„cw
->
bv_∑ge
 + 
£˘‹_pos_ö_lba
;

886 
bi_v˙t_max
 = 
bio
->
bi_v˙t
;

887 
d©a_byãs
 = 
∑πül_byãs_hód
;

888 
	`LOGFEC
("Printing HeadÖart\n");

893 
bi_v˙t
 < 
bi_v˙t_max
) {

894 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

895 
bv_Àn
 = 
cur_bvec
->bv_len;

897 i‡(
bv_Àn
 >
d©a_byãs
) {

898 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

899 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

901 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

902 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

904 i‡(
bv_Àn
 =
d©a_byãs
) {

905 
bi_v˙t
++;

907 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

912 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

913 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

915 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

916 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

918 
d©a_byãs
 -
bv_Àn
;

919 
bi_v˙t
++;

920 
p„cw∑ge
 +
bv_Àn
;

925 
£˘‹
 +(
∑πül_byãs_hód
 / 
SECTOR_SIZE
);

926 
lba
++;

929 
	`dz_q_i‹eque°_thªad_poﬁ
(
i‹eque°_hód
);

931 
	`LOGFEC
("Printing Intermediate AlignedÖart\n");

939 
Æig√d_byãs
) {

941 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

942 
	`li°_dñ
(&
„cw
->
ioq
);

943 
	`PRINT_POINTER
(
„cw
);

945 
„cw
->
lba
 =Üba;

948 
d©a_byãs
 = 
PAGE_SIZE
;

949 
p„cw∑ge
 = 
„cw
->
bv_∑ge
;

951 i‡(
ªmaöög_bv_Àn
) {

952 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

953 
∑gebuf
 +
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
);

954 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
ªmaöög_bv_Àn
);

955 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

956 
p„cw∑ge
 +
ªmaöög_bv_Àn
;

957 
d©a_byãs
 -
ªmaöög_bv_Àn
;

958 
bi_v˙t
++;

959 
ªmaöög_bv_Àn
 = 0;

963 
bi_v˙t
 < 
bi_v˙t_max
) {

964 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

965 
bv_Àn
 = 
cur_bvec
->bv_len;

967 i‡(
bv_Àn
 >
d©a_byãs
) {

968 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

969 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

971 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

972 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

974 i‡(
bv_Àn
 =
d©a_byãs
) {

975 
bi_v˙t
++;

977 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

979 
Æig√d_byãs
 -
PAGE_SIZE
;

980 
	`¥öt_„cws
(
„cw
, "Aligned Part");

982 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

983 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
lba
);

986 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

987 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

989 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

990 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

992 
d©a_byãs
 -
bv_Àn
;

993 
bi_v˙t
++;

994 
p„cw∑ge
 +
bv_Àn
;

998 
£˘‹
 +
SECTORS_PER_PAGE
;

999 
lba
++;

1005 
	`LOGFEC
("Printing TailÖart\n");

1008 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

1009 
	`li°_dñ
(&
„cw
->
ioq
);

1010 i‡(!(
	`li°_em±y
(&
‰ì_li°_hód
))) {

1011 
	`BUG_ON
(1);

1013 
	`PRINT_POINTER
(
„cw
);

1015 
i‹eque°_èû
->
i‹_lba
 = 
lba
;

1016 
i‹eque°_èû
->
i‹_¥iv©e
 = 
„cw
;

1017 
i‹eque°_èû
->
i‹_bv_off£t
 = 0;

1018 
i‹eque°_èû
->
i‹_bv_Àn
 = 
∑πül_byãs_èû
;

1019 
„cw
->
lba
 =Üba;

1022 
d©a_byãs
 = 
∑πül_byãs_èû
;

1023 
p„cw∑ge
 = 
„cw
->
bv_∑ge
;

1026 i‡(
ªmaöög_bv_Àn
) {

1027 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

1028 
∑gebuf
 +
cur_bvec
->
bv_off£t
 + (cur_bvec->
bv_Àn
 - 
ªmaöög_bv_Àn
);

1029 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
ªmaöög_bv_Àn
);

1030 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

1031 
p„cw∑ge
 +
ªmaöög_bv_Àn
;

1032 
d©a_byãs
 -
ªmaöög_bv_Àn
;

1033 
bi_v˙t
++;

1034 
ªmaöög_bv_Àn
 = 0;

1038 
bi_v˙t
 < 
bi_v˙t_max
) {

1039 
cur_bvec
 = &
bio
->
bi_io_vec
[
bi_v˙t
];

1040 
bv_Àn
 = 
cur_bvec
->bv_len;

1042 i‡(
bv_Àn
 >
d©a_byãs
) {

1043 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

1044 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

1046 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
d©a_byãs
);

1047 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

1049 i‡(
bv_Àn
 =
d©a_byãs
) {

1050 
bi_v˙t
++;

1052 
ªmaöög_bv_Àn
 = 
bv_Àn
 - 
d©a_byãs
;

1057 
∑gebuf
 = 
	`km≠
(
cur_bvec
->
bv_∑ge
);

1058 
∑gebuf
 +
cur_bvec
->
bv_off£t
;

1060 
	`PMEMCPY
(
p„cw∑ge
, 
∑gebuf
, 
bv_Àn
);

1061 
	`kunm≠
(
cur_bvec
->
bv_∑ge
);

1063 
d©a_byãs
 -
bv_Àn
;

1064 
bi_v˙t
++;

1065 
p„cw∑ge
 +
bv_Àn
;

1071 
	`dz_q_i‹eque°_thªad_poﬁ
(
i‹eque°_èû
);

1072 
	`LOGFEC
("ReturningáfterÉnqueuingÅail\n");

1075 
exô_Áûuª
:

1076 
	`DELAY_MICRO_SECONDS
(1);

1077 
	`IO_DONE_BUSY
(
pi‹eque°
);

1078 
cou¡
 = 0; cou¡ < 
tŸÆ_blocks_√eded
; count++) {

1080 
„cw
 = 
	`li°_fú°_íåy
(&
‰ì_li°_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

1081 i‡(!
„cw
) ;

1082 
	`li°_dñ
(&
„cw
->
ioq
);

1083 
	`FEC_ENTRY_WRITE_LOCK
(
„cw
);

1084 
„cw
->
°©e
 = 
FECBUF_STATE_IDLE
;

1085 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

1088 i‡(
i‹eque°_hód
) {

1089 
	`dz_ªad_∑ge_‰ì
(
	`bio_∑ge
(
i‹eque°_hód
->
i‹_bio
));

1090 
	`DZ_OS_KERNEL_BIO_PUT
(
i‹eque°_hód
->
i‹_bio
);

1091 
	`dz_io_‰ì
(
i‹eque°_hód
);

1094 
	}
}

1096 
RVOID
 
	$dz_„c_Æign_wrôe_f‹_mu…i_block
(
PIOREQUEST
 
pi‹eque°
)

1098 
PBIO
 
bio
 = 
pi‹eque°
->
i‹_bio
;

1100 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

1102 
SIZE
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

1103 
SIZE
 
£˘‹_byãs
 = 0;

1104 
U64
 
tŸ_byãs
 = 0;

1106 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

1116 i‡((
£˘‹_byãs
 % 
LBA_BLOCK_SIZE
) == 0 ) {

1119 i‡(((
£˘‹_byãs
 + 
io_size
Ë% 
LBA_BLOCK_SIZE
) == 0 ) {

1125 
	`dz_Áw_mu…i_block_Æl_Æig√d
(
pi‹eque°
);

1132 
	`LOGFEC
("Case2:BIO is Head Alignedánd Tail UnAligned\n");

1133 
	`dz_Áw_mu…i_block_èû_u«lig√d
(
pi‹eque°
);

1135 } i‡(((
tŸ_byãs
 = (
£˘‹_byãs
 + 
io_size
)Ë% 
LBA_BLOCK_SIZE
) == 0 ) {

1144 
	`LOGFEC
("Case3:BIO is Head UnAlignedánd Tail Aligned\n");

1145 
	`dz_Áw_mu…i_block_hód_u«lig√d
(
pi‹eque°
);

1155 
	`LOGFEC
("Case4:BIO is Neither Head Aligned Nor Tail Aligned\n");

1156 
	`dz_Áw_mu…i_block_bŸh_u«lig√d
(
pi‹eque°
);

1158 
	}
}

	@fec_engine/fec_engine_align_write_partial.c

9 
	~"„c_ígöe.h
"

10 
U64
 
„c_èbÀ_size
;

11 
U64
 
„c_a˘ive_cou¡
;

13 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

15 
SPINLOCK
 
„c_a˘ive_lock
;

16 
SPINLOCK
 
„c_Êush_lock
;

19 
PFEC_TABLE
 
„c_èbÀs_a˘ive
;

20 
PFEC_TABLE
 
„c_èbÀs_Êush
;

21 
FEC_WRITE
 
„c_èbÀ_a˘ive
;

22 
PIOREQUEST
 
„c_Êush_i‹eque°
;

24 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

25 
PLBA_BLOCK
 
lba_èbÀ
;

26 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

27 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

28 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

29 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

30 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

32 
RVOID
 
	$dz_Áw_∑πül_block_∑ª¡_biod⁄e
(
PBIO
 
bio
)

34 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

35 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

36 
BIOVEC
 
pbvec
;

37 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

38 
	`PRINT_ATOMIC
(
pi‹eque°
->
i‹_chûd_˙t
);

39 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

42 
	`LOGFEC
("Parent IO Done\n");

44 
	`IOREQUEST_DONE_STATUS
(
pi‹eque°
);

45 
pbvec
 = 
	`bio_iovec
(
bio
);

46 
	`dz_ªad_∑ge_‰ì
(
pbvec
.
bv_∑ge
);

47 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

48 
	`i‹eque°_put
(
ci‹eque°
);

50 
	`bio_d©a_dú
(
pi‹eque°
->
i‹_bio
Ë=
WRITE
 ?

51 
	`i‹eque°_put
(
pi‹eque°
) :

52 
	`i‹eque°_put
(
pi‹eque°
);

55 
pbvec
 = 
	`bio_iovec
(
bio
);

56 
	`dz_ªad_∑ge_‰ì
(
pbvec
.
bv_∑ge
);

57 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

58 
	`i‹eque°_put
(
ci‹eque°
);

61 
	}
}

64 
RVOID
 
	$dz_Áw_∑πül_block_ªad_∑ge_sync_biod⁄e
(
PBIO
 
bio
)

66 
PDZ_COMPLETION
 
i‹
 = (PDZ_COMPLETION)
bio
->
bi_¥iv©e
;

77 
	`IF_BIO_ERROR_SET_IO_ERROR
(
bio
, 
i‹
->
îr‹
);

80 
	`com∂ëe
(&
i‹
->
io_com∂ëi⁄
);

81 
	}
}

84 
RVOID
 
	$dz_Áw_∑πül_block_doubÀ_∑ge_async_biod⁄e_hód
(
PBIO
 
bio
)

86 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUEST)(
bio
->
bi_¥iv©e
);

87 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

88 
PBIO
 
∑ª¡_bio
 = 
pi‹eque°
->
i‹_bio
;

89 
PFEC_WRITE
 
„cw
 = (PFEC_WRITE)(
ci‹eque°
->
i‹_¥iv©e
);

90 
PVOID
 
∑gebuf
 = 
NULL
;

91 
BIOVEC
 
pbvec
;

93 
INT
 
bv_off£t
 = 
ci‹eque°
->
i‹_bv_off£t
;

94 
INT
 
îr‹
 = 0;

101 i‡(
bio
->
bi_°©us
 !
BLK_STS_OK
) {

102 
îr‹
 = 
BLK_STS_IOERR
;

106 
	`LOGFEC
("Inside biodone Head\n");

107 
	`PRINT_POINTER
(
„cw
);

112 
pbvec
 = 
	`bio_iovec
(
bio
);

113 
∑gebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

114 
∑gebuf
 +
pbvec
.
bv_off£t
;

115 
	`PMEMCPY
(
„cw
->
bv_∑ge
, 
∑gebuf
, 
bv_off£t
);

116 
	`kunm≠
(
pbvec
.
bv_∑ge
);

119 
pbvec
 = 
	`bio_iovec
(
∑ª¡_bio
);

120 
∑gebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

121 
∑gebuf
 +
bv_off£t
;

122 
	`PMEMCPY
(
„cw
->
bv_∑ge
 + 
bv_off£t
, 
∑gebuf
, 
PAGE_SIZE
 - bv_offset );

123 
	`kunm≠
(
pbvec
.
bv_∑ge
);

125 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

128 
	`dz_Áw_∑πül_block_∑ª¡_biod⁄e
(
bio
);

130 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
ci‹eque°
->
i‹_lba
);

133 
	}
}

136 
RVOID
 
	$dz_Áw_∑πül_block_doubÀ_∑ge_async_biod⁄e_èû
(
PBIO
 
bio
)

138 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUEST)(
bio
->
bi_¥iv©e
);

139 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

140 
PBIO
 
∑ª¡_bio
 = 
pi‹eque°
->
i‹_bio
;

141 
PFEC_WRITE
 
„cw
 = (PFEC_WRITE)(
ci‹eque°
->
i‹_¥iv©e
);

142 
PVOID
 
∑gebuf
 = 
NULL
;

143 
BIOVEC
 
pbvec
;

145 
INT
 
bv_Àn
 = 
ci‹eque°
->
i‹_bv_Àn
;

146 
INT
 
îr‹
 = 0;

153 i‡(
bio
->
bi_°©us
 !
BLK_STS_OK
) {

154 
îr‹
 = 
BLK_STS_IOERR
;

157 
	`LOGFEC
("Inside biodone Tail\n");

158 
	`PRINT_POINTER
(
„cw
);

162 
pbvec
 = 
	`bio_iovec
(
∑ª¡_bio
);

167 
∑gebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

168 
∑gebuf
 +
pbvec
.
bv_off£t
;

169 
∑gebuf
 +
pbvec
.
bv_Àn
 - bv_len;

170 
	`PMEMCPY
(
„cw
->
bv_∑ge
, 
∑gebuf
, 
bv_Àn
);

171 
	`kunm≠
(
pbvec
.
bv_∑ge
);

175 
pbvec
 = 
	`bio_iovec
(
bio
);

176 
∑gebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

177 
∑gebuf
 +
bv_Àn
;

178 
	`PMEMCPY
((
„cw
->
bv_∑ge
 + 
bv_Àn
), 
∑gebuf
, 
PAGE_SIZE
 - bv_len);

179 
	`kunm≠
(
pbvec
.
bv_∑ge
);

181 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

184 
	`dz_Áw_∑πül_block_∑ª¡_biod⁄e
(
bio
);

186 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
ci‹eque°
->
i‹_lba
);

188 
	`¥öt_„cws
(
„cw
, "Tail Last");

189 
	}
}

196 
PPAGE
 
	$dz_Áw_∑πül_block_ªad_∑ge_sync
(
PIOREQUEST
 
i‹eque°
, 
PBIO
 
∑ª¡_bio
, 
SECTOR
 
£˘‹
)

198 
PPAGE
 
∑ge
 = 
NULL
;

199 
PBIO
 
bio
 = 
NULL
;

200 
INT
 
îr‹
 = 0;

201 
PVOID
 
∑gebuf
 = 
NULL
;

202 
DZ_COMPLETION
 
io_com∂ëi⁄
;

204 
∑ge
 = 
	`dz_ªad_∑ge_Æloc
();

205 i‡(!
∑ge
) {

206 
	`LOGFECE
("UnableÅo get freeÑeadÖage\n");

207 
RETURNN
;

210 
bio
 = 
	`dz_bio_Æloc
(1);

211 i‡(!
bio
) {

212 
	`LOGFECE
("UnableÅo get free bio\n");

213 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

214 
RETURNN
;

217 
∑gebuf
 = 
	`km≠
(
∑ge
);

218 
	`mem£t
(
∑gebuf
, 0, 
PAGE_SIZE
);

219 
	`kunm≠
(
∑ge
);

221 
io_com∂ëi⁄
.
îr‹
 = 0;

223 
	`DZ_BIO_SET_DEV
(
bio
, 
	`DZ_BIO_GET_DEV
(
∑ª¡_bio
));

224 
	`DZ_BIO_SET_SECTOR
(
bio
, 
£˘‹
);

225 
bio
->
bi_íd_io
 = 
dz_Áw_∑πül_block_ªad_∑ge_sync_biod⁄e
;

226 
	`DZ_BIO_SET_ZIDX
(
bio
);

227 
	`DZ_BIO_SET_READ
(
bio
);

228 
bio
->
bi_√xt
 = 
NULL
;

229 
bio
->
bi_¥iv©e
 = (
VOID
 *)&
io_com∂ëi⁄
;

233 i‡(!
	`bio_add_∑ge
(
bio
, 
∑ge
, 
PAGE_SIZE
, 0)) {

234 
	`LOGFECE
("UnableÅoáddÖageÅo bio\n");

235 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

236 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

237 
RETURNN
;

239 
	`öô_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

242 
i‹eque°
->
i‹_bio
 = 
bio
;

244 
	`dz_„c_ªad_io
(
i‹eque°
);

245 
	`waô_f‹_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

249 
îr‹
 = 
io_com∂ëi⁄
.error;

250 i‡(
	`u∆ikñy
(
îr‹
)){

251 
	`LOGFECE
("Eº‹ i¿ªadögÑaw d©a. Eº‹ Codê: %d", 
îr‹
);

252 
	`¥öt_biom
(
bio
, "bio withÉrror");

253 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

254 
RETURNN
;

256 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

257  
∑ge
;

259 
	}
}

263 
RVOID
 
	$dz_Áw_∑πül_block_doubÀ_∑ge_async
(
PIOREQUEST
 
∑ª¡_i‹eque°
,

264 
SECTOR
 
£˘‹_pos_ö_lba
,

265 
BIODONE
 
d⁄e_hód
,

266 
BIODONE
 
d⁄e_èû
)

268 
INT
 
ªt
 = 
SUCCESS
;

269 
PFEC_WRITE
 
„cw_hód
 = 
NULL
;

270 
PFEC_WRITE
 
„cw_èû
 = 
NULL
;

271 
PIOREQUEST
 
chûd_i‹eque°_hód
 = 
NULL
;

272 
PIOREQUEST
 
chûd_i‹eque°_èû
 = 
NULL
;

273 
PBIO
 
chûd_bio_hód
 = 
NULL
;

274 
PBIO
 
chûd_bio_èû
 = 
NULL
;

275 
PPAGE
 
∑ge_hód
 = 
NULL
;

276 
PPAGE
 
∑ge_èû
 = 
NULL
;

277 
PBIO
 
bio
 = 
∑ª¡_i‹eque°
->
i‹_bio
;

278 
LBA
 
lba
 = 
∑ª¡_i‹eque°
->
i‹_lba
;

279 
SECTOR
 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba
);

280 
INT
 
∑πül_byãs_hód
 = 0;

281 
INT
 
∑πül_byãs_èû
 = 0;

284 i‡(!(
„cw_hód
 = 
	`GET_FEC_SINGLE_FREE_BUFFER
())) {

285 
	`DELAY_MICRO_SECONDS
(1);

286 
	`IO_DONE_BUSY
(
∑ª¡_i‹eque°
);

290 i‡(!(
„cw_èû
 = 
	`GET_FEC_SINGLE_FREE_BUFFER
())) {

291 
	`DELAY_MICRO_SECONDS
(1);

292 
	`IO_DONE_BUSY
(
∑ª¡_i‹eque°
);

296 
chûd_i‹eque°_hód
 = 
	`dz_io_Æloc
();

297 i‡(!
chûd_i‹eque°_hód
) {

298 
	`LOGFECE
("UnableÅo get free iorequest\n");

299 
exô_Áûuª
;

301 
chûd_bio_hód
 = 
	`dz_bio_Æloc
(1);

302 i‡(!
chûd_bio_hód
) {

303 
	`LOGFECE
("UnableÅo get free child bio\n");

304 
exô_Áûuª
;

306 
∑ge_hód
 = 
	`dz_ªad_∑ge_Æloc
();

307 i‡(!
∑ge_hód
) {

308 
	`LOGFECE
("UnableÅo get freeÑeadÖage\n");

309 
exô_Áûuª
;

311 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio_hód
, 
£˘‹
, 
d⁄e_hód
, 
chûd_i‹eque°_hód
);

312 
	`DZ_BIO_SET_READ
(
chûd_bio_hód
);

314 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio_hód
, 
∑ge_hód
, 
PAGE_SIZE
, 0);

315 i‡(!
ªt
) {

316 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

317 
	`LOGFECE
("UnableÅoádd PageÅo child bio head\n");

318 
exô_Æloc
;

321 
	`©omic_£t
(&
chûd_i‹eque°_hód
->
i‹_chûd_˙t
, 0);

322 
chûd_i‹eque°_hód
->
i‹_thªad_poﬁ
 = 
ªad_thªad_poﬁ
;

323 
chûd_i‹eque°_hód
->
i‹_bio
 = 
chûd_bio_hód
;

325 
chûd_i‹eque°_hód
->
i‹_lba
 = 
lba
;

326 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

327 
chûd_i‹eque°_hód
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

328 
chûd_i‹eque°_hód
->
i‹_¥iv©e
 = 
„cw_hód
;

329 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

332 
lba
++;

333 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba
);

334 
chûd_i‹eque°_èû
 = 
	`dz_io_Æloc
();

335 i‡(!
chûd_i‹eque°_èû
) {

336 
	`LOGFECE
("UnableÅo get free iorequestÅail\n");

337 
exô_Áûuª
;

339 
chûd_bio_èû
 = 
	`dz_bio_Æloc
(1);

340 i‡(!
chûd_bio_èû
) {

341 
	`LOGFECE
("UnableÅo get free child bioÅail\n");

342 
exô_Áûuª
;

344 
∑ge_èû
 = 
	`dz_ªad_∑ge_Æloc
();

345 i‡(!
∑ge_èû
) {

346 
	`LOGFECE
("UnableÅo get freeÑeadÖageÅail\n");

347 
exô_Áûuª
;

349 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio_èû
, 
£˘‹
, 
d⁄e_èû
, 
chûd_i‹eque°_èû
);

350 
	`DZ_BIO_SET_READ
(
chûd_bio_èû
);

352 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio_èû
, 
∑ge_èû
, 
PAGE_SIZE
, 0);

353 i‡(!
ªt
) {

354 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

355 
	`LOGFECE
("UnableÅoádd PageÅo child bioÅail\n");

356 
exô_Æloc
;

358 
	`©omic_£t
(&
chûd_i‹eque°_èû
->
i‹_chûd_˙t
, 0);

359 
chûd_i‹eque°_èû
->
i‹_thªad_poﬁ
 = 
ªad_thªad_poﬁ
;

360 
chûd_i‹eque°_èû
->
i‹_bio
 = 
chûd_bio_èû
;

362 
chûd_i‹eque°_èû
->
i‹_lba
 = 
lba
;

363 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

364 
chûd_i‹eque°_èû
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

365 
chûd_i‹eque°_èû
->
i‹_¥iv©e
 = 
„cw_èû
;

366 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

369 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

370 
∑πül_byãs_èû
 = 
	`DZ_BIO_GET_SIZE
(
bio
Ë- 
∑πül_byãs_hód
;

372 
chûd_i‹eque°_hód
->
i‹_bv_Àn
 = 
∑πül_byãs_hód
;

373 
chûd_i‹eque°_hód
->
i‹_bv_off£t
 = 
£˘‹_pos_ö_lba
;

375 
chûd_i‹eque°_èû
->
i‹_bv_Àn
 = 
∑πül_byãs_èû
;

376 
chûd_i‹eque°_èû
->
i‹_bv_off£t
 = 0;

378 
chûd_bio_hód
->
bi_√xt
 = 
chûd_bio_èû
;

379 
chûd_bio_èû
->
bi_√xt
 = 
chûd_bio_hód
;

380 
	`dz_q_i‹eque°_thªad_poﬁ
(
chûd_i‹eque°_hód
);

381 
	`dz_q_i‹eque°_thªad_poﬁ
(
chûd_i‹eque°_èû
);

384 
exô_Áûuª
:

386 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

388 
exô_Æloc
:

389 i‡(
∑ge_hód
) {

390 
	`dz_ªad_∑ge_‰ì
(
∑ge_hód
);

392 i‡(
∑ge_èû
) {

393 
	`dz_ªad_∑ge_‰ì
(
∑ge_èû
);

395 i‡(
chûd_bio_hód
) {

396 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio_hód
);

398 i‡(
chûd_bio_èû
) {

399 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio_èû
);

401 i‡(
chûd_i‹eque°_hód
) {

402 
	`dz_io_‰ì
(
chûd_i‹eque°_hód
);

404 i‡(
chûd_i‹eque°_èû
) {

405 
	`dz_io_‰ì
(
chûd_i‹eque°_èû
);

407 
	`i‹eque°_put
(
∑ª¡_i‹eque°
);

408 
	}
}

411 
RVOID
 
	$dz_„c_Æign_wrôe_f‹_∑πül_block
(
PIOREQUEST
 
∑ª¡_i‹eque°
)

413 
PBIO
 
∑ª¡_bio
 = 
∑ª¡_i‹eque°
->
i‹_bio
;

414 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
∑ª¡_bio
);

415 
LBA
 
lba
 = 
∑ª¡_i‹eque°
->
i‹_lba
;

416 
UINT
 
£˘‹_pos_ö_lba
 = 0;

417 
INT
 
size
 = 
	`DZ_BIO_GET_SIZE
(
∑ª¡_bio
);

418 
PFEC_WRITE
 
„cw
 = 
NULL
;

419 
PVOID
 
∑gebuf
 = 
NULL
;

420 
BIOVEC
 
pbvec
;

421 
PPAGE
 
ªadback∑ge
 = 
NULL
;

422 
bvec_ôî
 
ôî
;

424 i‡(((
£˘‹
 * 
SECTOR_SIZE
Ë% 
LBA_BLOCK_SIZE
) == 0 ) {

426 
	`LOGFEC
("Case1: Partial but Start Sector Aligned\n");

428 
do_rmw
:

430 i‡(!(
„cw
 = 
	`GET_FEC_SINGLE_FREE_BUFFER
())) {

431 
	`DELAY_MICRO_SECONDS
(1);

432 
	`IO_DONE_BUSY
(
∑ª¡_i‹eque°
);

437 
„cw
->
lba
 =Üba;

440 i‡(
∑ª¡_bio
->
bi_v˙t
 > 1) {

443 
	`BUG_ON
(1);

446 
ªadback∑ge
 = 
	`dz_Áw_∑πül_block_ªad_∑ge_sync
(
∑ª¡_i‹eque°
, 
∑ª¡_bio
, 
£˘‹
);

447 
∑ª¡_i‹eque°
->
i‹_bio
 = 
∑ª¡_bio
;

448 i‡(!
ªadback∑ge
) {

450 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

457 
∑gebuf
 = 
	`km≠
(
ªadback∑ge
);

458 
	`PMEMCPY
(
„cw
->
bv_∑ge
, 
∑gebuf
, 
PAGE_SIZE
);

459 
	`kunm≠
(
ªadback∑ge
);

462 
	`bio_f‹_óch_£gmít
(
pbvec
, (
∑ª¡_bio
), 
ôî
) {

463 
∑gebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

464 
∑gebuf
 +
pbvec
.
bv_off£t
;

465 
	`PMEMCPY
(
„cw
->
bv_∑ge
 + 
£˘‹_pos_ö_lba
, 
∑gebuf
, 
pbvec
.
bv_Àn
);

466 
	`kunm≠
(
pbvec
.
bv_∑ge
);

469 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

471 
	`WRITE_IO_DONE
(
∑ª¡_i‹eque°
);

474 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
lba
);

476 
	`i‹eque°_put
(
∑ª¡_i‹eque°
);

477 
	`dz_ªad_∑ge_‰ì
(
ªadback∑ge
);

483 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

485 i‡((
£˘‹_pos_ö_lba
 + 
size
Ë<
LBA_BLOCK_SIZE
) {

487 
£˘‹_pos_ö_lba
 = (
£˘‹
 * 
SECTOR_SIZE
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

489 
	`LOGFEC
("Case2: Falls into Single Page Boundary but Unaligned\n");

495 
do_rmw
;

502 
	`dz_Áw_∑πül_block_doubÀ_∑ge_async
(
∑ª¡_i‹eque°
,

503 
£˘‹_pos_ö_lba
,

504 
dz_Áw_∑πül_block_doubÀ_∑ge_async_biod⁄e_hód
,

505 
dz_Áw_∑πül_block_doubÀ_∑ge_async_biod⁄e_èû
);

509 
	}
}

	@fec_engine/fec_engine_align_write_single.c

9 
	~"„c_ígöe.h
"

10 
U64
 
„c_èbÀ_size
;

11 
U64
 
„c_a˘ive_cou¡
;

13 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

15 
SPINLOCK
 
„c_a˘ive_lock
;

16 
SPINLOCK
 
„c_Êush_lock
;

19 
PFEC_TABLE
 
„c_èbÀs_a˘ive
;

20 
PFEC_TABLE
 
„c_èbÀs_Êush
;

21 
FEC_WRITE
 
„c_èbÀ_a˘ive
;

22 
PIOREQUEST
 
„c_Êush_i‹eque°
;

24 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

25 
PLBA_BLOCK
 
lba_èbÀ
;

26 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

27 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

28 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

29 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

30 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

33 
RVOID
 
	$dz_Áw_sögÀ_block_∑ª¡_biod⁄e
(
PBIO
 
bio
)

35 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

36 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

37 
BIOVEC
 
pbvec
;

38 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

39 
	`PRINT_ATOMIC
(
pi‹eque°
->
i‹_chûd_˙t
);

40 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

43 
	`LOGFEC
("Parent IO Done\n");

45 
	`IOREQUEST_DONE_STATUS
(
pi‹eque°
);

46 
pbvec
 = 
	`bio_iovec
(
bio
);

47 
	`dz_ªad_∑ge_‰ì
(
pbvec
.
bv_∑ge
);

48 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

49 
	`i‹eque°_put
(
ci‹eque°
);

51 
	`bio_d©a_dú
(
pi‹eque°
->
i‹_bio
Ë=
WRITE
 ?

52 
	`i‹eque°_put
(
pi‹eque°
) :

53 
	`i‹eque°_put
(
pi‹eque°
);

56 
pbvec
 = 
	`bio_iovec
(
bio
);

57 
	`dz_ªad_∑ge_‰ì
(
pbvec
.
bv_∑ge
);

58 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

59 
	`i‹eque°_put
(
ci‹eque°
);

62 
	}
}

65 
RVOID
 
	$dz_Áw_sögÀ_block_doubÀ_∑ge_async_biod⁄e_hód
(
PBIO
 
bio
)

67 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUEST)(
bio
->
bi_¥iv©e
);

68 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

69 
PBIO
 
∑ª¡_bio
 = 
pi‹eque°
->
i‹_bio
;

70 
PFEC_WRITE
 
„cw
 = (PFEC_WRITE)(
ci‹eque°
->
i‹_¥iv©e
);

71 
PVOID
 
∑gebuf
 = 
NULL
;

72 
BIOVEC
 
pbvec
;

74 
INT
 
bv_off£t
 = 
ci‹eque°
->
i‹_bv_off£t
;

83 
	`LOGFEC
("Inside biodone Head\n");

84 
	`PRINT_POINTER
(
„cw
);

89 
pbvec
 = 
	`bio_iovec
(
bio
);

90 
∑gebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

91 
∑gebuf
 +
pbvec
.
bv_off£t
;

92 
	`PMEMCPY
(
„cw
->
bv_∑ge
, 
∑gebuf
, 
bv_off£t
);

93 
	`kunm≠
(
pbvec
.
bv_∑ge
);

96 
pbvec
 = 
	`bio_iovec
(
∑ª¡_bio
);

97 
∑gebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

98 
∑gebuf
 +
bv_off£t
;

99 
	`PMEMCPY
(
„cw
->
bv_∑ge
 + 
bv_off£t
, 
∑gebuf
, 
PAGE_SIZE
 - bv_offset );

100 
	`kunm≠
(
pbvec
.
bv_∑ge
);

102 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

105 
	`dz_Áw_sögÀ_block_∑ª¡_biod⁄e
(
bio
);

107 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
ci‹eque°
->
i‹_lba
);

110 
	}
}

113 
RVOID
 
	$dz_Áw_sögÀ_block_doubÀ_∑ge_async_biod⁄e_èû
(
PBIO
 
bio
)

115 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUEST)(
bio
->
bi_¥iv©e
);

116 
PIOREQUEST
 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

117 
PBIO
 
∑ª¡_bio
 = 
pi‹eque°
->
i‹_bio
;

118 
PFEC_WRITE
 
„cw
 = (PFEC_WRITE)(
ci‹eque°
->
i‹_¥iv©e
);

119 
PVOID
 
∑gebuf
 = 
NULL
;

120 
BIOVEC
 
pbvec
;

122 
INT
 
bv_Àn
 = 
ci‹eque°
->
i‹_bv_Àn
;

130 
	`LOGFEC
("Inside biodone Tail\n");

131 
	`PRINT_POINTER
(
„cw
);

135 
pbvec
 = 
	`bio_iovec
(
∑ª¡_bio
);

140 
∑gebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

141 
∑gebuf
 +
pbvec
.
bv_off£t
;

142 
∑gebuf
 +
pbvec
.
bv_Àn
 - bv_len;

143 
	`PMEMCPY
(
„cw
->
bv_∑ge
, 
∑gebuf
, 
bv_Àn
);

144 
	`kunm≠
(
pbvec
.
bv_∑ge
);

148 
pbvec
 = 
	`bio_iovec
(
bio
);

149 
∑gebuf
 = 
	`km≠
(
pbvec
.
bv_∑ge
);

150 
∑gebuf
 +
bv_Àn
;

151 
	`PMEMCPY
((
„cw
->
bv_∑ge
 + 
bv_Àn
), 
∑gebuf
, 
PAGE_SIZE
 - bv_len);

152 
	`kunm≠
(
pbvec
.
bv_∑ge
);

154 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

157 
	`dz_Áw_sögÀ_block_∑ª¡_biod⁄e
(
bio
);

159 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
ci‹eque°
->
i‹_lba
);

161 
	`¥öt_„cws
(
„cw
, "Tail Last");

162 
	}
}

168 
RVOID
 
	$dz_Áw_sögÀ_block_doubÀ_∑ge_async
(
PIOREQUEST
 
∑ª¡_i‹eque°
,

169 
SECTOR
 
£˘‹_pos_ö_lba
,

170 
BIODONE
 
d⁄e_hód
,

171 
BIODONE
 
d⁄e_èû
)

173 
INT
 
ªt
 = 
SUCCESS
;

174 
PFEC_WRITE
 
„cw_hód
 = 
NULL
;

175 
PFEC_WRITE
 
„cw_èû
 = 
NULL
;

176 
PIOREQUEST
 
chûd_i‹eque°_hód
 = 
NULL
;

177 
PIOREQUEST
 
chûd_i‹eque°_èû
 = 
NULL
;

178 
PBIO
 
chûd_bio_hód
 = 
NULL
;

179 
PBIO
 
chûd_bio_èû
 = 
NULL
;

180 
PPAGE
 
∑ge_hód
 = 
NULL
;

181 
PPAGE
 
∑ge_èû
 = 
NULL
;

182 
PBIO
 
bio
 = 
∑ª¡_i‹eque°
->
i‹_bio
;

183 
LBA
 
lba
 = 
∑ª¡_i‹eque°
->
i‹_lba
;

184 
SECTOR
 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba
);

185 
INT
 
∑πül_byãs_hód
 = 0;

186 
INT
 
∑πül_byãs_èû
 = 0;

189 i‡(!(
„cw_hód
 = 
	`GET_FEC_SINGLE_FREE_BUFFER
())) {

190 
	`DELAY_MICRO_SECONDS
(1);

191 
	`IO_DONE_BUSY
(
∑ª¡_i‹eque°
);

195 i‡(!(
„cw_èû
 = 
	`GET_FEC_SINGLE_FREE_BUFFER
())) {

196 
	`DELAY_MICRO_SECONDS
(1);

197 
	`IO_DONE_BUSY
(
∑ª¡_i‹eque°
);

201 
chûd_i‹eque°_hód
 = 
	`dz_io_Æloc
();

202 i‡(!
chûd_i‹eque°_hód
) {

203 
	`LOGFECE
("UnableÅo get free iorequest\n");

204 
exô_Áûuª
;

206 
chûd_bio_hód
 = 
	`dz_bio_Æloc
(1);

207 i‡(!
chûd_bio_hód
) {

208 
	`LOGFECE
("UnableÅo get free child bio\n");

209 
exô_Áûuª
;

211 
∑ge_hód
 = 
	`dz_ªad_∑ge_Æloc
();

212 i‡(!
∑ge_hód
) {

213 
	`LOGFECE
("UnableÅo get freeÑeadÖage\n");

214 
exô_Áûuª
;

216 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio_hód
, 
£˘‹
, 
d⁄e_hód
, 
chûd_i‹eque°_hód
);

217 
	`DZ_BIO_SET_READ
(
chûd_bio_hód
);

219 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio_hód
, 
∑ge_hód
, 
PAGE_SIZE
, 0);

220 i‡(!
ªt
) {

221 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

222 
	`LOGFECE
("UnableÅoádd PageÅo child bio head\n");

223 
exô_Æloc
;

226 
	`©omic_£t
(&
chûd_i‹eque°_hód
->
i‹_chûd_˙t
, 0);

227 
chûd_i‹eque°_hód
->
i‹_thªad_poﬁ
 = 
ªad_thªad_poﬁ
;

228 
chûd_i‹eque°_hód
->
i‹_bio
 = 
chûd_bio_hód
;

230 
chûd_i‹eque°_hód
->
i‹_lba
 = 
lba
;

231 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

232 
chûd_i‹eque°_hód
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

233 
chûd_i‹eque°_hód
->
i‹_¥iv©e
 = 
„cw_hód
;

234 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

237 
lba
++;

238 
£˘‹
 = 
	`dz_c⁄vît_lba_to_£˘‹
(
lba
);

239 
chûd_i‹eque°_èû
 = 
	`dz_io_Æloc
();

240 i‡(!
chûd_i‹eque°_èû
) {

241 
	`LOGFECE
("UnableÅo get free iorequestÅail\n");

242 
exô_Áûuª
;

244 
chûd_bio_èû
 = 
	`dz_bio_Æloc
(1);

245 i‡(!
chûd_bio_èû
) {

246 
	`LOGFECE
("UnableÅo get free child bioÅail\n");

247 
exô_Áûuª
;

249 
∑ge_èû
 = 
	`dz_ªad_∑ge_Æloc
();

250 i‡(!
∑ge_èû
) {

251 
	`LOGFECE
("UnableÅo get freeÑeadÖageÅail\n");

252 
exô_Áûuª
;

254 
	`dz_öô_chûd_bio
(
bio
, 
chûd_bio_èû
, 
£˘‹
, 
d⁄e_èû
, 
chûd_i‹eque°_èû
);

255 
	`DZ_BIO_SET_READ
(
chûd_bio_èû
);

257 
ªt
 = 
	`bio_add_∑ge
(
chûd_bio_èû
, 
∑ge_èû
, 
PAGE_SIZE
, 0);

258 i‡(!
ªt
) {

259 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

260 
	`LOGFECE
("UnableÅoádd PageÅo child bioÅail\n");

261 
exô_Æloc
;

263 
	`©omic_£t
(&
chûd_i‹eque°_èû
->
i‹_chûd_˙t
, 0);

264 
chûd_i‹eque°_èû
->
i‹_thªad_poﬁ
 = 
ªad_thªad_poﬁ
;

265 
chûd_i‹eque°_èû
->
i‹_bio
 = 
chûd_bio_èû
;

267 
chûd_i‹eque°_èû
->
i‹_lba
 = 
lba
;

268 
chûd_i‹eque°_hód
->
i‹_£˘‹
 = 
£˘‹
;

269 
chûd_i‹eque°_èû
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

270 
chûd_i‹eque°_èû
->
i‹_¥iv©e
 = 
„cw_èû
;

271 
	`©omic_öc
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

274 
∑πül_byãs_hód
 = 
LBA_BLOCK_SIZE
 - 
£˘‹_pos_ö_lba
;

275 
∑πül_byãs_èû
 = 
	`DZ_BIO_GET_SIZE
(
bio
Ë- 
∑πül_byãs_hód
;

277 
chûd_i‹eque°_hód
->
i‹_bv_Àn
 = 
∑πül_byãs_hód
;

278 
chûd_i‹eque°_hód
->
i‹_bv_off£t
 = 
£˘‹_pos_ö_lba
;

280 
chûd_i‹eque°_èû
->
i‹_bv_Àn
 = 
∑πül_byãs_èû
;

281 
chûd_i‹eque°_èû
->
i‹_bv_off£t
 = 0;

283 
chûd_bio_hód
->
bi_√xt
 = 
chûd_bio_èû
;

284 
chûd_bio_èû
->
bi_√xt
 = 
chûd_bio_hód
;

285 
	`dz_q_i‹eque°_thªad_poﬁ
(
chûd_i‹eque°_hód
);

286 
	`dz_q_i‹eque°_thªad_poﬁ
(
chûd_i‹eque°_èû
);

289 
exô_Áûuª
:

291 
	`IOREQUEST_DONE_ERROR
(
∑ª¡_i‹eque°
);

293 
exô_Æloc
:

294 i‡(
∑ge_hód
) {

295 
	`dz_ªad_∑ge_‰ì
(
∑ge_hód
);

297 i‡(
∑ge_èû
) {

298 
	`dz_ªad_∑ge_‰ì
(
∑ge_èû
);

300 i‡(
chûd_bio_hód
) {

301 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio_hód
);

303 i‡(
chûd_bio_èû
) {

304 
	`DZ_OS_KERNEL_BIO_PUT
(
chûd_bio_èû
);

306 i‡(
chûd_i‹eque°_hód
) {

307 
	`dz_io_‰ì
(
chûd_i‹eque°_hód
);

309 i‡(
chûd_i‹eque°_èû
) {

310 
	`dz_io_‰ì
(
chûd_i‹eque°_èû
);

312 
	`i‹eque°_put
(
∑ª¡_i‹eque°
);

313 
	}
}

316 
RVOID
 
	$dz_Áw_sögÀ_block_i‹eque°_d⁄e
(
PVOID
 
i‹eque°
 , 
INT
 
îr‹
)

318 
PIOREQUEST
 
i‹
 = (PIOREQUEST)
i‹eque°
;

319 
PFEC_WRITE
 
„cw
 = (PFEC_WRITE)
i‹
->
i‹_¥iv©e
;

321 
	`FEC_ENTRY_WRITE_LOCK
(
„cw
);

322 i‡(
îr‹
) {

323 
„cw
->
°©e
 = 
FECBUF_STATE_DEDUPE_WRITE_ERROR
;

324 
„cw
->
io_com∂ëi⁄
.
îr‹
 =Érror;

326 
„cw
->
°©e
 = 
FECBUF_STATE_DEDUPE_WRITE_COMPLETED
;

328 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

329 
	`com∂ëe
(&
„cw
->
io_com∂ëi⁄
.
com∂ëi⁄
);

331 
	`LOGD
("Disk IO D⁄êf‹ LBA %Œòwôh i‹eque° %p\n", 
i‹
->
lba
, ior);

332 
	`i‹eque°_put
(
i‹
);

334 
	}
}

344 
RVOID
 
	$dz_„c_Æign_wrôe_f‹_sögÀ_block
(
PIOREQUEST
 
i‹eque°
)

346 
PBIO
 
bio
 = 
i‹eque°
->
i‹_bio
;

347 
SECTOR
 
£˘‹
 = 
	`DZ_BIO_GET_SECTOR
(
bio
);

348 
LBA
 
lba
 = 
i‹eque°
->
i‹_lba
;

349 
PFEC_WRITE
 
„cw
 = 
NULL
;

350 
UINT
 
£˘‹_pos_ö_lba
 = 0;

351 
U64
 
£˘‹_byãs
 = 
£˘‹
 * 
SECTOR_SIZE
;

352 
UINT
 
ªåy_˙t
 = 0;

356 i‡(((
£˘‹_byãs
Ë% 
LBA_BLOCK_SIZE
) != 0 ) {

357 
	`LOGFEC
("Ca£1: SögÀ block u«lig√d Se˘‹ = %Œi\n", (
U64
)
£˘‹
);

358 
£˘‹_pos_ö_lba
 = (
£˘‹_byãs
Ë- (
lba
 * 
LBA_BLOCK_SIZE
);

360 
	`dz_Áw_sögÀ_block_doubÀ_∑ge_async
(
i‹eque°
,

361 
£˘‹_pos_ö_lba
,

362 
dz_Áw_sögÀ_block_doubÀ_∑ge_async_biod⁄e_hód
,

363 
dz_Áw_sögÀ_block_doubÀ_∑ge_async_biod⁄e_èû
);

368 
°¨t_¥o˚ssög
:

369 
	`LOGFEC
("Ca£2: SögÀ block Alig√d Se˘‹ = %Œi\n", (
U64
)
£˘‹
);

370 i‡(!(
„cw
 = 
	`GET_FEC_SINGLE_FREE_BUFFER
())) {

371 i‡(
ªåy_˙t
++ >= 64) {

372 
	`LOGFEC
("Rëu∫ög BUSY f‹Üb®%Œi\n", 
lba
);

373 
	`IO_DONE_BUSY
(
i‹eque°
);

376 
	`DELAY_MILLI_SECONDS
(10);

377 
°¨t_¥o˚ssög
;

388 
	`FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
„cw
, 
lba
);

393 
„cw
->
lba
 =Üba;

398 
	`COPY_FROM_BIO
(
„cw
->
bv_∑ge
, 
bio
);

399 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_MEMORY_WRITE_COMPLETED
);

405 i‡(
i‹eque°
->
i‹_∑ª¡
) {

406 
	`WRITE_IO_DONE
(
i‹eque°
);

413 
	`WRITE_IO_DONE
(
i‹eque°
);

415 
	`LOGFEC
("Application IO Completed\n");

431 
	`SET_FEC_BUFFER_STATE
(
„cw
, 
FECBUF_STATE_DEDUPE_WRITE_IN_PROGRESS
);

433 
„cw
->
io_com∂ëi⁄
.
îr‹
 = 
SUCCESS
;

434 
	`öô_com∂ëi⁄
(&
„cw
->
io_com∂ëi⁄
.
com∂ëi⁄
);

437 
i‹eque°
->
i‹_bv_buf„r
 = 
„cw
->
bv_∑ge
;

438 
i‹eque°
->
i‹_d⁄efun
 = 
dz_Áw_sögÀ_block_i‹eque°_d⁄e
;

442 
i‹eque°
->
i‹_bio
 = 
NULL
;

446 
i‹eque°
->
i‹_¥iv©e
 = 
„cw
;

449 
	`i‹eque°_gë
(
i‹eque°
);

471 
	`dz_„c_add_wrôe_buf„r_to_Êushq
(
„cw
);

473 
	`LOGFEC
("Dedu≥ WrôêIO Sèπ f‹ LBA %Œòwôh i‹eque° %p\n", 
lba
, 
i‹eque°
);

476 
	`dz_q_i‹eque°
(
dedu≥_thªad_poﬁ
, 
i‹eque°
);

479 
	}
}

	@fec_engine/fec_engine_flush.c

9 
	~"„c_ígöe.h
"

10 
PMEMPOOL
 
„c_d©a_ªad_mempoﬁ
;

11 
INT
 
„c_d©a_ªad_mempoﬁ_cou¡
;

13 
U64
 
„c_èbÀ_size
;

14 
U64
 
„c_a˘ive_cou¡
;

16 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

17 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

18 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

19 
PDZ_THREAD_POOL
 
Êush_thªad_poﬁ
;

21 
SPINLOCK
 
„c_a˘ive_lock
;

22 
SPINLOCK
 
„c_Êush_lock
;

25 
PFEC_TABLE
 
„c_èbÀs_a˘ive
;

26 
PFEC_TABLE
 
„c_èbÀs_Êush
;

28 
BOOL
 
„c_Êush_timî_°›
;

29 
ULONG
 
„c_Êush_öãrvÆ
;

30 
THREAD
 *
„c_Êush_timî_thªad
;

31 
PIOREQUEST
 
„c_Êush_i‹eque°
;

33 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

34 
PLBA_BLOCK
 
lba_èbÀ
;

35 
ATOMIC64
 
„c_cur_Êush_cou¡
;

36 
ATOMIC64
 
„c_Êush_›s_cou¡
;

37 
ATOMIC64
 
„c_cur_Êush_›s_cou¡
;

39 
U64
 
time_Êush_¥ï¨e_°¨t
;

40 
U64
 
time_Êush_°¨t
;

41 
U64
 
time_Êush_íd
 ;

46 
RVOID
 
	$dz_„c_add_wrôe_buf„r_to_Êushq
(
PFEC_WRITE
 
„cw
)

48 
	`•ö_lock
(&
„c_Êush_lock
);

49 
	`li°_add_èû
(&(
„cw
)->
Êushq
, &(
„c_èbÀs_Êush
)->
Êushq_hód
);

50 
„c_èbÀs_Êush
->
tŸÆ_Êush_˙t
++;

51 
	`•ö_u∆ock
(&
„c_Êush_lock
);

52 
	}
}

56 
RVOID
 
	$dz_„c_Êush_°¨t_‰om_timî_c⁄ãxt
(
VOID
)

59 
	`•ö_lock
(&
„c_a˘ive_lock
);

60 i‡(
„c_a˘ive_cou¡
 == 0) {

61 
	`LOGFEC
("Nothing in Active BufferÅo flush\n");

62 
	`•ö_u∆ock
(&
„c_a˘ive_lock
);

69 i‡(
„c_èbÀs_Êush
->
Êush_ö_¥ogªss
) {

70 
	`•ö_u∆ock
(&
„c_a˘ive_lock
);

77 
	`LOGFEC
("Flushing Started From Timer Context\n");

78 
	`dz_„c_Êush_swôchovî
();

79 
„c_èbÀs_Êush
->
Êush_ö_¥ogªss
 = 
TRUE
;

81 
	`•ö_u∆ock
(&
„c_a˘ive_lock
);

82 
	`dz_q_i‹eque°
(
„c_Êush_i‹eque°
->
i‹_thªad_poﬁ
, fec_flush_iorequest);

83 
	}
}

87 
RINT
 
	$dz_„c_Êush_timî
(
PVOID
 
d©a
)

89 
scheduÀd_time
 = 0;

90 
	`LOGD
("Flush Timer Started\n");

92 !
	`kthªad_should_°›
(Ë&& !
„c_Êush_timî_°›
) {

94 
scheduÀd_time
 = 
	`m£cs_to_jiffõs
(
„c_Êush_öãrvÆ
 * 1000);

95 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

96 
	`scheduÀ_timeout
(
scheduÀd_time
);

97 i‡(
	`kthªad_should_°›
()) {

101 i‡(
„c_Êush_timî_°›
) {

102 
	`LOGFEC
("Flush Timer Thread gettingÉxited\n");

103 
	`dz_thªad_exô
();

109 
	`LOGFEC
("Flush Timer Stopped\n");

110 
RETURNS
;

111 
	}
}

113 
RVOID
 
	$dz_„c_Êush_timî_°›
(
VOID
)

115 i‡(
„c_Êush_timî_thªad
) {

116 
„c_Êush_timî_°›
 = 
TRUE
;

117 
	`kthªad_°›
(
„c_Êush_timî_thªad
);

119 
	}
}

124 
RVOID
 
	$dz_„c_Êush_swôchovî
(
VOID
)

126 
PFEC_TABLE
 
tmp_èbÀs
 = 
NULL
;

129 
tmp_èbÀs
 = 
„c_èbÀs_a˘ive
;

130 
„c_èbÀs_a˘ive
 = 
„c_èbÀs_Êush
;

131 
„c_èbÀs_Êush
 = 
tmp_èbÀs
;

134 
„c_èbÀs_Êush
->
tŸÆ_Êush_˙t
 = (
„c_a˘ive_cou¡
 > 
„c_èbÀ_size
) ? fec_table_size : fec_active_count;

135 
	`LOGD
("TŸÆ Flush Cou¡ = %Œi\n", 
„c_èbÀs_Êush
->
tŸÆ_Êush_˙t
);

136 
„c_a˘ive_cou¡
 = 0;

137 
	}
}

139 
RVOID
 
	$dz_Êush_iod⁄e
(
PVOID
 
i‹eque°
 , 
INT
 
îr‹
)

141 
PIOREQUEST
 
i‹
 = (PIOREQUEST)
i‹eque°
;

142 
PIOREQUEST
 
∑ª¡_i‹eque°
 = 
i‹
->
i‹_∑ª¡
;

143 
PFEC_WRITE
 
„cw
 = (PFEC_WRITE)
i‹
->
i‹_¥iv©e
;

148 
check_ªads
:

149 
	`FEC_ENTRY_WRITE_LOCK
(
„cw
);

150 i‡(
„cw
->
ªad_ªf_˙t
) {

151 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

153 
	`DELAY_MICRO_SECONDS
(10);

154 
check_ªads
;

157 i‡(
îr‹
) {

158 
„cw
->
°©e
 = 
FECBUF_STATE_FLUSH_ERROR
;

160 
„cw
->
°©e
 = 
FECBUF_STATE_FLUSH_COMPLETED
;

162 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

165 
	`FEC_DELETE_WRITE_BUFFER_FROM_LBA_TABLE
(
„cw
);

167 i‡(
îr‹
) {

170 
	`¥öt_i‹eque°
(
i‹eque°
, "Flush Request withÉrror");

171 
	`BUG_ON
(1);

174 
	`LOGD
("Child done count = %u,Öba_index = %lli,Üba = %lli, iorequest = %p, fecw = %p\n",

175 
	`ATOMIC_READ
(
∑ª¡_i‹eque°
->
i‹_chûd_˙t
),

176 
i‹
->
lba
, 
„cw
->lba, ior, fecw);

178 
	`ATOMIC64_INC
(
„c_cur_Êush_cou¡
);

179 i‡(
	`©omic_dec_™d_ã°
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
)) {

181 
	`LOGFEC
("Flush Completed\n");

182 
	`•ö_lock
(&
„c_a˘ive_lock
);

183 
„c_èbÀs_Êush
->
Êush_ö_¥ogªss
 = 
FALSE
;

184 
	`•ö_u∆ock
(&
„c_a˘ive_lock
);

185 
time_Êush_íd
 = 
	`gë_jiffõs_64
();

186 
	`i‹eque°_put
(
∑ª¡_i‹eque°
);

188 
„cw
->
°©e
 = 
FECBUF_STATE_IDLE
;

189 
„cw
->
lba
 = 0;

190 
„cw
->
ªad_ªf_˙t
 = 0;

191 
	`mem£t
(
„cw
->
bv_∑ge
, 0, 
PAGE_SIZE
);

192 
	`dz_„c_put_buf„r_ödex
(
„cw
->
ödex
, 
„c_èbÀ_size
);

204 
	`i‹eque°_put
(
i‹
);

206 
	}
}

208 
PIOREQUEST
 
	$dz_„c_¸óã_Êush_io
(
PFEC_WRITE
 
„c_d©a_íåy
)

210 
PIOREQUEST
 
i‹eque°
;

212 
i‹eque°
 = 
	`dz_io_Æloc
();

213 i‡(!
i‹eque°
) {

214 
	`LOGFECE
("UnableÅoállocate memory for iorequest\n");

215  
NULL
;

218 
	`MEMSET
(
i‹eque°
);

219 
i‹eque°
->
i‹_bv_buf„r
 = 
„c_d©a_íåy
->
bv_∑ge
;

220 
i‹eque°
->
i‹_d⁄efun
 = 
dz_Êush_iod⁄e
;

221 
i‹eque°
->
i‹_bio
 = 
NULL
;

226 
i‹eque°
->
i‹_lba
 = (
	`GET_LBA_ENTRY
(
„c_d©a_íåy
->
lba
))->
pba_ödex
;

227 
i‹eque°
->
i‹_¥iv©e
 = 
„c_d©a_íåy
;

228 
	`ATOMIC_SET
(
i‹eque°
->
i‹_ªf_˙t
, 0);

230  
i‹eque°
;

231 
	}
}

238 
RVOID
 
	$dz_„c_¸óã_Êush_i‹eque°
(
VOID
)

240 
PFEC_WRITE
 
„cw
 = 
NULL
;

241 
U64
 
cou¡
;

242 
U64
 
loˇl_Êush_˙t
 = 0;

243 
PIOREQUEST
 
Êush_i‹eque°
 = 
	`dz_io_Æloc
();

244 i‡(!
Êush_i‹eque°
) {

245 
	`LOGFECE
("UnableÅoállocate memory for iorequest\n");

247 
	`BUG_ON
(1);

250 
	`MEMSET
(
Êush_i‹eque°
);

252 
	`INIT_LIST_HEAD
(&
Êush_i‹eque°
->
i‹_Êushq_hód
);

253 
	`•ö_lock
(&
„c_Êush_lock
);

254 
loˇl_Êush_˙t
 = 
„c_èbÀs_Êush
->
tŸÆ_Êush_˙t
;

255 i‡(
loˇl_Êush_˙t
 <= 0) {

256 
	`•ö_u∆ock
(&
„c_Êush_lock
);

257 
	`LOGFECW
("Flush cou¡ i†Zîÿ%Œi\n", 
loˇl_Êush_˙t
);

258 
	`dz_io_‰ì
(
Êush_i‹eque°
);

261 
„c_èbÀs_Êush
->
tŸÆ_Êush_˙t
 = 0;

263 
cou¡
 = 0; cou¡ < 
loˇl_Êush_˙t
; count++) {

264 
„cw
 = 
	`li°_fú°_íåy
(&
„c_èbÀs_Êush
->
Êushq_hód
, 
dz_„c_d©a_wrôe_s
, 
Êushq
);

265 
	`li°_dñ
(&
„cw
->
Êushq
);

266 
	`li°_add_èû
(&
„cw
->
Êushq
, &
Êush_i‹eque°
->
i‹_Êushq_hód
);

268 
	`INIT_LIST_HEAD
(&
„c_èbÀs_Êush
->
Êushq_hód
);

269 
	`•ö_u∆ock
(&
„c_Êush_lock
);

271 
	`ATOMIC_SET
(
Êush_i‹eque°
->
i‹_chûd_˙t
, 
loˇl_Êush_˙t
);

273 
	`ATOMIC64_INC
(
„c_Êush_›s_cou¡
);

275 
	`LOGFEC
("Flush Request No. %lli ReadyÅo beÖrocessed %p\n",

276 (
U64
)
	`ATOMIC64_READ
(
„c_Êush_›s_cou¡
), 
Êush_i‹eque°
);

278 
„cw
 = 
	`li°_fú°_íåy
(&
Êush_i‹eque°
->
i‹_Êushq_hód
, 
dz_„c_d©a_wrôe_s
, 
Êushq
);

279 
	`dz_q_i‹eque°
(
Êush_thªad_poﬁ
, 
Êush_i‹eque°
);

280 
	}
}

289 
RVOID
 
	$dz_„c_Êush_io
(
PIOREQUEST
 
∑ª¡_i‹eque°
)

291 
PFEC_WRITE
 
„cw
 = 
NULL
;

292 
PIOREQUEST
 
fi‹eque°
 = 
NULL
;

293 
U64
 
cou¡
;

294 
U64
 
loˇl_Êush_˙t
 = 0;

296 i‡(
	`li°_em±y
(&
∑ª¡_i‹eque°
->
i‹_Êushq_hód
)) {

297 
	`LOGFEC
("Flushq canÇever beÉmpty\n");

298 
	`BUG_ON
(1);

300 
loˇl_Êush_˙t
 = (
U64
)
	`ATOMIC_READ
(
∑ª¡_i‹eque°
->
i‹_chûd_˙t
);

301 
time_Êush_¥ï¨e_°¨t
 = 
	`gë_jiffõs_64
();

303 
	`ATOMIC64_INC
(
„c_cur_Êush_›s_cou¡
);

304 
	`LOGFEC
("Serving FlushÑequest [%lli/%lli] %p inÖrogress with %lli FEC Write Buffers\n",

305 (
U64
)
	`ATOMIC64_READ
(
„c_Êush_›s_cou¡
),

306 (
U64
)
	`ATOMIC64_READ
(
„c_cur_Êush_›s_cou¡
),

307 
∑ª¡_i‹eque°
, 
loˇl_Êush_˙t
);

311 
cou¡
 = 0; cou¡ < 
loˇl_Êush_˙t
; count++) {

312 
„cw
 = 
	`li°_fú°_íåy
(&
∑ª¡_i‹eque°
->
i‹_Êushq_hód
, 
dz_„c_d©a_wrôe_s
, 
Êushq
);

313 
	`li°_dñ
(&
„cw
->
Êushq
);

315 
„cw
->
°©e
) {

318 
FECBUF_STATE_DEDUPE_WRITE_COMPLETED
:

323 
FECBUF_STATE_DEDUPE_WRITE_IN_PROGRESS
:

324 
	`LOGD
("%Œi:Flush:WIP LBA %Œòwôh i‹eque° %p\n", 
cou¡
, 
„cw
->
lba
, 
fi‹eque°
);

325 
	`waô_f‹_com∂ëi⁄
(&
„cw
->
io_com∂ëi⁄
.
com∂ëi⁄
);

330 
FECBUF_STATE_IDLE
:

331 
FECBUF_STATE_ALLOCATED
:

333 
	`LOGR
("%lli:Flush IO Start for LBA %lli with iorequest %p, child_cnt = %u\n",

334 
cou¡
, 
„cw
->
lba
, 
∑ª¡_i‹eque°
,

335 
	`ATOMIC_READ
(
∑ª¡_i‹eque°
->
i‹_chûd_˙t
));

336 
	`¥öt_„cws
(
„cw
,"Unexpected buffer state");

337 
	`BUG_ON
(1);

341 
	`FEC_ENTRY_WRITE_LOCK
(
„cw
);

342 
„cw
->
°©e
 = 
FECBUF_STATE_FLUSH_STARTED
;

343 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

345 
°¨t_fi‹eque°
:

346 
fi‹eque°
 = 
	`dz_„c_¸óã_Êush_io
(
„cw
);

347 i‡(!
fi‹eque°
) {

349 
	`LOGFEC
("UnableÅo get fiorequest, Retrying it\n");

350 
	`DELAY_MICRO_SECONDS
(100);

351 
°¨t_fi‹eque°
;

353 
fi‹eque°
->
i‹_∑ª¡
 = 
∑ª¡_i‹eque°
;

354 
	`LOGD
("%Œi:Flush IO Sèπ f‹ LBA %Œòwôh i‹eque° %p\n", 
cou¡
, 
„cw
->
lba
, 
fi‹eque°
);

355 
	`dz_bec_¥o˚ed_pba_∑ge_add_wrôe
(
fi‹eque°
);

360 
	}
}

	@fec_engine/fec_engine_read.c

9 
	~"„c_ígöe.h
"

11 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

12 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

14 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

15 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

16 
U64
 
„c_èbÀ_size
;

17 
SPINLOCK
 
„c_a˘ive_lock
;

20 
PFEC_TABLE
 
„c_èbÀs_a˘ive
;

21 
PFEC_TABLE
 
„c_èbÀs_Êush
;

22 
PLBA_BLOCK
 
lba_èbÀ
;

24 
RVOID
 
	$dz_„c_Æign_ªad_io_dúe˘
(
PIOREQUEST
 
i‹eque°
)

26 
PLBA_BLOCK
 
lba_íåy
 = 
NULL
;

27 
PFEC_WRITE
 
„cw
 = 
NULL
;

28 
PBIO
 
bio
 = 
i‹eque°
->
i‹_bio
;

29 
LBA
 
lba
 = 
i‹eque°
->
i‹_lba
;

31 
lba_íåy
 = 
	`GET_LBA_ENTRY
(
lba
);

33 
	`LOGD
("Bef‹e:Ród Reque°Ñe˚ivedáàlb®%Œi\n", 
lba
);

34 
	`_ACQUIRE_FEC_LOCK_READ
(
lba_íåy
);

35 i‡(
	`li°_em±y
(&
lba_íåy
->
ioq_hód
)) {

42 
	`ATOMIC64_INC
(
„c_f‹w¨ded_ªads_cou¡
);

43 
	`_RELEASE_FEC_LOCK_READ
(
lba_íåy
);

45 
	`dz_dedu≥_ªad_io
(
i‹eque°
);

48 
	`BUG_ON
(1);

49 
°¨t_¥o˚ssög
:

50 
	`LOGD
("A·î:Ród Reque°Ñe˚ivedáàlb®%Œi\n", 
lba
);

51 
„cw
 = 
	`li°_fú°_íåy
(&
lba_íåy
->
ioq_hód
, 
dz_„c_d©a_wrôe_s
, 
ioq
);

53 
	`FEC_ENTRY_WRITE_LOCK
(
„cw
);

55 
„cw
->
°©e
) {

57 
FECBUF_STATE_IDLE
:

58 
FECBUF_STATE_ALLOCATED
:

59 
FECBUF_STATE_MEMORY_WRITE_ERROR
:

60 
FECBUF_STATE_FLUSH_COMPLETED
:

61 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

62 
	`_RELEASE_FEC_LOCK_READ
(
lba_íåy
);

63 
	`ATOMIC64_INC
(
„c_f‹w¨ded_ªads_cou¡
);

64 
	`dz_dedu≥_ªad_io
(
i‹eque°
);

67 
FECBUF_STATE_MEMORY_WRITE_IN_PROGRESS
:

68 
	`LOGFEC
("WrôêöÖrogªs†f‹Üb®%Œi\n", 
„cw
->
lba
);

69 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

70 
	`DELAY_MILLI_SECONDS
(100);

71 
°¨t_¥o˚ssög
;

75 
„cw
->
ªad_ªf_˙t
++;

77 i‡(
„cw
->
ªad_ªf_˙t
 >
DZ_FEC_CONCURRENT_READS_LIMIT
) {

78 
„cw
->
ªad_ªf_˙t
--;

80 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

81 
	`_RELEASE_FEC_LOCK_READ
(
lba_íåy
);

83 
	`DELAY_MILLI_SECONDS
(100);

85 
	`IO_DONE_BUSY
(
i‹eque°
);

86 
	`i‹eque°_put
(
i‹eque°
);

90 
	`COPY_TO_BIO
(
bio
, 
„cw
->
bv_∑ge
);

91 
„cw
->
ªad_ªf_˙t
--;

93 
	`FEC_ENTRY_WRITE_UNLOCK
(
„cw
);

94 
	`_RELEASE_FEC_LOCK_READ
(
lba_íåy
);

96 
	`ATOMIC64_INC
(
„c_mem‹y_ªads_cou¡
);

99 i‡(
i‹eque°
->
i‹_∑ª¡
) {

101 
	`READ_IO_DONE
(
i‹eque°
);

106 
	`READ_IO_DONE
(
i‹eque°
);

107 
	`i‹eque°_put
(
i‹eque°
);

122 
	}
}

124 
RVOID
 
	$dz_„c_ªad_io
(
PIOREQUEST
 
i‹eque°
)

126 
	`LOGD
("Ród Reque°Ñe˚ivedáàlb®%Œi\n", 
lba
);

127 
	`dz_„c_Æign_ªad_io
(
i‹eque°
);

129 
	}
}

	@fec_engine/fec_engine_replay.c

9 
	~"„c_ígöe.h
"

11 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

13 
U64
 
„c_èbÀ_size
;

14 
SPINLOCK
 
„c_a˘ive_lock
;

17 
PFEC_TABLE
 
„c_èbÀs_a˘ive
;

18 
PFEC_TABLE
 
„c_èbÀs_Êush
;

20 
RVOID
 
	$dz_„c_ª∂ay_a˘ive_buf„r
(
PIOREQUEST
 
i‹eque°
)

23 
	}
}

24 
RVOID
 
	$dz_„c_ª∂ay_Êush_buf„r
(
PIOREQUEST
 
i‹eque°
)

26 
PFEC_WRITE
 
„cw
 = 
NULL
;

27 
PIOREQUEST
 
fi‹eque°
 = 
NULL
;

28 
LIST_HEAD
 
ioq_hód_loˇl
;

29 
U64
 
cou¡
;

31 
	`INIT_LIST_HEAD
(&
ioq_hód_loˇl
);

32 
cou¡
 = 0; cou¡ < 
„c_èbÀs_Êush
->
tŸÆ_Êush_˙t
; count++) {

33 
„cw
 = 
	`GET_FEC_FLUSH_ENTRY
(
cou¡
);

34 
„cw
->
°©e
 = 
FECBUF_STATE_REPLAY_STARTED
;

35 
fi‹eque°
 = 
	`dz_„c_¸óã_Êush_io
(
„cw
);

36 i‡(!
fi‹eque°
) {

39 
	`BUG_ON
(1);

44 
	}
}

46 
RVOID
 
	$dz_„c_ª∂ay_io
(
PIOREQUEST
 
i‹eque°
)

49 
	`dz_„c_ª∂ay_Êush_buf„r
(
i‹eque°
);

50 
	`dz_„c_ª∂ay_a˘ive_buf„r
(
i‹eque°
);

51 
	}
}

	@fec_engine/fec_engine_sysfs_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

18 
INT
 
dz_swôch_„c_ígöe
;

19 
INT
 
dz_swôch_bec_ígöe
;

20 
INT
 
dz_swôch_dedu≥_ígöe
;

21 
INT
 
dz_swôch_Æignmít_ígöe
;

25 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

26 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

31 
SIZE
 
TARGET_DEVICE_SIZE
;

33 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

34 
NAME
 
DATA_DISK_DEVICE_NAME
;

35 
OBJECT_LIST
 
globÆ_obje˘_li°
;

36 
U64
 
lba_èbÀ_size
;

37 
U64
 
pba_èbÀ_size
;

38 
U64
 
hash_èbÀ_size
;

39 
U32
 
numbî_of_l⁄gs_f‹_pba
;

40 
U32
 
numbî_of_l⁄gs_f‹_lba
;

41 
U32
 
numbî_of_l⁄gs_f‹_gpba
;

42 
ULONG
 
mëad©a_Êush_öãrvÆ
;

43 
U64
 
mëad©a_lba_èbÀ_size
;

44 
U64
 
mëad©a_lba_lock_èbÀ_size
;

45 
U64
 
avm_sysfs_íåy_‰ì_∑ge_cou¡
;

46 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes
[
DZ_SYSFS_PAGE_SIZE
];

47 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
[
DZ_SYSFS_PAGE_SIZE
];

48 
PPBA_BLOCK
 
pba_èbÀ
;

49 
PHASH_BLOCK
 
hash_èbÀ
;

50 
PLBA_BLOCK
 
lba_èbÀ
;

52 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

53 
ATOMIC64
 
bec_ˇche_hô
;

54 
ATOMIC64
 
bec_ˇche_miss
;

55 
ATOMIC64
 
bec_ˇche_dñëe
;

56 
ULONG
 
bec_size
;

57 
INT
 
bec_cutoff_nodes
;

58 
INT
 
bec_cutoff_≥r˚¡
;

59 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

60 
U64
 
time_Êush_¥ï¨e_°¨t
;

61 
U64
 
time_Êush_°¨t
;

62 
U64
 
time_Êush_íd
;

63 
U64
 
time_„c_wrôe_°¨t
;

64 
U64
 
time_„c_wrôe_swôch
;

65 
PFEC_TABLE
 
„c_èbÀs_Êush
;

66 
ATOMIC64
 
„c_a˘ive_cou¡_£quí˚
;

67 
ATOMIC64
 
„c_‰ì_cou¡_£quí˚
;

68 
ATOMIC64
 
„c_cur_Êush_cou¡
;

69 
ATOMIC64
 
„c_Êush_›s_cou¡
;

70 
ATOMIC64
 
„c_cur_Êush_›s_cou¡
;

71 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

72 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

73 
U64
 
„c_a˘ive_cou¡
;

74 
ATOMIC64
 
dedu≥_disk_ªads
;

75 
ATOMIC64
 
dedu≥_disk_wrôes
;

76 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

77 
ATOMIC64
 
dedu≥_ˇche_hôs
;

78 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

79 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

80 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

81 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

82 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

83 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

84 
USHORT
 
dedu≥_num_thªads
;

85 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

86 
PDZ_THREAD_POOL
 
rdedu≥_thªad_poﬁ
;

87 
PDZ_THREAD_POOL
 
wdedu≥_thªad_poﬁ
;

88 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

89 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

90 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

91 
PDZ_THREAD_POOL
 
Æign_wrôe_thªad_poﬁ
;

92 
PDZ_THREAD_POOL
 
Êush_thªad_poﬁ
;

93 
PDZ_THREAD_POOL
 
mëad©a_Êush_thªad_poﬁ
;

94 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡
;

95 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads
;

96 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
;

97 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
;

98 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
;

99 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

100 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

101 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

102 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

103 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

104 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

105 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

107 
ATOMIC64
 
Æign_iocou¡_disk_ªad
;

108 
ATOMIC64
 
Æign_iocou¡_disk_ªad_öã∫Æ
;

109 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

110 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

111 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

112 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

113 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

114 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

115 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

117 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes
;

118 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
;

119 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
;

120 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
;

121 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

122 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

123 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

124 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

125 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

126 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

127 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

129 
ATOMIC64
 
Æign_iocou¡_disk_wrôe
;

130 
ATOMIC64
 
Æign_iocou¡_disk_wrôe_öã∫Æ
;

131 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

132 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

133 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

134 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

135 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

136 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

137 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

139 
PSUPERBLOCK
 
su≥rblock
;

141 
CHAR
 
avm_sysfs_íåy_gë_„c_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
];

142 
INT
 
	$avm_gë_„c_cou¡îs
(
CHAR
 *
buf
)

144 
INT
 
cou¡
 = 0;

145 
UINT
 
Ωídög_i‹eque°s
;

146 
UINT
 
Ωídög_thªads
;

147 
UINT
 
Ωídög_jobs
;

149 
UINT
 
w≥ndög_i‹eque°s
;

150 
UINT
 
w≥ndög_thªads
;

151 
UINT
 
w≥ndög_jobs
;

153 
UINT
 
Âídög_i‹eque°s
;

154 
UINT
 
Âídög_thªads
;

155 
UINT
 
Âídög_jobs
;

157 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_„c_cou¡îs
;

158 
	`mem£t
(
avm_sysfs_íåy_gë_„c_cou¡îs
, 0, 
DZ_SYSFS_PAGE_SIZE
);

159 
	`mem˝y
(
±r
, "\n", 1);

160 
±r
 += 1;

161 
±r
 +
	`•rötf
(ptr, "==============================================\n");

162 
±r
 +
	`•rötf
(ptr, "FEC ENGINE COUNTERS\n");

163 
±r
 +
	`•rötf
(ptr, "==============================================\n");

164 i‡(!
su≥rblock
) {

165 
±r
 +
	`•rötf
(ptr, "Superblock is NULL");

169 i‡(
dz_swôch_„c_ígöe
 =
DZ_DISABLED
) {

170 
±r
 +
	`•rötf
(ptr, "FEC ENGINE DISABLED");

174 
Ωídög_i‹eque°s
 = 
	`©omic_ªad
(&
ªad_thªad_poﬁ
->
ioq_num_ios
);

175 
Ωídög_thªads
 = 
	`©omic_ªad
(&
ªad_thªad_poﬁ
->
num_a˘ive_thªads
);

176 
Ωídög_jobs
 = 
	`©omic_ªad
(&
ªad_thªad_poﬁ
->
num_jobs
);

178 
w≥ndög_i‹eque°s
 = 
	`©omic_ªad
(&
wrôe_thªad_poﬁ
->
ioq_num_ios
);

179 
w≥ndög_thªads
 = 
	`©omic_ªad
(&
wrôe_thªad_poﬁ
->
num_a˘ive_thªads
);

180 
w≥ndög_jobs
 = 
	`©omic_ªad
(&
wrôe_thªad_poﬁ
->
num_jobs
);

182 
Âídög_i‹eque°s
 = 
	`©omic_ªad
(&
Êush_thªad_poﬁ
->
ioq_num_ios
);

183 
Âídög_thªads
 = 
	`©omic_ªad
(&
Êush_thªad_poﬁ
->
num_a˘ive_thªads
);

184 
Âídög_jobs
 = 
	`©omic_ªad
(&
Êush_thªad_poﬁ
->
num_jobs
);

187 
cou¡
 = 
	`•rötf
(
±r
,

253 (
U64
)
	`READ_COUNTER
(
„c_a˘ive_cou¡_£quí˚
),

254 (
U64
)
	`READ_COUNTER
(
„c_‰ì_cou¡_£quí˚
),

255 
„c_a˘ive_cou¡
,

256 (
U64
)
	`READ_COUNTER
(
„c_Êush_›s_cou¡
),

257 (
U64
)
	`READ_COUNTER
(
„c_cur_Êush_›s_cou¡
),

258 (
U64
)
	`READ_COUNTER
(
„c_mem‹y_ªads_cou¡
),

259 (
U64
)
	`READ_COUNTER
(
„c_f‹w¨ded_ªads_cou¡
),

260 
time_„c_wrôe_°¨t
,

261 
time_„c_wrôe_swôch
,

262 
	`GET_CURRENT_TIME
(),

263 (
U64
)(
	`GET_TIME_DIFF_IN_SECONDS
(
time_„c_wrôe_°¨t
, 
	`GET_CURRENT_TIME
())/1000),

264 (
U64
)(
	`GET_TIME_DIFF_IN_SECONDS
(
time_„c_wrôe_°¨t
, 
time_„c_wrôe_swôch
)/1000),

265 (
U64
)
„c_èbÀs_Êush
->
tŸÆ_Êush_˙t
,

266 (
U64
)
	`READ_COUNTER
(
„c_cur_Êush_cou¡
),

267 (
U64
)
time_Êush_¥ï¨e_°¨t
,

268 (
U64
)
time_Êush_°¨t
,

269 (
U64
)
time_Êush_íd
,

270 
ªad_thªad_poﬁ
->
«me
,

271 
ªad_thªad_poﬁ
->
num_thªads
,

272 
Ωídög_i‹eque°s
,

273 
Ωídög_thªads
,

274 
Ωídög_jobs
,

275 
ªad_thªad_poﬁ
->
quõs˚
,

276 
ªad_thªad_poﬁ
->
ioq_›í
,

278 
wrôe_thªad_poﬁ
->
«me
,

279 
wrôe_thªad_poﬁ
->
num_thªads
,

280 
w≥ndög_i‹eque°s
,

281 
w≥ndög_thªads
,

282 
w≥ndög_jobs
,

283 
wrôe_thªad_poﬁ
->
quõs˚
,

284 
wrôe_thªad_poﬁ
->
ioq_›í
,

286 
Êush_thªad_poﬁ
->
«me
,

287 
Êush_thªad_poﬁ
->
num_thªads
,

288 
Âídög_i‹eque°s
,

289 
Âídög_thªads
,

290 
Âídög_jobs
,

291 
Êush_thªad_poﬁ
->
quõs˚
,

292 
Êush_thªad_poﬁ
->
ioq_›í
,

293 (
U64
)
	`GET_CURRENT_TIME
(),

294 (
U64
)(
	`GET_TIME_DIFF_IN_SECONDS
(
time_Êush_°¨t
, 
	`GET_CURRENT_TIME
())/1000),

295 (
U64
)((
	`GET_TIME_DIFF_IN_SECONDS
(
time_Êush_°¨t
, 
time_Êush_íd
))/1000),

296 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡
),

297 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads
),

298 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
),

299 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
),

300 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
),

301 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes
),

302 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
),

303 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
),

304 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
),

305 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_ªads_∑πül_∑ge
),

306 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_ªads_sögÀ_∑ge
),

307 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
),

308 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
),

309 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_ªads_mu…i_∑ge
),

310 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
),

311 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
),

312 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_wrôes_∑πül_∑ge
),

313 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_wrôes_sögÀ_∑ge
),

314 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
),

315 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
),

316 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_wrôes_mu…i_∑ge
),

317 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
),

318 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
)

328 
	`LOGD
("Buf„∏Byã†u£d = %d\n", 
cou¡
);

332 
	}
}

334 
U64
 
avm_sysfs_íåy_gë_£t_swôch_„c
;

335 
INT
 
	$avm_gë_swôch_„c
(
CHAR
 *
buf
)

337 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_„c
, 
dz_swôch_„c_ígöe
);

338 
	}
}

340 
INT
 
	$avm_£t_swôch_„c
(
U64
 
buf
)

342 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_„c_ígöe
, 
buf
);

343 
	}
}

	@fec_engine/fec_engine_tables.c

9 
	~"„c_ígöe.h
"

11 
ATOMIC64
 
„c_a˘ive_cou¡_£quí˚
;

12 
ATOMIC64
 
„c_‰ì_cou¡_£quí˚
;

13 
BITMAP
 
	g„c_buf„r_bôm≠
;

14 
U32
 
	gnumbî_of_l⁄gs_f‹_„c_buf„r
;

16 
RINT
 
	$dz_bôm≠_öô
(
PBITMAP
 
bôm≠
, 
U64
 
èbÀ_size
)

18 
U32
 
num_l⁄gs
;

19 
	`MEMSET
(
bôm≠
);

20 
	`©omic64_£t
(&
bôm≠
->
num_ôems
, 0);

21 
	`•ö_lock_öô
(&
bôm≠
->
bôm≠_lock
);

23 
num_l⁄gs
 = 
	`BITS_TO_LONGS
(
èbÀ_size
);

24 
bôm≠
->bôm≠ = 
	`dz_kmÆloc
(
num_l⁄gs
 * (), 
GFP_KERNEL
);

25 i‡(!
bôm≠
->bitmap) {

26 
	`LOGFECE
("UnableÅoállocate memory for FEC Buffer bitmap\n");

27 
RETURNF
;

29 
	`mem£t
(
bôm≠
->bôm≠ , 0, 
num_l⁄gs
 * ());

30 
bôm≠
->
num_of_l⁄gs
 = 
num_l⁄gs
;

31 
	`LOGR
("Numbî o‡l⁄g†ªquúed f‹ %Œòi†%u\n", 
èbÀ_size
, 
num_l⁄gs
);

32 
	`LOGFEC
("FEC Buffer Bitmap Initialized\n");

33 
RETURNS
;

34 
	}
}

39 
PVOID
 
	$dz_¸óã_„c_d©a_wrôe_èbÀ
(
U64
 
èbÀ_size
)

41 
	#FEC_DATA_WRITE_TABLE_SIZE
 (
èbÀ_size
 * (
FEC_WRITE
))

	)

43 
PVOID
 
±r
 = 
	`vmÆloc_u£r
(
FEC_DATA_WRITE_TABLE_SIZE
);

44 i‡(!
±r
) {

45 
	`LOGFECE
("UnableÅoállocate memory for FEC DataÅable\n");

46  
NULL
;

48 
	`LOGFEC
("FEC D©®WrôêTabÀ cª©ed o‡sizê%zu byãs\n", (
SIZE
)
FEC_DATA_WRITE_TABLE_SIZE
);

50 
	`log_mem‹y_ußge
(
FEC_DATA_WRITE_TABLE_SIZE
);

51 
	`mem£t
(
±r
, 0, 
èbÀ_size
 * (
FEC_WRITE
));

53 
	`dz_bôm≠_öô
(&
„c_buf„r_bôm≠
, 
èbÀ_size
);

55 #unde‡
FEC_DATA_WRITE_TABLE_SIZE


56  
±r
;

58 
	}
}

60 
RVOID
 
	$dz_de°roy_„c_d©a_wrôe_èbÀ
(
PVOID
 
±r
, 
U64
 
èbÀ_size
)

62 
	#FEC_DATA_WRITE_TABLE_SIZE
 (
èbÀ_size
 * (
FEC_WRITE
))

	)

63 i‡(
±r
) {

64 
U32
 
num_l⁄gs
 = 
„c_buf„r_bôm≠
.
num_of_l⁄gs
;

65 
	`dz_k‰ì
(
„c_buf„r_bôm≠
.
bôm≠
, (
num_l⁄gs
 * ()));

66 
	`v‰ì
(
±r
);

67 
±r
 = 
NULL
;

68 
	`ªdu˚_mem‹y_ußge
(
FEC_DATA_WRITE_TABLE_SIZE
);

69 
	`LOGFEC
("FEC Data Write Table destroyed\n");

71 #unde‡
FEC_DATA_WRITE_TABLE_SIZE


72 
	}
}

74 
S64
 
	$dz_„c_gë_‰ì_buf„r_ödex
(
U64
 
èbÀ_size
)

76 
U64
 
ödex
;

77 
	`•ö_lock
(&
„c_buf„r_bôm≠
.
bôm≠_lock
);

78 
ödex
 = 
	`föd_fú°_zîo_bô
(
„c_buf„r_bôm≠
.
bôm≠
, 
èbÀ_size
);

79 i‡(
ödex
 >
èbÀ_size
) {

80 
	`LOGFECE
("All FEC BuffersáreÉxausted\n");

81 
	`•ö_u∆ock
(&
„c_buf„r_bôm≠
.
bôm≠_lock
);

82 
RETURNF
;

84 
	`ã°_™d_£t_bô
(
ödex
, 
„c_buf„r_bôm≠
.
bôm≠
);

85 
	`ATOMIC64_INC
(
„c_a˘ive_cou¡_£quí˚
);

86 
	`•ö_u∆ock
(&
„c_buf„r_bôm≠
.
bôm≠_lock
);

89  
ödex
;

90 
	}
}

92 
RINT
 
	$dz_„c_put_buf„r_ödex
(
U64
 
ödex
, U64 
èbÀ_size
)

94 
	`•ö_lock
(&
„c_buf„r_bôm≠
.
bôm≠_lock
);

95 i‡(
ödex
 >
èbÀ_size
) {

96 
	`LOGFECE
("Invalid indexÑeceived\n");

97 
	`BUG_ON
(1);

99 i‡(!
	`ã°_™d_˛ór_bô
(
ödex
, 
„c_buf„r_bôm≠
.
bôm≠
)){

100 
	`LOGFECE
("ã°_™d_˛ór_bô faûed f‹ index %Œi\n", 
ödex
);

103 
	`ATOMIC64_INC
(
„c_‰ì_cou¡_£quí˚
);

104 
	`•ö_u∆ock
(&
„c_buf„r_bôm≠
.
bôm≠_lock
);

106  
ödex
;

107 
	}
}

	@fec_engine/fec_engine_thread_pool.c

9 
	~"„c_ígöe.h
"

11 
PCHAR
 
FLUSH_THREAD_POOL_NAME
;

12 
PCHAR
 
FLUSH_THREAD_POOL_SHORT_NAME
;

14 
PCHAR
 
WRITE_THREAD_POOL_NAME
;

15 
PCHAR
 
WRITE_THREAD_POOL_SHORT_NAME
;

17 
PCHAR
 
READ_THREAD_POOL_NAME
;

18 
PCHAR
 
READ_THREAD_POOL_SHORT_NAME
;

20 
USHORT
 
num_ªad_thªads
;

21 
USHORT
 
num_wrôe_thªads
;

22 
USHORT
 
num_Êush_thªads
;

24 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

25 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

26 
PDZ_THREAD_POOL
 
Êush_thªad_poﬁ
;

28 
PDZ_THREAD_POOL
 
„c_ªad_thªad_poﬁ
;

29 
PDZ_THREAD_POOL
 
„c_wrôe_thªad_poﬁ
;

30 
PDZ_THREAD_POOL
 
„c_Êush_thªad_poﬁ
;

32 
RINT
 
	$dz_¸óã_ªad_thªad_poﬁ
(
INT
 
num_thªads
)

34 
PDZ_THREAD_POOL
 
ç
 = 
NULL
;

35 
ç
 = 
	`dz_¸óã_thªad_poﬁ
(

36 
READ_THREAD_POOL_NAME
, 
READ_THREAD_POOL_SHORT_NAME
,

37 
num_thªads
, 
NULL
, NULL, 
dz_„c_Æign_ªad_io
);

39 i‡(
ç
) {

40 
	`LOGFEC
("%s created successfully for %dÅhreads \n",

41 
READ_THREAD_POOL_NAME
, 
num_thªads
);

42 
„c_ªad_thªad_poﬁ
 = 
ç
;

43 
RETURNS
;

45 
	`LOGE
("%†¸óti⁄ faûed \n", 
READ_THREAD_POOL_NAME
);

46 
RETURNF
;

48 
	}
}

50 
RVOID
 
	$dz_de°roy_ªad_thªad_poﬁ
(
VOID
)

52 
	`dz_de°roy_thªad_poﬁ
(
„c_ªad_thªad_poﬁ
);

53 
	}
}

55 
RINT
 
	$dz_¸óã_wrôe_thªad_poﬁ
(
INT
 
num_thªads
)

57 
PDZ_THREAD_POOL
 
ç
 = 
NULL
;

58 
ç
 = 
	`dz_¸óã_thªad_poﬁ
(

59 
WRITE_THREAD_POOL_NAME
, 
WRITE_THREAD_POOL_SHORT_NAME
,

60 
num_thªads
, 
NULL
, NULL, 
dz_„c_Æign_wrôe_io
);

63 i‡(
ç
) {

64 
	`LOGFEC
("%s created successfully for %dÅhreads \n",

65 
WRITE_THREAD_POOL_NAME
, 
num_thªads
);

66 
„c_wrôe_thªad_poﬁ
 = 
ç
;

67 
RETURNS
;

69 
	`LOGE
("%†¸óti⁄ faûed \n", 
WRITE_THREAD_POOL_NAME
);

70 
RETURNF
;

72 
	}
}

74 
RVOID
 
	$dz_de°roy_wrôe_thªad_poﬁ
(
VOID
)

76 
	`dz_de°roy_thªad_poﬁ
(
„c_wrôe_thªad_poﬁ
);

77 
	}
}

79 
RINT
 
	$dz_¸óã_Êush_thªad_poﬁ
(
INT
 
num_thªads
)

81 
PDZ_THREAD_POOL
 
ç
 = 
NULL
;

82 
ç
 = 
	`dz_¸óã_thªad_poﬁ
(

83 
FLUSH_THREAD_POOL_NAME
, 
FLUSH_THREAD_POOL_SHORT_NAME
,

84 
num_thªads
, 
NULL
, NULL, 
dz_„c_Êush_io
);

85 i‡(
ç
) {

86 
	`LOGFEC
("%s created successfully for %dÅhreads \n",

87 
FLUSH_THREAD_POOL_NAME
, 
num_thªads
);

88 
„c_Êush_thªad_poﬁ
 = 
ç
;

89 
RETURNS
;

91 
	`LOGFECE
("%†¸óti⁄ faûed \n", 
FLUSH_THREAD_POOL_NAME
);

92 
RETURNF
;

94  
SUCCESS
;

95 
	}
}

97 
RVOID
 
	$dz_de°roy_Êush_thªad_poﬁ
(
VOID
)

99 
	`dz_de°roy_thªad_poﬁ
(
„c_Êush_thªad_poﬁ
);

100 
	}
}

	@fec_engine/fec_engine_write.c

9 
	~"„c_ígöe.h
"

10 
U64
 
„c_èbÀ_size
;

11 
U64
 
„c_a˘ive_cou¡
;

13 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

15 
SPINLOCK
 
„c_a˘ive_lock
;

16 
SPINLOCK
 
„c_Êush_lock
;

18 
BITMAP
 
„c_buf„r_bôm≠
;

20 
PFEC_TABLE
 
„c_èbÀs_a˘ive
;

21 
PFEC_TABLE
 
„c_èbÀs_Êush
;

22 
PFEC_WRITE
 
„c_èbÀ_a˘ive
;

23 
PIOREQUEST
 
„c_Êush_i‹eque°
;

24 
PLBA_BLOCK
 
lba_èbÀ
;

26 
U64
 
time_„c_wrôe_°¨t
;

27 
U64
 
time_„c_wrôe_swôch
;

28 
U64
 
„c_a˘ive_thªshﬁd
;

39 
ölöe
 
PFEC_WRITE
 
	$GET_FEC_SINGLE_FREE_BUFFER
(
VOID
)

41 
U64
 
tmp_cou¡
 = 0;

42 
PFEC_WRITE
 
wrôe_íåy
 = 
NULL
;

43 
U64
 
ödex
 = 0;

46 
	`•ö_lock
(&
„c_a˘ive_lock
);

48 
tmp_cou¡
 = 
„c_a˘ive_cou¡
++;

50 
ödex
 = 
	`dz_„c_gë_‰ì_buf„r_ödex
(
„c_èbÀ_size
);

55 i‡((
ödex
 =
FAILURE
Ë|| (
„c_a˘ive_cou¡
 > 
„c_a˘ive_thªshﬁd
)) {

57 
	`GET_TIME_STAMP
(
time_„c_wrôe_swôch
);

58 
„c_èbÀs_Êush
->
Êush_ö_¥ogªss
 = 
TRUE
;

59 
„c_a˘ive_cou¡
 = 0;

60 
	`•ö_u∆ock
(&
„c_a˘ive_lock
);

61 
	`LOGFEC
("Time To start flushÅhread. Index = %lli, Active Count = %lli, Threshold = %lli\n",

62 
ödex
, 
„c_a˘ive_cou¡
, 
„c_a˘ive_thªshﬁd
);

64 
	`dz_„c_¸óã_Êush_i‹eque°
();

66 i‡(
ödex
 =
FAILURE
) {

67 
	`SLEEP_MILLI_SECONDS
(3000);

69 
	`SLEEP_MILLI_SECONDS
(1000);

71 
RETURNN
;

73 
wrôe_íåy
 = 
	`GET_FEC_ACTIVE_WRITE_ENTRY
(
ödex
);

74 i‡(!
wrôe_íåy
) {

75 
	`LOGFECE
("Write Entry NULL. Index = %lli, Active Count = %lli, Threshold = %lli\n",

76 
ödex
, 
„c_a˘ive_cou¡
, 
„c_a˘ive_thªshﬁd
);

77 
	`SLEEP_MILLI_SECONDS
(1000);

78 
RETURNN
;

80 
	`MEMSET
(
wrôe_íåy
);

81 
wrôe_íåy
->
°©e
 = 
FECBUF_STATE_ALLOCATED
;

82 
wrôe_íåy
->
ödex
 = index;

84 i‡(
„c_èbÀs_Êush
->
Êush_ö_¥ogªss
) {

85 
	`DELAY_MILLI_SECONDS
(2);

94 i‡(
„c_a˘ive_cou¡
 == 1) {

95 
	`GET_TIME_STAMP
(
time_„c_wrôe_°¨t
);

98 
	`•ö_u∆ock
(&
„c_a˘ive_lock
);

100  
wrôe_íåy
;

101 
	}
}

108 
ölöe
 
PFEC_WRITE
 
	$GET_FEC_MULTIPLE_FREE_BUFFERS
(
INT
 
num_bufs
)

111 
U64
 
föÆ_cou¡
 = 0;

112 
PFEC_WRITE
 
wrôe_íåy
 = 
NULL
;

114 
	`•ö_lock
(&
„c_a˘ive_lock
);

115 
föÆ_cou¡
 = 
„c_a˘ive_cou¡
 + 
num_bufs
;

118 i‡(
föÆ_cou¡
 > 
„c_èbÀ_size
) {

124 i‡(
„c_èbÀs_Êush
->
Êush_ö_¥ogªss
) {

127 
	`•ö_u∆ock
(&
„c_a˘ive_lock
);

129 
	`SLEEP_MILLI_SECONDS
(1);

130 
RETURNN
;

135 
	`dz_„c_Êush_swôchovî
();

136 
„c_a˘ive_cou¡
 +
num_bufs
;

137 
„c_èbÀs_Êush
->
Êush_ö_¥ogªss
 = 
TRUE
;

140 
wrôe_íåy
 = 
	`GET_FEC_ACTIVE_WRITE_ENTRY
(0);

141 
wrôe_íåy
->
°©e
 = 
FECBUF_STATE_ALLOCATED
;

142 
	`•ö_u∆ock
(&
„c_a˘ive_lock
);

144 
	`LOGD
("Time To start flushÅhread\n");

145 
	`dz_q_i‹eque°
(
„c_Êush_i‹eque°
->
i‹_thªad_poﬁ
, fec_flush_iorequest);

146  
wrôe_íåy
;

148 
wrôe_íåy
 = 
	`GET_FEC_ACTIVE_WRITE_ENTRY
(
„c_a˘ive_cou¡
);

149 
wrôe_íåy
->
°©e
 = 
FECBUF_STATE_ALLOCATED
;

150 
„c_a˘ive_cou¡
 = 
föÆ_cou¡
;

151 
	`•ö_u∆ock
(&
„c_a˘ive_lock
);

153  
wrôe_íåy
;

154 
	}
}

155 
RVOID
 
	$dz_„c_wrôe_io
(
PIOREQUEST
 
i‹eque°
)

158 
	`dz_„c_Æign_wrôe_io
(
i‹eque°
);

160 
	}
}

	@hash_engine/hash_engine_murmur3.c

11 
	~"¥ŸŸy≥s.h
"

12 
	~"hash_ígöe_murmur3.h
"

18 #i‡
deföed
(
_MSC_VER
)

20 
	#FORCE_INLINE
 
__f‹˚ölöe


	)

22 
	#BIG_CONSTANT
(
x
Ë(x)

	)

28 
	#FORCE_INLINE
 
	`__©åibuã__
((
Æways_ölöe
))

	)

30 
ölöe
 
uöt32_t
 
	$rŸl32
(
uöt32_t
 
x
, 
öt8_t
 
r
)

32  (
x
 << 
r
) | (x >> (32 -Ñ));

33 
	}
}

35 
ölöe
 
uöt64_t
 
	$rŸl64
(
uöt64_t
 
x
, 
öt8_t
 
r
)

37  (
x
 << 
r
) | (x >> (64 -Ñ));

38 
	}
}

39 
	#ROTL32
(
x
,
y
Ë
	`rŸl32
(x,y)

	)

40 
	#ROTL64
(
x
,
y
Ë
	`rŸl64
(x,y)

	)

41 
	#BIG_CONSTANT
(
x
Ë(x##
LLU
)

	)

51 
uöt32_t
 
	$gëblock_32bô
(c⁄° 
uöt32_t
 * 
p
, 
i
)

53  
p
[
i
];

54 
	}
}

57 
uöt64_t
 
	$gëblock_64bô
(c⁄° 
uöt64_t
 * 
p
, 
i
)

59  
p
[
i
];

60 
	}
}

65 
uöt32_t
 
	$fmix_32bô
(
uöt32_t
 
h
)

67 
h
 ^= h >> 16;

68 
h
 *= 0x85ebca6b;

69 
h
 ^= h >> 13;

70 
h
 *= 0xc2b2ae35;

71 
h
 ^= h >> 16;

73  
h
;

74 
	}
}

77 
uöt64_t
 
	$fmix_64bô
(
uöt64_t
 
k
)

79 
k
 ^= k >> 33;

80 
k
 *
	`BIG_CONSTANT
(0xff51afd7ed558ccd);

81 
k
 ^= k >> 33;

82 
k
 *
	`BIG_CONSTANT
(0xc4ceb9fe1a85ec53);

83 
k
 ^= k >> 33;

85  
k
;

86 
	}
}

89 
	$MurmurHash3_x86_32
(c⁄° *
key
, 
Àn
, 
uöt32_t
 
£ed
, *
out
)

91 c⁄° 
uöt8_t
 *
d©a
 = (c⁄° uöt8_t*)
key
;

92 c⁄° 
nblocks
 = 
Àn
 / 4;

93 
i
 = 0;

94 c⁄° 
uöt8_t
 *
èû
 = 
NULL
;

95 
uöt32_t
 
k1
 = 0;

96 
uöt32_t
 
h1
 = 
£ed
;

98 
uöt32_t
 
c1
 = 0xcc9e2d51;

99 
uöt32_t
 
c2
 = 0x1b873593;

101 c⁄° 
uöt32_t
 * 
blocks
 = (c⁄° uöt32_à*)(
d©a
 + 
nblocks
*4);

103 
i
 = -
nblocks
; i; i++)

105 
uöt32_t
 
k1
 = 
	`gëblock_32bô
(
blocks
,
i
);

107 
k1
 *
c1
;

108 
k1
 = 
	`ROTL32
(k1,15);

109 
k1
 *
c2
;

111 
h1
 ^
k1
;

112 
h1
 = 
	`ROTL32
(h1,13);

113 
h1
 = h1*5+0xe6546b64;

117 
èû
 = (c⁄° 
uöt8_t
*)(
d©a
 + 
nblocks
*4);

118 
k1
 = 0;

120 
Àn
 & 3)

122 3: 
k1
 ^
èû
[2] << 16;

123 2: 
k1
 ^
èû
[1] << 8;

124 1: 
k1
 ^
èû
[0];

125 
k1
 *
c1
; k1 = 
	`ROTL32
(k1,15); k1 *
c2
; 
h1
 ^= k1;

128 
h1
 ^
Àn
;

129 
h1
 = 
	`fmix_32bô
(h1);

130 *(
uöt32_t
*)
out
 = 
h1
;

131 
	}
}

132 
EXPORT_SYMBOL
(
MurmurHash3_x86_32
);

135 
	$MurmurHash3_x86_128
(c⁄° *
key
, c⁄° 
Àn
, 
uöt32_t
 
£ed
,

136 *
out
 )

138 c⁄° 
uöt8_t
 * 
d©a
 = (c⁄° uöt8_t*)
key
;

139 c⁄° 
nblocks
 = 
Àn
 / 16;

140 
i
 = 0;

141 c⁄° 
uöt8_t
 * 
èû
;

142 
uöt32_t
 
h1
 = 
£ed
;

143 
uöt32_t
 
h2
 = 
£ed
;

144 
uöt32_t
 
h3
 = 
£ed
;

145 
uöt32_t
 
h4
 = 
£ed
;

146 
uöt32_t
 
k1
 = 0;

147 
uöt32_t
 
k2
 = 0;

148 
uöt32_t
 
k3
 = 0;

149 
uöt32_t
 
k4
 = 0;

151 
uöt32_t
 
c1
 = 0x239b961b;

152 
uöt32_t
 
c2
 = 0xab0e9789;

153 
uöt32_t
 
c3
 = 0x38b34ae5;

154 
uöt32_t
 
c4
 = 0xa1e38b93;

157 c⁄° 
uöt32_t
 * 
blocks
 = (c⁄° uöt32_à*)(
d©a
 + 
nblocks
*16);

159 
i
 = -
nblocks
; i; i++)

161 
uöt32_t
 
k1
 = 
	`gëblock_32bô
(
blocks
,
i
*4+0);

162 
uöt32_t
 
k2
 = 
	`gëblock_32bô
(
blocks
,
i
*4+1);

163 
uöt32_t
 
k3
 = 
	`gëblock_32bô
(
blocks
,
i
*4+2);

164 
uöt32_t
 
k4
 = 
	`gëblock_32bô
(
blocks
,
i
*4+3);

166 
k1
 *
c1
; k1 = 
	`ROTL32
(k1,15); k1 *
c2
; 
h1
 ^= k1;

167 
h1
 = 
	`ROTL32
(h1,19); h1 +
h2
; h1 = h1*5+0x561ccd1b;

168 
k2
 *
c2
; k2 = 
	`ROTL32
(k2,16); k2 *
c3
; 
h2
 ^= k2;

169 
h2
 = 
	`ROTL32
(h2,17); h2 +
h3
; h2 = h2*5+0x0bcaa747;

170 
k3
 *
c3
; k3 = 
	`ROTL32
(k3,17); k3 *
c4
; 
h3
 ^= k3;

171 
h3
 = 
	`ROTL32
(h3,15); h3 +
h4
; h3 = h3*5+0x96cd1c35;

172 
k4
 *
c4
; k4 = 
	`ROTL32
(k4,18); k4 *
c1
; 
h4
 ^= k4;

173 
h4
 = 
	`ROTL32
(h4,13); h4 +
h1
; h4 = h4*5+0x32ac3b17;

176 
èû
 = (c⁄° 
uöt8_t
*)(
d©a
 + 
nblocks
*16);

178 
k1
 = 0;

179 
k2
 = 0;

180 
k3
 = 0;

181 
k4
 = 0;

183 
Àn
 & 15)

185 15: 
k4
 ^
èû
[14] << 16;

186 14: 
k4
 ^
èû
[13] << 8;

187 13: 
k4
 ^
èû
[12] << 0;

188 
k4
 *
c4
; k4 = 
	`ROTL32
(k4,18); k4 *
c1
; 
h4
 ^= k4;

190 12: 
k3
 ^
èû
[11] << 24;

191 11: 
k3
 ^
èû
[10] << 16;

192 10: 
k3
 ^
èû
[ 9] << 8;

193 9: 
k3
 ^
èû
[ 8] << 0;

194 
k3
 *
c3
; k3 = 
	`ROTL32
(k3,17); k3 *
c4
; 
h3
 ^= k3;

196 8: 
k2
 ^
èû
[ 7] << 24;

197 7: 
k2
 ^
èû
[ 6] << 16;

198 6: 
k2
 ^
èû
[ 5] << 8;

199 5: 
k2
 ^
èû
[ 4] << 0;

200 
k2
 *
c2
; k2 = 
	`ROTL32
(k2,16); k2 *
c3
; 
h2
 ^= k2;

202 4: 
k1
 ^
èû
[ 3] << 24;

203 3: 
k1
 ^
èû
[ 2] << 16;

204 2: 
k1
 ^
èû
[ 1] << 8;

205 1: 
k1
 ^
èû
[ 0] << 0;

206 
k1
 *
c1
; k1 = 
	`ROTL32
(k1,15); k1 *
c2
; 
h1
 ^= k1;

210 
h1
 ^
Àn
; 
h2
 ^Àn; 
h3
 ^Àn; 
h4
 ^=Üen;

212 
h1
 +
h2
; h1 +
h3
; h1 +
h4
;

213 
h2
 +
h1
; 
h3
 +h1; 
h4
 += h1;

215 
h1
 = 
	`fmix_32bô
(h1);

216 
h2
 = 
	`fmix_32bô
(h2);

217 
h3
 = 
	`fmix_32bô
(h3);

218 
h4
 = 
	`fmix_32bô
(h4);

220 
h1
 +
h2
; h1 +
h3
; h1 +
h4
;

221 
h2
 +
h1
; 
h3
 +h1; 
h4
 += h1;

223 ((
uöt32_t
*)
out
)[0] = 
h1
;

224 ((
uöt32_t
*)
out
)[1] = 
h2
;

225 ((
uöt32_t
*)
out
)[2] = 
h3
;

226 ((
uöt32_t
*)
out
)[3] = 
h4
;

227 
	}
}

228 
EXPORT_SYMBOL
(
MurmurHash3_x86_128
);

231 
	$MurmurHash3_x64_128
(c⁄° *
key
, c⁄° 
size_t
 
Àn
, c⁄° 
uöt32_t
 
£ed
,

232 *
out
 )

234 c⁄° 
uöt8_t
 * 
d©a
 = (c⁄° uöt8_t*)
key
;

235 c⁄° 
size_t
 
nblocks
 = 
Àn
 / 16;

236 
i
 = 0;

237 c⁄° 
uöt8_t
 *
èû
 = 
NULL
;

238 
uöt64_t
 
h1
 = 
£ed
;

239 
uöt64_t
 
h2
 = 
£ed
;

240 
uöt64_t
 
k1
 = 0;

241 
uöt64_t
 
k2
 = 0;

243 
uöt64_t
 
c1
 = 
	`BIG_CONSTANT
(0x87c37b91114253d5);

244 
uöt64_t
 
c2
 = 
	`BIG_CONSTANT
(0x4cf5ad432745937f);

246 c⁄° 
uöt64_t
 * 
blocks
 = (c⁄° uöt64_à*)(
d©a
);

248 
i
 = 0; i < 
nblocks
; i++)

250 
uöt64_t
 
k1
 = 
	`gëblock_64bô
(
blocks
,
i
*2+0);

251 
uöt64_t
 
k2
 = 
	`gëblock_64bô
(
blocks
,
i
*2+1);

253 
k1
 *
c1
; k1 = 
	`ROTL64
(k1,31); k1 *
c2
; 
h1
 ^= k1;

255 
h1
 = 
	`ROTL64
(h1,27); h1 +
h2
; h1 = h1*5+0x52dce729;

257 
k2
 *
c2
; k2 = 
	`ROTL64
(k2,33); k2 *
c1
; 
h2
 ^= k2;

259 
h2
 = 
	`ROTL64
(h2,31); h2 +
h1
; h2 = h2*5+0x38495ab5;

263 
èû
 = (c⁄° 
uöt8_t
*)(
d©a
 + 
nblocks
*16);

265 
k1
 = 0;

266 
k2
 = 0;

268 
Àn
 & 15)

270 15: 
k2
 ^(
uöt64_t
)(
èû
[14]) << 48;

271 14: 
k2
 ^(
uöt64_t
)(
èû
[13]) << 40;

272 13: 
k2
 ^(
uöt64_t
)(
èû
[12]) << 32;

273 12: 
k2
 ^(
uöt64_t
)(
èû
[11]) << 24;

274 11: 
k2
 ^(
uöt64_t
)(
èû
[10]) << 16;

275 10: 
k2
 ^(
uöt64_t
)(
èû
[ 9]) << 8;

276 9: 
k2
 ^(
uöt64_t
)(
èû
[ 8]) << 0;

277 
k2
 *
c2
; k2 = 
	`ROTL64
(k2,33); k2 *
c1
; 
h2
 ^= k2;

279 8: 
k1
 ^(
uöt64_t
)(
èû
[ 7]) << 56;

280 7: 
k1
 ^(
uöt64_t
)(
èû
[ 6]) << 48;

281 6: 
k1
 ^(
uöt64_t
)(
èû
[ 5]) << 40;

282 5: 
k1
 ^(
uöt64_t
)(
èû
[ 4]) << 32;

283 4: 
k1
 ^(
uöt64_t
)(
èû
[ 3]) << 24;

284 3: 
k1
 ^(
uöt64_t
)(
èû
[ 2]) << 16;

285 2: 
k1
 ^(
uöt64_t
)(
èû
[ 1]) << 8;

286 1: 
k1
 ^(
uöt64_t
)(
èû
[ 0]) << 0;

287 
k1
 *
c1
; k1 = 
	`ROTL64
(k1,31); k1 *
c2
; 
h1
 ^= k1;

291 
h1
 ^
Àn
; 
h2
 ^=Üen;

293 
h1
 +
h2
;

294 
h2
 +
h1
;

296 
h1
 = 
	`fmix_64bô
(h1);

297 
h2
 = 
	`fmix_64bô
(h2);

299 
h1
 +
h2
;

300 
h2
 +
h1
;

302 ((
uöt64_t
*)
out
)[0] = 
h1
;

303 ((
uöt64_t
*)
out
)[1] = 
h2
;

304 
	}
}

305 
EXPORT_SYMBOL
(
MurmurHash3_x64_128
);

	@hash_engine/hash_engine_murmur3.h

1 #i‚de‡
_MURMURHASH3_H_


2 
	#_MURMURHASH3_H_


	)

9 
	~<löux/ty≥s.h
>

10 
	~<löux/moduÀ.h
>

12 
MurmurHash3_x86_32
(c⁄° *
key
, 
Àn
, 
uöt32_t
 
£ed
, *
out
);

14 
MurmurHash3_x86_128
(c⁄° *
key
, 
Àn
, 
uöt32_t
 
£ed
, *
out
);

16 
MurmurHash3_x64_128
(c⁄° *
key
, 
size_t
 
Àn
, 
uöt32_t
 
£ed
, *
out
);

	@headers/about.h

1 
	#DZ_AISA_VERSION_MAJOR
 3

	)

2 
	#DZ_AISA_VERSION_MINOR
 10

	)

3 
	#DZ_AISA_VERSION_PATCH
 101

	)

4 
	#DZ_AISA_VERSION_RELEASE
 "a"

	)

6 
	#GET_STR
(
°r
Ë#°r

	)

9 
	#DZ_VERSION
 "1.0.0"

	)

10 
	#DZ_MODULE_LICENSE
 "GPL"

	)

11 
	#DZ_MODULE_AUTHOR
 "D©umSo· Sy°ems"

	)

13 
	#DZ_SYSFS_MODULE_LICENSE
 "GPL"

	)

14 
	#DZ_SYSFS_MODULE_AUTHOR
 "D©umSo· Sy°ems"

	)

	@headers/alignment_engine.h

1 #i‚de‡
_ALIGNMENT_ENGINE_H_


2 
	#_ALIGNMENT_ENGINE_H_


	)

4 
	~"ty≥s.h
"

5 
	~"ma¸os.h
"

6 
	~"mëad©a_ígöe.h
"

7 
	~"i‹eque°.h
"

10 
RINT
 
dz_¥o˚ss_u«lig√d_d©a_‰om_bio_hód
(
PIOREQUEST
 
pi‹eque°
,

11 
PBVEC_HOLDER
 
bvec_hﬁdî
, 
UINT
 
∑πül_d©a_hód
, UINT 
Æig√d_d©a
,

12 
UINT
 
∑πül_d©a_èû
, 
SECTOR
 
£˘‹
);

14 
RINT
 
dz_¥o˚ss_∑πül_u«lig√d_d©a_‰om_bio_hód
(
PIOREQUEST
 
pi‹eque°
,

15 
PBVEC_HOLDER
 
bvec_hﬁdî
, 
UINT
 
∑πül_d©a
, 
SECTOR
 
£˘‹
);

17 
RINT
 
dz_¥o˚ss_∑πül_u«lig√d_d©a_‰om_bio_èû
(
PIOREQUEST
 
pi‹eque°
,

18 
PBVEC_HOLDER
 
bvec_hﬁdî
, 
INT
 
∑πül_d©a
, 
SECTOR
 
£˘‹
);

20 
RINT
 
dz_¥o˚ss_Æig√d_d©a_‰om_bio_èû
(
PIOREQUEST
 
pi‹eque°
,

21 
PBVEC_HOLDER
 
bvec_hﬁdî
, 
UINT
 
Æig√d_d©a_byãs
, 
SECTOR
 
£˘‹
);

23 
RINT
 
dz_¥o˚ss_Æignmít_f‹_mu…ùÀ_blocks_io
(
PIOREQUEST
 
pi‹eque°
);

24 
RINT
 
dz_¥o˚ss_Æignmít_f‹_∑πül_block_io
(
PIOREQUEST
 
pi‹eque°
);

25 
RINT
 
dz_¥o˚ss_Æignmít_f‹_sögÀ_block_io
(
PIOREQUEST
 
pi‹eque°
);

26 
RINT
 
dz_wrôe_•lô_bio_wôh_Æignmít_¥o˚ssög
(
PIOREQUEST
 
pi‹eque°
);

28 
RVOID
 
dz_Æign_ªad_io
(
PIOREQUEST
 
pi‹eque°
);

29 
RVOID
 
dz_Æign_wrôe_io
(
PIOREQUEST
 
pi‹eque°
);

31 
RVOID
 
dz_Æign_ªad_f‹_∑πül_block
(
PIOREQUEST
 
pi‹eque°
);

32 
RVOID
 
dz_Æign_ªad_f‹_sögÀ_block
(
PIOREQUEST
 
pi‹eque°
);

33 
RINT
 
dz_Æign_ªad_f‹_mu…i_block
(
PIOREQUEST
 
pi‹eque°
);

35 
RINT
 
dz_Æign_ªad_sögÀ_block_‰om_øw_disk_sync_öã∫Æ
(
PIOREQUEST
 
i‹eque°
, 
SECTOR
 
£˘‹
 );

36 
RINT
 
dz_Æign_ªad_sögÀ_block_‰om_øw_disk_sync
(
PIOREQUEST
 
i‹eque°
, 
SECTOR
 
£˘‹
);

38 
RVOID
 
dz_Æign_wrôe_f‹_∑πül_block
(
PIOREQUEST
 
∑ª¡_i‹eque°
);

39 
RVOID
 
dz_Æign_wrôe_f‹_sögÀ_block
(
PIOREQUEST
 
i‹eque°
);

40 
RVOID
 
dz_Æign_wrôe_f‹_mu…i_block
(
PIOREQUEST
 
pi‹eque°
);

42 
INT
 
dz_Æign_ígöe_öô
(
VOID
);

43 
RVOID
 
dz_Æign_ígöe_exô
(
VOID
);

	@headers/bec_engine.h

9 #i‚de‡
_BEC_ENGINE_H_


10 
	#_BEC_ENGINE_H_


	)

11 
	~"dedu≥_ígöe.h
"

12 
	~"thªad_poﬁ_ígöe.h
"

14 
	#BEC_CLEARED
 
SUCCESS


	)

15 
	#BEC_FAILED_TO_CLEAR
 1

	)

16 
	#BEC_PARTIAL_CLEARED
 2

	)

18 
	#BEC_REQUEST_TYPE_ADD_READ
 1

19 
	#BEC_REQUEST_TYPE_ADD_WRITE
 2

20 
	#BEC_REQUEST_TYPE_DELETE
 3

	)

22 
	#BEC_PAGE_EVICT_PERCENTAGE
 10

	)

24 
	#BEC_ADD_NODE_TO_LIST
(
node
) \

25 
	`li°_add_èû
(&((
node
)->
pba_li°
), &
bec_li°_hód
)

	)

28 
	sdz_bec_ªque°_s
 {

29 
UCHAR
 
	mty≥
;

30 
U64
 
	mpba_ödex
;

31 
PBIO
 
	mbio
;

32 
LIST_HEAD
 
	mioq
;

34 } 
	tBECREQUEST
, 
	tBEC_REQUEST
, *
	tPBECREQUEST
, *
	tPBEC_REQUEST
;

36 
	sdz_bec_node_s
 {

38 
UINT
 
	md©a_size
;

39 
UINT
 
	msize
;

42 
PPAGE
 
	m∑ge
;

43 
PPAGE
 
	md©a_∑ge
;

45 
U64
 
	mpba_ödex
;

46 
LIST_HEAD
 
	mpba_li°
;

47 } 
	tBEC_NODE
, *
	tPBEC_NODE
, 
	tPBA_CACHE_NODE
, *
	tPPBA_CACHE_NODE
;

50 
PBEC_NODE
 
dz_bec_ødix_åì_node_föd
(
U64
 
pba_ödex
);

51 
RINT
 
dz_bec_ødix_åì_node_ö£π
(
PPBA_CACHE_NODE
 
node_íåy
);

52 
RINT
 
dz_bec_ødix_åì_node_dñëe
(
U64
 
pba_ödex
);

54 
RINT
 
dz_bec_ígöe_öô
(
VOID
);

55 
RINT
 
dz_bec_ígöe_exô
(
VOID
);

57 
RVOID
 
dz_bec_io
(
PIOREQUEST
 
i‹eque°
);

58 
RVOID
 
dz_bec_ªad_io
(
PIOREQUEST
 
i‹eque°
);

59 
RVOID
 
dz_bec_wrôe_io
(
PIOREQUEST
 
i‹eque°
);

60 
BOOL
 
dz_bec_pba_∑ge_lookup
(
U64
 
pba_ödex
, 
PBIO
 
bio
);

61 
RVOID
 
dz_bec_wrôe_biod⁄e
(
PBIO
 
bio
, 
INT
 
îr‹
);

62 
RINT
 
dz_bec_pba_∑ge_add_ªad
(
U64
 
pba_ödex
, 
PIOREQUEST
 
i‹eque°
 , 
UINT
 
d©a_size
);

63 
RINT
 
dz_bec_pba_∑ge_add_ªad_wôhout_„c
(
U64
 
pba_ödex
, 
PIOREQUEST
 
i‹eque°
);

64 
RINT
 
dz_bec_pba_∑ge_add_wrôe
(
U64
 
pba_ödex
, 
PIOREQUEST
 
i‹eque°
 , 
UINT
 
d©a_size
);

65 
RINT
 
dz_bec_pba_∑ge_dñëe
(
U64
 
pba_ödex
, 
PIOREQUEST
 
i‹eque°
 , 
UINT
 
d©a_size
);

66 
RINT
 
dz_bec_pba_∑ª¡_∑ge_add
(
U64
 
pba_ödex
, 
PBIO
 
bio
 , 
UINT
 
d©a_size
);

67 
RINT
 
dz_bec_˛ór
(
INT
 
node_cou¡_cutoff
);

68 
RVOID
 
dz_bec_upd©e_‰om_disk
(
U64
 
pba_ödex
, 
UINT
 
d©a_size
);

70 
RINT
 
dz_¸óã_bec_node_poﬁ
(
SIZE
 
num_nodes
);

71 
RVOID
 
dz_de°roy_bec_node_poﬁ
(
SIZE
 
num_nodes
);

72 
RPVOID
 
dz_bec_node_Æloc
(
VOID
);

73 
RVOID
 
dz_bec_node_‰ì
(
PBEC_NODE
 
node
);

75 
RINT
 
dz_¸óã_bec_∑ge_poﬁ
(
SIZE
 
num_∑ges
);

76 
RVOID
 
dz_de°roy_bec_∑ge_poﬁ
(
SIZE
 
num_∑ges
);

77 
RPVOID
 
dz_bec_∑ge_Æloc
(
VOID
);

78 
RVOID
 
dz_bec_∑ge_‰ì
(
PPAGE
 
∑ge
);

80 
RINT
 
dz_¸óã_bec_ªque°_poﬁ
(
UINT
 
num_ªque°s
);

81 
RVOID
 
dz_de°roy_bec_ªque°_poﬁ
(
UINT
 
num_ªque°s
);

82 
RPVOID
 
dz_bec_ªque°_Æloc
(
VOID
);

83 
RVOID
 
dz_bec_ªque°_‰ì
(
PVOID
 
ªque°
);

85 
RVOID
 
dz_bec_¥o˚ed_pba_∑ge_add_ªad
(
PIOREQUEST
 
i‹eque°
);

86 
RVOID
 
dz_bec_¥o˚ed_pba_∑ge_add_wrôe
(
PIOREQUEST
 
i‹eque°
);

87 
RVOID
 
dz_bec_¥o˚ed_pba_∑ge_dñëe
(
PIOREQUEST
 
i‹eque°
);

89 
VOID
 
dz_bec_¥öt_cou¡îs
(VOID);

90 
VOID
 
dz_bec_öô_cou¡îs
(VOID);

	@headers/bio_engine.h

9 #i‚de‡
_BIO_ENGINE_H_


10 
	#_BIO_ENGINE_H_


	)

12 
	~"ty≥s.h
"

13 
	~"ma¸os.h
"

14 
	~"dedu≥_ígöe.h
"

15 
	~"d©a_°ru˘uªs.h
"

16 
	~"„c_ígöe.h
"

17 
	~"¥ŸŸy≥s.h
"

19 #ifde‡
DZ_KERNEL_VERSION_4


20 
RVOID
 
dz_ªad_biod⁄e_sync
(
PBIO
 
bio
);

21 
RVOID
 
dz_ªad_biod⁄e
(
PBIO
 
bio
);

22 
RVOID
 
dz_wrôe_biod⁄e
(
PBIO
 
bio
);

23 
RVOID
 
dz_wrôe_biod⁄e_sync
(
PBIO
 
bio
);

24 
RVOID
 
dz_bec_ªad_biod⁄e
(
PBIO
 
bio
);

26 
RVOID
 
dz_ªad_biod⁄e_sync
(
PBIO
 
bio
, 
îr‹
);

27 
RVOID
 
dz_ªad_biod⁄e
(
PBIO
 
bio
, 
îr‹
);

28 
RVOID
 
dz_wrôe_biod⁄e
(
PBIO
 
bio
, 
INT
 
îr‹
);

29 
RVOID
 
dz_wrôe_biod⁄e_sync
(
PBIO
 
bio
, 
INT
 
îr‹
);

30 
RVOID
 
dz_bec_ªad_biod⁄e
(
PBIO
 
bio
, 
INT
 
îr‹
);

34 
RINT
 
dz_ªad_d©a_‰om_øw_disk
(
PBLOCK_DEVICE
, 
SECTOR
, 
PDATA_PAGES_T
, 
UINT
);

35 
RINT
 
dz_ªad_d©a_‰om_øw_disk_sync
(
PBLOCK_DEVICE
, 
SECTOR
, 
PDATA_PAGES_T
, 
UINT
);

36 
PPAGE
 
dz_ªad_∑ge_‰om_øw_disk_sync
(
PBLOCK_DEVICE
 ,
SECTOR
 , 
UINT
);

37 
PPAGE
 
dz_ªad_∑ge_sync
(
PBIO
);

38 
RINT
 
dz_ªad_d©a_∑ges_‰om_øw_disk
(
PBLOCK_DEVICE
, 
SECTOR
, 
PDATA_PAGES_T
, 
UINT
);

39 
RINT
 
dz_ªad_•lô_bio_wôhout_Æignmít_¥o˚ssög
(
PIOREQUEST
 
pi‹eque°
);

40 
RINT
 
dz_ªad_d©a
(
PIOREQUEST
 
i‹eque°
, 
PDATA_PAGES
 
d©a_∑ges
);

41 
RINT
 
dz_ªad_d©a_‰om_block_devi˚
(
PIOREQUEST
 , 
CHAR
 *, 
PDATA_PAGES
 );

42 
RINT
 
dz_gíî©e_ªad_io
(
VOID
);

44 
RINT
 
dz_wrôe_d©a_to_øw_disk
(
PBLOCK_DEVICE
 , 
SECTOR
 , 
PVOID
 , 
UINT
 );

45 
RINT
 
dz_wrôe_d©a_to_øw_disk_sync
(
PBLOCK_DEVICE
 , 
SECTOR
 , 
PVOID
 , 
UINT
);

46 
RINT
 
dz_wrôe_∑ge_to_øw_disk_sync
(
PBLOCK_DEVICE
 , 
SECTOR
 , 
UINT
, 
PPAGE
);

47 
RINT
 
dz_wrôe_d©a_wôh_doubÀ_∑ge_to_øw_disk
(
PBLOCK_DEVICE
 , 
SECTOR
 , 
PVOID
 , 
UINT
 );

48 
RINT
 
dz_wrôe_d©a_∑ges_to_øw_disk
(
PBLOCK_DEVICE
 , 
SECTOR
 , 
PDATA_PAGES_T
, 
UINT
);

49 
RINT
 
dz_wrôe_d©a
(
PIOREQUEST
 );

50 
RINT
 
dz_wrôe_d©a_to_block_devi˚
(
PIOREQUEST
, 
CHAR
 * );

51 
RINT
 
dz_gíî©e_wrôe_io
(
VOID
);

52 
RINT
 
dz_gíî©e_zîo_io
(
VOID
);

53 
RINT
 
dz_gíî©e_wrôe_vîify_io
(
VOID
);

55 
RINT
 
dz_ªad_modify_wrôe
(
PBLOCK_DEVICE
, 
SECTOR
 
§c
, SECTOR 
d°
, 
PVOID
, 
UINT
);

	@headers/counters.h

1 #i‚de‡
AISA_COUNTERS_H


2 
	#AISA_COUNTERS_H


	)

4 
	~"ty≥s.h
"

5 
	~"hash_ígöe_murmur3.h
"

6 
	~"ma¸os.h
"

8 
	sdz_ba£_ígöe_cou¡îs_s
 {

9 
INT
 
	mdz_swôch_∑s°hrough_mode
;

10 
INT
 
	mdz_swôch_∑s°hrough_ªad
;

11 
INT
 
	mdz_swôch_∑s°hrough_wrôe
;

12 
ATOMIC64
 
	mdz_i‹eque°_Æloc_˙t
;

13 
ATOMIC64
 
	mdz_i‹eque°_‰ì_˙t
;

14 
ATOMIC64
 
	mdz_∑ge_Æloc_˙t
;

15 
ATOMIC64
 
	mdz_∑ge_‰ì_˙t
;

16 
U64
 
	m„c_ígöe_mem‹y_ußge
;

17 
U64
 
	mbec_ígöe_mem‹y_ußge
;

18 
U64
 
	mdedu≥_ígöe_mem‹y_ußge
;

19 
U64
 
	mö‰a_ígöe_mem‹y_ußge
;

20 
U64
 
	mmd_ígöe_mem‹y_ußge
;

21 
ATOMIC64
 
	mdz_tŸÆ_mem‹y_c⁄sumed_by_Æl_poﬁs
;

22 
U64
 
	mlba_èbÀ_size
;

23 
U64
 
	mpba_èbÀ_size
;

24 
U64
 
	mhash_èbÀ_size
;

26 
ATOMIC64
 
	mtŸ_≠∂iˇti⁄_iocou¡
;

27 
ATOMIC64
 
	mtŸ_≠∂iˇti⁄_iocou¡_ªads
;

28 
ATOMIC64
 
	mtŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
;

29 
ATOMIC64
 
	mtŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
;

30 
ATOMIC64
 
	mtŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
;

31 
ATOMIC64
 
	mtŸ_≠∂iˇti⁄_iocou¡_wrôes
;

32 
ATOMIC64
 
	mtŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
;

33 
ATOMIC64
 
	mtŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
;

34 
ATOMIC64
 
	mtŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
;

39 
	#BASE_COUNTER_ATOMIC64_SET
(
v¨
, 
vÆ
Ë
	`ATOMIC64_SET
(
pdz_basic_cou¡îs
->v¨, vÆ)

	)

40 
	#BASE_COUNTER_ATOMIC64_ADD
(
v¨
, 
vÆ
Ë
	`ATOMIC64_ADD
(
pdz_basic_cou¡îs
->v¨, vÆ)

	)

41 
	#BASE_COUNTER_ATOMIC64_SUB
(
v¨
, 
vÆ
Ë
	`ATOMIC64_SUB
(
pdz_basic_cou¡îs
->v¨, vÆ)

	)

43 
	#BASE_COUNTER_ATOMIC_INC
(
v¨
Ë
	`ATOMIC_INC
(
pdz_basic_cou¡îs
->v¨)

	)

44 
	#BASE_COUNTER_ATOMIC64_INC
(
v¨
Ë
	`ATOMIC64_INC
(
pdz_basic_cou¡îs
->v¨)

	)

46 
	#BASE_COUNTER_ATOMIC_DEC
(
v¨
Ë
	`ATOMIC_DEC
(
pdz_basic_cou¡îs
->v¨)

	)

47 
	#BASE_COUNTER_ATOMIC64_DEC
(
v¨
Ë
	`ATOMIC64_DEC
(
pdz_basic_cou¡îs
->v¨)

	)

49 
	#BASE_COUNTER_ATOMIC64_READ
(
v¨
Ë
	`ATOMIC64_READ
(
pdz_basic_cou¡îs
->v¨)

	)

50 
	#BASE_COUNTER_ATOMIC64_GET
(
v¨
Ë(&(
pdz_basic_cou¡îs
->v¨))

	)

52 
	#BASE_COUNTER_U64_GET
(
v¨
Ë(
pdz_basic_cou¡îs
->v¨)

	)

53 
	#BASE_COUNTER_U64_SET
(
v¨
, 
vÆ
Ë(
pdz_basic_cou¡îs
->v¨Ë(vÆ)

	)

55 
	#BASE_COUNTER_INT_GET
(
v¨
Ë(
pdz_basic_cou¡îs
->v¨)

	)

56 
	#BASE_COUNTER_INT_SET
(
v¨
, 
vÆ
Ë(
pdz_basic_cou¡îs
->v¨Ë(vÆ)

	)

58 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tBASIC_COUNTERS
, *
	tPBASIC_COUNTERS
;

60 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

61 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

65 
	sdz_Æignmít_ígöe_cou¡îs_s
 {

66 
U64
 
	mÆign_ígöe_mem‹y_ußge
;

67 
ATOMIC64
 
	mÆign_iocou¡_ªads_∑πül_∑ge
;

68 
ATOMIC64
 
	mÆign_iocou¡_ªads_sögÀ_∑ge
;

69 
ATOMIC64
 
	mÆign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

70 
ATOMIC64
 
	mÆign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

71 
ATOMIC64
 
	mÆign_iocou¡_ªads_mu…i_∑ge
;

72 
ATOMIC64
 
	mÆign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

73 
ATOMIC64
 
	mÆign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

74 
ATOMIC64
 
	mÆign_iocou¡_wrôes_∑πül_∑ge
;

75 
ATOMIC64
 
	mÆign_iocou¡_wrôes_sögÀ_∑ge
;

76 
ATOMIC64
 
	mÆign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

77 
ATOMIC64
 
	mÆign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

78 
ATOMIC64
 
	mÆign_iocou¡_wrôes_mu…i_∑ge
;

83 
	#ALIGN_COUNTER_ATOMIC64_SET
(
v¨
, 
vÆ
Ë
	`ATOMIC64_SET
(
pdz_Æign_cou¡îs
->v¨, vÆ)

	)

84 
	#ALIGN_COUNTER_ATOMIC64_ADD
(
v¨
, 
vÆ
Ë
	`ATOMIC64_ADD
(
pdz_Æign_cou¡îs
->v¨, vÆ)

	)

85 
	#ALIGN_COUNTER_ATOMIC64_SUB
(
v¨
, 
vÆ
Ë
	`ATOMIC64_SUB
(
pdz_Æign_cou¡îs
->v¨, vÆ)

	)

87 
	#ALIGN_COUNTER_ATOMIC_INC
(
v¨
Ë
	`ATOMIC_INC
(
pdz_Æign_cou¡îs
->v¨)

	)

88 
	#ALIGN_COUNTER_ATOMIC64_INC
(
v¨
Ë
	`ATOMIC64_INC
(
pdz_Æign_cou¡îs
->v¨)

	)

90 
	#ALIGN_COUNTER_ATOMIC_DEC
(
v¨
Ë
	`ATOMIC_DEC
(
pdz_Æign_cou¡îs
->v¨)

	)

91 
	#ALIGN_COUNTER_ATOMIC64_DEC
(
v¨
Ë
	`ATOMIC64_DEC
(
pdz_Æign_cou¡îs
->v¨)

	)

93 
	#ALIGN_COUNTER_ATOMIC64_READ
(
v¨
Ë
	`ATOMIC64_READ
(
pdz_Æign_cou¡îs
->v¨)

	)

95 
	#ALIGN_COUNTER_U64_GET
(
v¨
Ë(
pdz_Æign_cou¡îs
->v¨)

	)

96 
	#ALIGN_COUNTER_U64_SET
(
v¨
, 
vÆ
Ë(
pdz_Æign_cou¡îs
->v¨Ë(vÆ)

	)

98 
	#ALIGN_COUNTER_INT_GET
(
v¨
Ë(
pdz_Æign_cou¡îs
->v¨)

	)

99 
	#ALIGN_COUNTER_INT_SET
(
v¨
, 
vÆ
Ë(
pdz_Æign_cou¡îs
->v¨Ë(vÆ)

	)

101 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tALIGN_COUNTERS
, *
	tPALIGN_COUNTERS
;

103 
ALIGN_COUNTERS
 
dz_Æign_cou¡îs
;

104 
PALIGN_COUNTERS
 
pdz_Æign_cou¡îs
;

107 
	sdz_„c_ígöe_cou¡îs_s
 {

108 
U64
 
	m„c_ígöe_mem‹y_ußge
;

109 
ATOMIC64
 
	m„c_a˘ive_cou¡_£quí˚
;

110 
ATOMIC64
 
	m„c_‰ì_cou¡_£quí˚
;

111 
ATOMIC64
 
	m„c_cur_Êush_cou¡
;

112 
ATOMIC64
 
	m„c_Êush_›s_cou¡
;

113 
ATOMIC64
 
	m„c_cur_Êush_›s_cou¡
;

114 
ATOMIC64
 
	m„c_mem‹y_ªads_cou¡
;

115 
ATOMIC64
 
	m„c_f‹w¨ded_ªads_cou¡
;

116 
U64
 
	m„c_a˘ive_cou¡
;

117 
ATOMIC64
 
	m„c_iocou¡_ªads_∑πül_∑ge
;

118 
ATOMIC64
 
	m„c_iocou¡_ªads_sögÀ_∑ge
;

119 
ATOMIC64
 
	m„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

120 
ATOMIC64
 
	m„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

121 
ATOMIC64
 
	m„c_iocou¡_ªads_mu…i_∑ge
;

122 
ATOMIC64
 
	m„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

123 
ATOMIC64
 
	m„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

124 
ATOMIC64
 
	m„c_iocou¡_wrôes_∑πül_∑ge
;

125 
ATOMIC64
 
	m„c_iocou¡_wrôes_sögÀ_∑ge
;

126 
ATOMIC64
 
	m„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

127 
ATOMIC64
 
	m„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

128 
ATOMIC64
 
	m„c_iocou¡_wrôes_mu…i_∑ge
;

133 
	#FEC_COUNTER_ATOMIC64_SET
(
v¨
, 
vÆ
Ë
	`ATOMIC64_SET
(
pdz_„c_cou¡îs
->v¨, vÆ)

	)

134 
	#FEC_COUNTER_ATOMIC64_ADD
(
v¨
, 
vÆ
Ë
	`ATOMIC64_ADD
(
pdz_„c_cou¡îs
->v¨, vÆ)

	)

135 
	#FEC_COUNTER_ATOMIC64_SUB
(
v¨
, 
vÆ
Ë
	`ATOMIC64_SUB
(
pdz_„c_cou¡îs
->v¨, vÆ)

	)

137 
	#FEC_COUNTER_ATOMIC_INC
(
v¨
Ë
	`ATOMIC_INC
(
pdz_„c_cou¡îs
->v¨)

	)

138 
	#FEC_COUNTER_ATOMIC64_INC
(
v¨
Ë
	`ATOMIC64_INC
(
pdz_„c_cou¡îs
->v¨)

	)

140 
	#FEC_COUNTER_ATOMIC_DEC
(
v¨
Ë
	`ATOMIC_DEC
(
pdz_„c_cou¡îs
->v¨)

	)

141 
	#FEC_COUNTER_ATOMIC64_DEC
(
v¨
Ë
	`ATOMIC64_DEC
(
pdz_„c_cou¡îs
->v¨)

	)

143 
	#FEC_COUNTER_ATOMIC64_READ
(
v¨
Ë
	`ATOMIC64_READ
(
pdz_„c_cou¡îs
->v¨)

	)

145 
	#FEC_COUNTER_U64_GET
(
v¨
Ë(
pdz_„c_cou¡îs
->v¨)

	)

146 
	#FEC_COUNTER_U64_SET
(
v¨
, 
vÆ
Ë(
pdz_„c_cou¡îs
->v¨Ë(vÆ)

	)

148 
	#FEC_COUNTER_INT_GET
(
v¨
Ë(
pdz_„c_cou¡îs
->v¨)

	)

149 
	#FEC_COUNTER_INT_SET
(
v¨
, 
vÆ
Ë(
pdz_„c_cou¡îs
->v¨Ë(vÆ)

	)

151 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tFEC_COUNTERS
, *
	tPFEC_COUNTERS
;

153 
FEC_COUNTERS
 
dz_„c_cou¡îs
;

154 
PFEC_COUNTERS
 
pdz_„c_cou¡îs
;

157 
	sdz_dedu≥_ígöe_cou¡îs_s
 {

158 
U64
 
	mdedu≥_ígöe_mem‹y_ußge
;

159 
U64
 
	mlba_èbÀ_size
;

160 
U64
 
	mpba_èbÀ_size
;

161 
U64
 
	mhash_èbÀ_size
;

162 
ATOMIC64
 
	mdedu≥_disk_ªads
;

163 
ATOMIC64
 
	mdedu≥_disk_wrôes
;

164 
ATOMIC64
 
	mdedu≥_ˇche_hôs
;

165 
ATOMIC64
 
	mdedu≥_dñëed_íåõs
;

166 
U64
 
	mdedu≥_tŸ_logiˇl_•a˚
;

167 
U64
 
	mdedu≥_tŸ_physiˇl_•a˚
;

168 
ATOMIC64
 
	mdedu≥_cur_logiˇl_•a˚
;

169 
ATOMIC64
 
	mdedu≥_cur_physiˇl_•a˚
;

170 
ATOMIC64
 
	mdedu≥_cur_du∂iˇã_•a˚
;

171 
ATOMIC64
 
	mdedu≥_zî€d_out_∑ge_ªads
;

172 
USHORT
 
	mdedu≥_num_thªads
;

177 
	#DDE_COUNTER_ATOMIC64_SET
(
v¨
, 
vÆ
Ë
	`ATOMIC64_SET
(
pdz_dde_cou¡îs
->v¨, vÆ)

	)

178 
	#DDE_COUNTER_ATOMIC64_ADD
(
v¨
, 
vÆ
Ë
	`ATOMIC64_ADD
(
pdz_dde_cou¡îs
->v¨, vÆ)

	)

179 
	#DDE_COUNTER_ATOMIC64_SUB
(
v¨
, 
vÆ
Ë
	`ATOMIC64_SUB
(
pdz_dde_cou¡îs
->v¨, vÆ)

	)

181 
	#DDE_COUNTER_ATOMIC_INC
(
v¨
Ë
	`ATOMIC_INC
(
pdz_dde_cou¡îs
->v¨)

	)

182 
	#DDE_COUNTER_ATOMIC64_INC
(
v¨
Ë
	`ATOMIC64_INC
(
pdz_dde_cou¡îs
->v¨)

	)

184 
	#DDE_COUNTER_ATOMIC_DEC
(
v¨
Ë
	`ATOMIC_DEC
(
pdz_dde_cou¡îs
->v¨)

	)

185 
	#DDE_COUNTER_ATOMIC64_DEC
(
v¨
Ë
	`ATOMIC64_DEC
(
pdz_dde_cou¡îs
->v¨)

	)

187 
	#DDE_COUNTER_ATOMIC64_READ
(
v¨
Ë
	`ATOMIC64_READ
(
pdz_dde_cou¡îs
->v¨)

	)

189 
	#DDE_COUNTER_U64_GET
(
v¨
Ë(
pdz_dde_cou¡îs
->v¨)

	)

190 
	#DDE_COUNTER_U64_SET
(
v¨
, 
vÆ
Ë(
pdz_dde_cou¡îs
->v¨Ë(vÆ)

	)

192 
	#DDE_COUNTER_INT_GET
(
v¨
Ë(
pdz_dde_cou¡îs
->v¨)

	)

193 
	#DDE_COUNTER_INT_SET
(
v¨
, 
vÆ
Ë(
pdz_dde_cou¡îs
->v¨Ë(vÆ)

	)

195 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tDDE_COUNTERS
, *
	tPDDE_COUNTERS
;

197 
DDE_COUNTERS
 
dz_dde_cou¡îs
;

198 
PDDE_COUNTERS
 
pdz_dde_cou¡îs
;

201 
	sdz_bec_ígöe_cou¡îs_s
 {

202 
U64
 
	mbec_ígöe_mem‹y_ußge
;

203 
ATOMIC64
 
	mbec_pba_∑ge_cou¡
;

204 
ATOMIC64
 
	mbec_ˇche_hô
;

205 
ATOMIC64
 
	mbec_ˇche_miss
;

206 
ATOMIC64
 
	mbec_ˇche_dñëe
;

207 
ULONG
 
	mbec_size
;

208 
INT
 
	mbec_cutoff_nodes
;

209 
INT
 
	mbec_cutoff_≥r˚¡
;

210 
INT
 
	mdz_bec_node_mempoﬁ_cou¡
;

211 
ATOMIC64
 
	mbec_∑ge_Æloc_˙t
;

212 
ATOMIC64
 
	mbec_∑ge_‰ì_˙t
;

213 
ATOMIC64
 
	mbec_node_Æloc_˙t
;

214 
ATOMIC64
 
	mbec_node_‰ì_˙t
;

219 
	#BEC_COUNTER_ATOMIC64_SET
(
v¨
, 
vÆ
Ë
	`ATOMIC64_SET
(
pdz_bec_cou¡îs
->v¨, vÆ)

	)

220 
	#BEC_COUNTER_ATOMIC64_ADD
(
v¨
, 
vÆ
Ë
	`ATOMIC64_ADD
(
pdz_bec_cou¡îs
->v¨, vÆ)

	)

221 
	#BEC_COUNTER_ATOMIC64_SUB
(
v¨
, 
vÆ
Ë
	`ATOMIC64_SUB
(
pdz_bec_cou¡îs
->v¨, vÆ)

	)

223 
	#BEC_COUNTER_ATOMIC_INC
(
v¨
Ë
	`ATOMIC_INC
(
pdz_bec_cou¡îs
->v¨)

	)

224 
	#BEC_COUNTER_ATOMIC64_INC
(
v¨
Ë
	`ATOMIC64_INC
(
pdz_bec_cou¡îs
->v¨)

	)

226 
	#BEC_COUNTER_ATOMIC_DEC
(
v¨
Ë
	`ATOMIC_DEC
(
pdz_bec_cou¡îs
->v¨)

	)

227 
	#BEC_COUNTER_ATOMIC64_DEC
(
v¨
Ë
	`ATOMIC64_DEC
(
pdz_bec_cou¡îs
->v¨)

	)

229 
	#BEC_COUNTER_ATOMIC64_READ
(
v¨
Ë
	`ATOMIC64_READ
(
pdz_bec_cou¡îs
->v¨)

	)

231 
	#BEC_COUNTER_U64_GET
(
v¨
Ë(
pdz_bec_cou¡îs
->v¨)

	)

232 
	#BEC_COUNTER_U64_SET
(
v¨
, 
vÆ
Ë(
pdz_bec_cou¡îs
->v¨Ë(vÆ)

	)

234 
	#BEC_COUNTER_INT_GET
(
v¨
Ë(
pdz_bec_cou¡îs
->v¨)

	)

235 
	#BEC_COUNTER_INT_SET
(
v¨
, 
vÆ
Ë(
pdz_bec_cou¡îs
->v¨Ë(vÆ)

	)

237 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tBEC_COUNTERS
, *
	tPBEC_COUNTERS
;

239 
BEC_COUNTERS
 
dz_bec_cou¡îs
;

240 
PBEC_COUNTERS
 
pdz_bec_cou¡îs
;

242 
	sdz_avm_cou¡îs_s
 {

243 
PBASIC_COUNTERS
 
	mbasic_cou¡îs
;

244 
PDDE_COUNTERS
 
	mdde_cou¡îs
;

245 
PFEC_COUNTERS
 
	m„c_cou¡îs
;

246 
PBEC_COUNTERS
 
	mbec_cou¡îs
;

247 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tAVM_COUNTERS
, *
	tPAVM_COUNTERS
;

	@headers/data_structures.h

1 #i‚de‡
DATA_STRUCTURES_H


2 
	#DATA_STRUCTURES_H


	)

4 
	~"ty≥s.h
"

5 
	~"ma¸os.h
"

6 
	~"mëad©a_ígöe.h
"

7 
	~"dedu≥_ígöe.h
"

10 
	sdz_bvec_hﬁdî_s
 {

12 
PPAGE
 
	m∑ge
;

13 
PPAGE
 
	mbv_∑ge
;

15 
SHORT
 
	midx
;

17 
USHORT
 
	mbv_Àn
;

18 
USHORT
 
	mÀn
;

21 
USHORT
 
	mbv_off£t
;

22 
USHORT
 
	moff£t
;

24 } 
	tBVEC_HOLDER
, *
	tPBVEC_HOLDER
;

28 
	schûd_öfo
 {

29 
INT
 
	mtŸ_chûd_˙t
;

30 
ATOMIC
 
	mchûd_˙t
;

31 
INT
 
	mîr‹
;

32 } 
	tCHILD_INFO
, *
	tPCHILD_INFO
;

37 
	sdz_obje˘_li°_s
 {

39 
SPINLOCK
 
	mobje˘q_lock
;

42 
LIST_HEAD
 
	mobje˘q_hód
;

45 
ATOMIC64
 
	mobje˘q_num_ôems
;

47 } 
	tOBJECT_LIST
, *
	tPOBJECT_LIST
, 
	tAVM_OBJECT_LIST
, 
	tFREE_PAGE_LIST
, *
	tPFREE_PAGE_LIST
;

51 
	sdz_èrgë_obje˘_s
 {

52 
MAGICNO
 
	mobj_magi˙o
;

53 
NAME
 
	mobj_«me
;

54 
UUID
 
	mobj_uuid
;

55 
COUNT
 
	mobj_chûd_˙t
;

56 
PBA
 
	mobj_°¨t_pba
;

57 
LBA
 
	mobj_°¨t_lba
;

58 
LBA
 
	mobj_íd_lba
;

59 
PBA
 
	mobj_íd_pba
;

60 
FLAGS
 
	mobj_Êags
;

61 
NAME
 
	mobj_dm_dev_«me
;

62 
UUID
 
	mobj_dm_dev_uuid
;

63 
DM_DEV
 *
	mobj_dm_dev
;

64 
UCHAR
 
	mobj_ty≥
;

65 
CHAR
 
	mobj_d©e
[
DATE_LENGTH
];

66 
CHAR
 
	mobj_time
[
TIME_LENGTH
];

67 
	#OBJECT_TYPE_AISA
 1

	)

68 
	#OBJECT_TYPE_DATA_VOLUME
 2

	)

69 
	#OBJECT_TYPE_DATA_VOLUME_SNAPSHOT_READ
 3

	)

70 
	#OBJECT_TYPE_DATA_VOLUME_SNAPSHOT_WRITE
 4

	)

71 
	#OBJECT_TYPE_VM_VOLUME
 5

	)

72 
	#OBJECT_TYPE_VM_VOLUME_SNAPSHOT_READ
 6

	)

73 
	#OBJECT_TYPE_VM_VOLUME_SNAPSHOT_WRITE
 7

	)

74 
LIST_HEAD
 
	mobje˘q
;

75 } 
	tDEVICE_OBJECT
, *
	tPDEVICE_OBJECT
;

78 
	sdz_èrgë_devi˚_s
 {

79 
DEVICE_OBJECT
 
	mobj
;

80 
PPBA_BLOCK
 
	mpba_èbÀ
;

81 
PHASH_BLOCK
 
	mhash_èbÀ
;

82 
PLBA_BLOCK
 
	mlba_èbÀ
;

83 
PMD_BLOCK
 
	mmëad©a_lba_èbÀ
;

84 
PMD_LOCK
 
	mmëad©a_lba_lock_èbÀ
;

85 
U64
 
	mpba_disk_off£t
;

86 
SPINLOCK
 
	mpba_disk_off£t_lock
;

87 
PBA_LIST
 
	m‰ì_pbas
;

88 
PBA_LIST
 
	mu£d_pbas
;

89 
PBA_LIST
 
	mpvt_pbas
;

90 
PBA_LIST
 
	mÆl_pbas
;

91 
PBA_LIST
 
	mtobe_îa£d_pbas
;

92 
PBA_LIST
 
	mbad_pbas
;

94 
COUNT
 
	m‰ì_˙t
;

95 
COUNT
 
	mu£d_˙t
;

96 
COUNT
 
	mpvt_˙t
;

97 
COUNT
 
	mtŸ_˙t
;

98 
COUNT
 
	mtobe_îa£d_˙t
;

99 
COUNT
 
	mtŸ_îa£d_˙t
;

101 
LOCK
 
	m‰ì_pba_lock
;

102 
LOCK
 
	mu£d_pba_lock
;

103 
LOCK
 
	mpvt_pba_lock
;

104 
LOCK
 
	mtobe_îa£d_pba_lock
;

106 
CHECKSUM
 
	mchecksum
;

107 
CRC
 
	m¸c
;

109 
NAME
 
	md©a_dev_«me
;

110 
MAGICNO
 
	md©a_dev_magi˙o
;

111 
PBLOCK_DEVICE
 
	md©a_bdev
;

112 
UUID
 
	md©a_dev_uuid
;

114 
NAME
 
	mmëad©a_dev_«me
;

115 
MAGICNO
 
	mmëad©a_dev_magi˙o
;

116 
PBLOCK_DEVICE
 
	mmëad©a_bdev
;

117 
UUID
 
	mmëad©a_dev_uuid
;

119 
PSUPERBLOCK
 
	msu≥rblk
;

120 
PSUPERBLOCK
 
	msu≥rblock
;

123 } 
	tAVMDEVICE
, *
	tPAVMDEVICE
, 
	tAVM_DEVICE
, *
	tPAVM_DEVICE
, 
	tAISA_DEVICE
, *
	tPDZ_TARGET_DEVICE
, 
	tDZ_TARGET_DEVICE
;

126 
	sdz_dedu≥_vﬁume_s
 {

127 
DEVICE_OBJECT
 
	mddvﬁ_obj
;

128 
PVOID
 
	mddvﬁ_∑ª¡
;

130 
PDDVOL_LBA_BLOCK
 
	mddvﬁ_lba_èbÀ
;

131 
U64
 
	mddvﬁ_èbÀ_size
;

132 
LOCK
 
	mddvﬁ_lba_lock
;

133 
BITMAP
 
	mddvﬁ_bôm≠
;

134 
U32
 
	mddvﬁ_l⁄gs
;

135 
U64
 
	mddvﬁ_ªads
;

136 
U64
 
	mddvﬁ_wrôes
;

137 
U64
 
	mddvﬁ_îr‹s
;

138 
U64
 
	mddvﬁ_ªad_øã
;

139 
U64
 
	mddvﬁ_wrôe_øã
;

140 
U64
 
	mddvﬁ_¶ìp
;

141 } 
	tDDVOL
, *
	tPDDVOL
;

149 
	sc⁄fig_dëaûs_s
 {

150 
PDM_TARGET
 
	mèrgë
;

151 
PVOID
 
	mç_ªad
;

152 
PVOID
 
	mç_wrôe
;

153 
PVOID
 
	mç_Êush
;

154 } 
	tCONFIG
, *
	tPCONFIG
;

157 
	ssize_buf_m≠_s
 {

158 
	msize
;

159 *
	md©a
;

160 } 
	tBUF_MAP
;

	@headers/dedupe_engine.h

9 #i‚de‡
_DEDUPE_ENGINE_H_


10 
	#_DEDUPE_ENGINE_H_


	)

12 
	~"ty≥s.h
"

13 
	~"ma¸os.h
"

14 
	~"mëad©a_ígöe.h
"

18 
	#METADATA_BLOCK_SIZE
 64

	)

20 
	#PBA_HASH_COLLISION_TAG_START
 101

	)

22 
	#LALL
 
	`LOGI
("lba_èbÀ_lockácquúed\n")

	)

23 
	#LRLL
 
	`LOGI
("lba_èbÀ_lockÑñó£d\n")

	)

25 
	#LAPL
 
	`LOGI
("pba_èbÀ_lockácquúed\n")

	)

26 
	#LRPL
 
	`LOGI
("pba_èbÀ_lockÑñó£d\n")

	)

28 
	#LAHL
 
	`LOGI
("hash_èbÀ_lockácquúed\n")

	)

29 
	#LRHL
 
	`LOGI
("hash_èbÀ_lockÑñó£d\n")

	)

31 #ifde‡
DZ_KERNEL_VERSION_4


32 
	#DZ_ZERO_PAGE
(
bio
) \

34 
bvec_ôî
 
ôî
; \

35 
BIOVEC
 
bvec
; \

36 
PVOID
 
•agebuf

NULL
; \

37 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) {\

38 
•agebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
); \

39 
•agebuf
 +
bvec
.
bv_off£t
; \

40 
	`mem£t
(
•agebuf
, 0, 
bvec
.
bv_Àn
); \

41 
	`kunm≠
(
bvec
.
bv_∑ge
); \

43 }

	)

47 
	#DZ_ZERO_PAGE
(
bio
) \

49 
INT
 
i
; \

50 
PBIOVEC
 
bvec
 = 
NULL
; \

51 
PVOID
 
•agebuf

NULL
; \

52 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
i
) { \

53 
•agebuf
 = 
	`km≠
(
bvec
->
bv_∑ge
); \

54 
•agebuf
 +
bvec
->
bv_off£t
; \

55 
	`mem£t
(
•agebuf
, 0, 
bvec
->
bv_Àn
); \

56 
	`kunm≠
(
bvec
->
bv_∑ge
); \

58 }

	)

64 
	#DZ_DDE_FETCH_PBA_ENTRY
(
pba_íåy
, 
pba_ödex
) \

65 (
pba_íåy
Ë
	`GET_PBA_ENTRY
((
pba_ödex
));

	)

67 
	#DZ_DDE_FETCH_FREE_PBA_ENTRY
(
pba_íåy
, 
‰ì_pba_ödex
) \

68 
‰ì_pba_ödex
 = 
	`dz_gë_‰ì_pba_ödex
(); \

69 (
pba_íåy
Ë
	`GET_PBA_ENTRY
((
‰ì_pba_ödex
)); \

70 i‡((
pba_íåy
)->
ªf_˙t
 >= 1) { \

71 
	`LOGE
("Ref count for freeÖba canÇot be >= 1\n");\

72 
	`BUG_ON
(1); \

73 }

	)

75 
	#DZ_DDE_UPDATE_HASH_TABLE
 
UPDATE_HBA_TABLE


	)

76 
	#UPDATE_HBA_TABLE
(
hba_íåy
, 
pba_ödex
) \

77 
	`dz_upd©e_hash_íåy
((
hba_íåy
), (
pba_ödex
))

	)

79 
	#DZ_DDE_UPDATE_LBA_TABLE
(
lba_íåy
, 
hash_ödex
, 
cﬁlisi⁄_ödex
) \

80 
	`dz_upd©e_lba_íåy
((
lba_íåy
), (
hash_ödex
), (
cﬁlisi⁄_ödex
))

	)

83 
	#UPDATE_LBA_TABLE_NEW
(
lba_íåy
, 
hash_ödex
) \

84 
	`DZ_DDE_UPDATE_LBA_TABLE
(
lba_íåy
, 
hash_ödex
, 
PBA_HASH_COLLISION_TAG_START
)

	)

86 
	#DZ_DDE_UPDATE_LBA_TABLE_FOR_NEW_PBA
(
lba_íåy
, 
hash_ödex
) \

87 
	`DZ_DDE_UPDATE_LBA_TABLE
(
lba_íåy
, 
hash_ödex
, 
PBA_HASH_COLLISION_TAG_START
)

	)

89 
	#UPDATE_PBA_TABLE_NEW
(
pba_íåy
) \

90 
	`DZ_DDE_UPDATE_PBA_TABLE
(
pba_íåy
, 
PBA_HASH_COLLISION_TAG_START
)

	)

92 
	#DZ_DDE_UPDATE_PBA_TABLE_FOR_NEW_PBA
(
pba_íåy
) \

93 
	`DZ_DDE_UPDATE_PBA_TABLE
(
pba_íåy
, 
PBA_HASH_COLLISION_TAG_START
)

	)

95 
	#DZ_DDE_UPDATE_PBA_TABLE
(
pba_íåy
, 
cﬁlisi⁄_ödex
) \

96 
	`dz_upd©e_pba_íåy
((
pba_íåy
), 
cﬁlisi⁄_ödex
, 
PAGE_SIZE
, 1, 0);

	)

98 
	#DZ_DDE_ADD_NEW_PBA_TO_HASH_COLLISION_LIST
(
œ°_pba_ödex
, 
‰ì_pba_ödex
) \

99 (
	`GET_PBA_ENTRY
((
œ°_pba_ödex
)))->
√xt_íåy_ö_cﬁlisi⁄_li°
 = (
‰ì_pba_ödex
)

	)

104 
	#DUPLICATE_DATA_FOUND
 1

105 
	#DUPLICATE_OVERWRITE_FOUND
 2

106 
	#HASH_COLLISION_FOUND
 3

107 

	)

108 
	#DZ_DDE_WRITE_TYPE_DEDUPE
 1

109 
	#DZ_DDE_WRITE_TYPE_OVERWRITE
 2

110 
	#DZ_DDE_WRITE_TYPE_HASH_COLLISON
 3

111 

	)

112 
	#OVERWRITE_WITH_SAME_DATA
 1

	)

113 
	#OVERWRITE_WITH_DIFFERENT_DATA
 2

	)

114 #ifde‡
DZ_BIT_SPIN_LOCK


116 
	#LBA_LOCK
(
lbab
Ë
	`bô_•ö_lock
(0, &÷bab)->
d⁄Ÿch™ge
)

	)

117 
	#LBA_UNLOCK
(
lbab
Ë
	`bô_•ö_u∆ock
(0, &÷bab)->
d⁄Ÿch™ge
)

	)

119 
	#PBA_LOCK
(
pbab
Ë
	`bô_•ö_lock
(0, &’bab)->
d⁄Ÿch™ge
)

	)

120 
	#PBA_UNLOCK
(
pbab
Ë
	`bô_•ö_u∆ock
(0, &’bab)->
d⁄Ÿch™ge
)

	)

122 
	#HASH_LOCK
(
hashb
Ë
	`bô_•ö_lock
(0, &(hashb)->
d⁄Ÿch™ge
)

	)

123 
	#HASH_UNLOCK
(
hashb
Ë
	`bô_•ö_u∆ock
(0, &(hashb)->
d⁄Ÿch™ge
)

	)

128 
	#LBA_LOCK
(
lba
Ë
	`•ö_lock
(&
lba_èbÀ_lock
)

	)

129 
	#LBA_UNLOCK
(
lba
Ë
	`•ö_u∆ock
(&
lba_èbÀ_lock
)

	)

131 
	#PBA_LOCK
(
lba
Ë
	`•ö_lock
(&
pba_èbÀ_lock
)

	)

132 
	#PBA_UNLOCK
(
lba
Ë
	`•ö_u∆ock
(&
pba_èbÀ_lock
)

	)

134 
	#HASH_LOCK
(
lba
Ë
	`•ö_lock
(&
hash_èbÀ_lock
)

	)

135 
	#HASH_UNLOCK
(
lba
Ë
	`•ö_u∆ock
(&
hash_èbÀ_lock
)

	)

139 #ifde‡
DZ_BIT_SPIN_LOCK


148 
	udz_lba_block_s
 {

150 
BOOL
 
	m„c_lock
:1;

152 
BOOL
 
	mlba_lock
:1;

153 
	#FEC_LBA_LOCK_BIT
 0

	)

154 
	#DEDUPE_LBA_LOCK_BIT
 1

	)

155 
BOOL
 
	mÆloˇãd
:1;

156 
BOOL
 
	mö_u£
:1;

157 
U32
 
	mhash_ödex
:31;

158 
U64
 
	mhash_cﬁlisi⁄_èg
:33;

159 
U64
 
	mpba_ödex
:33;

161 
U64
 
	m£˘‹
;

163 
LIST_HEAD
 
	mioq_hód
;

168 }
__©åibuã__
((
__∑cked__
));

170 
ULONG
 
	md⁄Ÿch™ge
;

171 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tLBA_BLOCK
, *
	tPLBA_BLOCK
;

174 
	udz_hash_block_s
 {

176 
BOOL
 
	mhash_lock
:1;

177 
BOOL
 
	mö_u£
:1;

179 
U64
 
	mpba_ödex
:33;

180 
U64
 
	mhash_pba_ödex
:33;

182 }
__©åibuã__
((
__∑cked__
));

184 
ULONG
 
	md⁄Ÿch™ge
;

185 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tHASH_BLOCK
, *
	tPHASH_BLOCK
, 
	tHBA_BLOCK
, *
	tPHBA_BLOCK
;

188 
	udz_pba_block_s
 {

190 
BOOL
 
	mpba_lock
:1;

191 
BOOL
 
	mö_u£
:1;

192 
BOOL
 
	mbad
:1;

194 
SECTOR
 
	m£˘‹
:33;

195 
U64
 
	mpba_ödex
:33;

198 
U64
 
	mhash_cﬁlisi⁄_èg
:33;

199 
U32
 
	msize
:13;

200 
U64
 
	mªf_˙t
:34;

201 
U64
 
	m√xt_íåy_ö_cﬁlisi⁄_li°
:33;

202 }
__©åibuã__
((
__∑cked__
));

204 
ULONG
 
	md⁄Ÿch™ge
;

205 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tPBA_BLOCK
, *
	tPPBA_BLOCK
;

212 
	gdz_thªad_poﬁ_s
;

214 
	sdz_com∂ëi⁄_s
 {

216 
com∂ëi⁄
 
	mcom∂ëi⁄
;

217 
com∂ëi⁄
 
	mio_com∂ëi⁄
;

219 
INT
 
	mîr‹
;

221 }
	tDZ_COMPLETION
, *
	tPDZ_COMPLETION
;

223 
	sdz_d©a_∑ges_s
 {

225 
PBIOVEC
 
	m∑gevec
;

226 
PBIOVEC
 
	mbio_vec
;

227 
PBIOVEC
 
	mbiovec
;

229 
UINT
 
	mpg˙t
;

230 }
	tDATAPAGES
, 
	tDATAPAGES_T
, 
	tDATA_PAGES_T
, *
	tPDATA_PAGES_T
, *
	tPDATAPAGES_T
, *
	tPDATA_PAGES
;

232 
	sdz_dedu≥_öfo_s
 {

234 
U32
 
	mhash
 [4];

235 
U32
 
	mhash32
 [4];

236 
U64
 
	mhash64
 [2];

238 
PLBA_BLOCK
 
	mlba_íåy
;

239 
PHBA_BLOCK
 
	mhba_íåy
;

240 
PPBA_BLOCK
 
	mpba_íåy
;

242 
U64
 
	m√w_hash_ödex
;

243 
U64
 
	m√w_pba_ödex
;

245 
PPBA_BLOCK
 
	m‰ì_pba_íåy
;

246 
U64
 
	m‰ì_pba_ödex
;

251 
U64
 
	mdedu≥_pba_ödex
;

252 
U64
 
	mœ°_pba_hash_cﬁlisi⁄_ödex
;

253 
U64
 
	mpba_ödex
;

255 } 
	tDD_INFO
, *
	tPDD_INFO
, 
	tDEDUPE
, *
	tPDEDUPE
;

261 
	g„c_d©a_wrôe_s
;

262 
	gdz_i‹eque°_s
;

265 
	sdz_ddvﬁ_lba_block_s
 {

267 
U64
 
	mlba_ödex
;

269 
U64
 
	mpba_ödex
;

271 
U32
 
	mlba_ªf_˙t
;

272 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tDDVOL_LBA_BLOCK
, *
	tPDDVOL_LBA_BLOCK
;

275 
	sdz_bôm≠_s
 {

276 
SPINLOCK
 
	mbôm≠_lock
;

277 
ULONG
 *
	mbôm≠
;

278 
ATOMIC64
 
	mnum_ôems
;

279 
U32
 
	mnum_of_l⁄gs
;

280 } 
	tBITMAP
, *
	tPBITMAP
;

284 
RPVOID
 
dz_¸óã_lba_èbÀ
(
SIZE
 
èbÀ_size
);

285 
RVOID
 
dz_de°roy_lba_èbÀ
(
PVOID
 
±r
);

286 
RPVOID
 
dz_¸óã_md_lock_èbÀ
(
SIZE
 
èbÀ_size
);

287 
RVOID
 
dz_de°roy_md_lock_èbÀ
(
PVOID
 
±r
);

289 
RPVOID
 
dz_¸óã_pba_èbÀ
(
SIZE
 
èbÀ_size
);

290 
RVOID
 
dz_de°roy_pba_èbÀ
(
PPBA_BLOCK
 
±r
);

291 
VOID
 
dz_upd©e_pba_íåy
(
PPBA_BLOCK
 
pba_íåy
, 
U64
 
cﬁidx
, 
U32
 
size
, U64 
ªf_˙t
, U64 
√xt
);

292 
VOID
 
dz_upd©e_lba_íåy
(
PLBA_BLOCK
 
lba_íåy
, 
U32
 
hash_ödex
, 
U64
 
cﬁidx
);

293 
VOID
 
dz_upd©e_hash_íåy
(
PHASH_BLOCK
 
hash_íåy
, 
U64
 
pba_ödex
);

295 
RPVOID
 
dz_¸óã_hash_èbÀ
(
SIZE
 
èbÀ_size
);

296 
RVOID
 
dz_de°roy_hash_èbÀ
(
PVOID
 
±r
);

299 
RVOID
 
ã°_bôm≠
(
VOID
);

302 
RINT
 
dz_pba_bôm≠_öô
(
VOID
);

303 
U64
 
dz_gë_‰ì_pba_ödex
(
VOID
);

304 
RINT
 
dz_put_pba_ödex
(
U64
 
pba_ödex
);

305 
RVOID
 
dz_¥öt_bôm≠
(
BITMAP
 *
bôm≠
);

307 
RINT
 
dz_lba_bôm≠_öô
(
VOID
);

308 
S64
 
dz_gë_‰ì_lba_ödex
(
VOID
);

309 
RINT
 
dz_put_lba_ödex
(
U64
 
lba_ödex
);

311 
RINT
 
dz_¥o˚ss_èbÀs
(
PPAGE
 
∑ge
, 
SECTOR
 
£˘‹
, 
LBA
 
lba
, 
UINT
 
d©a_size
);

312 
RINT
 
dz_check_dedu≥
(
PIOREQUEST
 
i‹eque°
, 
U64
 
hash_pba_ödex
, U64 *
œ°_pba_ödex
, U64 *
√xt_cﬁlisi⁄_ödex
 );

313 
PPBA_BLOCK
 
dz_föd_m≠≥d_pba
(
U64
 
hash_cﬁlisi⁄_èg
, U64 
pba_ödex
);

314 
RVOID
 
dz_dedu≥_wrôe_io
(
PIOREQUEST
 
i‹eque°
);

315 
RINT
 
dz_dedu≥_√w_wrôe
(
PIOREQUEST
 
i‹eque°
);

316 
RINT
 
dz_dedu≥_ovîwrôe
(
PIOREQUEST
 
i‹eque°
);

317 
RINT
 
dz_dedu≥_wrôe_io_ovîwrôe_wôh_ßme_hash
(
PIOREQUEST
 
i‹eque°
);

318 
PHASH
 
dz_dedu≥_wrôe_io_hash
(
PIOREQUEST
 
i‹eque°
);

319 
RINT
 
dz_dedu≥_wrôe_io_ovîwrôe_wôh_dif„ª¡_hash
(
PIOREQUEST
 
i‹eque°
);

320 
VOID
 
dz_dedu≥_wrôe_io_ovîwrôe_upd©e_ﬁd_íåõs
(
U32
 
lba_hash_ödex
, 
U64
 
lba_hash_cﬁlisi⁄_ödex
);

321 
RINT
 
dz_dedu≥_wrôe_io_f‹_dedu≥_™d_cﬁlisi⁄_dëe˘i⁄
(
PIOREQUEST
 
i‹eque°
);

322 
RVOID
 
dz_ªad_™d_¥öt_mëad©a_block
(
UINT
 
off£t
, 
U64
 
£˘‹
, 
BOOL
 
Æl
);

323 
RVOID
 
dz_wrôe_block_to_øw_disk_sync
(
PIOREQUEST
 , 
SECTOR
 , 
PLBA_BLOCK
 );

324 
RINT
 
dz_wrôe_block_to_øw_disk_sync_öã∫Æ
(
PIOREQUEST
 , 
SECTOR
 , 
PLBA_BLOCK
 );

326 
RVOID
 
dz_ªad_block_‰om_øw_disk_sync
(
PIOREQUEST
 , 
SECTOR
, 
PLBA_BLOCK
 );

327 
RVOID
 
dz_ªad_block_‰om_øw_disk_sync_öã∫Æ
(
PIOREQUEST
 , 
SECTOR
, 
PLBA_BLOCK
 );

328 
RVOID
 
dz_dedu≥_io
(
PIOREQUEST
 );

330 
RVOID
 
dz_dedu≥_io
(
PIOREQUEST
 
i‹eque°
);

331 
RVOID
 
dz_dedu≥_wrôe_io
(
PIOREQUEST
 
i‹eque°
);

332 
RVOID
 
dz_dedu≥_ªad_io
(
PIOREQUEST
 
pi‹eque°
);

333 
RINT
 
dz_dedu≥_m≠_io
(
PIOREQUEST
 );

336 
VOID
 
ã°_hash
(
PVOID
 
d©a
, 
UINT
 
size
);

337 
VOID
 
ã°_hash2
(*, *);

338 
BOOL
 
dz_ßme_hash
(
PHASH
 
hash1
, PHASH 
hash2
);

339 
U32
 
dz_gë_hash_ödex
(U32 
hash
);

341 
INT
 
dz_dedu≥_ígöe_öô
(
VOID
);

342 
RVOID
 
dz_dedu≥_ígöe_exô
(
VOID
);

344 
VOID
 
dz_dedu≥_¥öt_cou¡îs
(VOID);

345 
VOID
 
dz_dedu≥_öô_cou¡îs
(VOID);

346 
RINT
 
dz_¥o˚ss_dedu≥_™d_cﬁlisi⁄_dëe˘i⁄
(
PIOREQUEST
 );

347 
RINT
 
dz_¥o˚ss_ovîwrôe_f‹_dedu≥_™d_cﬁlisi⁄_dëe˘i⁄
(
PIOREQUEST
 );

348 
RINT
 
dz_¥o˚ss_√w_wrôe_f‹_dedu≥_™d_cﬁlisi⁄_dëe˘i⁄
(
PIOREQUEST
 );

349 
VOID
 
dz_dedu≥_ovîwrôe_upd©e_ﬁd_íåõs
(
PIOREQUEST
, 
U32
 , 
U64
 );

351 
RVOID
 
_ACQUIRE_LBA_LOCK_READ
(
PLBA_BLOCK
 
lba_íåy
);

352 
RVOID
 
_RELEASE_LBA_LOCK_READ
(
PLBA_BLOCK
 
lba_íåy
);

353 
RVOID
 
_ACQUIRE_LBA_LOCK
(
PLBA_BLOCK
 
lba_íåy
);

354 
RVOID
 
_RELEASE_LBA_LOCK
(
PLBA_BLOCK
 
lba_íåy
);

355 
RVOID
 
_ACQUIRE_PBA_LOCK
(
PPBA_BLOCK
 
pba_íåy
);

356 
RVOID
 
_DZ_DDE_RELEASE_PBA_LOCK
(
PPBA_BLOCK
 
pba_íåy
);

357 
RVOID
 
_ACQUIRE_HBA_LOCK
(
PHBA_BLOCK
 
hash_íåy
);

358 
RVOID
 
_DZ_DDE_RELEASE_HBA_LOCK
(
PHBA_BLOCK
 
hash_íåy
);

360 
RVOID
 
_ACQUIRE_LBA_LOCK_DEBUG
(
PLBA_BLOCK
 
lba_íåy
);

361 
RVOID
 
_RELEASE_LBA_LOCK_DEBUG
(
PLBA_BLOCK
 
lba_íåy
);

362 
RVOID
 
_ACQUIRE_PBA_LOCK_DEBUG
(
PPBA_BLOCK
 
pba_íåy
);

363 
RVOID
 
_RELEASE_PBA_LOCK_DEBUG
(
PPBA_BLOCK
 
pba_íåy
);

364 
RVOID
 
_ACQUIRE_HBA_LOCK_DEBUG
(
PHBA_BLOCK
 
hash_íåy
);

365 
RVOID
 
_RELEASE_HBA_LOCK_DEBUG
(
PHBA_BLOCK
 
hash_íåy
);

367 
U64
 
dz_£t_g¨bage_pba_ödex
(U64 
pba_ödex
);

369 
RINT
 
dz_¸óã_dedu≥_poﬁ
(
UINT
 
num_dedu≥s
);

370 
RVOID
 
dz_de°roy_dedu≥_poﬁ
(
UINT
 
num_dedu≥s
);

371 
RPVOID
 
dz_dedu≥_Æloc
(
VOID
);

372 
RVOID
 
dz_dedu≥_‰ì
(
PVOID
 
dedu≥
);

373 
RINT
 
dz_¸óã_hash_poﬁ
(
UINT
 
num_hashs
);

374 
RVOID
 
dz_de°roy_hash_poﬁ
(
UINT
 
num_hashs
);

375 
RPVOID
 
dz_hash_Æloc
(
VOID
);

376 
RVOID
 
dz_hash_‰ì
(
PVOID
 
hash
);

377 
RVOID
 
dz_de°roy_dedu≥_thªad_poﬁ
(
VOID
);

378 
RINT
 
dz_¸óã_dedu≥_thªad_poﬁ
(
INT
 
num_thªads
);

379 
PLBA_BLOCK
 
GET_LBA_ENTRY
(
U64
 
lba
);

380 
PPBA_BLOCK
 
GET_PBA_ENTRY
(
U64
 
pba
);

381 
PHASH_BLOCK
 
GET_HBA_ENTRY
(
U64
 
hash
);

382 
PHASH_BLOCK
 
GET_HASH_ENTRY
(
U64
 
hash
);

383 
PMD_BLOCK
 
GET_MDB_ENTRY
(
U64
 
lba
);

385 
U64
 
dz_dedu≥_gë_lba_èbÀ_size
(
VOID
);

386 
U64
 
dz_dedu≥_gë_pba_èbÀ_size
(
VOID
);

387 
U64
 
dz_dedu≥_gë_hash_èbÀ_size
(
VOID
);

	@headers/emlog.h

25 
	#EMLOG_MAX_SIZE
 16184

	)

28 
	#DEVICE_NAME
 "dzlog"

	)

30 
	#EMLOG_VERSION
 "0.60"

	)

34 
	semlog_öfo
 {

35 
waô_queue_hód_t
 
	mªad_q
;

36 
	mi_öo
;

37 
dev_t
 
	mi_rdev
;

38 *
	md©a
;

39 
size_t
 
	msize
;

40 
	mªfcou¡
;

41 
size_t
 
	mªad_poöt
;

42 
size_t
 
	mwrôe_poöt
;

43 
loff_t
 
	moff£t
;

44 
emlog_öfo
 *
	m√xt
;

48 
	#EMLOG_QLEN
(
eöfo
Ë–”öfo)->
wrôe_poöt
 >”öfo)->
ªad_poöt
 ? \

49 (
eöfo
)->
wrôe_poöt
 - (eöfo)->
ªad_poöt
 : \

50 (
eöfo
)->
size
 - (eöfo)->
ªad_poöt
 + (eöfo)->
wrôe_poöt
)

	)

53 
	#EMLOG_FIRST_EMPTY_BYTE
(
eöfo
Ë(”öfo)->
off£t
 + 
	`EMLOG_QLEN
”öfo))

	)

56 
	#EMLOG_READQ
(
eöfo
Ë(&(”öfo)->
ªad_q
))

	)

	@headers/fec_engine.h

9 #i‚de‡
_FEC_ENGINE_H


10 
	#_FEC_ENGINE_H


	)

12 
	~"¥ŸŸy≥s.h
"

13 
	#DZ_FEC_CONCURRENT_READS_LIMIT
 100

	)

15 
	#PMEMCPY
 
mem˝y


	)

17 
	#ONE_MILLION_IOPS
 1024*1024

	)

18 
	#TWO_MILLION_IOPS
 2*(
ONE_MILLION_IOPS
)

	)

19 
	#DZ_FEC_FLUSH_INTERVAL
 15

20 

	)

21 
	#FEC_ENTRY_WRITE_LOCK
(
„cb
Ë
	`bô_•ö_lock
(0, &(„cb)->
d⁄Ÿch™ge
)

	)

22 
	#FEC_ENTRY_WRITE_UNLOCK
(
„cb
Ë
	`bô_•ö_u∆ock
(0, &(„cb)->
d⁄Ÿch™ge
)

	)

24 
	#FEC_ENTRY_READ_LOCK
(
„cb
Ë
	`bô_•ö_lock
(0, &(„cb)->
d⁄Ÿch™ge
)

	)

25 
	#FEC_ENTRY_READ_UNLOCK
(
„cb
Ë
	`bô_•ö_u∆ock
(0, &(„cb)->
d⁄Ÿch™ge
)

	)

30 
	#GET_FEC_READ_ENTRY
(
lba
, 
èbÀ
Ë&èbÀ[÷baË% (
„c_èbÀ_size
 - 1)];

31 
	#GET_FEC_WRITE_ENTRY
(
ödex
, 
èbÀ
Ë&èbÀ[(ödex)]

	)

33 
	#GET_FEC_ACTIVE_WRITE_ENTRY
(
ödex
Ë&(
„c_èbÀs_a˘ive
->
èbÀ_wrôe
[(ödex)])

	)

34 
	#GET_FEC_ACTIVE_READ_ENTRY
(
ödex
Ë&(
„c_èbÀs_a˘ive
->
èbÀ_ªad
[(ödex)])

	)

36 
	#GET_FEC_FLUSH_ENTRY
(
ödex
Ë&(
„c_èbÀs_Êush
->
èbÀ_wrôe
[(ödex)])

	)

37 
	#GET_FEC_FLUSH_READ_ENTRY
(
ödex
Ë&(
„c_èbÀs_Êush
->
èbÀ_ªad
[(ödex)])

	)

39 
	#SET_FEC_ACTIVE_WRITE_ENTRY
(
ödex
Ë(
„c_èbÀs_a˘ive
->
èbÀ_wrôe
[(ödex)])

	)

41 
	#FEC_ADD_WRITE_BUFFER_TO_LBA_ENTRY_LIST
(
√w_íåy
, 
hód_of_íåy_li°
) \

42 
	`li°_add
(&(
√w_íåy
)->
ioq
, &(
hód_of_íåy_li°
)->
ioq_hód
);

	)

44 
	#FEC_ADD_WRITE_BUFFER_TO_LBA_TABLE
(
buf„r
, 
lba
) \

46 
PLBA_BLOCK
 
lba_íåy
 = 
	`GET_LBA_ENTRY
((
lba
)); \

47 
	`_ACQUIRE_FEC_LOCK_WRITE
(
lba_íåy
); \

48 
	`li°_add_èû
(&(
buf„r
)->
ioq
, &
lba_íåy
->
ioq_hód
); \

49 
	`_RELEASE_FEC_LOCK_WRITE
(
lba_íåy
); \

50 }

	)

52 
	#FEC_DELETE_WRITE_BUFFER_FROM_LBA_TABLE
(
buf„r
) \

54 
PLBA_BLOCK
 
lba_íåy
 = 
	`GET_LBA_ENTRY
((
buf„r
)->
lba
); \

55 
	`_ACQUIRE_FEC_LOCK_WRITE
(
lba_íåy
); \

56 
	`li°_dñ
(&(
buf„r
)->
ioq
); \

57 
	`_RELEASE_FEC_LOCK_WRITE
(
lba_íåy
); \

58 }

	)

60 
	#FEC_DELETE_WRITE_BUFFER_FROM_LBA_TABLE_OLD
(
buf„r
) \

62 
PLBA_BLOCK
 
lba_íåy
 = 
	`GET_LBA_ENTRY
((
buf„r
)->
lba
); \

63 
	`_ACQUIRE_LBA_LOCK_WRITE
(
lba_íåy
); \

64 
	`li°_dñ
(&(
buf„r
)->
ioq
); \

65 
	`_RELEASE_LBA_LOCK_WRITE
(
lba_íåy
); \

66 }

	)

68 
	#SET_FEC_BUFFER_STATE
(
buf„r
, 
°©e_vÆ
) \

69 
	`FEC_ENTRY_WRITE_LOCK
(
buf„r
); \

70 (
buf„r
)->
°©e
 = (
°©e_vÆ
); \

71 
	`FEC_ENTRY_WRITE_UNLOCK
(
buf„r
);

	)

74 #ifde‡
DZ_KERNEL_VERSION_4


77 
	#COPY_FROM_BIO
(
buf„r
, 
bio
) \

79 
INT
 
ªåy_˙t
 = 0; \

80 
bvec_ôî
 
ôî
; \

81 
BIOVEC
 
bvec
; \

82 
PVOID
 
•agebuf

NULL
; \

83 
PVOID
 
d∑gebuf
(
buf„r
); \

84 
INT
 
bv_Àn
 = 0; \

85 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) { \

86 
bv_Àn
 = 
bvec
.bv_len; \

87 
•agebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
); \

88 
•agebuf
 +
bvec
.
bv_off£t
; \

89 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
bv_Àn
); \

90 
	`kunm≠
(
bvec
.
bv_∑ge
); \

91 i‡(
bv_Àn
 < 
PAGE_SIZE
 ) { \

92 
d∑gebuf
 +
bv_Àn
; \

94 i‡(
ªåy_˙t
++ > 8) { \

95 
	`LOGE
("Eº‹ i¿biÿvec:Ñëry_˙à%d\n", 
ªåy_˙t
);\

96 
	`BUG_ON
(1); \

99 }

	)

101 
	#COPY_TO_BIO
(
bio
, 
buf„r
) \

103 
bvec_ôî
 
ôî
; \

104 
BIOVEC
 
bvec
; \

105 
PVOID
 
d∑gebuf

NULL
; \

106 
PVOID
 
•agebuf
(
buf„r
); \

107 
INT
 
bv_Àn
 = 0; \

108 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) { \

109 
bv_Àn
 = 
bvec
.bv_len; \

110 
d∑gebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
); \

111 
d∑gebuf
 +
bvec
.
bv_off£t
; \

114 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
bv_Àn
); \

115 
	`kunm≠
(
bvec
.
bv_∑ge
); \

116 i‡(
bv_Àn
 < 
PAGE_SIZE
 ) { \

117 
•agebuf
 +
bv_Àn
; \

120 }

	)

122 
	#COPY_BUFFER_TO_PAGE
(
∑ge
, 
buf„r
) \

124 
PVOID
 
d∑gebuf

NULL
; \

125 
PVOID
 
•agebuf
(
buf„r
); \

126 
d∑gebuf
 = 
	`km≠
((
∑ge
)); \

127 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
PAGE_SIZE
); \

128 
	`kunm≠
((
∑ge
)); \

129 }

	)

130 
	#COPY_PAGE_TO_BUFFER
(
buf„r
, 
∑ge
) \

132 
PVOID
 
•agebuf

NULL
; \

133 
•agebuf
 = 
	`km≠
((
∑ge
)); \

134 
	`PMEMCPY
((
buf„r
), 
•agebuf
, 
PAGE_SIZE
); \

135 
	`kunm≠
((
∑ge
)); \

136 }

	)

138 
	#COPY_PAGE_TO_BIO
(
bio
, 
§c_∑ge
) \

140 
bvec_ôî
 
ôî
; \

141 
BIOVEC
 
bvec
; \

142 
PVOID
 
d∑gebuf

NULL
; \

143 
PVOID
 
•agebuf

NULL
; \

144 
INT
 
bv_Àn
 = 0; \

145 
ULONG
 
Êags
 = 0; \

146 
•agebuf
 = 
	`km≠
(
§c_∑ge
); \

147 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) { \

148 
bv_Àn
 = 
bvec
.bv_len; \

149 
d∑gebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
); \

150 
d∑gebuf
 +
bvec
.
bv_off£t
; \

151 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
bv_Àn
); \

152 
	`kunm≠
(
bvec
.
bv_∑ge
); \

153 i‡(
bv_Àn
 < 
PAGE_SIZE
 ) { \

154 
•agebuf
 +
bv_Àn
; \

157 
	`kunm≠
(
§c_∑ge
); \

158 }

	)

160 
	#COPY_PAGE_TO_BIO_ATOMIC
(
bio
, 
§c_∑ge
, 
°©us
) \

162 
bvec_ôî
 
ôî
; \

163 
BIOVEC
 
bvec
; \

164 
PVOID
 
d∑gebuf

NULL
; \

165 
PVOID
 
•agebuf

NULL
; \

166 
INT
 
bv_Àn
 = 0; \

167 
ULONG
 
Êags
 = 0; \

168 
•agebuf
 = 
	`km≠_©omic
(
§c_∑ge
); \

169 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) { \

170 
bv_Àn
 = 
bvec
.bv_len; \

171 
d∑gebuf
 = 
	`bvec_km≠_úq
(&
bvec
, &
Êags
);\

172 i‡(!
d∑gebuf
) { \

173 
°©us
 = 
FALSE
; \

174 
	`LOGW
("bvec_kmap_irq failed\n"); \

176 
	`BUG_ON
(1); \

179 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
bv_Àn
); \

180 
	`bvec_kunm≠_úq
(
d∑gebuf
, &
Êags
); \

181 i‡(
bv_Àn
 < 
PAGE_SIZE
 ) { \

182 
•agebuf
 +
bv_Àn
; \

185 
	`kunm≠_©omic
(
•agebuf
); \

186 }

	)

188 
	#COPY_SINGLE_PAGE_FROM_BIO
(
d°_∑ge
, 
bio
) \

190 
PVOID
 
d∑gebuf

NULL
; \

191 
PVOID
 
•agebuf

NULL
; \

192 
BIOVEC
 
bvec
 = 
	`bio_iovec
((
bio
)); \

193 
d∑gebuf
 = 
	`km≠
((
d°_∑ge
)); \

194 
•agebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
); \

195 
•agebuf
 +
bvec
.
bv_off£t
; \

196 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
PAGE_SIZE
); \

197 
	`kunm≠
(
bvec
.
bv_∑ge
); \

198 
	`kunm≠
(
d°_∑ge
); \

199 }

	)

201 
	#COPY_PAGE_FROM_BIO
(
d°_∑ge
, 
bio
) \

203 
BIOVEC
 
bvec
; \

204 
bvec_ôî
 
ôî
; \

205 
PVOID
 
d∑gebuf

NULL
; \

206 
PVOID
 
•agebuf

NULL
; \

207 
INT
 
bv_Àn
 = 0; \

208 
d∑gebuf
 = 
	`km≠
(
d°_∑ge
); \

209 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) { \

210 
bv_Àn
 = 
bvec
.bv_len; \

211 
•agebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
); \

212 
•agebuf
 +
bvec
.
bv_off£t
; \

213 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
bv_Àn
); \

214 
	`kunm≠
(
bvec
.
bv_∑ge
); \

215 i‡(
bv_Àn
 < 
PAGE_SIZE
 ) { \

216 
d∑gebuf
 +
bv_Àn
; \

219 
	`kunm≠
(
d°_∑ge
); \

220 }

	)

222 
	#COPY_FROM_BIO_PARTIAL
(
„cw
, 
bio
) \

224 
bvec_ôî
 
ôî
; \

225 
BIOVEC
 
bvec
; \

226 
PVOID
 
∑gebuf
 = 
NULL
; \

227 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) { \

228 (
„cw
)->
bv_Àn
 = 
bvec
.bv_len; \

229 (
„cw
)->
bv_off£t
 = 
bvec
.bv_offset; \

230 
∑gebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
); \

231 i‡(
bvec
.
bv_off£t
 == 0) { \

232 
	`mem˝y
((
„cw
).
bv_∑ge
, 
∑gebuf
, 
bvec
.
bv_Àn
); \

234 
	`BUG_ON
(1); \

236 
	`kunm≠
(
bvec
.
bv_∑ge
); \

238 }

	)

241 
	#COPY_TO_BIO_PARTIAL
(
bio
, 
„cw
) \

243 
bvec_ôî
 
ôî
; \

244 
BIOVEC
 
bvec
; \

245 
PVOID
 
∑gebuf
 = 
NULL
; \

246 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) { \

247 
∑gebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
); \

248 i‡(
bvec
.
bv_off£t
 == 0) { \

249 
	`mem˝y
(
∑gebuf
, (
„cw
).
bv_∑ge
, („cw).
bv_Àn
);\

251 
	`BUG_ON
(1); \

253 
	`kunm≠
(
bvec
.
bv_∑ge
); \

255 }

	)

260 
	#COPY_FROM_BIO
(
buf„r
, 
bio
) \

262 
INT
 
ªåy_˙t
 = 0; \

263 
bvec_ôî
 
ôî
; \

264 
BIOVEC
 
bvec
; \

265 
PVOID
 
•agebuf

NULL
; \

266 
PVOID
 
d∑gebuf
(
buf„r
); \

267 
INT
 
bv_Àn
 = 0; \

268 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) { \

269 
bv_Àn
 = 
bvec
.bv_len; \

270 
•agebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
); \

271 
•agebuf
 +
bvec
.
bv_off£t
; \

272 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
bv_Àn
); \

273 
	`kunm≠
(
bvec
.
bv_∑ge
); \

274 i‡(
bv_Àn
 < 
PAGE_SIZE
 ) { \

275 
d∑gebuf
 +
bv_Àn
; \

277 i‡(
ªåy_˙t
++ > 8) { \

278 
	`LOGE
("Eº‹ i¿biÿvec:Ñëry_˙à%d\n", 
ªåy_˙t
);\

279 
	`BUG_ON
(1); \

282 }

	)

284 
	#COPY_TO_BIO
(
bio
, 
buf„r
) \

286 
bvec_ôî
 
ôî
; \

287 
BIOVEC
 
bvec
; \

288 
PVOID
 
d∑gebuf

NULL
; \

289 
PVOID
 
•agebuf
(
buf„r
); \

290 
INT
 
bv_Àn
 = 0; \

291 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) { \

292 
bv_Àn
 = 
bvec
.bv_len; \

293 
d∑gebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
); \

294 
d∑gebuf
 +
bvec
.
bv_off£t
; \

297 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
bv_Àn
); \

298 
	`kunm≠
(
bvec
.
bv_∑ge
); \

299 i‡(
bv_Àn
 < 
PAGE_SIZE
 ) { \

300 
•agebuf
 +
bv_Àn
; \

303 }

	)

305 
	#COPY_BUFFER_TO_PAGE
(
∑ge
, 
buf„r
) \

307 
PVOID
 
d∑gebuf

NULL
; \

308 
PVOID
 
•agebuf
(
buf„r
); \

309 
d∑gebuf
 = 
	`km≠
((
∑ge
)); \

310 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
PAGE_SIZE
); \

311 
	`kunm≠
((
∑ge
)); \

312 }

	)

313 
	#COPY_PAGE_TO_BUFFER
(
buf„r
, 
∑ge
) \

315 
PVOID
 
•agebuf

NULL
; \

316 
•agebuf
 = 
	`km≠
((
∑ge
)); \

317 
	`PMEMCPY
((
buf„r
), 
•agebuf
, 
PAGE_SIZE
); \

318 
	`kunm≠
((
∑ge
)); \

319 }

	)

321 
	#COPY_PAGE_TO_BIO
(
bio
, 
§c_∑ge
) \

323 
bvec_ôî
 
ôî
; \

324 
BIOVEC
 
bvec
; \

325 
PVOID
 
d∑gebuf

NULL
; \

326 
PVOID
 
•agebuf

NULL
; \

327 
INT
 
bv_Àn
 = 0; \

328 
ULONG
 
Êags
 = 0; \

329 
•agebuf
 = 
	`km≠
(
§c_∑ge
); \

330 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) { \

331 
bv_Àn
 = 
bvec
.bv_len; \

332 
d∑gebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
); \

333 
d∑gebuf
 +
bvec
.
bv_off£t
; \

334 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
bv_Àn
); \

335 
	`kunm≠
(
bvec
.
bv_∑ge
); \

336 i‡(
bv_Àn
 < 
PAGE_SIZE
 ) { \

337 
•agebuf
 +
bv_Àn
; \

340 
	`kunm≠
(
§c_∑ge
); \

341 }

	)

343 
	#COPY_PAGE_TO_BIO_ATOMIC
(
bio
, 
§c_∑ge
, 
°©us
) \

345 
bvec_ôî
 
ôî
; \

346 
BIOVEC
 
bvec
; \

347 
PVOID
 
d∑gebuf

NULL
; \

348 
PVOID
 
•agebuf

NULL
; \

349 
INT
 
bv_Àn
 = 0; \

350 
ULONG
 
Êags
 = 0; \

351 
•agebuf
 = 
	`km≠_©omic
(
§c_∑ge
); \

352 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) { \

353 
bv_Àn
 = 
bvec
->bv_len; \

354 
d∑gebuf
 = 
	`bvec_km≠_úq
(
bvec
, &
Êags
); \

355 i‡(!
d∑gebuf
) { \

356 
°©us
 = 
FALSE
; \

357 
	`LOGW
("bvec_kmap_irq failed\n"); \

359 
	`BUG_ON
(1); \

362 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
bv_Àn
); \

363 
	`bvec_kunm≠_úq
(
d∑gebuf
, &
Êags
); \

364 i‡(
bv_Àn
 < 
PAGE_SIZE
 ) { \

365 
•agebuf
 +
bv_Àn
; \

368 
	`kunm≠_©omic
(
•agebuf
); \

369 }

	)

371 
	#COPY_SINGLE_PAGE_FROM_BIO
(
d°_∑ge
, 
bio
) \

373 
PVOID
 
d∑gebuf

NULL
; \

374 
PVOID
 
•agebuf

NULL
; \

375 
PBIOVEC
 
bvec
 = 
	`bio_iovec
((
bio
)); \

376 
d∑gebuf
 = 
	`km≠
((
d°_∑ge
)); \

377 
•agebuf
 = 
	`km≠
(
bvec
->
bv_∑ge
); \

378 
•agebuf
 +
bvec
->
bv_off£t
; \

379 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
PAGE_SIZE
); \

380 
	`kunm≠
(
bvec
->
bv_∑ge
); \

381 
	`kunm≠
(
d°_∑ge
); \

382 }

	)

384 
	#COPY_PAGE_FROM_BIO
(
d°_∑ge
, 
bio
) \

386 
bvec_ôî
 
ôî
; \

387 
BIOVEC
 
bvec
; \

388 
PVOID
 
d∑gebuf

NULL
; \

389 
PVOID
 
•agebuf

NULL
; \

390 
INT
 
bv_Àn
 = 0; \

391 
d∑gebuf
 = 
	`km≠
(
d°_∑ge
); \

392 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) { \

393 
bv_Àn
 = 
bvec
.bv_len; \

394 
•agebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
); \

395 
•agebuf
 +
bvec
.
bv_off£t
; \

396 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
bv_Àn
); \

397 
	`kunm≠
(
bvec
.
bv_∑ge
); \

398 i‡(
bv_Àn
 < 
PAGE_SIZE
 ) { \

399 
d∑gebuf
 +
bv_Àn
; \

402 
	`kunm≠
(
d°_∑ge
); \

403 }

	)

405 
	#COPY_FROM_BIO_PARTIAL
(
„cw
, 
bio
) \

407 
bvec_ôî
 
ôî
; \

408 
BIOVEC
 
bvec
; \

409 
PVOID
 
∑gebuf
 = 
NULL
; \

410 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) { \

411 (
„cw
)->
bv_Àn
 = 
bvec
.bv_len; \

412 (
„cw
)->
bv_off£t
 = 
bvec
.bv_offset; \

413 
∑gebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
); \

414 i‡(
bvec
.
bv_off£t
 == 0) { \

415 
	`mem˝y
((
„cw
)->
bv_∑ge
, 
∑gebuf
, 
bvec
.
bv_Àn
); \

417 
	`BUG_ON
(1); \

419 
	`kunm≠
(
bvec
.
bv_∑ge
); \

421 }

	)

424 
	#COPY_TO_BIO_PARTIAL
(
bio
, 
„cw
) \

426 
bvec_ôî
 
ôî
; \

427 
BIOVEC
 
bvec
; \

428 
PVOID
 
∑gebuf
 = 
NULL
; \

429 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
ôî
) { \

430 
∑gebuf
 = 
	`km≠
(
bvec
.
bv_∑ge
); \

431 i‡(
bvec
.
bv_off£t
 == 0) { \

432 
	`mem˝y
(
∑gebuf
, (
„cw
)->
bv_∑ge
, („cw)->
bv_Àn
);\

434 
	`BUG_ON
(1); \

436 
	`kunm≠
(
bvec
.
bv_∑ge
); \

438 }

	)

443 
	udz_„c_d©a_wrôe_s
 {

445 
UINT
 
	mwrôe_lock
:1;

446 
UINT
 
	m°©e
:7;

447 
	#FECBUF_STATE_IDLE
 0

	)

448 
	#FECBUF_STATE_ALLOCATED
 1

	)

449 
	#FECBUF_STATE_MEMORY_WRITE_IN_PROGRESS
 2

	)

450 
	#FECBUF_STATE_MEMORY_WRITE_COMPLETED
 3

	)

451 
	#FECBUF_STATE_MEMORY_WRITE_ERROR
 4

	)

452 
	#FECBUF_STATE_DEDUPE_WRITE_IN_PROGRESS
 5

	)

453 
	#FECBUF_STATE_DEDUPE_WRITE_COMPLETED
 6

	)

454 
	#FECBUF_STATE_DEDUPE_WRITE_ERROR
 7

	)

455 
	#FECBUF_STATE_FLUSH_STARTED
 8

	)

456 
	#FECBUF_STATE_FLUSH_COMPLETED
 9

	)

457 
	#FECBUF_STATE_FLUSH_ERROR
 10

	)

458 
	#FECBUF_STATE_REPLAY_STARTED
 11

	)

459 
	#FECBUF_STATE_REPLAY_COMPLETED
 12

	)

461 
UINT
 
	mªad_ªf_˙t
:24;

464 
CHAR
 
	mbv_∑ge
[
PAGE_SIZE
];

465 
U64
 
	mlba
;

466 
DZ_COMPLETION
 
	mio_com∂ëi⁄
;

467 
U64
 
	mödex
;

470 
LIST_HEAD
 
	mÊushq
;

473 
LIST_HEAD
 
	mioq
;

474 }
__©åibuã__
((
__∑cked__
));

475 
ULONG
 
	md⁄Ÿch™ge
;

476 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tFEC_WRITE
, *
	tPFEC_WRITE
;

479 
	sdz_„c_èbÀ_s
 {

482 
PFEC_WRITE
 
	mwrôe_èbÀ
;

483 
PFEC_WRITE
 
	mèbÀ_wrôe
;

486 
U64
 
	mtŸÆ_a˘ive_˙t
;

487 
U64
 
	mtŸÆ_Êush_˙t
;

488 
U64
 
	mtŸÆ_a˘ive_cou¡
;

489 
U64
 
	mtŸÆ_Êush_cou¡
;

491 
BOOL
 
	mÊush_ö_¥ogªss
;

492 
LIST_HEAD
 
	mÊushq_hód
;

494 } 
	tFEC_TABLE
, *
	tPFEC_TABLE
;

498 
PFEC_WRITE
 
GET_FEC_SINGLE_FREE_BUFFER
(
VOID
);

499 
PFEC_WRITE
 
GET_FEC_MULTIPLE_FREE_BUFFERS
(
INT
 
num_bufs
);

500 
INT
 
dz_„c_ígöe_öô
(
VOID
);

501 
RVOID
 
dz_„c_ígöe_exô
(
VOID
);

502 
RVOID
 
dz_„c_io
(
PIOREQUEST
 
i‹eque°
);

503 
RVOID
 
dz_„c_ª∂ay_io
(
PIOREQUEST
 
i‹eque°
);

504 
RVOID
 
dz_„c_èbÀ_ª£t
(
PFEC_TABLE
 
èbÀ
);

507 
RVOID
 
dz_„c_ªad_io
(
PIOREQUEST
 
i‹eque°
);

508 
RPVOID
 
dz_„c_d©a_ªad_Æloc
(
VOID
);

509 
RVOID
 
dz_„c_d©a_ªad_‰ì
(
PVOID
 
±r
);

510 
PMEMPOOL
 
dz_¸óã_„c_d©a_ªad_poﬁ
(
UINT
 
num_íåõs
);

511 
RVOID
 
dz_de°roy_„c_d©a_ªad_poﬁ
(
PMEMPOOL
 
poﬁ
, 
UINT
 
num_íåõs
);

512 
PVOID
 
dz_¸óã_„c_d©a_ªad_èbÀ
(
U64
 
èbÀ_size
);

513 
RVOID
 
dz_de°roy_„c_d©a_ªad_èbÀ
(
PVOID
 
±r
);

516 
RVOID
 
dz_„c_wrôe_io
(
PIOREQUEST
 
i‹eque°
);

517 
PVOID
 
dz_¸óã_„c_d©a_wrôe_èbÀ
(
U64
 
èbÀ_size
);

518 
RVOID
 
dz_de°roy_„c_d©a_wrôe_èbÀ
(
PVOID
 
±r
, 
U64
);

521 
RVOID
 
dz_„c_Êush_io
(
PIOREQUEST
 
i‹eque°
);

522 
RVOID
 
dz_Êush_biod⁄e
(
PBIO
 
bio
, 
INT
 
îr‹
);

523 
PIOREQUEST
 
dz_„c_¸óã_Êush_bio
(
PFEC_WRITE
 
„c_d©a_íåy
);

524 
PIOREQUEST
 
dz_„c_¸óã_Êush_io
(
PFEC_WRITE
 
„c_d©a_íåy
);

525 
RINT
 
dz_„c_Êush_timî
(
PVOID
 
d©a
);

526 
RVOID
 
dz_„c_Êush_timî_°›
(
VOID
);

527 
RVOID
 
dz_„c_Êush_swôchovî
(
VOID
);

530 
RVOID
 
dz_Ár_∑ª¡_biod⁄e
(
PBIO
 
bio
);

531 
RVOID
 
dz_Ár_mu…i_block_hód_u«lig√d_biod⁄e
(
PBIO
 
bio
);

532 
RVOID
 
dz_Ár_mu…i_block_èû_u«lig√d_biod⁄e
(
PBIO
 
bio
);

533 
RVOID
 
dz_Ár_mu…i_block_bŸh_Æig√d_biod⁄e
(
PBIO
 
bio
);

534 
RVOID
 
dz_Ár_f‹_sögÀ_block_biod⁄e_èû
(
PBIO
 
bio
);

535 
RVOID
 
dz_Ár_f‹_sögÀ_block_biod⁄e_hód
(
PBIO
 
bio
);

536 
RVOID
 
dz_Ár_f‹_∑πül_block_biod⁄e_èû
(
PBIO
 
bio
);

537 
RVOID
 
dz_Ár_f‹_∑πül_block_biod⁄e_hód
(
PBIO
 
bio
);

538 
RVOID
 
dz_Ár_f‹_∑πül_block_biod⁄e
(
PBIO
 
bio
);

539 
RVOID
 
dz_„c_Æign_ªad_sögÀ_∑ge_async
(
PIOREQUEST
 
∑ª¡_i‹eque°
, 
BIODONE
 
d⁄e
);

540 
RVOID
 
dz_„c_Æign_ªad_doubÀ_∑ge_async
(
PIOREQUEST
 
∑ª¡_i‹eque°
,

541 
BIODONE
 
d⁄e_hód
, BIODONE 
d⁄e_èû
);

543 
RVOID
 
dz_Áw_f‹_∑πül_block_biod⁄e_hód
(
PBIO
 
bio
, 
INT
 
îr‹
);

544 
RVOID
 
dz_Áw_f‹_∑πül_block_biod⁄e_èû
(
PBIO
 
bio
, 
INT
 
îr‹
);

545 
RVOID
 
dz_Ár_mu…i_block_bŸh_u«lig√d
(
PIOREQUEST
 
pi‹eque°
);

546 
RVOID
 
dz_Ár_mu…i_block_hód_u«lig√d
(
PIOREQUEST
 
pi‹eque°
);

547 
RVOID
 
dz_Ár_mu…i_block_èû_u«lig√d
(
PIOREQUEST
 
pi‹eque°
);

548 
RVOID
 
dz_Ár_mu…i_block_bŸh_Æig√d
(
PIOREQUEST
 
pi‹eque°
);

549 
RVOID
 
dz_„c_Æign_ªad_f‹_∑πül_block
(
PIOREQUEST
 
pi‹eque°
);

550 
RVOID
 
dz_„c_Æign_ªad_f‹_sögÀ_block
(
PIOREQUEST
 
pi‹eque°
);

551 
RINT
 
dz_„c_Æign_ªad_f‹_mu…i_block
(
PIOREQUEST
 
pi‹eque°
);

552 
RVOID
 
dz_„c_Æign_ªad_io
(
PIOREQUEST
 
pi‹eque°
);

553 
RVOID
 
dz_„c_Æign_ªad_io_dúe˘
(
PIOREQUEST
 
i‹eque°
);

555 
RVOID
 
dz_Áw_∑ª¡_biod⁄e
(
PBIO
 
bio
, 
INT
 
îr‹
);

556 
RVOID
 
dz_„c_Æign_wrôe_doubÀ_∑ge_async_biod⁄e_hód
(
PBIO
 
bio
, 
INT
 
îr‹
);

557 
RVOID
 
dz_„c_Æign_ªad_doubÀ_∑ge_async_biod⁄e_èû
(
PBIO
 
bio
, 
INT
 
îr‹
);

558 
RVOID
 
dz_„c_Æign_wrôe_doubÀ_∑ge_async
(
PIOREQUEST
 , 
SECTOR
 , 
BIODONE
 , BIODONE );

559 
RVOID
 
dz_„c_Æign_ªad_∑ge_async_∑ª¡_biod⁄e
(
PBIO
 , 
INT
 );

560 
RVOID
 
dz_„c_Æign_ªad_∑ge_sync_biod⁄e
(
PBIO
 , 
INT
 );

561 
RVOID
 
dz_„c_Æign_ªad_∑ge_async_biod⁄e
(
PBIO
 , 
INT
 );

562 
RVOID
 
dz_„c_Æign_ªad_∑ge_async_biod⁄e_hód
(
PBIO
 , 
INT
 );

563 
RVOID
 
dz_„c_Æign_ªad_∑ge_async_biod⁄e_èû
(
PBIO
 , 
INT
 );

564 
PPAGE
 
dz_„c_Æign_ªad_∑ge_sync
(
PIOREQUEST
, 
PBIO
, 
SECTOR
);

565 
PIOREQUEST
 
dz_„c_Æign_ªad_∑ge_async
(PIOREQUEST, 
PBIO
, 
SECTOR
, 
PBIOVEC
, 
BIODONE
 );

566 
RVOID
 
dz_„c_Æign_ªad_∑ge_async2
(
PIOREQUEST
 
∑ª¡_i‹eque°
, 
BIODONE
 
d⁄e
);

568 
RVOID
 
dz_„c_Æign_wrôe_f‹_mu…i_block
(
PIOREQUEST
);

569 
RVOID
 
dz_Áw_mu…i_block_Æl_Æig√d
(
PIOREQUEST
);

570 
RVOID
 
dz_Áw_mu…i_block_èû_u«lig√d
(
PIOREQUEST
);

571 
RVOID
 
dz_Áw_mu…i_block_hód_u«lig√d
(
PIOREQUEST
);

572 
RVOID
 
dz_Áw_mu…i_block_bŸh_u«lig√d
(
PIOREQUEST
);

573 
PIOREQUEST
 
dz_Áw_mu…i_block_ªad_∑ge_async
(PIOREQUEST, 
PBIO
, 
SECTOR
, 
PBIOVEC
, 
BIODONE
);

574 
RVOID
 
dz_Áw_mu…i_∑ge_ªad_∑ge_async_biod⁄e_èû
(
PBIO
);

575 
RVOID
 
dz_Áw_mu…i_∑ge_ªad_∑ge_async_biod⁄e_hód
(
PBIO
);

576 
RVOID
 
dz_Áw_mu…i_block_ªad_∑ge_async_∑ª¡_biod⁄e
(
PBIO
);

578 
RVOID
 
dz_„c_Æign_wrôe_f‹_∑πül_block
(
PIOREQUEST
 );

579 
PPAGE
 
dz_Áw_∑πül_block_ªad_∑ge_sync
(
PIOREQUEST
, 
PBIO
, 
SECTOR
);

580 
RVOID
 
dz_Áw_∑πül_block_ªad_∑ge_sync_biod⁄e
(
PBIO
);

581 
RVOID
 
dz_Áw_∑πül_block_doubÀ_∑ge_async
(
PIOREQUEST
, 
SECTOR
, 
BIODONE
, BIODONE);

582 
RVOID
 
dz_Áw_∑πül_block_doubÀ_∑ge_async_biod⁄e_hód
(
PBIO
);

583 
RVOID
 
dz_Áw_∑πül_block_doubÀ_∑ge_async_biod⁄e_èû
(
PBIO
);

584 
RVOID
 
dz_Áw_∑πül_block_∑ª¡_biod⁄e
(
PBIO
);

586 
RVOID
 
dz_„c_Æign_wrôe_f‹_sögÀ_block
(
PIOREQUEST
 );

587 
RVOID
 
dz_Áw_sögÀ_block_doubÀ_∑ge_async
(
PIOREQUEST
, 
SECTOR
, 
BIODONE
, BIODONE);

588 
RVOID
 
dz_Áw_sögÀ_block_doubÀ_∑ge_async_biod⁄e_hód
(
PBIO
);

589 
RVOID
 
dz_Áw_sögÀ_block_doubÀ_∑ge_async_biod⁄e_èû
(
PBIO
 
bio
);

590 
RVOID
 
dz_Áw_sögÀ_block_i‹eque°_d⁄e
(
PVOID
 , 
INT
 );

591 
RVOID
 
dz_Áw_sögÀ_block_∑ª¡_biod⁄e
(
PBIO
 );

592 
RVOID
 
dz_„c_Æign_wrôe_io
(
PIOREQUEST
 );

593 
RVOID
 
dz_„c_Æign_wrôe_bŸh_Æig√d
(
PIOREQUEST
 );

594 
RVOID
 
dz_„c_Æign_wrôe_èû_u«lig√d
(
PIOREQUEST
 );

595 
RVOID
 
dz_„c_Æign_wrôe_hód_u«lig√d
(
PIOREQUEST
 );

596 
RVOID
 
dz_„c_Æign_wrôe_bŸh_u«lig√d
(
PIOREQUEST
 );

599 
	#¥öt_„cw
(
„cw
Ë
	`¥öt_„cws
((„cw), 
NULL
)

	)

600 
RVOID
 
¥öt_„cws
(
PFEC_WRITE
 
„cw
, 
CHAR
 *
°r
);

602 
RINT
 
dz_bôm≠_öô
(
PBITMAP
 
bôm≠
, 
U64
 
èbÀ_size
);

603 
S64
 
dz_„c_gë_‰ì_buf„r_ödex
(
U64
 
èbÀ_size
);

604 
RINT
 
dz_„c_put_buf„r_ödex
(
U64
 
ödex
, U64 
èbÀ_size
);

605 
RVOID
 
dz_„c_add_wrôe_buf„r_to_Êushq
(
PFEC_WRITE
 
„cw
);

606 
RVOID
 
dz_„c_¸óã_Êush_i‹eque°
(
VOID
);

607 
RVOID
 
dz_„c_öô_cou¡îs
(
VOID
);

	@headers/infra_engine.h

9 #i‚de‡
_INFRA_ENGINE_H_


10 
	#_INFRA_ENGINE_H_


	)

12 
INT
 
dz_ö‰a_ígöe_öô
(
VOID
);

13 
RVOID
 
dz_ö‰a_ígöe_exô
(
VOID
);

14 
RVOID
 
dz_°›_Æl_thªads
(
VOID
);

16 
RVOID
 
_ACQUIRE_TRANSACTION_LOCK
(
VOID
);

17 
RVOID
 
_RELEASE_TRANSACTION_LOCK
(
VOID
);

19 
RVOID
 
_ACQUIRE_FEC_LOCK_READ
(
PLBA_BLOCK
);

20 
RVOID
 
_RELEASE_FEC_LOCK_READ
(
PLBA_BLOCK
);

22 
RVOID
 
_ACQUIRE_FEC_LOCK_WRITE
(
PLBA_BLOCK
);

23 
RVOID
 
_RELEASE_FEC_LOCK_WRITE
(
PLBA_BLOCK
);

25 
RVOID
 
_ACQUIRE_LBA_LOCK_WRITE
(
PLBA_BLOCK
);

26 
RVOID
 
_RELEASE_LBA_LOCK_WRITE
(
PLBA_BLOCK
);

28 
RVOID
 
_ACQUIRE_BEC_LOCK_READ
(
VOID
);

29 
RVOID
 
_RELEASE_BEC_LOCK_READ
(
VOID
);

31 
RVOID
 
_ACQUIRE_BEC_LOCK_WRITE
(
VOID
);

33 
RVOID
 
_RELEASE_BEC_LOCK_WRITE
(
VOID
);

35 #ifde‡
DZ_KERNEL_VERSION_4


36 
fûe
 *
dz_fûe_›í
(c⁄° *
∑th
, 
INT
 
Êags
, INT 
rights
);

37 
ssize_t
 
dz_fûe_ªad
(
fûe
 *fûe, *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
);

38 
ssize_t
 
dz_fûe_wrôe
(
fûe
 *fûe, c⁄° *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
);

39 
RVOID
 
dz_fûe_˛o£
(
fûe
 *file);

40 
RINT
 
dz_fûe_sync
(
fûe
 *file);

42 
fûe
 *
dz_fûe_›í
(c⁄° *
∑th
, 
INT
 
Êags
, INT 
rights
);

43 
ssize_t
 
dz_fûe_ªad
(
fûe
 *fûe, 
__u£r
 *
d©a
, 
size_t
 
size
, 
loff_t
 *
off£t
);

44 
ssize_t
 
dz_fûe_wrôe
(
fûe
 *fûe, c⁄° 
__u£r
 *
d©a
, 
size_t
 
size
, 
loff_t
 
off£t
);

45 
RVOID
 
dz_fûe_˛o£
(
fûe
 *file);

46 
RINT
 
dz_fûe_sync
(
fûe
 *file);

49 
RINT
 
dz_avm_log_fûe_›í
(
VOID
);

50 
RINT
 
dz_avm_log_fûe_wrôe_øw
(
CHAR
 *
d©a
, 
UINT
 
size
 );

51 
RINT
 
dz_avm_log_fûe_wrôe
(c⁄° *
f‹m©
, ...);

52 
RVOID
 
dz_avm_log_fûe_˛o£
(
VOID
);

54 
BOOL
 
dz_¥o˚ss_öãrvÆ_åì
(
LBA
 
off£t
, 
UINT
 
iosize
);

56 
	#DZ_ALLOC_NODE
(
size
Ë
	`dz_kmÆloc
((size), 
GFP_KERNEL
);

	)

	@headers/infra_engine_hash_murmur3.h

9 #i‚de‡
_MURMURHASH3_H_


10 
	#_MURMURHASH3_H_


	)

17 
	~<löux/ty≥s.h
>

18 
	~<löux/moduÀ.h
>

20 
MurmurHash3_x86_32
(c⁄° *
key
, 
Àn
, 
uöt32_t
 
£ed
, *
out
);

22 
MurmurHash3_x86_128
(c⁄° *
key
, 
Àn
, 
uöt32_t
 
£ed
, *
out
);

24 
MurmurHash3_x64_128
(c⁄° *
key
, 
size_t
 
Àn
, 
uöt32_t
 
£ed
, *
out
);

	@headers/iorequest.h

1 #i‚de‡
_IOREQUEST_H_


2 
	#_IOREQUEST_H_


	)

4 
	~"thªad_poﬁ_ígöe.h
"

5 
	gdz_dedu≥_öfo_s
;

7 
	sdz_i‹eque°_s
 {

8 
UINT
 
	mi‹_ty≥
;

11 
	#DZ_IOR_TYPE_APPLICATION_IO_READ
 1

	)

14 
	#DZ_IOR_TYPE_APPLICATION_IO_WRITE
 2

	)

17 
	#DZ_IOR_TYPE_INTERNAL_PARENT_IO_READ
 3

	)

18 
	#DZ_IOR_TYPE_INTERNAL_PARENT_IO_WRITE
 4

	)

21 
	#DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ
 5

	)

24 
	#DZ_IOR_TYPE_INTERNAL_CHILD_IO_READ_SHARE_PAGE
 6

	)

27 
	#DZ_IOR_TYPE_INTERNAL_CHILD_IO_WRITE
 7

	)

30 
	#DZ_IOR_TYPE_INTERNAL_CHILD_IO_WRITE_SHARE_PAGE
 8

	)

32 
PBIO
 
	mi‹_bio
;

33 
ATOMIC
 
	mi‹_ªf_˙t
;

34 
SECTOR
 
	mi‹_£˘‹
;

37 
UINT
 
	mi‹_iosize
;

38 
UINT
 
	mi‹_size
;

39 
UINT
 
	mi‹_Àn
;

42 
PPAGE
 
	mi‹_ˇche_∑ge
;

45 
PPAGE
 
	mi‹_bv_∑ge
;

46 
PVOID
 
	mi‹_bv_buf„r
;

48 
UINT
 
	mi‹_bv_Àn
:18;

49 
UINT
 
	mi‹_bv_off£t
:12;

51 
UINT
 
	mi‹_bec_ªque°_ty≥
:2;

53 
IOREQUEST_DONE
 
	mi‹_d⁄efun
;

54 
ATOMIC
 
	mi‹_chûd_˙t
;

55 
LBA
 
	mi‹_lba
;

56 
PVOID
 
	mi‹_¥iv©e
;

58 
TIME
 
	mi‹_t°¨t
;

59 
TIME
 
	mi‹_ãnd
;

60 
dz_thªad_poﬁ_s
 *
	mi‹_thªad_poﬁ
;

61 
dz_i‹eque°_s
 *
	mi‹_∑ª¡
;

66 
li°_hód
 
	mi‹_ioq
;

69 
li°_hód
 
	mi‹_ioq_hód_loˇl
;

71 
LIST_HEAD
 
	mi‹_Êushq_hód
;

75 
dz_dedu≥_öfo_s
 *
	mi‹_ddöfo
;

77 } 
	tDZIO
, *
	tPDZIO
, 
	tDZIO_T
, *
	tPDZIO_T
, 
	tIOREQUEST
, *
	tPIOREQUEST
;

84 
RVOID
 
i‹eque°_gë
(
PIOREQUEST
 
i‹eque°
);

85 
RVOID
 
i‹eque°_put
(
PIOREQUEST
 
i‹eque°
);

87 
RVOID
 
dz_chûd_biod⁄e
(
PBIO
 
bio
, 
INT
 
îr‹
);

88 
RVOID
 
dz_öô_chûd_bio
(
PBIO
 
∑ª¡_bio
, PBIO 
chûd_bio
, 
SECTOR
 
£˘‹
, 
BIO_CALLBACK
 
d⁄e
, 
PVOID
 
¥iv©e
);

89 
RINT
 
dz_wrôe_•lô_bio_wôhout_Æignmít_¥o˚ssög
(
PIOREQUEST
 
pi‹eque°
);

90 
PIOREQUEST
 
dz_Æloc_™d_öô_i‹eque°
(
PBIO
 
bio
, PBIO 
chûd_bio
, 
SECTOR
 
£˘‹
, 
BOOL
 
syncÊag
);

92 
PIOREQUEST
 
dz_¸óã_i‹eque°_wôhout_bio_bvec
(PIOREQUEST 
∑ª¡_i‹eque°
, 
UINT
 
ƒ_bvecs
, 
SECTOR
 
£˘‹
);

93 
PIOREQUEST
 
dz_¸óã_i‹eque°_wôh_bio_bvec
(PIOREQUEST 
∑ª¡_i‹eque°
, 
SECTOR
 
£˘‹
);

95 
RVOID
 
dz_q_i‹eque°
(
DZ_THREAD_POOL
 *
poﬁ
, 
PDZIO
 
i‹eque°
);

96 
RVOID
 
dz_q_i‹eque°_thªad_poﬁ
(
PDZIO
 
i‹eque°
);

98 
RVOID
 
dz_q_i‹eque°_li°
(
DZ_THREAD_POOL
 *
poﬁ
, 
li°_hód
 *
√wli°
, 
UINT
 
cou¡
);

99 
PDZIO
 
dz_dq_i‹eque°
(
DZ_THREAD_POOL
 *
poﬁ
);

100 
UINT
 
dz_out°™dög_i‹eque°s
(
DZ_THREAD_POOL
 *
poﬁ
);

101 
RVOID
 
dz_waô_f‹_Æl_i‹eque°s_föished
(
DZ_THREAD_POOL
 *
poﬁ
);

102 
RVOID
 
dz_q_chûd_i‹eque°_to_∑ª¡_q
(
PDZIO
 
∑ª¡_i‹eque°
, PDZIO 
chûd_i‹eque°
);

104 
RVOID
 
dz_mîge_∑ª¡_loˇl_q_to_thªadpoﬁ_q
(
DZ_THREAD_POOL
 *
poﬁ
, 
PIOREQUEST
 
∑ª¡_i‹eque°
);

107 
RVOID
 
dz_¸óã_i‹eque°_f‹_sögÀ_block_ªad
(
PIOREQUEST
, 
SECTOR
 , 
BIODONE
);

108 
RVOID
 
¥öt_i‹eque°
(
PIOREQUEST
 
p
, *
°r
);

109 
RVOID
 
¥öt_i‹eque°_lôe
(
PIOREQUEST
 
p
, *
°r
);

110 
RVOID
 
dz_Áke_iod⁄e
(
PIOREQUEST
 
i‹eque°
);

111 
RVOID
 
dz_iod⁄e
(
PIOREQUEST
 
i‹eque°
);

112 
RVOID
 
dz_wrôe_iod⁄e
(
PIOREQUEST
 
i‹eque°
);

113 
RVOID
 
dz_ªad_iod⁄e
(
PIOREQUEST
 
i‹eque°
);

114 
RVOID
 
dz_iod⁄e_îr‹
(
PIOREQUEST
 
i‹eque°
, 
INT
 
îr‹
);

	@headers/lab_engine_binary_tree.h

9 #i‚de‡
_LAB_ENGINE_BINARY_TREE_H_


10 
	#_LAB_ENGINE_BINARY_TREE_H_


	)

12 
	sdz_bö¨y_node_s
 {

14 
LONG
 
	md©a
;

15 
CHAR
 
	md©a_°r
[8];

18 
dz_bö¨y_node_s
 *
	mÀ·
;

19 
dz_bö¨y_node_s
 *
	mright
;

20 
	#_LAB_ENGINE_BINARY_TREE_H_DEBUG_


	)

22 #ifde‡
_LAB_ENGINE_BINARY_TREE_H_DEBUG_


23 
dz_bö¨y_node_s
 *
	m∑ª¡
;

24 
LONG
 
	m∑ª¡_d©a
;

26 
LONG
 
	mÀ·_d©a
;

27 
LONG
 
	mright_d©a
;

28 
dz_bö¨y_node_s
 *
	mroŸ
;

29 
UINT
 
	m£quí˚
;

32 }
	tDZ_BINARY_NODE
, *
	tPDZ_BINARY_NODE
;

35 
	#DZ_TREE_NODE_CHILDREN
 3

	)

37 
	såì_node_s
 {

38 
INT
 
	md©a
;

39 
åì_node_s
 *
	mchûdªns
[
DZ_TREE_NODE_CHILDREN
];

40 
åì_node_s
 *
	mcy˛e
;

42 } 
	tDZ_TREE_NODE
, *
	tPDZ_TREE_NODE
;

44 
	sm≠_s
 {

45 
ULONGLONG
 
	mkey
;

47 
PVOID
 
	mvÆue
;

48 
PVOID
 
	mvÆ
;

50 }
	tDZ_MAP
, *
	tPDZ_MAP
;

54 
PDZ_BINARY_NODE
 
dz_bö¨y_åì_˛⁄e_ôî©ive
(PDZ_BINARY_NODE 
roŸ
);

55 
PDZ_BINARY_NODE
 
dz_bö¨y_åì_˛⁄e
(PDZ_BINARY_NODE 
roŸ
);

58 
PDZ_BINARY_NODE
 
dz_bö¨y_åì_múr‹
(PDZ_BINARY_NODE 
roŸ
);

59 
BOOL
 
dz_bö¨y_åì_check_múr‹
(
PDZ_BINARY_NODE
 
roŸ
, PDZ_BINARY_NODE 
múr‹roŸ
);

62 
PDZ_BINARY_NODE
 
dz_bö¨y_åì_föd_ö‹dî_suc˚ss‹
(PDZ_BINARY_NODE 
roŸ
, 
INT
 
d©a
);

63 
PDZ_BINARY_NODE
 
dz_bö¨y_åì_föd_ö‹dî_¥ede˚ss‹
(PDZ_BINARY_NODE 
roŸ
, 
INT
 
d©a
);

66 
RVOID
 
dz_bö¨y_åì_¥öt_node
(
PDZ_BINARY_NODE
 
node
);

67 
PDZ_BINARY_NODE
 
dz_bö¨y_åì_Æloc_node
(
VOID
);

68 
UINT
 
dz_bö¨y_åì_height
(
PDZ_BINARY_NODE
 
roŸ
);

69 
PDZ_BINARY_NODE
 
dz_bö¨y_åì_ö£π
(PDZ_BINARY_NODE 
roŸ
, 
INT
 
d©a
);

70 
BOOL
 
dz_¥o˚ss_œb_ígöe_bö¨y_åì
(
LBA
 
off£t
, 
UINT
 
iosize
);

71 
PDZ_TREE_NODE
 
dz_åì_Æloc_node
(
VOID
);

74 
RVOID
 
dz_bö¨y_åì_Àvñ_‹dî
(
PDZ_BINARY_NODE
 
node
);

75 
RVOID
 
dz_bö¨y_åì_ö‹dî
(
PDZ_BINARY_NODE
 
node
);

76 
RVOID
 
dz_bö¨y_åì_¥e‹dî
(
PDZ_BINARY_NODE
 
node
);

77 
RVOID
 
dz_bö¨y_åì_po°‹dî
(
PDZ_BINARY_NODE
 
node
);

78 
RVOID
 
dz_bö¨y_åì_¥e‹dî_ôî©ive
(
PDZ_BINARY_NODE
 
node
);

81 
ULONGLONG
* 
dz_bö¨y_åì_¸óã_queue
(
uöt
 
sz
);

82 
VOID
 
dz_bö¨y_åì_íqueue
(
PVOID
 
ñemít
);

83 
PVOID
 
dz_bö¨y_åì_dequeue
(
VOID
);

84 
VOID
 
dz_bö¨y_åì_ª£t_queue
(VOID);

87 
ULONGLONG
* 
dz_bö¨y_åì_¸óã_°ack
(
uöt
 
sz
);

88 
VOID
 
dz_bö¨y_åì_ª£t_°ack
(VOID);

89 
VOID
 
dz_bö¨y_åì_push_°ack
(
PVOID
 
ñemít
);

90 
PVOID
 
dz_bö¨y_åì_p›_°ack
(
VOID
);

93 
PDZ_MAP
 
dz_bö¨y_åì_¸óã_m≠
(
uöt
 
sz
);

94 
VOID
 
dz_bö¨y_åì_ª£t_m≠
(VOID);

95 
PVOID
 
dz_bö¨y_åì_gë_m≠
(
ULONGLONG
 
Key
);

96 
VOID
 
dz_bö¨y_åì_£t_m≠
(
ULONGLONG
 
key
, 
PVOID
 
VÆue
);

97 
VOID
 
dz_bö¨y_åì_¥öt_m≠
(VOID);

99 
	#DZ_BINARY_ALLOC_NODE
(Ë
	`DZ_ALLOC_NODE
((
DZ_BINARY_NODE
))

	)

100 
	#DZ_BINARY_TREE_ALLOC_NODE
(Ë
	`DZ_ALLOC_NODE
((
DZ_BINARY_NODE
))

	)

	@headers/lab_engine_bplus_tree.h

9 #i‚de‡
_LAB_ENGINE_BPLUS_TREE_H_


10 
	#_LAB_ENGINE_BPLUS_TREE_H_


	)

13 
	sdz_b∂us_åì_Àaf_node_s
 {

14 
KEY
 
	mkey
;

16 
LONG
 
	md©a
;

17 
CHAR
 
	md©a_°r
[8];

18 
VOID
 *
	md©a_ªc‹d
;

20 
dz_b∂us_åì_Àaf_node_s
 *
	m√xt
;

21 
dz_b∂us_åì_Àaf_node_s
 *
	m¥ev
;

22 
dz_b∂us_åì_Àaf_node_s
 *
	m∑ª¡
;

23 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tDZ_BPLUS_LEAF_NODE
, *
	tPDZ_BPLUS_LEAF_NODE
, 
	tDZ_BPLUS_NODE_LEAF
, *
	tPDZ_BPLUS_NODE_LEAF
;

24 
dz_b∂us_åì_Àaf_node_s
 
	tDZ_BPLUS_TREE_LEAF_NODE
, *
	tPDZ_BPLUS_TREE_LEAF_NODE
;

25 
dz_b∂us_åì_Àaf_node_s
 
	tBPLEAF
, *
	tPBPLEAF
;

31 
	sdz_b∂us_åì_node_s
 {

32 
KEY
 
	mkey
;

33 
USHORT
 
	m£lf
;

34 
USHORT
 
	m∑ª¡
;

35 
SHORT
 
	mÀ·
;

36 
SHORT
 
	mright
;

37 
UCHAR
 
	mty≥
;

38 
	#BPNODE_TYPE_INTERNAL_ONLY
 0x1

	)

39 
	#BPNODE_TYPE_INTERNAL_FIRST
 0x2

	)

40 
	#BPNODE_TYPE_INTERNAL_LAST
 0x4

	)

41 
	#BPNODE_TYPE_LEAF_ONLY
 0x8

	)

42 
	#SET_BPNODE_TYPE
(
ty≥
, 
Êag
Ë—y≥Ë|(Êag)

	)

43 
	#RESET_BPNODE_TYPE
(
ty≥
, 
Êag
Ë—y≥Ë&~(Êag)

	)

44 
	#IF_BPNODE_TYPE
(
ty≥
, 
Êag
Ëi‡(—y≥Ë& (ÊagË)

	)

47 
PBPLEAF
 
	md©a
;

48 
PPAGE
 
	mdown
;

50 
UCHAR
 
	munu£d1
;

51 
USHORT
 
	munu£d2
;

52 
INT
 
	munu£d3
;

53 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tDZ_BPLUS_NODE
, *
	tPDZ_BPLUS_NODE
, 
	tDZ_BPLUS_TREE_NODE
, *
	tPDZ_BPLUS_TREE_NODE
;

54 
dz_b∂us_åì_node_s
 
	tBPNODE
, *
	tPBPNODE
;

71 
	sdz_b∂us_åì_node_mëad©a_s
 {

72 
UINT
 
	mÀvñ
;

73 
UINT
 
	mÆloc_˙t
;

74 
PPAGE
 
	mcuº_∑ge
;

75 
PPAGE
 
	m√xt_∑ge
;

76 
PPAGE
 
	m¥ev_∑ge
;

77 
PPAGE
 
	m∑ª¡_∑ge
;

78 
SPINLOCK
 
	m∑ge_lock
;

81 
KEY
 
	mmökey
;

82 
KEY
 
	mmaxkey
;

83 
INT
 
	munu£d1
;

85 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tDZ_BPLUS_NODE_METADATA
, *
	tPDZ_BPLUS_NODE_METADATA
, 
	tDZ_BPLUS_METADATA_NODE
, *
	tPDZ_BPLUS_METADATA_NODE
;

86 
dz_b∂us_åì_node_mëad©a_s
 
	tBPMTDT
, *
	tPBPMTDT
;

88 
	sdz_b∂us_•lô_node_s
 {

89 
PPAGE
 
	mÀ·_∑ge
;

90 
PPAGE
 
	mright_∑ge
;

91 
PBPNODE
 
	m•lô_node
;

93 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tDZ_BLUS_SPLIT_NODE
, *
	tPDZ_BPLUS_SPLIT_NODE
;

94 
dz_b∂us_•lô_node_s
 
	tBPSPLIT
, *
	tPBPSPLIT
;

96 
BOOL
 
dz_¥o˚ss_œb_ígöe_b∂us_åì
(
LBA
 
off£t
, 
UINT
 
iosize
);

97 
	#DZ_BPLUSTREE_ALLOC_NODE
(Ë
	`DZ_ALLOC_NODE
((
DZ_BPLUS_NODE
))

	)

98 
	#DZ_BPLUS_TREE_ALLOC_NODE
(Ë
	`DZ_ALLOC_NODE
((
DZ_BPLUS_NODE
))

	)

99 
	#DZ_BPLUS_TREE_ALLOC_LEAF_NODE
(Ë
	`DZ_ALLOC_NODE
((
DZ_BPLUS_TREE_LEAF_NODE
))

	)

100 
	#DZ_BPLUS_ALLOC_NODE
(Ë
	`DZ_ALLOC_NODE
((
DZ_BPLUS_NODE
))

	)

102 
	#DZ_BPLUS_NODE_SIZE
 ((
BPNODE
))

104 
	#DZ_BPLUS_TREE_ORDER
 22

	)

105 
	#DZ_BPLUS_TREE_MAX_KEYS
 (
DZ_BPLUS_TREE_ORDER
 - 1)

	)

107 
	#BPLUS_NODE_FULL
 2

	)

108 
	#BPLUS_NODE_SPLIT
 3

	)

109 
	#BPLUS_NODE_PAGE_FULL
 2

	)

110 
	#BPLUS_NODE_NULL
 -1

	)

111 
	#BPNODE_NULL
 
BPLUS_NODE_NULL


	)

112 
	#BPLUS_NODE_NOT_FOUND
 -2

	)

115 
	#BPLUS_NODE_KEY_FOUND
 0

	)

116 
	#BPLUS_NODE_KEY_NOT_FOUND
 -2

	)

117 
	#BPLUS_NODE_KEY_IS_LESSER
 -3

	)

118 
	#BPLUS_NODE_KEY_IS_GREATER
 -4

	)

120 
	#BPLUS_TREE_PAGE_SIZE
 
PAGE_SIZE


	)

122 
	eåavîßl_ty≥_s
 {

123 
	mENUM_TRAVERSAL_TYPE_INORDER
 = 1,

124 
	mENUM_TRAVERSAL_TYPE_PREORDER
,

125 
	mENUM_TRAVERSAL_TYPE_POSTORDER
,

126 
	mENUM_TRAVERSAL_TYPE_LEVELORDER


127 } 
	tTRAVERSAL_TYPE
;

130 
	#COPY_BUFFER_CHUNK_TO_PAGE
(
∑ge
, 
buf„r
, 
chunksz
) \

132 
PVOID
 
d∑gebuf

NULL
; \

133 
PVOID
 
•agebuf
(
buf„r
); \

134 
d∑gebuf
 = 
	`km≠
((
∑ge
)); \

135 
	`PMEMCPY
(
d∑gebuf
, 
•agebuf
, 
chunksz
); \

136 
	`kunm≠
((
∑ge
)); \

137 }

	)

140 
	#COPY_PAGE_CHUNK_TO_BUFFER
(
buf„r
, 
∑ge
, 
chunksz
) \

142 
PVOID
 
•agebuf

NULL
; \

143 
•agebuf
 = 
	`km≠
((
∑ge
)); \

144 
	`PMEMCPY
((
buf„r
), 
•agebuf
, 
sz
); \

145 
	`kunm≠
((
∑ge
)); \

146 }

	)

148 
	#INSERT_KEY
(
¨g_Àaf
, 
¨g_åì_roŸ
, 
¨g_key
, 
¨g_d©a
) \

150 
¨g_Àaf
 = 
	`dz_b∂us_åì_Æloc_Àaf_node
(); \

151 
¨g_Àaf
->
key
 = (
¨g_key
); \

152 
¨g_Àaf
->
d©a
 = (
¨g_d©a
); \

153 
¨g_åì_roŸ
 = 
	`dz_b∂us_åì_ö£π
◊rg_åì_roŸ, 
¨g_Àaf
); \

154 }

	)

157 
	#PUSH_STACK
(
¨g_°ack
, 
¨g_°ack_idx
, 
¨g_ñemít
) \

158 
¨g_°ack
[
	`ATOMIC_READ
(
¨g_°ack_idx
)] = 
¨g_ñemít
; \

159 
	`ATOMIC_INC
(
¨g_°ack_idx
); \

160 

	)

161 
	#POP_STACK
(
¨g_°ack
, 
¨g_°ack_idx
, 
¨g_ñemít
) \

162 
¨g_ñemít
 = 
¨g_°ack
[
	`ATOMIC_READ
(
¨g_°ack_idx
) - 1 ]; \

163 
¨g_°ack
[
	`ATOMIC_READ
(
¨g_°ack_idx
) - 1] = 0; \

164 
	`ATOMIC_DEC
(
¨g_°ack_idx
);

	)

166 
	#IF_EMPTY_STACK
(
¨g_°ack_idx
Ëi‡(
	`ATOMIC_READ
◊rg_°ack_idxË=0)

	)

167 
	#IF_STACK_EMPTY
(
¨g_°ack_idx
Ëi‡(
	`ATOMIC_READ
◊rg_°ack_idxË=0)

	)

169 
	#IF_NOT_EMPTY_STACK
(
¨g_°ack_idx
Ëi‡(!(
	`ATOMIC_READ
◊rg_°ack_idxË=0))

	)

170 
	#IF_NOT_STACK_EMPTY
(
¨g_°ack_idx
Ëi‡(!(
	`ATOMIC_READ
◊rg_°ack_idxË=0))

	)

174 
PPAGE
 
dz_b∂us_åì_dñëe
(PPAGE 
roŸ
, 
KEY
 
key
);

179 
INT
 
dz_b∂us_åì_•lô_node
(
PPAGE
 
roŸ_∑ge
, 
PBPSPLIT
 
•lô_node
);

180 
INT
 
dz_b∂us_åì_ö£π_key_d©a
(
PPAGE
 
roŸ_∑ge
, 
KEY
 
key
, 
PDZ_BPLUS_LEAF_NODE
 
d©a
 );

181 
PVOID
 
dz_b∂us_åì_ö£π_d©a
(
PPAGE
 
roŸ_∑ge
, 
PDZ_BPLUS_LEAF_NODE
 
d©a
 );

182 
PPAGE
 
dz_b∂us_åì_ö£π
(PPAGE 
roŸ_∑ge
, 
PDZ_BPLUS_LEAF_NODE
 
d©a
);

185 
RVOID
 
dz_b∂us_åì_åavî£_∑ge_po°‹dî
(
PVOID
 
roŸ_∑gebuf
, 
PDZ_BPLUS_NODE
 
roŸ
);

186 
RVOID
 
dz_b∂us_åì_åavî£_∑ge_¥e‹dî
(
PVOID
 
roŸ_∑gebuf
, 
PDZ_BPLUS_NODE
 
roŸ
);

187 
RVOID
 
dz_b∂us_åì_åavî£_∑ge_ö‹dî
(
PVOID
 
roŸ_∑gebuf
, 
PDZ_BPLUS_NODE
 
roŸ
);

188 
RVOID
 
dz_b∂us_åì_åavî£_∑ge
(
PPAGE
 
roŸ
, 
INT
 
ty≥
);

191 
PBPNODE
 
dz_b∂us_åì_föd_•lô_node
(
PPAGE
 
roŸ_∑ge
);

192 
INT
 
dz_b∂us_åì_föd_key
(
PPAGE
 
roŸ_∑ge
, 
KEY
 
key
);

193 
INT
 
dz_b∂us_åì_£¨ch_key
(
PPAGE
 
roŸ_∑ge
, 
KEY
 
key
);

194 
PPAGE
 
dz_b∂us_åì_föd_down_∑ge
(PPAGE 
roŸ_∑ge
, 
KEY
 
key
);

195 
PPAGE
 
dz_b∂us_åì_föd_∑ge_©_d©a_Àvñ
(PPAGE 
roŸ_∑ge
, 
KEY
 
key
);

198 
VOID
 
dz_b∂us_åì_ª£t_∑ge
(
PPAGE
 
roŸ_∑ge
) ;

199 
KEY
 
dz_b∂us_åì_gë_mö_key
(
PPAGE
 
roŸ_∑ge
);

200 
KEY
 
dz_b∂us_åì_gë_max_key
(
PPAGE
 
roŸ_∑ge
);

201 
KEY
 
dz_b∂us_åì_gë_mid_key
(
PPAGE
 
roŸ_∑ge
);

202 
UINT
 
dz_b∂us_åì_gë_num_keys
(
PPAGE
 
roŸ_∑ge
);

203 
PPAGE
 
dz_b∂us_åì_gë_√xt_∑ge
(PPAGE 
roŸ_∑ge
);

204 
PPAGE
 
dz_b∂us_åì_gë_¥ev_∑ge
(PPAGE 
roŸ_∑ge
);

205 
PPAGE
 
dz_b∂us_åì_gë_∑ª¡_∑ge
(PPAGE 
roŸ_∑ge
);

206 
VOID
 
dz_b∂us_åì_£t_√xt_∑ge
(
PPAGE
 
roŸ_∑ge
, PPAGE 
√xt_∑ge
);

207 
VOID
 
dz_b∂us_åì_£t_¥ev_∑ge
(
PPAGE
 
roŸ_∑ge
, PPAGE 
¥ev_∑ge
);

208 
VOID
 
dz_b∂us_åì_£t_∑ª¡_∑ge
(
PPAGE
 
roŸ_∑ge
, PPAGE 
∑ª¡_∑ge
);

209 
INT
 
dz_b∂us_åì_gë_∑ª¡_key
(
PPAGE
 
roŸ_∑ge
, 
KEY
 
key
, KEY *
pkey
);

210 
UINT
 
dz_b∂us_åì_gë_∑ge_Àvñ
(
PPAGE
 
roŸ_∑ge
);

211 
VOID
 
dz_b∂us_åì_£t_∑ge_Àvñ
(
PPAGE
 
roŸ_∑ge
, 
UINT
 
Àvñ
) ;

214 
RVOID
 
dz_b∂us_åì_¥öt_node_lôe
(
PDZ_BPLUS_TREE_NODE
 
node
);

215 
RVOID
 
dz_b∂us_åì_¥öt_node
(
PDZ_BPLUS_TREE_NODE
 
node
);

216 
PDZ_BPLUS_TREE_LEAF_NODE
 
dz_b∂us_åì_Æloc_Àaf_node
(
VOID
);

217 
RVOID
 
dz_b∂us_åì_¥öt_∑ge
(
PPAGE
 
roŸ
);

	@headers/lab_engine_heap.h

9 #i‚de‡
_LAB_ENGINE_HEAP_H_


10 
	#_LAB_ENGINE_HEAP_H_


	)

12 
	sdz_hóp_node_s
 {

14 
LONG
 
	md©a
;

15 
CHAR
 
	md©a_°r
[8];

18 
dz_hóp_node_s
 *
	mÀ·
;

19 
dz_hóp_node_s
 *
	mright
;

20 
dz_hóp_node_s
 *
	m∑ª¡
;

21 
dz_hóp_node_s
 *
	mroŸ
;

23 }
	tDZ_HEAP_NODE
, *
	tPDZ_HEAP_NODE
;

25 
BOOL
 
dz_¥o˚ss_œb_ígöe_hóp
(
LBA
 
off£t
, 
UINT
 
iosize
);

28 
	#DZ_HEAP_ALLOC_NODE
(Ë
	`DZ_ALLOC_NODE
((
DZ_HEAP_NODE
))

	)

	@headers/lab_engine_interval.h

9 #i‚de‡
_LBA_ENGINE_INTERVAL_H_


10 
	#_LBA_ENGINE_INTERVAL_H_


	)

12 
	sdz_öãrvÆ_s
 {

14 
LBA
 
	mlow
;

15 
LBA
 
	mvÆ
;

16 
LBA
 
	mvÆue
;

17 
LBA
 
	md©a
;

18 
LBA
 
	mkey
;

20 
LBA
 
	mhigh
;

22 }
	tDZ_INTERVAL
, *
	tPDZ_INTERVAL
;

24 
	söãrvÆ_node_s
 {

26 
DZ_INTERVAL
 
	möãrvÆ
;

27 
LBA
 
	mmax
;

28 
UINT
 
	mnum_nodes
;

30 
öãrvÆ_node_s
 *
	mÀ·
;

31 
öãrvÆ_node_s
 *
	mright
;

32 
öãrvÆ_node_s
 *
	m∑ª¡
;

33 
öãrvÆ_node_s
 *
	mroŸ
;

35 } 
	tDZ_INTERVAL_NODE
, *
	tPDZ_INTERVAL_NODE
, 
	tDZ_INTERVAL_TREE_NODE
, *
	tPDZ_INTERVAL_TREE_NODE
;

38 
BOOL
 
dz_¥o˚ss_œb_ígöe_öãrvÆ
(
LBA
 
off£t
, 
UINT
 
iosize
);

39 
	#DZ_INTERVAL_ALLOC_NODE
(Ë
	`DZ_ALLOC_NODE
((
DZ_INTERVAL_NODE
))

	)

	@headers/lab_engine_linked_list.h

9 #i‚de‡
_LAB_ENGINE_LINKED_LIST_H_


10 
	#_LAB_ENGINE_LINKED_LIST_H_


	)

12 
	sdz_li°_node_s
 {

14 
LONG
 
	md©a
;

15 
CHAR
 
	md©a_°r
[8];

18 
dz_li°_node_s
 *
	m√xt
;

19 
dz_li°_node_s
 *
	m¥ev
;

21 } 
	tDZ_LINKED_LIST_NODE
, *
	tPDZ_LINKED_LIST_NODE
, 
	tDZ_LIST_NODE
, *
	tPDZ_LIST_NODE
;

23 
	sdz_li°_ªtu∫_node_s
 {

24 
dz_li°_node_s
 *
	mhód
;

26 
dz_li°_node_s
 *
	mèû
;

27 
dz_li°_node_s
 *
	mcuºít_node
;

30 } 
	tDZ_LIST_RETURN_NODE
, *
	tPDZ_LIST_RETURN_NODE
;

32 
BOOL
 
dz_¥o˚ss_œb_ígöe_löked_li°
(
LBA
 
off£t
, 
UINT
 
iosize
);

33 
	#DZ_LIST_ALLOC_NODE
(Ë
	`DZ_ALLOC_NODE
((
DZ_LIST_NODE
))

	)

	@headers/lab_engine_locks.h

9 #i‚de‡
_LBA_ENGINE_LOCKS_H_


10 
	#_LBA_ENGINE_LOCKS_H_


	)

12 
	#DZ_RWSPINLOCK_INIT
 0x10000000

	)

13 
	#DZ_RWSEMAPHORE_INIT
 0x10000000

	)

15 
	sdz_•ölock_s
 {

17 
ATOMIC64
 
	mlock_©omic
;

18 
LONG
 
	mlock_bô
;

20 
dz_•ölock_s
 *
	m√xt
;

21 
dz_•ölock_s
 *
	m¥ev
;

22 
dz_•ölock_s
 *
	mèû
;

23 } 
	tDZ_SPINLOCK
, *
	tPDZ_SPINLOCK
;

25 
	sdz_rw•ölock_s
 {

27 
ATOMIC64
 
	mlock_©omic
;

28 
LONG
 
	mlock_bô
;

30 } 
	tDZ_RWSPINLOCK
, *
	tPDZ_RWSPINLOCK
;

32 
	sdz_£m≠h‹e_s
 {

33 
INT
 
	mcou¡
;

34 
PDZ_SPINLOCK
 
	mwaô_lock
;

35 
LIST_HEAD
 
	mwaô_li°
;

37 }
	tDZ_SEMAPHORE
, *
	tPDZ_SEMAPHORE
;

39 
	sdz_rw£m≠h‹e_s
 {

40 
LONG
 
	mcou¡
;

41 
PDZ_SPINLOCK
 
	mwaô_lock
;

42 
LIST_HEAD
 
	mwaô_li°
;

44 } 
	tDZ_RWSEMAPHORE
, *
	tPDZ_RWSEMAPHORE
;

47 
VOID
 
dz_•ölock_öô_©omic
(
PDZ_SPINLOCK
 
dzlock
);

48 
VOID
 
dz_•ölock_öô_bô
(
PDZ_SPINLOCK
 
dzlock
);

49 
VOID
 
dz_•ölock_acquúe_©omic
(
PDZ_SPINLOCK
 
dzlock
);

50 
VOID
 
dz_•ölock_acquúe_bô
(
PDZ_SPINLOCK
 
dzlock
);

51 
VOID
 
dz_•ölock_ªÀa£_©omic
(
PDZ_SPINLOCK
 
dzlock
);

52 
VOID
 
dz_•ölock_ªÀa£_bô
(
PDZ_SPINLOCK
 
dzlock
);

55 
VOID
 
dz_rw•ölock_öô_bô
(
PDZ_RWSPINLOCK
 
dzlock
);

56 
VOID
 
dz_rw•ölock_acquúe_bô_ªad
(
PDZ_RWSPINLOCK
 
dzrwlock
);

57 
VOID
 
dz_rw•ölock_ªÀa£_bô_ªad
(
PDZ_RWSPINLOCK
 
dzrwlock
);

58 
VOID
 
dz_rw•ölock_acquúe_bô_wrôe
(
PDZ_RWSPINLOCK
 
dzrwlock
);

59 
VOID
 
dz_rw•ölock_ªÀa£_bô_wrôe
(
PDZ_RWSPINLOCK
 
dzrwlock
);

61 
VOID
 
dz_rw•ölock_öô_©omic
(
PDZ_RWSPINLOCK
 
dzrwlock
);

62 
VOID
 
dz_rw•ölock_acquúe_©omic_ªad
(
PDZ_RWSPINLOCK
 
dzrwlock
);

63 
VOID
 
dz_rw•ölock_ªÀa£_©omic_ªad
(
PDZ_RWSPINLOCK
 
dzrwlock
);

64 
VOID
 
dz_rw•ölock_acquúe_©omic_wrôe
(
PDZ_RWSPINLOCK
 
dzrwlock
);

65 
VOID
 
dz_rw•ölock_ªÀa£_©omic_wrôe
(
PDZ_RWSPINLOCK
 
dzrwlock
);

68 
VOID
 
dz_£m≠h‹e_öô_©omic
(
PDZ_SEMAPHORE
 
dz£ma
);

69 
VOID
 
dz_£m≠h‹e_acquúe_©omic
(
PDZ_SEMAPHORE
 
dz£ma
);

70 
VOID
 
dz_£m≠h‹e_ªÀa£_©omic
(
PDZ_SEMAPHORE
 
dz£ma
);

73 
	erw£m_waôî_ty≥
 {

74 
	mRWSEM_WAITING_FOR_WRITE
,

75 
	mRWSEM_WAITING_FOR_READ


78 
	srw£m_waôî
 {

79 
li°_hód
 
	mli°
;

80 
èsk_°ru˘
 *
	mèsk
;

81 
rw£m_waôî_ty≥
 
	mty≥
;

84 
VOID
 
dz_rw£m≠h‹e_öô
(
PDZ_RWSEMAPHORE
 
dzrw£ma
);

85 
VOID
 
dz_rw£m≠h‹e_acquúe_ªad
(
PDZ_RWSEMAPHORE
 
dzrw£ma
);

86 
VOID
 
dz_rw£m≠h‹e_ªÀa£_ªad
(
PDZ_RWSEMAPHORE
 
dzrw£ma
);

87 
VOID
 
dz_rw£m≠h‹e_acquúe_wrôe
(
PDZ_RWSEMAPHORE
 
dzrw£ma
);

88 
VOID
 
dz_rw£m≠h‹e_ªÀa£_wrôe
(
PDZ_RWSEMAPHORE
 
dzrw£ma
);

91 
BOOL
 
dz_¥o˚ss_œb_ígöe_locks
(
LBA
 
off£t
, 
UINT
 
iosize
);

	@headers/lab_engine_pipe.h

9 #i‚de‡
_LBA_ENGINE_PIPE_H_


10 
	#_LBA_ENGINE_PIPE_H_


	)

12 
	sdz_waôq_ôem_s
 {

13 
LIST_HEAD
 
	mwaô_ôem
;

14 
èsk_°ru˘
 *
	mwaô_èsk
;

15 } 
	tDZ_WAITQ_ITEM
;

17 
	sdz_waôq_s
 {

18 
SPINLOCK
 
	mwaôq_lock
;

19 
LIST_HEAD
 
	mwaôq_hód
;

20 } 
	tDZ_WAITQ
;

22 
BOOL
 
dz_¥o˚ss_œb_ígöe_pùe
(
LBA
 
off£t
, 
UINT
 
iosize
);

	@headers/macros.h

1 #i‚de‡
AISA_MACROS_H


2 
	#AISA_MACROS_H


	)

4 
	~<löux/devi˚-m≠≥r.h
>

6 
	#GET_CPU_ID
(Ë
	`smp_¥o˚ss‹_id
()

	)

7 
	#GET_CPUID
(Ë
	`smp_¥o˚ss‹_id
()

	)

8 
	#AISA_VIRTUAL_FLASH_VOLUME
 "AISA_VIRTUAL_FLASH_VOLUME"

	)

9 
	#AISA_LOGICAL_FLASH_VOLUME
 "AISA_LOGICAL_FLASH_VOLUME"

	)

11 
	#DEVICE_TYPE_AISA
 "DEVICE_TYPE_AISA"

	)

12 
	#DEVICE_TYPE_DATA_VOLUME
 "DEVICE_TYPE_DATA_VOLUME"

	)

13 
	#DEVICE_TYPE_DATA_VOLUME_SNAPSHOT_READ
 "DEVICE_TYPE_DATA_VOLUME_SNAPSHOT_READ"

	)

14 
	#DEVICE_TYPE_DATA_VOLUME_SNAPSHOT_WRITE
 "DEVICE_TYPE_DATA_VOLUME_SNAPSHOT_WRITE"

	)

15 
	#DEVICE_TYPE_VM_VOLUME
 "DEVICE_TYPE_VM_VOLUME"

	)

16 
	#DEVICE_TYPE_VM_VOLUME_SNAPSHOT_READ
 "DEVICE_TYPE_VM_VOLUME_SNAPSHOT_READ"

	)

17 
	#DEVICE_TYPE_VM_VOLUME_SNAPSHOT_WRITE
 "DEVICE_TYPE_VM_VOLUME_SNAPSHOT_WRITE"

	)

19 
	#DEVICE_TYPE_SNAPSHOT
 
DEVICE_TYPE_SNAPSHOT_READ


	)

21 
	#AISA_METADATA_DEVICE_NAME
 "/dev/md0"

	)

23 
	#DZ_ERROR
 1

	)

24 
	#DZ_WARN
 2

	)

25 
	#DZ_INFO
 3

	)

26 
	#DZ_SHOW
 4

	)

27 
	#DZ_DBG
 5

	)

28 
	#DZ_FLOW
 6

	)

30 
	#SUCCESS
 0

	)

31 
	#FAILURE
 -1

	)

33 
	#DZ_SUCCESS
 0

	)

34 
	#DZ_FAILURE
 -1

	)

36 
	#ENABLED
 1

	)

37 
	#DISABLED
 0

	)

39 
	#DZ_ENABLED
 1

	)

40 
	#DZ_ENABLE
 1

	)

41 
	#DZ_DISABLED
 0

	)

42 
	#DZ_DISABLE
 0

	)

44 
	#TRUE
 
åue


	)

45 
	#FALSE
 
Ál£


	)

47 
	#INLINE
 
ölöe


	)

49 
	#KB
 (1024)

	)

50 
	#MB
 (1024 * 
KB
)

	)

51 
	#GB
 (1024 * 
MB
)

	)

52 
	#TB
 1024 * 
GB


53 
	#PB
 1024 * 
TB


54 
	#EB
 1024 * 
PB


55 
	#ZB
 1024 * 
EB


56 
	#YB
 1024 * 
ZB


57 
	#BB
 1024 * 
YB


58 

	)

59 
	#TO_KB
(
X
Ë(X * 
KB
)

	)

61 
	#_1K
 
	`TO_KB
(1)

	)

62 
	#_2K
 
	`TO_KB
(2)

	)

63 
	#_3K
 
	`TO_KB
(3)

	)

64 
	#_4K
 
	`TO_KB
(4)

	)

65 
	#_5K
 
	`TO_KB
(5)

	)

66 
	#_6K
 
	`TO_KB
(6)

	)

67 
	#_7K
 
	`TO_KB
(7)

	)

68 
	#_8K
 
	`TO_KB
(8)

	)

69 
	#_8KB
 
	`TO_KB
(8)

	)

70 
	#_9K
 
	`TO_KB
(9)

	)

71 
	#_10K
 
	`TO_KB
(10)

	)

72 
	#_11K
 
	`TO_KB
(11)

	)

73 
	#_12K
 
	`TO_KB
(12)

	)

74 
	#_13K
 
	`TO_KB
(13)

	)

75 
	#_14K
 
	`TO_KB
(14)

	)

76 
	#_15K
 
	`TO_KB
(15)

	)

77 
	#_16K
 
	`TO_KB
(16)

	)

78 
	#_16KB
 
	`TO_KB
(16)

	)

80 
	#_32K
 
	`TO_KB
(32)

	)

81 
	#_32KB
 
	`TO_KB
(32)

	)

83 
	#_64K
 
	`TO_KB
(64)

	)

84 
	#_64KB
 
	`TO_KB
(64)

	)

86 
	#_128K
 
	`TO_KB
(128)

	)

87 
	#_128KB
 
	`TO_KB
(128)

	)

89 
	#_256K
 
	`TO_KB
(256)

	)

90 
	#_256KB
 
	`TO_KB
(256)

	)

92 
	#_512K
 
	`TO_KB
(512)

	)

93 
	#_512KB
 
	`TO_KB
(512)

	)

95 
	#_1024K
 
	`TO_KB
(1024)

	)

96 
	#_1024KB
 
	`TO_KB
(1024)

	)

98 
	#ONE_KB
 
	`TO_KB
(1)

	)

99 
	#TWO_KB
 
	`TO_KB
(2)

	)

100 
	#THREE_KB
 
	`TO_KB
(3)

	)

101 
	#FOUR_KB
 
	`TO_KB
(4)

	)

102 
	#FIVE_KB
 
	`TO_KB
(5)

	)

103 
	#SIX_KB
 
	`TO_KB
(6)

	)

104 
	#SEVEN_KB
 
	`TO_KB
(7)

	)

105 
	#EIGHT_KB
 
	`TO_KB
(8)

	)

106 
	#NINE_KB
 
	`TO_KB
(9)

	)

107 
	#TEN_KB
 
	`TO_KB
(10)

	)

108 
	#ELEVEN_KB
 
	`TO_KB
(11)

	)

109 
	#TWELVE_KB
 
	`TO_KB
(12)

	)

110 
	#THIRTEEN_KB
 
	`TO_KB
(13)

	)

111 
	#FOURTEEN_KB
 
	`TO_KB
(14)

	)

112 
	#FIFTEEN_KB
 
	`TO_KB
(15)

	)

113 
	#SIXTEEN_KB
 
	`TO_KB
(16)

	)

115 #i‚de‡
SECTOR_SIZE


116 
	#SECTOR_SIZE
 512

	)

118 
	#LBA_BLOCK_SIZE
 
PAGE_SIZE


119 
	#PBA_BLOCK_SIZE
 
LBA_BLOCK_SIZE


120 
	#HBA_BLOCK_SIZE
 
LBA_BLOCK_SIZE


121 
	#HASH_BLOCK_SIZE
 
HBA_BLOCK_SIZE


	)

122 
	#SECTORS_PER_PAGE
 8

123 
	#SECTOR_PER_PAGE
 8

	)

124 
	#SUPERBLOCK_RESERVED_SECTORS
 2 * 
SECTORS_PER_PAGE


	)

125 
	#SUPERBLOCK_SECTOR
 0

	)

126 
	#SUPERBLOCK_SIZE
 
PAGE_SIZE


	)

127 
	#DZ_BEC_PAGE_SIZE
 
PAGE_SIZE


	)

128 
	#DZ_SYSFS_PAGE_SIZE
 
PAGE_SIZE


	)

130 
	#LOGR
(
fmt
, 
¨gs
...) do { \

131 
	`¥ötk
 (
KERN_ERR
"" 
fmt
 , ## 
¨gs
); \

132 } 0)

	)

134 
	#LOGF
(
fmt
, 
¨gs
...) do { \

135 
	`¥ötk
 (
KERN_ERR
"AVM:[%s:%d]" 
fmt
 ,
__func__
, 
__LINE__
, ## 
¨gs
); \

136 } 0)

	)

141 
	#LOGA
(
fmt
, 
¨gs
...) do { \

142 
	`¥ötk
 (
KERN_ERR
"AVM:[ALERT]" 
fmt
 , ## 
¨gs
); \

143 } 0)

	)

145 
	#LOGI
(
fmt
, 
¨gs
...) do { \

146 
	`¥ötk
 (
KERN_ERR
"AVM:[INFO]" 
fmt
 , ## 
¨gs
); \

147 } 0)

	)

150 
	#SINGNATURE
(
°r1
, 
°r2
Ë°r1""
	)
str2

152 
	#LOGM
(
fmt
, 
¨gs
...) do { \

153 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[MEMLOG]",
fmt
), ##
¨gs
); \

154 } 0)

	)

158 
	#LOGFM
(
fmt
, 
¨gs
...) do { \

159 
	`dz_avm_log_fûe_wrôe
(
fmt
, ## 
¨gs
); \

160 
	`¥ötk
 (
KERN_ERR
"AVM:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

161 } 0)

	)

163 
	#LOGMF
 
LOGFM


	)

168 
	#LOGINF
(
fmt
, 
¨gs
...) do { \

169 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[INFRAS]",
fmt
), ##
¨gs
); \

170 } 0)

	)

173 
	#LOGINFF
(
fmt
, 
¨gs
...) do { \

174 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[INFRAS]",
fmt
), ##
¨gs
); \

175 
	`¥ötk
 (
KERN_ERR
"[AVM][INFRAS]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

176 } 0)

	)

179 
	#LOGINFE
(
fmt
, 
¨gs
...) do { \

180 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[INFRAS:ERROR]",
fmt
), ##
¨gs
); \

181 
	`¥ötk
 (
KERN_ERR
"[AVM][INFRAS:ERROR]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

182 
	`dump_°ack
(); \

183 } 0)

	)

186 
	#LOGINFW
(
fmt
, 
¨gs
...) do { \

187 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[INFRAS:WARN]",
fmt
), ##
¨gs
); \

188 
	`¥ötk
 (
KERN_ERR
"[AVM][INFRAS:WARN]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

189 
	`dump_°ack
(); \

190 } 0)

	)

196 
	#LOGBEC
(
fmt
, 
¨gs
...) do { \

197 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[BCACHE]",
fmt
), ##
¨gs
); \

198 
	`¥ötk
 (
KERN_ERR
"[AVM][BCACHE]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

199 } 0)

	)

202 
	#LOGBECF
(
fmt
, 
¨gs
...) do { \

203 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[BCACHE]",
fmt
), ##
¨gs
); \

204 
	`¥ötk
 (
KERN_ERR
"[AVM][BCACHE]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

205 } 0)

	)

208 
	#LOGBECE
(
fmt
, 
¨gs
...) do { \

209 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[BCACHE:ERROR]",
fmt
), ##
¨gs
); \

210 
	`¥ötk
 (
KERN_ERR
"[AVM][BCACHE:ERROR]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

211 
	`dump_°ack
(); \

212 } 0)

	)

215 
	#LOGBECW
(
fmt
, 
¨gs
...) do { \

216 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[BCACHE:WARN]",
fmt
), ##
¨gs
); \

217 
	`¥ötk
 (
KERN_ERR
"[AVM][BCACHE:WARN]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

218 
	`dump_°ack
(); \

219 } 0)

	)

225 
	#LOGMET
(
fmt
, 
¨gs
...) do { \

226 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[METDAT]",
fmt
), ##
¨gs
); \

227 
	`¥ötk
 (
KERN_ERR
"[AVM][METDAT]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

228 } 0)

	)

231 
	#LOGMETF
(
fmt
, 
¨gs
...) do { \

232 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[METDAT]",
fmt
), ##
¨gs
); \

233 
	`¥ötk
 (
KERN_ERR
"[AVM][METDAT]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

234 } 0)

	)

237 
	#LOGMETE
(
fmt
, 
¨gs
...) do { \

238 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[METDAT:ERROR]",
fmt
), ##
¨gs
); \

239 
	`¥ötk
 (
KERN_ERR
"[AVM][METDAT:ERROR]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

240 
	`dump_°ack
(); \

241 } 0)

	)

244 
	#LOGMETW
(
fmt
, 
¨gs
...) do { \

245 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[METDAT:WARN]",
fmt
), ##
¨gs
); \

246 
	`¥ötk
 (
KERN_ERR
"[AVM][METDAT:WARN]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

247 
	`dump_°ack
(); \

248 } 0)

	)

255 
	#LOGDDE
(
fmt
, 
¨gs
...) do { \

256 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[DEDUPE]",
fmt
), ##
¨gs
); \

257 } 0)

	)

260 
	#LOGDDEF
(
fmt
, 
¨gs
...) do { \

261 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[DEDUPE]",
fmt
), ##
¨gs
); \

262 
	`¥ötk
 (
KERN_ERR
"[AVM][DEDUPE]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

263 } 0)

	)

266 
	#LOGDDEE
(
fmt
, 
¨gs
...) do { \

267 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[DEDUPE:ERROR]",
fmt
), ##
¨gs
); \

268 
	`¥ötk
 (
KERN_ERR
"[AVM][DEDUPE:ERROR]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

269 
	`dump_°ack
(); \

270 } 0)

	)

273 
	#LOGDDEW
(
fmt
, 
¨gs
...) do { \

274 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[DEDUPE:WARN]",
fmt
), ##
¨gs
); \

275 
	`¥ötk
 (
KERN_ERR
"[AVM][DEDUPE:WARN]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

276 
	`dump_°ack
(); \

277 } 0)

	)

285 
	#LOGALIGND
(
fmt
, 
¨gs
...)

	)

287 
	#LOGALIGN
(
fmt
, 
¨gs
...) do { \

288 
	`¥ötk
 (
KERN_ERR
"[AVM][ALIGN ]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

289 } 0)

	)

292 
	#LOGALIGNF
(
fmt
, 
¨gs
...) do { \

293 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[ALIGN ]",
fmt
), ##
¨gs
); \

294 
	`¥ötk
 (
KERN_ERR
"[AVM][ALIGN ]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

295 } 0)

	)

298 
	#LOGALIGNE
(
fmt
, 
¨gs
...) do { \

299 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[ALIGN:ERROR]",
fmt
), ##
¨gs
); \

300 
	`¥ötk
 (
KERN_ERR
"[AVM][ALIGN:ERROR]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

301 
	`dump_°ack
(); \

302 } 0)

	)

305 
	#LOGALIGNW
(
fmt
, 
¨gs
...) do { \

306 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[ALIGN:WARN]",
fmt
), ##
¨gs
); \

307 
	`¥ötk
 (
KERN_ERR
"[AVM][ALIGN:WARN]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

308 
	`dump_°ack
(); \

309 } 0)

	)

318 
	#LOGFEC
(
fmt
, 
¨gs
...) do { \

319 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[FCACHE]",
fmt
), ##
¨gs
); \

320 } 0)

	)

323 
	#LOGFECF
(
fmt
, 
¨gs
...) do { \

324 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[FCACHE]",
fmt
), ##
¨gs
); \

325 
	`¥ötk
 (
KERN_ERR
"[AVM][FCACHE]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

326 } 0)

	)

329 
	#LOGFECE
(
fmt
, 
¨gs
...) do { \

330 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[FCACHE:ERROR]",
fmt
), ##
¨gs
); \

331 
	`¥ötk
 (
KERN_ERR
"[AVM][FCACHE:ERROR]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

332 
	`dump_°ack
(); \

333 } 0)

	)

336 
	#LOGFECW
(
fmt
, 
¨gs
...) do { \

337 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[FCACHE:WARN]",
fmt
), ##
¨gs
); \

338 
	`¥ötk
 (
KERN_ERR
"[AVM][FCACHE:WARN]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

339 
	`dump_°ack
(); \

340 } 0)

	)

346 
	#LOGTGT
(
fmt
, 
¨gs
...) do { \

347 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[TARGET]",
fmt
), ##
¨gs
); \

348 
	`¥ötk
 (
KERN_ERR
"[AVM][TARGET]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

349 } 0)

	)

352 
	#LOGTGTF
(
fmt
, 
¨gs
...) do { \

353 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[TARGET]",
fmt
), ##
¨gs
); \

354 
	`¥ötk
 (
KERN_ERR
"[AVM][TARGET]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

355 } 0)

	)

358 
	#LOGTGTE
(
fmt
, 
¨gs
...) do { \

359 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[TARGET:ERROR]",
fmt
), ##
¨gs
); \

360 
	`¥ötk
 (
KERN_ERR
"[AVM][TARGET:ERROR]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

361 
	`dump_°ack
(); \

362 } 0)

	)

365 
	#LOGTGTW
(
fmt
, 
¨gs
...) do { \

366 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[TARGET:WARN]",
fmt
), ##
¨gs
); \

367 
	`¥ötk
 (
KERN_ERR
"[AVM][TARGET:WARN]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

368 
	`dump_°ack
(); \

369 } 0)

	)

376 
	#LOGVOL
(
fmt
, 
¨gs
...) do { \

377 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[VOLUME]",
fmt
), ##
¨gs
); \

378 
	`¥ötk
 (
KERN_ERR
"[AVM][VOLUME]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

379 } 0)

	)

381 
	#LOGVOLF
(
fmt
, 
¨gs
...) do { \

382 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[VOLUME]",
fmt
), ##
¨gs
); \

383 
	`¥ötk
 (
KERN_ERR
"[AVM][VOLUME]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

384 } 0)

	)

386 
	#LOGVOLE
(
fmt
, 
¨gs
...) do { \

387 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[VOLUME]",
fmt
), ##
¨gs
); \

388 
	`¥ötk
 (
KERN_ERR
"[AVM][VOLUME:ERROR]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

389 
	`dump_°ack
(); \

390 } 0)

	)

392 
	#LOGVOLW
(
fmt
, 
¨gs
...) do { \

393 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[VOLUME]",
fmt
), ##
¨gs
); \

394 
	`¥ötk
 (
KERN_ERR
"[AVM][VOLUME:WARN]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

395 
	`dump_°ack
(); \

396 } 0)

	)

401 
	#LOGSYS
(
fmt
, 
¨gs
...) do { \

402 
	`¥ötk
 (
KERN_ERR
"[AVM][SYSFS ]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

403 } 0)

	)

405 
	#LOGSYSF
(
fmt
, 
¨gs
...) do { \

406 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[SYSFS ]",
fmt
), ##
¨gs
); \

407 
	`¥ötk
 (
KERN_ERR
"[AVM][SYSFS ]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

408 } 0)

	)

410 
	#LOGSYSE
(
fmt
, 
¨gs
...) do { \

411 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[SYSFS ]",
fmt
), ##
¨gs
); \

412 
	`¥ötk
 (
KERN_ERR
"[AVM][SYSFS :ERROR]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

413 
	`dump_°ack
(); \

414 } 0)

	)

416 
	#LOGSYSW
(
fmt
, 
¨gs
...) do { \

417 
	`dz_avm_log_fûe_wrôe
(
	`SINGNATURE
("[SYSFS ]",
fmt
), ##
¨gs
); \

418 
	`¥ötk
 (
KERN_ERR
"[AVM][SYSFS :WARN]:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

419 
	`dump_°ack
(); \

420 } 0)

	)

423 
	#LOG
(
fmt
, 
¨gs
...) do { \

424 
	`¥ötk
 (
KERN_ERR
"AVM:%d:%d:" 
fmt
 ,
__LINE__
,
	`GET_CPUID
(), ## 
¨gs
); \

425 } 0)

	)

432 
	#LOGD
(
fmt
, 
¨gs
...)

	)

435 
	#LOGE
(
fmt
, 
¨gs
...) do { \

436 
	`¥ötk
 (
KERN_ERR
"AVM:[ERROR]:%s:%d:" 
fmt
 ,
__func__
, 
__LINE__
, ## 
¨gs
); \

437 
	`dump_°ack
(); \

438 } 0)

	)

440 
	#LOGC
(
fmt
, 
¨gs
...) do { \

441 
	`¥ötk
 (
KERN_ERR
"AVM:[CERROR]:%s:%d:" 
fmt
 ,
__func__
, 
__LINE__
, ## 
¨gs
); \

442 } 0)

	)

444 
	#LOGW
(
fmt
, 
¨gs
...) do { \

445 
	`¥ötk
 (
KERN_ERR
"AVM:[WARN]:%s:%d:" 
fmt
 ,
__func__
, 
__LINE__
, ## 
¨gs
); \

446 
	`dump_°ack
(); \

447 } 0)

	)

449 
	#MARK
 
	`LOG
("%s:%d\n",
__func__
, 
__LINE__
)

	)

451 
	#SLEEP
(
x
Ë
	`m¶ìp
–x * 1000)

	)

452 
	#MSLEEP
(
x
Ë
	`m¶ìp
(x)

	)

454 
	#SIZE_OF
(
±r
Ë(*’å))

	)

455 
	#SIZEOF
(
±r
Ë
	`SIZE_OF
’å)

	)

457 
	#DEFINE_RETURN
 
INT
 
ªt
 = 
SUCCESS


	)

458 
	#RETURNS
  
SUCCESS


	)

459 
	#SRETURN
  
SUCCESS


	)

460 
	#RETURNF
  
FAILURE


	)

461 
	#FRETURN
  
FAILURE


	)

462 
	#RETURNN
  
NULL
;

	)

463 
	#NRETURN
  
NULL
;

	)

464 
	#RETURN
  
ªt


	)

465 
	#RETURNT
  
åue


	)

466 
	#RETURNFA
  
Ál£


	)

467 
	#VRETURN
 

468 
	#RETURNV
 

469 

	)

470 
	#GET_TIMESTAMP
(
t
Ëà
	`gë_jiffõs_64
()

	)

471 
	#GET_TIME_STAMP
(
t
Ë
	`GET_TIMESTAMP
—)

	)

472 
	#GET_CURRENT_TIME
(Ë
	`gë_jiffõs_64
()

	)

473 
	#GET_CURRENT_TIME_IN_SECONDS
(
j
Ë
	`jiffõs_to_m£cs
(j)

	)

474 
	#GET_TIME_IN_SECONDS
(
j
Ë
	`jiffõs_to_m£cs
(j)

	)

475 
	#GET_TIME_DIFF_IN_SECONDS
(
t1
, 
t2
Ë
	`jiffõs_to_m£cs
—2 -Å1)

	)

483 
	#DZ_MEMPOOL_READ_PAGE_ALLOC
(
±r
) \

485 
±r
 =
	`mempoﬁ_Æloc
(
dz_mempoﬁ_ªad_∑ge
, 
GFP_NOIO
);\

486 if(!
±r
) { \

487 
±r
 = 
NULL
; \

489 } 0)

	)

491 
	#DZ_MEMPOOL_READ_PAGE_FREE
(
±r
) \

493 
	`mempoﬁ_‰ì
(
±r
, 
dz_mempoﬁ_ªad_∑ge
); \

494 }0)

	)

497 
	#DZ_BLOCK_DEVICE_MODE
 (
FMODE_READ
 | 
FMODE_WRITE
)

	)

499 
	#DZ_NUMBER_OF_WRITE_PAGES_IN_A_BIO
 64

	)

500 
	#DZ_NUMBER_OF_READ_PAGES_IN_A_BIO
 64

	)

502 
	#MEMSET
(
±r
Ë
	`mem£t
’å, 0, 
	`SIZEOF
’å))

	)

504 
	#MEMSET_PAGE
(
∑ge
) \

506 
PVOID
 
∑gebuf
 = 
NULL
; \

507 
∑gebuf
 = 
	`km≠
(
∑ge
); \

508 
	`mem£t
(
∑gebuf
, 0, 
PAGE_SIZE
); \

509 
	`kunm≠
(
∑ge
); \

510 }0)

	)

511 
	#WRITE_PAGE
(
∑ge
, 
°r
, 
Àn
) \

513 
PVOID
 
∑gebuf
 = 
NULL
; \

514 
∑gebuf
 = 
	`km≠
(
∑ge
); \

515 
	`mem£t
(
∑gebuf
, 0, 
PAGE_SIZE
); \

516 
	`mem˝y
(
∑gebuf
, 
°r
, (
Àn
 > 
PAGE_SIZE
) ? PAGE_SIZE :Üen); \

517 
	`kunm≠
(
∑ge
); \

518 }0)

	)

520 
	#WRITE_MODULE_DESC
 "WrôêModuÀ f‹ issuög wrôe†usög biÿ‰amew‹k"

	)

521 
	#READ_MODULE_DESC
 "Ród ModuÀ f‹ issuögÑód†usög biÿ‰amew‹k"

	)

522 
	#AISA_MODULE_AUTHOR
 "D©umSo·"

	)

524 
	#DZ_QUIESCE_IO
 
åue


	)

525 
	#DZ_ACTIVE_IO
 
Ál£


	)

527 
	#SL1
 
	`SLEEP
(1)

528 
	#SL2
 
	`SLEEP
(2)

	)

529 
	#SL3
 
	`SLEEP
(3)

	)

530 
	#SL5
 
	`SLEEP
(5)

	)

531 
	#SL10
 
	`SLEEP
(10)

532 
	#SL20
 
	`SLEEP
(20)

	)

533 
	#SL30
 
	`SLEEP
(30)

	)

534 
	#SL60
 
	`SLEEP
(60)

	)

535 
	#SL100
 
	`SLEEP
(100)

	)

536 
	#SL180
 
	`SLEEP
(180)

537 
	#SL300
 
	`SLEEP
(300)

	)

538 
	#SL600
 
	`SLEEP
(600)

	)

541 
	#PRINT_ATOMIC
(
v¨
Ë
	`LOG
("%†%d, 0x%x\n", #v¨, 
	`©omic_ªad
(&(v¨)),átomic_ªad(&(v¨)))

	)

542 
	#PRINT_ATOMIC64
(
v¨
Ë
	`LOG
("%†%li, 0x%lx\n", #v¨, 
	`©omic64_ªad
(&(v¨)),átomic64_ªad(&(v¨)))

	)

543 
	#PRINT_STRING
(
°r
Ë
	`LOG
("%†%s\n", #°r, så)

	)

544 
	#PRINT_LONG
(
v¨
Ë
	`LOG
("%†%ld, 0x%lx\n", #v¨, v¨, v¨)

	)

545 
	#PRINT_ULONG
(
v¨
Ë
	`LOG
("%†%lu, 0x%lx\n", #v¨, v¨, v¨)

	)

546 
	#PRINT_ULONGLONG
(
v¨
Ë
	`LOG
("%†%Œu, 0x%Œx\n", #v¨, v¨, v¨)

	)

547 
	#PRINT_U64
(
v¨
Ë
	`LOG
("%†%Œi, 0x%Œx\n", #v¨, v¨, v¨)

	)

548 
	#PRINT_S64
(
v¨
Ë
	`LOG
("%†%Œd, 0x%Œx\n", #v¨, v¨, v¨)

	)

549 
	#PRINT_U32
(
v¨
Ë
	`LOG
("%†%u, 0x%x\n", #v¨, v¨, v¨)

	)

550 
	#PRINT_INT
(
v¨
Ë
	`LOG
("%†%d, 0x%x\n", #v¨, v¨, v¨)

	)

551 
	#PRINT_UINT
(
v¨
Ë
	`PRINT_U32
(v¨)

	)

552 
	#PRINT_SHORT
(
v¨
Ë
	`LOG
("%†%hi, 0x%x\n", #v¨, v¨, v¨)

	)

553 
	#PRINT_USHORT
(
v¨
Ë
	`LOG
("%†%hu, 0x%x\n", #v¨, v¨, v¨)

	)

554 
	#PRINT_POINTER
(
v¨
Ë
	`LOG
("%†%p\n", #v¨, v¨)

	)

555 
	#PRINT_POINTERS
(
v¨
, 
°r
Ë
	`LOG
("%s:%†%p\n",°r, #v¨, v¨)

	)

556 
	#PRINT_SIZE
(
v¨
Ë
	`LOG
("%†%zu, 0x%zx\n", #v¨, v¨, v¨)

	)

557 
	#PRINT_SSIZE
(
v¨
Ë
	`LOG
("%†%zd, 0x%zx\n", #v¨, v¨, v¨)

	)

558 
	#PRINT_KEY
(
v¨
Ë
	`LOG
("%†%Œu, 0x%Œx\n", #v¨, v¨, v¨)

	)

559 
	#PRINT_KEYS
(
v¨
, 
°r
Ë
	`LOG
("%s:%†%Œu\n",°r, #v¨, v¨)

	)

560 
	#PRINT_KEY_RAW
(
v¨
Ë
	`LOG
("%Œu ",v¨)

	)

561 
	#PRINT_KEY_RAWS
(
v¨
,
°r
Ë
	`LOG
("%s: = %Œu\n",°r, v¨)

	)

563 
	#PRINT_COUNT
(
v¨
Ë
	`PRINT_ULONGLONG
(v¨)

	)

564 
	#PRINT_LBA
(
v¨
Ë
	`PRINT_U64
(v¨)

	)

565 
	#PRINT_PBA
(
v¨
Ë
	`PRINT_U64
(v¨)

	)

566 
	#PRINT_NAME
(
v¨
Ë
	`PRINT_STRING
(v¨)

	)

567 
	#PRINT_UUID
(
v¨
Ë
	`PRINT_STRING
(v¨)

	)

568 
	#PRINT_FLAGS
(
v¨
Ë
	`PRINT_U32
(v¨)

	)

569 
	#PRINT_SECTOR
(
v¨
Ë
	`LOG
("%†%Œi, 0x%Œx\n", #v¨, (
U64
)v¨, (U64)v¨)

	)

570 
	#PRINT_SECTORS
(
v¨
, 
°r
Ë
	`LOG
("%s: %†%Œi, 0x%Œx\n",°r, #v¨, (
U64
)v¨, (U64)v¨)

	)

571 
	#PRINT_LBAS
(
v¨
, 
°r
Ë
	`LOG
("%s: %†%Œi, 0x%Œx\n",°r, #v¨, v¨, v¨)

	)

573 
	#PRINT_U64_V2
(
v¨1
, 
v¨2
Ë
	`LOG
("%†0x%Œx, %†0x%Œx\n", #v¨1, v¨1, #v¨2, v¨2)

	)

574 
	#PRINT_U64_V3
(
v¨1
, 
v¨2
Ë
	`LOG
("%†0x%Œi, %†0x%Œi\n", #v¨1, v¨1, #v¨2, v¨2)

	)

575 
	#PRINT_U32_V2
(
v¨1
, 
v¨2
, 
v¨3
, 
v¨4
Ë
	`LOG
("%†0x%x, %†0x%x, %†0x%x, %†0x%x\n", #v¨1, v¨1, #v¨2, v¨2, #v¨3, v¨3, #v¨4, v¨4)

	)

576 
	#PRINT_HASH64
(
hash
Ë
	`PRINT_U64_V3
((hash)->
hash64
[0], (hash)->hash64[1])

	)

577 
	#PRINT_HASH
(
hash
) \

578 
	`PRINT_U32_V2
((
hash
)->hash[0], (hash)->hash[1], (hash)->hash[2], (hash)->hash[3]);\

579 
	`PRINT_HASH64
(
hash
)

	)

581 
	#IGNORE_INVALID_BVEC
(
cur_bvec
) \

582 if((
cur_bvec
->
bv_∑ge
 =
NULL
Ë|| (cur_bvec->
bv_Àn
 == 0) || \

583 (
cur_bvec
->
bv_Àn
 > 
PAGE_SIZE
Ë|| (cur_bvec->
bv_off£t
 > PAGE_SIZE)) { \

584 
	`LOGA
("Invalid bvecÜen:%u off:%u, skipping", \

585 
cur_bvec
->
bv_Àn
, cur_bvec->
bv_off£t
); \

587 }

	)

592 
	#CHECK_ADD_PAGE_STATUS
(
ªt
) \

593 i‡(!
ªt
) { \

594 
	`LOGE
("UnableÅoádd PageÅo child bio\n"); \

595 
	`bio_put
(
ci‹eque°
->
bio
); \

596 
	`dz_i‹eque°_‰ì
(
ci‹eque°
); \

597 
RETURNF
; \

599 
	`LOG
("ChildÑequest getting queued\n"); \

600 }

	)

602 
	#GET_DISK_SECTOR
() \

603 
	`•ö_lock
(&
aiß_devi˚_obje˘
->
pba_disk_off£t_lock
); \

604 
aiß_devi˚_obje˘
->
pba_disk_off£t
; \

605 
	`•ö_u∆ock
(&
aiß_devi˚_obje˘
->
pba_disk_off£t_lock
);

	)

607 
	#DZ_BIO_SET_DEV
(
bio
, 
bdev
Ë
	`bio_£t_dev
((bio), (bdev))

	)

608 
	#DZ_BIO_GET_DEV
(
bio
Ë
	`bdgë
(
	`bio_dev
(bio))

	)

610 
	#DZ_BIO_SET_BDEV
(
bio
, 
bdev
Ë
	`bio_£t_dev
((bio), (bdev))

	)

611 
	#DZ_BIO_GET_BDEV
(
bio
Ë
	`bdgë
(
	`bio_dev
(bio))

	)

613 
	#DZ_BIO_SET_STATUS
(
bio
, 
°©us
Ë(bio)->
bi_°©us
 = (°©us)

	)

614 
	#DZ_BIO_GET_STATUS
(
bio
Ë(bio)->
bi_°©us


	)

617 
	#DZ_BIO_SET_SIZE
(
bio
, 
size
Ë(bio)->
bi_ôî
.
bi_size
 = (size)

	)

618 
	#DZ_BIO_GET_SIZE
(
bio
Ë(bio)->
bi_ôî
.
bi_size


	)

620 
	#DZ_BIO_SET_SECTOR
(
bio
, 
£˘‹
Ë(bio)->
bi_ôî
.
bi_£˘‹
 = (£˘‹)

	)

621 
	#DZ_BIO_GET_SECTOR
(
bio
Ë(bio)->
bi_ôî
.
bi_£˘‹


	)

623 
	#DZ_BIO_SET_IDX
(
bio
, 
idx
Ë(bio)->
bi_ôî
.
bi_idx
 = (idx)

	)

624 
	#DZ_BIO_GET_IDX
(
bio
Ë(bio)->
bi_ôî
.
bi_idx


	)

625 
	#DZ_BIO_SET_ZIDX
(
bio
Ë
	`DZ_BIO_SET_IDX
(bio, 0)

	)

627 
	#DZ_BIO_GET_CNT
(
bio
Ë(bio)->
__bi_˙t


	)

629 
	#DZ_BIO_SET_WRITE
(
bio
Ë(bio)->
bi_›f
 = 
REQ_OP_WRITE


	)

630 
	#DZ_BIO_SET_READ
(
bio
Ë(bio)->
bi_›f
 = 
REQ_OP_READ


	)

632 
	#DZ_BIO_SET_NEXT
(
bio
, 
n
Ë(bio)->
bi_√xt
 = (n)

	)

633 
	#DZ_BIO_GET_NEXT
(
bio
Ë(bio)->
bi_√xt


	)

635 
	#DZ_BIO_SET_ENDIO
(
bio
, 
fun
Ë(bio)->
bi_íd_io
 = (fun)

	)

636 
	#DZ_BIO_SET_BI_END_IO
(
bio
, 
fun
Ë(bio)->
bi_íd_io
 = (fun)

	)

637 
	#DZ_BIO_SET_BIODONE
(
bio
, 
fun
Ë(bio)->
bi_íd_io
 = (fun)

	)

638 
	#DZ_BIO_GET_ENDIO
(
bio
Ë(bio)->
bi_íd_io


	)

640 
	#DZ_BIO_SET_END_IO
(
bio
, 
fun
Ë(bio)->
bi_íd_io
 = (fun)

	)

641 
	#DZ_BIO_GET_END_IO
(
bio
Ë(bio)->
bi_íd_io


	)

643 
	#DZ_BIO_SET_PRIVATE
(
bio
, 
¥iv
Ë(bio)->
bi_¥iv©e
 = (¥iv)

	)

645 
	#DZ_IOREQUEST_GET_SECTOR
(
pi‹eque°
Ë’i‹eque°)->
i‹_bio
->
bi_ôî
.
bi_£˘‹


	)

647 
	#BIO_DONE
(
bio
, 
îr‹
Ë
	`bio_ídio
(bio)

	)

648 
	#IO_DONE
(
i‹eque°
Ë
	`bio_ídio
((i‹eque°)->
i‹_bio
)

	)

649 
	#READ_IO_DONE
(
i‹eque°
Ë
	`bio_ídio
((i‹eque°)->
i‹_bio
)

	)

650 
	#READ_IO_DONE_STATUS
(
i‹eque°
, 
îr‹
Ë
	`bio_ídio
((i‹eque°)->
i‹_bio
)

	)

651 
	#WRITE_IO_DONE_STATUS
(
i‹eque°
, 
îr‹
Ë
	`bio_ídio
((i‹eque°)->
i‹_bio
)

	)

652 
	#WRITE_IO_DONE
(
i‹eque°
Ë
	`bio_ídio
((i‹eque°)->
i‹_bio
)

	)

653 
	#FAKE_IO_DONE
(
i‹eque°
Ë
	`bio_ídio
((i‹eque°)->
i‹_bio
)

	)

654 
	#FAKE_BIO_DONE
(
bio
Ë
	`bio_ídio
((bio), 
SUCCESS
)

	)

655 
	#FAKE_BIODONE
(
bio
Ë
	`bio_ídio
((bio), 
SUCCESS
)

	)

657 
	#BIODONE
(
bio
, 
îr‹
Ë
	`BIO_DONE
(bio,Éº‹)

	)

658 
	#IODONE
(
i‹eque°
Ë
	`IO_DONE
(i‹eque°)

	)

660 
	#IO_DONE_ERROR
(
i‹eque°
Ë
	`bio_io_îr‹
((i‹eque°)->
i‹_bio
); 
	`LOGE
("IOREQUEST IO_DONE ERROR\n")

	)

661 
	#IOREQUEST_DONE
(
i‹eque°
Ë
	`bio_ídio
((i‹eque°)->
i‹_bio
)

	)

662 
	#IOREQUEST_DONE_ERROR
(
i‹eque°
Ë
	`bio_io_îr‹
((i‹eque°)->
i‹_bio
); 
	`LOGE
("IOREQUEST IO_DONE ERROR\n")

	)

663 
	#IO_DONE_BUSY
(
i‹eque°
Ë(i‹eque°)->
i‹_bio
->
bi_°©us
 = 
BLK_STS_DM_REQUEUE
;
	`bio_ídio
((i‹eque°)->i‹_bio); 
	`LOGE
("IO_DONE BUSY\n")

	)

664 
	#IOREQUEST_DONE_STATUS
(
i‹eque°
Ë
	`bio_ídio
((i‹eque°)->
i‹_bio
)

	)

667 
	#DZ_DDE_IOREQUEST_DONE
(
i‹eque°
Ë
	`IOREQUEST_DONE
(i‹eque°)

	)

668 
	#DZ_DDE_IOREQUEST_DONE_ERROR
(
i‹eque°
Ë
	`IOREQUEST_DONE_ERROR
((i‹eque°))

	)

670 
	#DZ_FEC_IOREQUEST_DONE
(
i‹eque°
Ë
	`IOREQUEST_DONE
(i‹eque°)

	)

671 
	#DZ_FEC_IOREQUEST_DONE_ERROR
(
i‹eque°
, 
îr‹
Ë
	`IOREQUEST_DONE_ERROR
((i‹eque°), (îr‹))

	)

673 
	#DZ_BEC_IOREQUEST_DONE
(
i‹eque°
Ë
	`IOREQUEST_DONE
(i‹eque°)

	)

674 
	#DZ_BEC_IOREQUEST_DONE_ERROR
(
i‹eque°
, 
îr‹
Ë
	`IOREQUEST_DONE_ERROR
((i‹eque°), (îr‹))

	)

676 
	#DZ_ALIGN_IOREQUEST_DONE
(
i‹eque°
Ë
	`IOREQUEST_DONE
(i‹eque°)

	)

677 
	#DZ_ALIGN_IOREQUEST_DONE_ERROR
(
i‹eque°
, 
îr‹
Ë
	`IOREQUEST_DONE_ERROR
((i‹eque°), (îr‹))

	)

680 
	#IODONE_BUSY
(
i‹eque°
Ë
	`IO_DONE_BUSY
(i‹eque°)

	)

682 
	#IO_WRITE_START
(
i‹eque°
) \

688 (
i‹eque°
)->
bio
->
bi_£˘‹
 = (i‹eque°)->
lba_íåy
->
£˘‹
; \

689 
	`gíîic_make_ªque°
((
i‹eque°
)->
bio
)

	)

691 
	#IO_WRITE_METADATA_START
(
i‹eque°
, 
pba_ödex
, 
dd_£˘‹
) \

692 
	`dz_mëad©a_wrôe
(
i‹eque°
, 
pba_ödex
, 
dd_£˘‹
)

	)

694 
	#IO_WRITE_METADATA
(
i‹eque°
, 
pba_ödex
, 
dd_£˘‹
) \

695 
	`dz_mëad©a_wrôe
(
i‹eque°
, 
pba_ödex
, 
dd_£˘‹
)

	)

697 
	#IO_METADATA_WRITE
(
i‹eque°
, 
pba_ödex
, 
dd_£˘‹
) \

698 
	`dz_mëad©a_wrôe
(
i‹eque°
, 
pba_ödex
, 
dd_£˘‹
)

	)

700 
	#IO_METADATA_UPDATE
(
i‹eque°
, 
pba_ödex
, 
dd_£˘‹
) \

701 
	`dz_mëad©a_upd©e
(
i‹eque°
, 
pba_ödex
, 
dd_£˘‹
)

	)

704 
	#IO_READ_START
(
i‹eque°
) \

705 
	`gíîic_make_ªque°
((
i‹eque°
)->
bio
)

	)

707 
	#IO_ERROR_EIO
 -
EIO


	)

708 
	#IO_ERROR_EINVAL
 -
EINVAL


	)

709 
	#IO_ERROR_ENOMEM
 -
ENOMEM


	)

710 
	#IO_ERROR_ENOSYS
 -
ENOSYS


	)

711 
	#IO_RETRY
 -
EAGAIN


	)

713 
	#DELAY_MICRO_SECONDS
(
x
Ë
	`udñay
(x)

	)

714 
	#DELAY_NANO_SECONDS
(
x
Ë
	`ndñay
(x)

	)

715 
	#DELAY_MILLI_SECONDS
(
x
Ë
	`mdñay
(x)

	)

716 
	#SLEEP_MILLI_SECONDS
(
x
Ë
	`m¶ìp
(x)

	)

718 
	#MARK_MEMORY_USAGE
() \

719 
U64
 
mem‹y_ußge_cou¡
 = 
	`dz_gë_mem‹y_ußge
()

	)

721 
	#PRINT_MEMORY_USAGE
(
föÆ_mem
, 
m¨kî
) \

722 
	`dz_mem‹y_c⁄sum±i⁄
(
mem‹y_ußge_cou¡
, &(
föÆ_mem
), (
m¨kî
))

	)

724 
	#PRINT_MEMORY_FREED
(
föÆ_mem
, 
m¨kî
) \

725 
	`dz_mem‹y_ªdu˘i⁄
(
mem‹y_ußge_cou¡
, &(
föÆ_mem
), (
m¨kî
))

	)

727 
	#ATOMIC_SET
(
v¨
, 
vÆ
Ë
	`©omic_£t
(&(v¨), vÆ)

	)

728 
	#ATOMIC64_SET
(
v¨
, 
vÆ
Ë
	`©omic64_£t
(&(v¨), vÆ)

	)

730 
	#ATOMIC_INC
(
v¨
Ë
	`©omic_öc
(&(v¨))

	)

731 
	#ATOMIC64_INC
(
v¨
Ë
	`©omic64_öc
(&(v¨))

	)

733 
	#ATOMIC_DEC
(
v¨
Ë
	`©omic_dec
(&(v¨))

	)

734 
	#ATOMIC64_DEC
(
v¨
Ë
	`©omic64_dec
(&(v¨))

	)

736 
	#ATOMIC_ADD
(
v¨
, 
vÆ
Ë
	`©omic_add
(vÆ, &(v¨))

	)

737 
	#ATOMIC64_ADD
(
v¨
, 
vÆ
Ë
	`©omic64_add
(vÆ, &(v¨))

	)

739 
	#ATOMIC_SUB
(
v¨
, 
vÆ
Ë
	`©omic_sub
(vÆ, &(v¨))

	)

740 
	#ATOMIC64_SUB
(
v¨
, 
vÆ
Ë
	`©omic64_sub
(vÆ, &(v¨))

	)

742 
	#ATOMIC_READ
(
v¨
Ë
	`©omic_ªad
(&(v¨))

	)

743 
	#ATOMIC64_READ
(
v¨
Ë
	`©omic64_ªad
(&(v¨))

	)

747 
	#IF_WRITE_BIO
(
bio
Ëi‡(
	`bio_›
(bioË=
REQ_OP_WRITE
)

	)

748 
	#IS_WRITE_BIO
(
bio
Ëi‡(
	`bio_›
(bioË=
REQ_OP_WRITE
)

	)

749 
	#IF_BIO_WRITE
(
bio
Ëi‡(
	`bio_›
(bioË=
REQ_OP_WRITE
)

	)

750 
	#IS_BIO_WRITE
(
bio
Ëi‡(
	`bio_›
(bioË=
REQ_OP_WRITE
)

	)

752 
	#IF_READ_BIO
(
bio
Ëi‡(
	`bio_›
(bioË=
REQ_OP_READ
)

	)

753 
	#IS_READ_BIO
(
bio
Ëi‡(
	`bio_›
(bioË=
REQ_OP_READ
)

	)

754 
	#IF_BIO_READ
(
bio
Ëi‡(
	`bio_›
(bioË=
REQ_OP_READ
)

	)

755 
	#IS_BIO_READ
(
bio
Ëi‡(
	`bio_›
(bioË=
REQ_OP_READ
)

	)

757 
	#IF_BIO_ERROR
(
bio
Ëi‡(bio->
bi_°©us
 !
BLK_STS_OK
)

	)

758 
	#IS_BIO_ERROR
(
bio
Ëi‡(bio->
bi_°©us
 !
BLK_STS_OK
)

	)

760 
	#DZ_BIO_SET_ERROR_STATUS
(
bio
Ëbio->
bi_°©us
 = 
BLK_STS_IOERR


	)

762 
	#DZ_BIO_SET_ERROR
(
bio
, 
îr‹
Ëbio->
bi_°©us
 = 
	)
error

764 
	#IF_BIO_ERROR_SET_IO_ERROR
(
bio
, 
îr‹
Ëi‡(bio->
bi_°©us
 !
BLK_STS_OK
Ë{Éº‹ = -
EIO
;}

	)

765 
	#IF_BIO_ERROR_SET_NOMEM_ERROR
(
bio
, 
îr‹
Ëi‡(bio->
bi_°©us
 !
BLK_STS_OK
Ë{Éº‹ = -
ENOMEM
;}

	)

766 
	#IF_BIO_ERROR_SET_NOSPC_ERROR
(
bio
, 
îr‹
Ëi‡(bio->
bi_°©us
 !
BLK_STS_OK
Ë{Éº‹ = -
ENOSPC
;}

	)

768 
	#IF_WRITE_IOREQUEST
(
i‹eque°
Ëi‡((i‹eque°)->
i‹_bio
 =
NULL
)

	)

770 
	#DZ_BIO_GET_PIN_COUNT
(
bio
Ë
	`ATOMIC_READ
((bio)->
__bi_˙t
)

	)

772 
	#INC_COUNTER32
(
v¨
Ë
	`ATOMIC_INC
((v¨))

	)

773 
	#INC_COUNTER64
(
v¨
Ë
	`ATOMIC64_INC
((v¨))

	)

774 
	#INC_COUNTER
(
v¨
Ë
	`INC_COUNTER64
((v¨))

	)

776 
	#DEC_COUNTER32
(
v¨
Ë
	`ATOMIC_SUB
((v¨))

	)

777 
	#DEC_COUNTER64
(
v¨
Ë
	`ATOMIC64_SUB
((v¨))

	)

778 
	#DEC_COUNTER
(
v¨
Ë
	`DEC_COUNTER64
((v¨))

	)

780 
	#READ_COUNTER32
(
v¨
Ë
	`ATOMIC_READ
((v¨))

	)

781 
	#READ_COUNTER64
(
v¨
Ë
	`ATOMIC64_READ
((v¨))

	)

782 
	#READ_COUNTER
(
v¨
Ë
	`READ_COUNTER64
((v¨))

	)

784 
	#SET_COUNTER32
(
v¨
Ë
	`ATOMIC_SET
((v¨), 0)

	)

785 
	#SET_COUNTER64
(
v¨
Ë
	`ATOMIC64_SET
((v¨), 0)

	)

786 
	#SET_COUNTER
(
v¨
Ë
	`SET_COUNTER64
((v¨))

	)

789 
	#DZ_OS_KERNEL_BIO_PUT
(
¨g
Ë
	`bio_put
(◊rg))

	)

790 
	#DZ_OS_KERNEL_BIO_GET
(
¨g
Ë
	`bio_gë
(◊rg))

	)

791 
	#DZ_OS_KERNEL_GENERIC_MAKE_REQUEST
(
¨g
Ë
	`gíîic_make_ªque°
(◊rg))

	)

792 
	#DZ_OS_KERNEL_SUBMIT_BIO
(
¨g1
, 
¨g2
Ë
	`submô_bio
(◊rg1), (¨g2))

	)

	@headers/memory_pool_engine.h

9 #i‚de‡
_MEMORY_POOL_ENGINE_H_


10 
	#_MEMORY_POOL_ENGINE_H_


	)

12 
	~"bec_ígöe.h
"

15 
INLINE
 
VOID
 
log_mem‹y_ußge
(
U64
 
cou¡
);

16 
INLINE
 
VOID
 
ªdu˚_mem‹y_ußge
(
U64
 
cou¡
);

18 
RPVOID
 
dz_kmÆloc
(
SIZE
 
size
, 
INT
 
Êags
);

19 
RVOID
 
dz_k‰ì
(
PVOID
 
±r
, 
SIZE
 
size
);

21 
RINT
 
dz_¸óã_mem‹y_poﬁs
(
VOID
);

22 
RINT
 
dz_de°roy_mem‹y_poﬁs
(
VOID
);

24 
RINT
 
dz_¸óã_bio_poﬁ
(
UINT
 
num_bios
);

25 
RVOID
 
dz_de°roy_bio_poﬁ
(
UINT
 
num_bios
) ;

26 
PBIO
 
dz_bio_Æloc
(
UINT
 
ƒ_iovecs
);

27 
RVOID
 
dz_bio_‰ì
(
PBIO
 
bio
);

28 
RVOID
 
dz_bio_Æloc_ã°
(
VOID
);

30 
RINT
 
dz_¸óã_wrôe_∑ge_poﬁ
(
SIZE
 
num_∑ges
);

31 
RVOID
 
dz_de°roy_wrôe_∑ge_poﬁ
(
SIZE
);

32 
RPVOID
 
dz_wrôe_∑ge_Æloc
(
VOID
);

33 
RPVOID
 
dz_wrôe_∑ge_Æloc_debug
(
VOID
);

34 
RVOID
 
dz_wrôe_∑ge_‰ì
(
PPAGE
 
∑ge
);

35 
RVOID
 
dz_∑ge_‰ì
(
PPAGE
 
∑ge
);

36 
RVOID
 
dz_wrôe_∑ge_‰ì_debug
(
PPAGE
 
∑ge
);

38 
RINT
 
dz_¸óã_ªad_∑ge_poﬁ
(
SIZE
 
num_∑ges
);

39 
RVOID
 
dz_de°roy_ªad_∑ge_poﬁ
(
SIZE
);

40 
RPVOID
 
dz_ªad_∑ge_Æloc
(
VOID
);

41 
RVOID
 
dz_ªad_∑ge_‰ì
(
PPAGE
 
∑ge
);

42 
RINT
 
dz_bio_bvec_wrôe_∑ge_‰ì
(
PBIO
 
bio
);

43 
RINT
 
dz_bio_bvec_ªad_∑ge_‰ì
(
PBIO
 
bio
);

45 
RPVOID
 
dz_∑ge_Æloc
(
VOID
);

46 
RINT
 
dz_¸óã_io_poﬁ
(
UINT
);

47 
RVOID
 
dz_de°roy_io_poﬁ
(
UINT
);

48 
RPVOID
 
dz_io_Æloc
(
VOID
);

49 
RVOID
 
dz_io_‰ì
(
PVOID
);

51 
RINT
 
dz_¸óã_ªad_io_poﬁ
(
UINT
);

52 
RVOID
 
dz_de°roy_ªad_io_poﬁ
(
UINT
);

53 
RPVOID
 
dz_ªad_io_Æloc
(
VOID
);

54 
RVOID
 
dz_ªad_io_‰ì
(
PVOID
);

56 
RINT
 
dz_¸óã_wrôe_io_poﬁ
(
UINT
);

57 
RVOID
 
dz_de°roy_wrôe_io_poﬁ
(
UINT
);

58 
RPVOID
 
dz_wrôe_io_Æloc
(
VOID
);

59 
RVOID
 
dz_wrôe_io_‰ì
(
PVOID
);

62 
PBIO
 
dz_bio_∑ge_Æloc
(
PBLOCK_DEVICE
 
bdev
);

63 
RVOID
 
dz_bio_∑ge_‰ì
(
PBIO
 
bio
);

65 
RVOID
 
dz_mem‹y_c⁄sum±i⁄
(
U64
 
öôül
, U64 *
föÆ_mem
, 
CHAR
 *
m¨kî
);

66 
RVOID
 
dz_mem‹y_ªdu˘i⁄
(
U64
 
öôül
, U64 *
föÆ_mem
, 
CHAR
 *
m¨kî
);

67 
RVOID
 
dz_tŸÆ_mem‹y_c⁄sum±i⁄
(
VOID
);

68 
U64
 
dz_gë_mem‹y_ußge
(
VOID
);

69 
RVOID
 
dz_check_mem‹y_Àak
(
VOID
);

	@headers/metadata_engine.h

9 #i‚de‡
_MD_ENGINE_H_


10 
	#_MD_ENGINE_H_


	)

12 
	~"ty≥s.h
"

13 
	~"ma¸os.h
"

14 
	~"i‹eque°.h
"

17 
	sdz_hash_s
 {

19 
U32
 
	mchecksum
 [4];

20 
U32
 
	mcksum
 [4];

21 
U32
 
	mhash
 [4];

22 
U32
 
	mhash32
 [4];

23 
U64
 
	mhash64
 [2];

25 }
	tHASH
, *
	tPHASH
, 
	tHASH_T
, *
	tPHASH_T
;

27 
	sdz_su≥rblock_s
 {

28 
NAME
 
	mvîsi⁄
;

30 
MAGICNO
 
	mmëad©a_dev_magi˙o
;

31 
NAME
 
	mmëad©a_dev_«me
;

32 
UUID
 
	mmëad©a_dev_uuid
;

34 
MAGICNO
 
	md©a_dev_magi˙o
;

35 
NAME
 
	md©a_dev_«me
;

36 
UUID
 
	md©a_dev_uuid
;

38 
U64
 
	mlba_èbÀ_size
;

39 
USHORT
 
	mlba_block_size
;

40 
U64
 
	mpba_èbÀ_size
;

41 
USHORT
 
	mpba_block_size
;

42 
U64
 
	mmëad©a_lba_èbÀ_size
;

43 
USHORT
 
	mmëad©a_lba_block_size
;

44 
U64
 
	mmëad©a_lba_lock_èbÀ_size
;

45 
USHORT
 
	mmëad©a_lba_lock_block_size
;

46 
U64
 
	mhash_èbÀ_size
;

47 
INT
 
	mhash_size
;

49 
U64
 
	mnum_unu£d_pbas
;

50 
U64
 
	mnum_unu£d_lbas
;

51 
U64
 
	mnum_unu£d_hash
;

52 
U64
 
	mnum_u£d_pbas
;

53 
U64
 
	mnum_u£d_lbas
;

54 
U64
 
	mnum_u£d_hash
;

55 
U64
 
	md©a_off£t
;

56 
U64
 
	mmëad©a_off£t
;

57 
BOOL
 
	m‰esh
;

58 
HASH
 
	mchecksum
;

59 
PPAGE
 
	m∑ge
;

61 } 
	tSUPERBLOCK
, *
	tPSUPERBLOCK
;

66 
	sdz_mëad©a_disk_block_s
 {

67 
U64
 
	mmdd_lba
;

68 
HASH
 
	mmdd_hash
;

69 
U32
 
	mmdd_hash_ödex
:31;

70 
U64
 
	mmdd_hash_cﬁlisi⁄_èg
:33;

71 
U64
 
	mmdd_pba_ödex
;

72 
U64
 
	mmdd_dd_£˘‹
;

73 
LIST_HEAD
 
	mli°
;

74 
BOOL
 
	mmdd_dúty
:1;

76 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tMDD_BLOCK
, *
	tPMDD_BLOCK
, 
	tMD_BLOCK
, *
	tPMD_BLOCK
;

81 
	sdz_mëad©a_lock_s
 {

82 
SPINLOCK
 
	mmd_lock
;

83 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tMD_LOCK
, *
	tPMD_LOCK
, 
	tMDD_LOCK
, *
	tPMDD_LOCK
;

88 
VOID
 
ã°_hash
(
PVOID
 
d©a
, 
UINT
 
size
);

89 
VOID
 
ã°_hash2
(*, *);

90 
VOID
 
dz_gíî©e_hash
(VOID *
d©a
, 
SIZE
 
size
, 
PVOID
 
ouçut_hash
);

91 
BOOL
 
dz_ßme_hash
(
PHASH
 
hash1
, PHASH 
hash2
);

92 
U32
 
dz_gë_hash_ödex
(U32 
hash
);

95 
PSUPERBLOCK
 
dz_su≥rblock_Æloc
(
VOID
);

96 
RVOID
 
dz_su≥rblock_‰ì
(
PSUPERBLOCK
 
±r
);

97 
RVOID
 
¥öt_su≥rblock
(
PSUPERBLOCK
 
sb
);

98 
RINT
 
dz_su≥rblock_öô
(
VOID
);

99 
VOID
 
dz_su≥rblock_exô
(VOID);

100 
RINT
 
dz_su≥rblock_ªad
(
VOID
);

101 
RINT
 
dz_su≥rblock_wrôe
(
PSUPERBLOCK
 
su≥rblock
);

103 
VOID
 
dz_mëad©a_ígöe_exô
(VOID);

104 
RINT
 
dz_mëad©a_ígöe_öô
(
VOID
);

105 
VOID
 
dz_mëad©a_block_exô
(VOID);

106 
RINT
 
dz_mëad©a_block_öô
(
VOID
);

107 
RINT
 
dz_mëad©a_wrôe
(
PIOREQUEST
 
i‹eque°
, 
U64
 
pba_ödex
, 
SECTOR
 
dd_£˘‹
);

108 
RINT
 
dz_mëad©a_upd©e
(
PIOREQUEST
 
i‹eque°
, 
U64
 
pba_ödex
, 
SECTOR
 
dd_£˘‹
);

110 
RPVOID
 
dz_¸óã_mëad©a_èbÀ
(
SIZE
 
èbÀ_size
);

111 
RVOID
 
dz_de°roy_mëad©a_èbÀ
(
VOID
);

112 
RPVOID
 
dz_¸óã_mëad©a_lock_èbÀ
(
SIZE
 
èbÀ_size
);

113 
RVOID
 
dz_de°roy_mëad©a_lock_èbÀ
(
VOID
);

115 
VOID
 
dz_md_öô_cou¡îs
(VOID);

116 
RVOID
 
dz_mëad©a_Êush_°¨t_‰om_timî_c⁄ãxt
(
VOID
);

117 
RINT
 
dz_mëad©a_Êush_timî
(
PVOID
 
d©a
);

118 
RVOID
 
dz_mëad©a_Êush_timî_°›
(
VOID
);

119 
RINT
 
dz_mëad©a_¸óã_Êush_thªad_poﬁ
(
INT
 
num_thªads
);

120 
RVOID
 
dz_de°roy_Êush_thªad_poﬁ
(
VOID
);

121 
RVOID
 
dz_mëad©a_Êush_io
(
PIOREQUEST
 
∑ª¡_i‹eque°
);

	@headers/prototypes.h

1 #i‚de‡
PROTOTYPES_H


2 
	#PROTOTYPES_H


	)

4 
	~"ty≥s.h
"

5 
	~"ma¸os.h
"

6 
	~"cou¡îs.h
"

7 
	~"dedu≥_ígöe.h
"

8 
	~"d©a_°ru˘uªs.h
"

9 
	~"„c_ígöe.h
"

10 
	~"bio_ígöe.h
"

11 
	~"Æignmít_ígöe.h
"

12 
	~"ö‰a_ígöe.h
"

13 
	~"thªad_poﬁ_ígöe.h
"

14 
	~"mem‹y_poﬁ_ígöe.h
"

15 
	~"èrgë_ígöe.h
"

16 
	~"sysfs_ígöe.h
"

17 
	~"i‹eque°.h
"

18 
	~"bec_ígöe.h
"

19 
	~"vﬁume_ígöe.h
"

20 
	~"œb_ígöe_bö¨y_åì.h
"

21 
	~"œb_ígöe_hóp.h
"

22 
	~"œb_ígöe_öãrvÆ.h
"

23 
	~"œb_ígöe_locks.h
"

24 
	~"œb_ígöe_löked_li°.h
"

25 
	~"œb_ígöe_b∂us_åì.h
"

26 
	~"œb_ígöe_pùe.h
"

29 
RINT
 
dz_¸óã_dedu≥_vﬁume
(
dm_èrgë
 *
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
);

30 
RVOID
 
dz_de°roy_dedu≥_vﬁume
(
PDEVICE_OBJECT
 
obj
);

32 
RINT
 
dz_èrgë_¸óã_aiß
(
dm_èrgë
 *
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
);

33 
RVOID
 
dz_avm_aiß_de°roy
(
PDEVICE_OBJECT
 
obj
);

35 
RINT
 
dz_èrgë_¸óã
(
dm_èrgë
 *
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
);

36 
RVOID
 
dz_èrgë_de°roy
(
dm_èrgë
 *
èrgë
);

37 
INT
 
aiß_lfv_öô
(
VOID
);

38 
INT
 
aiß_vfv_öô
(
VOID
);

39 
RINT
 
dz_¥o˚ss_wrôe_io
(
PBIO
 
bio
);

40 
RINT
 
dz_¥o˚ss_ªad_io
(
PBIO
 
bio
);

43 
PBLOCK_DEVICE
 
dz_bdev_›í
(
dev_∑th
[]);

44 
RVOID
 
dz_bdev_˛o£
(
PBLOCK_DEVICE
 
bdev
);

48 
INLINE
 
SECTOR
 
dz_c⁄vît_lba_to_£˘‹
(
LBA
 
lba
);

49 
INLINE
 
LBA
 
dz_c⁄vît_£˘‹_to_lba
(
SECTOR
 
£˘‹
);

53 
RVOID
 
_¥öt_bio
(
bio
 *bio);

54 
RVOID
 
¥öt_bio
(
bio
 *bio);

55 
RVOID
 
¥öt_biom
(
bio
 *bio, *);

56 
VOID
 
¥öt_˛i_¨gs
(
dm_èrgë
 *
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
);

57 
RVOID
 
¥öt_d©a_∑ges
(
PDATAPAGES_T
 
d©a_∑ges
);

58 
RVOID
 
¥öt_avm_devi˚
(
PAVM_DEVICE
);

59 
RVOID
 
¥öt_avm_vﬁume
(
PDDVOL
 
obj
);

60 
VOID
 
¥öt_bdev
(
PBLOCK_DEVICE
 
bdev
);

61 
RVOID
 
¥öt_lba_block
(
PLBA_BLOCK
 
lba_block
);

62 
RVOID
 
¥öt_mëad©a_block
(
PMDD_BLOCK
 
pmdd
);

63 
RVOID
 
¥öt_d©a
(
PVOID
 
d©a
);

64 
RVOID
 
¥öt_bio_∑ge
(
PBIO
 
bio
);

65 
RVOID
 
¥öt_bio_∑ge_löes
(
PBIO
 
bio
);

66 
RVOID
 
¥öt_∑ge
(
PPAGE
 
∑ge
);

67 
RINT
 
dz_gë_devi˚_size
(
CHAR
 *, 
ULONG
 *);

69 
RINT
 
dz_Æloc_d©a_∑ges
(
PDATAPAGES_T
 
d©a_∑ges
, 
UINT
 
pg˙t
);

70 
RVOID
 
dz_‰ì_d©a_∑ges
(
PDATAPAGES_T
 
d©a_∑ges
, 
BOOL
);

76 
RINT
 
dz_obje˘_öô
(
VOID
);

77 
RVOID
 
dz_q_obje˘
(
OBJECT_LIST
 *
ﬁ
, 
PDEVICE_OBJECT
 
obje˘
);

78 
PDEVICE_OBJECT
 
dz_dq_obje˘
(
OBJECT_LIST
 *
ﬁ
, *
«me
);

79 
PDEVICE_OBJECT
 
dz_föd_obje˘
(
OBJECT_LIST
 *
ﬁ
, *
«me
);

80 
RVOID
 
¥öt_obje˘_li°
(
VOID
);

81 
POBJECT_LIST
 
dz_gë_obje˘_li°
(
VOID
);

84 
RVOID
 
dz_c⁄figfs_öô
(
VOID
);

85 
RVOID
 
dz_c⁄figfs_exô
(
VOID
);

86 
CHAR
 *
dz_gë_io_d©a
(
INT
 
size
);

90 
RINT
 
dz_demo_∑s°hrough_io
(
PDM_TARGET
 
èrgë
, 
bio
 *bio);

91 
RINT
 
dz_demo_∑s°hrough_ªad⁄ly
(
PDM_TARGET
 
èrgë
, 
bio
 *bio);

92 
RINT
 
dz_demo_∑s°hrough_wrôe⁄ly
(
PDM_TARGET
 
èrgë
, 
bio
 *bio);

	@headers/sysfs_engine.h

9 #i‚de‡
_SYSFS_ENGINE_H_


10 
	#_SYSFS_ENGINE_H_


	)

12 
	#DZ_SYS_GET_SWITCH
(
buf
, 
swôch_«me
) \

14 
	`LOGSYS
("%s:GET\n",
__func__
); \

15 (
buf
Ë(
U64
)(
swôch_«me
); \

17 }

	)

19 
	#DZ_SYS_SET_SWITCH
(
swôch_«me
, 
swôch_vÆue
) \

21 
	`LOGSYS
("%s:SET: I≈uàVÆuê%d\n",
__func__
, (
INT
)
swôch_vÆue
); \

22 
	`LOGSYS
("Bef‹êModifiˇti⁄ : %d\n",(
INT
)(
swôch_«me
)); \

23 (
swôch_«me
Ë(
swôch_vÆue
); \

24 
	`LOGSYS
("A·î Modifiˇti⁄ : %d\n",(
INT
)(
swôch_«me
)); \

26 }

	)

30 
RINT
 
avm_sysfs_kî√l_öô
(
VOID
);

31 
RVOID
 
avm_sysfs_kî√l_exô
(
VOID
);

33 
RINT
 
avm_sysfs_èrgë_ígöe_öô
(
VOID
);

34 
RVOID
 
avm_sysfs_èrgë_ígöe_exô
(
VOID
);

36 
RINT
 
avm_sysfs_bec_ígöe_öô
(
VOID
);

37 
RVOID
 
avm_sysfs_bec_ígöe_exô
(
VOID
);

39 
RINT
 
avm_sysfs_„c_ígöe_öô
(
VOID
);

40 
RVOID
 
avm_sysfs_„c_ígöe_exô
(
VOID
);

42 
RINT
 
avm_sysfs_dedu≥_ígöe_öô
(
VOID
);

43 
RVOID
 
avm_sysfs_dedu≥_ígöe_exô
(
VOID
);

45 
RINT
 
avm_sysfs_vﬁume_ígöe_öô
(
VOID
);

46 
RVOID
 
avm_sysfs_vﬁume_ígöe_exô
(
VOID
);

48 
RINT
 
avm_sysfs_mëad©a_ígöe_öô
(
VOID
);

49 
RVOID
 
avm_sysfs_mëad©a_ígöe_exô
(
VOID
);

51 
RINT
 
avm_sysfs_Æignmít_ígöe_öô
(
VOID
);

52 
RVOID
 
avm_sysfs_Æignmít_ígöe_exô
(
VOID
);

54 
INT
 
avm_gë_sizeof_d©a°ru˘uªs
(
CHAR
 *
buf
);

55 
INT
 
avm_gë_li°_of_obje˘s
(
CHAR
 *
buf
);

56 
INT
 
avm_gë_li°_of_vﬁumes
(
CHAR
 *
buf
);

57 
INT
 
avm_gë_li°_of_vﬁumes_sh‹t
(
CHAR
 *
buf
);

58 
INT
 
avm_gë_vîsi⁄
(
CHAR
 *
buf
);

59 
INT
 
avm_gë_èbÀ_size
(
CHAR
 *
buf
);

60 
INT
 
avm_gë_mem‹y_öfo
(
CHAR
 *
buf
);

61 
INT
 
avm_gë_su≥rblock
(
CHAR
 *
buf
);

62 
INT
 
avm_gë_bec_cou¡îs
(
CHAR
 *
buf
);

63 
INT
 
avm_gë_„c_cou¡îs
(
CHAR
 *
buf
);

64 
INT
 
avm_gë_Æign_cou¡îs
(
CHAR
 *
buf
);

65 
INT
 
avm_gë_mëad©a_cou¡îs
(
CHAR
 *
buf
);

66 
INT
 
avm_gë_dedu≥_cou¡îs
(
CHAR
 *
buf
);

67 
INT
 
avm_gë_Æl_cou¡îs
(
CHAR
 *
buf
);

68 
INT
 
avm_gë_£t_lba_èbÀ_ödex
(
CHAR
 *
buf
);

69 
INT
 
avm_gë_£t_pba_èbÀ_ödex
(
CHAR
 *
buf
);

70 
INT
 
avm_gë_èrgë_«me
(
CHAR
 *
buf
);

71 
INT
 
avm_gë_èrgë_back°‹e_«me
(
CHAR
 *
buf
);

72 
INT
 
avm_pba_èbÀ_size_show
(
CHAR
 *
buf
);

73 
INT
 
avm_gë_hash_èbÀ_size
(
CHAR
 *
buf
);

74 
INT
 
avm_gë_£t_vﬁume_öfo
(
CHAR
 *
buf
);

75 
INT
 
avm_gë_èrgë_devi˚_size_byãs
(
CHAR
 *
buf
);

76 
INT
 
avm_gë_èrgë_devi˚_size_blocks
(
CHAR
 *
buf
);

79 
INT
 
avm_gë_èrgë_∑s°hrough_mode
(
CHAR
 *
buf
);

80 
INT
 
avm_gë_èrgë_∑s°hrough_ªad
(
CHAR
 *
buf
);

81 
INT
 
avm_gë_èrgë_∑s°hrough_wrôe
(
CHAR
 *
buf
);

83 
INT
 
avm_gë_èrgë_lba_block_size
(
CHAR
 *
buf
);

84 
INT
 
avm_£t_èrgë_lba_block_size
(
U64
 
buf
);

86 
INT
 
avm_gë_swôch_„c
(
CHAR
 *
buf
);

87 
INT
 
avm_gë_swôch_bec
(
CHAR
 *
buf
);

88 
INT
 
avm_gë_swôch_dde
(
CHAR
 *
buf
);

89 
INT
 
avm_gë_swôch_d´
(
CHAR
 *
buf
);

90 
INT
 
avm_gë_swôch_d´_mbr
(
CHAR
 *
buf
);

91 
INT
 
avm_gë_swôch_d´_mbw
(
CHAR
 *
buf
);

92 
INT
 
avm_gë_swôch_d´_pbr
(
CHAR
 *
buf
);

93 
INT
 
avm_gë_swôch_d´_pbw
(
CHAR
 *
buf
);

95 
INT
 
avm_£t_èrgë_∑s°hrough_mode
(
U64
 
buf
);

96 
INT
 
avm_£t_èrgë_∑s°hrough_ªad
(
U64
 
buf
);

97 
INT
 
avm_£t_èrgë_∑s°hrough_wrôe
(
U64
 
buf
);

99 
INT
 
avm_£t_swôch_„c
(
U64
 
buf
);

100 
INT
 
avm_£t_swôch_bec
(
U64
 
buf
);

101 
INT
 
avm_£t_swôch_dde
(
U64
 
buf
);

102 
INT
 
avm_£t_swôch_d´
(
U64
 
buf
);

103 
INT
 
avm_£t_swôch_d´_mbr
(
U64
 
buf
);

104 
INT
 
avm_£t_swôch_d´_mbw
(
U64
 
buf
);

105 
INT
 
avm_£t_swôch_d´_pbr
(
U64
 
buf
);

106 
INT
 
avm_£t_swôch_d´_pbw
(
U64
 
buf
);

109 
INT
 
avm_gë_‰ì_∑ge_cou¡
(
CHAR
 *
buf
);

110 
INT
 
avm_do_wrôe_io
(
CHAR
 *
buf
);

111 
INT
 
avm_do_ªad_io
(
CHAR
 *
buf
);

112 
INT
 
avm_do_zîo_io
(
CHAR
 *
buf
);

113 
INT
 
avm_do_wrôe_vîify_io
(
CHAR
 *
buf
);

114 
INT
 
avm_gë_lba_íåy
(
CHAR
 *
buf
);

115 
INT
 
avm_gë_pba_íåy
(
CHAR
 *
buf
);

116 
INT
 
avm_gë_èsb
(
CHAR
 *
buf
);

119 
INT
 
avm_dedu≥_show
(
CHAR
 *
buf
);

122 
INT
 
avm_„c_show
(
CHAR
 *
buf
);

125 
INT
 
avm_bec_show
(
CHAR
 *
buf
);

128 
INT
 
avm_gë_tu«bÀ_d´_ªad_thªads
(
CHAR
 *
buf
);

129 
INT
 
avm_£t_tu«bÀ_d´_ªad_thªads
(
U64
 
buf
);

130 
INT
 
avm_gë_tu«bÀ_d´_wrôe_thªads
(
CHAR
 *
buf
);

131 
INT
 
avm_£t_tu«bÀ_d´_wrôe_thªads
(
U64
 
buf
);

133 
INT
 
avm_gë_tu«bÀ_bec_size
(
CHAR
 *
buf
);

134 
INT
 
avm_£t_tu«bÀ_bec_size
(
U64
 
buf
);

136 
INT
 
avm_gë_tu«bÀ_bec_thªads
(
CHAR
 *
buf
);

137 
INT
 
avm_£t_tu«bÀ_bec_thªads
(
U64
 
buf
);

139 
INT
 
avm_gë_tu«bÀ_bec_ï
(
CHAR
 *
buf
);

140 
INT
 
avm_£t_tu«bÀ_bec_ï
(
U64
 
buf
);

142 
INT
 
avm_gë_èrgë_swôch_i›©h
(
CHAR
 *
buf
);

143 
INT
 
avm_£t_èrgë_swôch_i›©h
(
U64
 
buf
);

	@headers/target_engine.h

9 #i‚de‡
_TARGET_ENGINE_H_


10 
	#_TARGET_ENGINE_H_


	)

12 
dz_avm_èrgë_˘r
(
dm_èrgë
 *
èrgë
, 
¨gc
,**
¨gv
);

13 
dz_avm_èrgë_då
(
dm_èrgë
 *
ti
);

14 
dz_avm_èrgë_m≠
(
dm_èrgë
 *
èrgë
, 
bio
 *bio);

15 
dz_avm_èrgë_deÁu…_m≠
(
dm_èrgë
 *
èrgë
, 
bio
 *bio);

	@headers/thread_pool_engine.h

9 #i‚de‡
_THREAD_POOL_ENGINE_H_


10 
	#_THREAD_POOL_ENGINE_H_


	)

12 
	gdz_i‹eque°_s
;

14 
	sdz_job_s
 {

15 *
	mw‹k
;

16 
com∂ëi⁄
 
	md⁄e
;

17 
li°_hód
 
	mli°
;

18 } 
	tDZ_JOB_T
, 
	tDZ_JOB
, *
	tPDZ_JOB
, 
	tJOB
, *
	tPJOB
;

20 
	gdz_thªad_›s_s
;

21 
	gdz_thªad_s
;

26 
	$VOID
 (*
	tTHREAD_FUNC
)(
	tdz_i‹eque°_s
 *);

27 
	$VOID
 (*
	tTHREAD_INIT
)(
	tdz_thªad_s
 *, *, );

28 
	$VOID
 (*
	tTHREAD_FREE
)(
	tdz_thªad_s
 *);

30 
	sdz_thªad_s
 {

31 
èsk_°ru˘
 *
thªad
;

32 
dz_thªad_poﬁ_s
 *
poﬁ
;

33 
VOID
 *
¥iv©e
;

38 
BOOL
 
Æive
;

39 
BOOL
 
˛ónup_≥ndög
;

40 
VOID
 *
ªsour˚s
;

41 
THREAD_FUNC
 
thªad_func
;

42 
THREAD_INIT
 
thªad_öô
;

43 
THREAD_FREE
 
thªad_‰ì
;

45 } 
	tDZ_THREAD_T
, 
	tDZ_THREAD
, *
	tPDZ_THREAD
, 
	tWORKER_THREAD
;

48 
	sdz_thªad_poﬁ_s
 {

50 
WORKER_THREAD
 *
w‹kî_thªad
;

51 
com∂ëi⁄
 
hÆt_a˘ive_thªads
;

52 
ATOMIC
 
num_a˘ive_thªads
;

53 
UINT
 
num_thªads
;

54 
	`VOID
 (*
‰ì_job_ªsour˚
)(
dz_job_s
 *);

55 
waô_queue_hód_t
 
Æl_a˘ive_thªads_föished_waôq
;

56 
CHAR
 
«me
[
NAME_LENGTH
];

57 
BOOL
 
de°roy
;

58 
BOOL
 
quõs˚
;

60 
BOOL
 
jobs
;

61 
com∂ëi⁄
 
job_addôi⁄
;

62 
SPINLOCK
 
job_li°_lock
;

63 
li°_hód
 
job_li°_hód
;

64 
ATOMIC
 
num_jobs
;

65 
waô_queue_hód_t
 
Æl_jobs_föished_waôq
;

67 
BOOL
 
ioq_›í
;

68 
com∂ëi⁄
 
ioq_addôi⁄
;

69 
SPINLOCK
 
ioq_lock
;

70 
li°_hód
 
ioq_hód
;

71 
ATOMIC
 
ioq_num_ios
;

72 
waô_queue_hód_t
 
Æl_ios_föished_waôq
;

73 } 
	tDZ_WORKER_THREAD_POOL_T
, 
	tDZ_THREAD_POOL
, 
	tTHREAD_POOL
, *
	tPTHREAD_POOL
, *
	tPDZ_THREAD_POOL
, *
	tPDZ_WORKER_THREAD_POOL
, 
	tPDZ_TP
;

77 
RINT
 
	`dz_¸óã_thªad_poﬁs
(
VOID
);

78 
PDZ_WORKER_THREAD_POOL
 
	`dz_¸óã_thªad_poﬁ
(
CHAR
 *, CHAR *, 
UINT
, 
THREAD_INIT
, 
THREAD_FREE
, 
THREAD_FUNC
);

81 
RINT
 
	`dz_¸óã_Æign_ªad_thªad_poﬁ
(
INT
 
num_thªads
);

82 
RINT
 
	`dz_¸óã_Æign_wrôe_thªad_poﬁ
(
INT
 
num_thªads
);

83 
RVOID
 
	`dz_de°roy_Æign_ªad_thªad_poﬁ
(
VOID
);

84 
RVOID
 
	`dz_de°roy_Æign_wrôe_thªad_poﬁ
(
VOID
);

87 
RINT
 
	`dz_¸óã_ªad_thªad_poﬁ
(
INT
 
num_thªads
);

88 
RINT
 
	`dz_¸óã_wrôe_thªad_poﬁ
(
INT
 
num_thªads
);

89 
RINT
 
	`dz_¸óã_Êush_thªad_poﬁ
(
INT
 
num_thªads
);

91 
RVOID
 
	`dz_de°roy_thªad_poﬁs
(
VOID
);

92 
RVOID
 
	`dz_de°roy_thªad_poﬁ
(
PDZ_WORKER_THREAD_POOL
 
poﬁ
);

93 
RVOID
 
	`dz_de°roy_ªad_thªad_poﬁ
(
VOID
);

94 
RVOID
 
	`dz_de°roy_wrôe_thªad_poﬁ
(
VOID
);

95 
RVOID
 
	`dz_de°roy_Êush_thªad_poﬁ
(
VOID
);

97 
RVOID
 
	`dz_thªad_exô
(
VOID
);

98 
RVOID
 
	`dz_q_jobs
(
DZ_THREAD_POOL
 *
poﬁ
, 
DZ_JOB
 *
job
);

99 
PJOB
 
	`dz_dq_jobs
(
DZ_THREAD_POOL
 *
poﬁ
);

100 
INT
 
	`dz_w‹kî_thªad
(*
d©a
);

101 
INT
 
	`dz_io_d´m⁄
(*
d©a
);

102 
UINT
 
	`dz_out°™dög_jobs
(
DZ_THREAD_POOL
 *
poﬁ
);

103 
RVOID
 
	`dz_waô_f‹_Æl_jobs_föished
(
DZ_THREAD_POOL
 *
poﬁ
);

104 
RVOID
 
	`dz_waô_f‹_Æl_a˘ive_thªads_föished
(
DZ_THREAD_POOL
 *
poﬁ
);

106 
RINT
 
	`dz_¸óã_bec_thªad_poﬁ
(
INT
 
num_thªads
);

107 
RVOID
 
	`dz_de°roy_bec_thªad_poﬁ
(
VOID
);

	@headers/types.h

1 #i‚de‡
AISA_TYPES_H


2 
	#AISA_TYPES_H


	)

4 
	#LINUX_VERSION_CODE
 199168

	)

7 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

8 
	#RHEL_MAJOR
 7

	)

9 
	#RHEL_MINOR
 0

	)

10 
	#RHEL_RELEASE_VERSION
(
a
,
b
Ë((◊Ë<< 8Ë+ (b))

	)

11 
	#RHEL_RELEASE_CODE
 1792

	)

12 
	#RHEL_RELEASE
 "123"

	)

14 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3,14,0)

15 
	#KERN_VER_3_14


	)

16 #ñi‡
LINUX_VERSION_CODE
 =
KERNEL_VERSION
(3,13,6)

17 
	#KERN_VER_3_13


	)

18 #ñi‡
LINUX_VERSION_CODE
 =
KERNEL_VERSION
(2,6,36)

19 
	#KERN_VER_2_6_36


	)

21 
	~<löux/ty≥s.h
>

22 
	~<löux/•ölock_ty≥s.h
>

23 
	~<löux/moduÀ.h
>

24 
	~<löux/kî√l.h
>

25 
	~<löux/öô.h
>

26 
	~<löux/bio.h
>

27 
	~<löux/devi˚-m≠≥r.h
>

28 
	~<löux/¶ab.h
>

29 
	~<löux/dñay.h
>

30 
	~<löux/sysfs.h
>

31 
	~<löux/fs.h
>

32 
	~<löux/c⁄figfs.h
>

33 
	~<löux/kobje˘.h
>

34 
	~<löux/com∂ëi⁄.h
>

35 
	~<löux/kthªad.h
>

36 
	~<°dboﬁ.h
>

37 
	~<löux/moduÀ.h
>

38 
	~<löux/moduÀ∑øm.h
>

39 
	~<löux/sysˇŒs.h
>

41 
	~<löux/kî√l.h
>

42 
	~<löux/fs.h
>

43 
	~<löux/î∫o.h
>

44 
	~<löux/ty≥s.h
>

45 
	~<löux/vmÆloc.h
>

46 
	~<löux/gíhd.h
>

47 
	~<löux/blkdev.h
>

48 
	~<löux/hdªg.h
>

49 
	~<åa˚/evíts/block.h
>

52 
	~"about.h
"

53 
	~"hash_ígöe_murmur3.h
"

55 
	#DATE_LENGTH
 8

	)

56 
	#TIME_LENGTH
 6

	)

57 
	#NAME_LENGTH
 
BDEVNAME_SIZE


	)

58 
	#UUID_LENGTH
 ( 2 * 
NAME_LENGTH
 )

	)

59 
	#GUID_LENGTH
 ( 2 * 
NAME_LENGTH
 )

	)

60 
	#MAGICNO_LENGTH
 ( 2 * 
NAME_LENGTH
 )

	)

62 
	tS8
;

63 
	tCHAR
;

64 * 
	tPCHAR
;

65 
	tUCHAR
;

66 
	tU8
;

67 * 
	tPUCHAR
;

69 
	tS16
;

70 
	tSHORT
;

71 
	tU16
;

72 
	tUSHORT
;

74 
	tS32
;

75 
	tINT
;

76 
	tUINT
;

77 
	tU32
;

78 
	tRINT
;

80 
	tLONG
;

81 
	tS64
;

82 
	tLONGLONG
;

83 
	tULONG
;

84 
	tU64
;

85 
	tULONGLONG
;

86 
ULONGLONG
 
	tKEY
;

88 
	tVOID
;

89 
	tRVOID
;

90 * 
	tPVOID
;

91 * 
	tRPVOID
;

92 
boﬁ
 
	tBOOL
;

96 
size_t
 
	tSIZE
;

97 
size_t
 
	tLBA_SIZE
;

98 
size_t
 
	tPBA_SIZE
;

99 
size_t
 
	tDATA_SIZE
;

100 
size_t
 
	tLBA_DATA_SIZE
;

101 
size_t
 
	tPBA_DATA_SIZE
;

103 
•ölock_t
 
	tLOCK
;

104 
•ölock_t
 
	tSPINLOCK
;

105 
ULONGLONG
 
	tTIME
;

106 
ULONGLONG
 
	tCHECKSUM
;

107 
ULONGLONG
 
	tCRC
;

108 
ULONGLONG
 
	tSHA1
;

109 
ULONGLONG
 
	tSHA256
;

110 
ULONGLONG
 
	tDATA_HASH
;

111 
UINT
 
	tFLAG
;

112 
UINT
 
	tFLAGS
;

113 
	tCOUNT
;

114 
	tINDEX
;

115 * 
	tLBA_LIST
;

116 * 
	tPBA_LIST
;

117 * 
	tFLASH_VOLUMES_LIST
;

118 * 
	tNEXT
;

119 * 
	tPREV
;

121 
	tNAME
 [
NAME_LENGTH
 ];

122 
	tUUID
 [
UUID_LENGTH
 ];

123 
	tGUID
 [
GUID_LENGTH
 ];

124 
	tMAGC
 [
MAGICNO_LENGTH
];

126 
	#MAGICNO
 
MAGC


	)

128 
li°_hód
 
	tLIST_ITEM
;

129 
li°_hód
 
	tLIST_HEAD
;

131 
dm_dev
 
	tDM_DEV
;

132 
dm_dev
 * 
	tPDM_DEV
;

135 
mempoﬁ_t
 
	tMEMPOOL
;

136 
mempoﬁ_t
 *
	tPMEMPOOL
;

138 
bio
 
	tBIO
;

139 
bio
 *
	tPBIO
;

140 
bio_£t
 
	tBIO_SET
;

141 
bio_£t
 *
	tPBIO_SET
;

143 
gÂ_t
 
	tGFP
;

146 
∑ge
 
	tPAGE
;

147 
∑ge
 *
	tPPAGE
;

148 
bio_vec
 
	tBIOVEC
;

149 
bio_vec
 *
	tPBIOVEC
;

150 
bio_vec
 
	tBIO_VEC
;

151 
bio_vec
 *
	tPBIO_VEC
;

153 
£˘‹_t
 
	tSECTOR
;

154 
block_devi˚
 
	tBLOCK_DEVICE
;

155 
block_devi˚
 *
	tPBLOCK_DEVICE
;

157 
U64
 
	tLBA
;

158 
U64
 
	tPBA
;

160 
©omic_t
 
	tATOMIC
;

161 
©omic_t
 
	tATOMIC32
;

162 
©omic64_t
 
	tATOMIC64
;

164 
dm_èrgë
 
	tDM_TARGET
;

165 
dm_èrgë
 *
	tPDM_TARGET
;

167 
com∂ëi⁄
 
	tCOMPLETION
;

168 
èsk_°ru˘
 
	tTHREAD
;

169 
bio_íd_io_t
 
	tBIO_CALLBACK
;

170 
bio_íd_io_t
 *
	tBIODONE
;

171 
bio_íd_io_t
 *
	tBIO_END_IO
;

172 
ødix_åì_roŸ
 
	tRADIX_TREE_ROOT
;

173 
ødix_åì_roŸ
 *
	tPRADIX_TREE_ROOT
;

175 (
	ti‹eque°_d⁄e_t
Ë(
	tPVOID
 , );

176 
i‹eque°_d⁄e_t
 *
	tIOREQUEST_DONE
;

178 
bvec_ôî
 
	tITER
;

179 
bvec_ôî
 
	tBIOITER
;

180 
bvec_ôî
 
	tITERATOR
;

182 
bvec_ôî
 *
	tPITER
;

183 
bvec_ôî
 *
	tPBIOITER
;

184 
bvec_ôî
 *
	tPITERATOR
;

	@headers/volume_engine.h

9 #i‚de‡
_VOLUME_ENGINE_H_


10 
	#_VOLUME_ENGINE_H_


	)

13 
RINT
 
dz_ªgi°î_d©avﬁ_èrgë
(
VOID
);

14 
RVOID
 
dz_uƒegi°î_d©avﬁ_èrgë
(
VOID
);

15 
RVOID
 
dz_vﬁume_de°roy_d©avﬁ
(
PDDVOL
 
ddvﬁ
);

16 
RVOID
 
dz_vﬁume_de°roy_d©avﬁ_§ód
(
PDDVOL
 
ddvﬁ
);

17 
RVOID
 
dz_vﬁume_de°roy_d©avﬁ_swrôe
(
PDDVOL
 
ddvﬁ
);

18 
RPVOID
 
dz_vﬁume_¸óã_lba_èbÀ
(
SIZE
 
èbÀ_size
);

19 
RVOID
 
dz_vﬁume_de°roy_lba_èbÀ
(
PDDVOL
 
ddvﬁ
);

20 
U64
 
dz_gë_‰ì_•a˚
(
VOID
);

21 
RVOID
 
dz_vﬁume_de¸ó£_‰ì_•a˚
(
U64
 
•a˚
);

22 
RVOID
 
dz_vﬁume_ö¸ó£_‰ì_•a˚
(
U64
 
•a˚
);

23 
RINT
 
dz_vﬁume_£t_u£d_•a˚
(
PDM_TARGET
 
èrgë
, 
PDDVOL
 
ddvﬁ
);

24 
RVOID
 
dz_vﬁume_‰ìup_•a˚
(
PDDVOL
 
ddvﬁ
);

25 
RINT
 
dz_vﬁume_¸óã_d©avﬁ
(
PDM_TARGET
 
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
);

26 
RPVOID
 
dz_ddvﬁ_¸óã_¢≠shŸ
(
PDM_TARGET
 
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
, 
INT
 *
îr‹
);

27 
RINT
 
dz_vﬁume_¸óã_d©avﬁ_§ód
(
PDM_TARGET
 
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
);

28 
RINT
 
dz_vﬁume_¸óã_d©avﬁ_swrôe
(
PDM_TARGET
 
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
);

31 
RINT
 
dz_ªgi°î_vmvﬁ_èrgë
(
VOID
);

32 
RVOID
 
dz_uƒegi°î_vmvﬁ_èrgë
(
VOID
);

	@infra_engine/datumsoft_zaidstor_avm_2_B_infra_engine_module.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

6 
MODULE_INFO
(
«me
, 
KBUILD_MODNAME
);

8 
__visibÀ
 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
KBUILD_MODNAME
,

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

15 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

18 #ifde‡
CONFIG_RETPOLINE


19 
MODULE_INFO
(
ªçﬁöe
, "Y");

22 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

23 
__u£d


24 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

25 { 0xe783361, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

26 { 0x53326531, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_Æloc_∑ges
) },

27 { 0x94d683f, 
__VMLINUX_SYMBOL_STR
(
kmem_ˇche_de°roy
) },

28 { 0xf6f2d21, 
__VMLINUX_SYMBOL_STR
(
kî√l_wrôe
) },

29 { 0x914e33d2, 
__VMLINUX_SYMBOL_STR
(
kmÆloc_ˇches
) },

30 { 0xd2b09˚5, 
__VMLINUX_SYMBOL_STR
(
__kmÆloc
) },

31 { 0x48a11710, 
__VMLINUX_SYMBOL_STR
(
blkdev_io˘l
) },

32 { 0xf9a482f9, 
__VMLINUX_SYMBOL_STR
(
m¶ìp
) },

33 { 0xd28020dd, 
__VMLINUX_SYMBOL_STR
(
up_ªad
) },

34 { 0x54e34ad6, 
__VMLINUX_SYMBOL_STR
(
blk_°©us_to_î∫o
) },

35 { 0x6882˚d7, 
__VMLINUX_SYMBOL_STR
(
bio_Æloc_bio£t
) },

36 { 0x672edad8, 
__VMLINUX_SYMBOL_STR
(
pv_lock_›s
) },

37 { 0x4c7a8Áe, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_de°roy
) },

38 { 0x89ac392d, 
__VMLINUX_SYMBOL_STR
(
fûp_˛o£
) },

39 { 0xóe3dfd6, 
__VMLINUX_SYMBOL_STR
(
__c⁄°_udñay
) },

40 { 0xa5ede869, 
__VMLINUX_SYMBOL_STR
(
vfs_fsync
) },

41 { 0x7a2af7b4, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

42 { 0x97651e6c, 
__VMLINUX_SYMBOL_STR
(
vmemm≠_ba£
) },

43 { 0x91715312, 
__VMLINUX_SYMBOL_STR
(
•rötf
) },

44 { 0xc4b19d63, 
__VMLINUX_SYMBOL_STR
(
kthªad_¸óã_⁄_node
) },

45 { 0x15ba50a6, 
__VMLINUX_SYMBOL_STR
(
jiffõs
) },

46 { 0xf00fˇa1, 
__VMLINUX_SYMBOL_STR
(
lookup_bdev
) },

47 { 0xe2d5255a, 
__VMLINUX_SYMBOL_STR
(
°rcmp
) },

48 { 0xd83bc98c, 
__VMLINUX_SYMBOL_STR
(
down_ªad
) },

49 { 0xó9f6313, 
__VMLINUX_SYMBOL_STR
(
com∂ëe_Æl
) },

50 { 0xa6682fdd, 
__VMLINUX_SYMBOL_STR
(
__öô_waôqueue_hód
) },

51 { 0x183Á88b, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_Æloc_¶ab
) },

52 { 0xb1904934, 
__VMLINUX_SYMBOL_STR
(
waô_f‹_com∂ëi⁄
) },

53 { 0xa350d089, 
__VMLINUX_SYMBOL_STR
(
kî√l_ªad
) },

54 { 0xfb578fc5, 
__VMLINUX_SYMBOL_STR
(
mem£t
) },

55 { 0x4ff67Áb, 
__VMLINUX_SYMBOL_STR
(
cuºít_èsk
) },

56 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

57 { 0xb5275728, 
__VMLINUX_SYMBOL_STR
(
kthªad_°›
) },

58 { 0x42f23226, 
__VMLINUX_SYMBOL_STR
(
bio_add_∑ge
) },

59 { 0xcd484d18, 
__VMLINUX_SYMBOL_STR
(
waô_f‹_com∂ëi⁄_öãºu±ibÀ
) },

60 { 0xa1c76e0a, 
__VMLINUX_SYMBOL_STR
(
_c⁄d_ªsched
) },

61 { 0x9166Áda, 
__VMLINUX_SYMBOL_STR
(
°∫˝y
) },

62 { 0xd985dc99, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_‰ì_∑ges
) },

63 { 0xd3db4„9, 
__VMLINUX_SYMBOL_STR
(
gíîic_make_ªque°
) },

64 { 0x8a99a016, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_‰ì_¶ab
) },

65 { 0xc06cf893, 
__VMLINUX_SYMBOL_STR
(
up_wrôe
) },

66 { 0xdc0a2218, 
__VMLINUX_SYMBOL_STR
(
down_wrôe
) },

67 { 0x„487975, 
__VMLINUX_SYMBOL_STR
(
öô_waô_íåy
) },

68 { 0xc25419c9, 
__VMLINUX_SYMBOL_STR
(
bio_ídio
) },

69 { 0xeÁ08cc4, 
__VMLINUX_SYMBOL_STR
(
bio_put
) },

70 { 0xf11543ff, 
__VMLINUX_SYMBOL_STR
(
föd_fú°_zîo_bô
) },

71 { 0x7cd8d75e, 
__VMLINUX_SYMBOL_STR
(
∑ge_off£t_ba£
) },

72 { 0xb601be4c, 
__VMLINUX_SYMBOL_STR
(
__x86_ödúe˘_thunk_rdx
) },

73 { 0x3d159270, 
__VMLINUX_SYMBOL_STR
(
blkdev_put
) },

74 { 0x9a6f2471, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_Æloc
) },

75 { 0x69bf6b1c, 
__VMLINUX_SYMBOL_STR
(
bdev«me
) },

76 { 0x8ddd8Ød, 
__VMLINUX_SYMBOL_STR
(
scheduÀ_timeout
) },

77 { 0x1000e51, 
__VMLINUX_SYMBOL_STR
(
scheduÀ
) },

78 { 0x696727a5, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_¸óã
) },

79 { 0x6b2dc060, 
__VMLINUX_SYMBOL_STR
(
dump_°ack
) },

80 { 0x2ó2c95c, 
__VMLINUX_SYMBOL_STR
(
__x86_ödúe˘_thunk_øx
) },

81 { 0x13bb1b43, 
__VMLINUX_SYMBOL_STR
(
wake_up_¥o˚ss
) },

82 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

83 { 0xbb2d3099, 
__VMLINUX_SYMBOL_STR
(
kmem_ˇche_Æloc_åa˚
) },

84 { 0xe5c6´21, 
__VMLINUX_SYMBOL_STR
(
mempoﬁ_‰ì
) },

85 { 0x56321´2, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock
) },

86 { 0x961d8335, 
__VMLINUX_SYMBOL_STR
(
kmem_ˇche_¸óã
) },

87 { 0x„768495, 
__VMLINUX_SYMBOL_STR
(
__wake_up
) },

88 { 0xb3f7646e, 
__VMLINUX_SYMBOL_STR
(
kthªad_should_°›
) },

89 { 0x237a015a, 
__VMLINUX_SYMBOL_STR
(
¥ï¨e_to_waô_evít
) },

90 { 0x37a0cba, 
__VMLINUX_SYMBOL_STR
(
k‰ì
) },

91 { 0xd4Á5c30, 
__VMLINUX_SYMBOL_STR
(
föish_waô
) },

92 { 0x19cf472b, 
__VMLINUX_SYMBOL_STR
(
com∂ëe
) },

93 { 0x8562547a, 
__VMLINUX_SYMBOL_STR
(
bdgë
) },

94 { 0xb01b44c1, 
__VMLINUX_SYMBOL_STR
(
blkdev_gë
) },

95 { 0x14f6cb5f, 
__VMLINUX_SYMBOL_STR
(
bdgë_disk
) },

96 { 0x5c7574a1, 
__VMLINUX_SYMBOL_STR
(
v•rötf
) },

97 { 0x80dba18, 
__VMLINUX_SYMBOL_STR
(
bdput
) },

98 { 0xb0079855, 
__VMLINUX_SYMBOL_STR
(
fûp_›í
) },

101 c⁄° 
	g__moduÀ_dïíds
[]

102 
__u£d


103 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

107 
MODULE_INFO
(
§cvîsi⁄
, "072B164958EF29CC8D6A6B2");

	@infra_engine/infra_engine.c

9 
	~"¥ŸŸy≥s.h
"

11 
PPBA_BLOCK
 
pba_èbÀ
;

12 
PHASH_BLOCK
 
hash_èbÀ
;

13 
PLBA_BLOCK
 
lba_èbÀ
;

14 
CHAR
 
sysfs_avm_gë_èrgë_«me
[
DZ_SYSFS_PAGE_SIZE
];

15 
SIZE
 
dz_pba_∑ge_mempoﬁ_cou¡
;

16 
U64
 
lba_èbÀ_size
;

17 
U64
 
pba_èbÀ_size
;

18 
U64
 
hash_èbÀ_size
;

19 
BITMAP
 
pba_bôm≠
;

20 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

21 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

22 
SPINLOCK
 
¥öt_i‹eque°_lock
;

27 
VOID
 
	$dz_ö‰a_ígöe_öô_cou¡îs
(
VOID
)

29 
	`BASE_COUNTER_U64_SET
(
ö‰a_ígöe_mem‹y_ußge
, 0);

30 
	}
}

32 
RVOID
 
	$dz_ö‰a_ígöe_exô
(
VOID
)

34 
	`MARK_MEMORY_USAGE
();

35 
	`LOGINFF
(" ______________________________________________________ \n");

36 
	`LOGINFF
("| |\n");

37 
	`LOGINFF
("| Infrastructure (Infra) Engine Exit Begin |\n");

38 
	`LOGINFF
("|______________________________________________________|\n");

40 
	`dz_de°roy_mem‹y_poﬁs
();

42 
	`PRINT_MEMORY_FREED
(
	`BASE_COUNTER_U64_GET
(
ö‰a_ígöe_mem‹y_ußge
), "Infrastructure Engine");

43 
	`LOGINFF
(" ______________________________________________________ \n");

44 
	`LOGINFF
("| |\n");

45 
	`LOGINFF
("| Infrastructure (Infra) Engine Exit End |\n");

46 
	`LOGINFF
("|______________________________________________________|\n");

48 
	}
}

49 
EXPORT_SYMBOL
(
dz_ö‰a_ígöe_exô
);

51 
INT
 
	$dz_ö‰a_ígöe_öô
(
VOID
)

53 
INT
 
ªt
 = 
SUCCESS
;

54 
	`MARK_MEMORY_USAGE
();

55 
	`LOGINFF
(" ______________________________________________________ \n");

56 
	`LOGINFF
("| |\n");

57 
	`LOGINFF
("| Infrastructure (Infra) Engine Initialization Begin |\n");

58 
	`LOGINFF
("|______________________________________________________|\n");

60 
	`dz_ö‰a_ígöe_öô_cou¡îs
();

62 
ªt
 = 
	`dz_obje˘_öô
();

63 i‡(
ªt
 =
FAILURE
) {

64 
exô_Áûuª
;

66 
ªt
 = 
	`dz_¸óã_mem‹y_poﬁs
();

67 i‡(
ªt
 =
FAILURE
) {

68 
exô_Áûuª
;

70 
	`PRINT_MEMORY_USAGE
(
	`BASE_COUNTER_U64_GET
(
ö‰a_ígöe_mem‹y_ußge
), "Infrastructure Engine");

72 
	`LOGINFF
(" ______________________________________________________ \n");

73 
	`LOGINFF
("| |\n");

74 
	`LOGINFF
("| Infrastructure (Infra) Engine Initialization End |\n");

75 
	`LOGINFF
("|______________________________________________________|\n");

76 
RETURNS
;

78 
exô_Áûuª
:

79 
	`dz_ö‰a_ígöe_exô
();

80 
RETURNF
;

81 
	}
}

82 
EXPORT_SYMBOL
(
dz_ö‰a_ígöe_öô
);

84 
	#DZ_AVM_LOG_FILE
 "/dev/dzlog"

	)

86 
	$dz_ö‰a_ígöe_moduÀ_öô
()

88 
INT
 
ªt
;

90 
ªt
 = 
	`dz_avm_log_fûe_›í
();

91 
	`LOGINFF
(" ______________________________________________________ \n");

92 
	`LOGINFF
("| |\n");

93 
	`LOGINFF
("| ZAIDSTOR Infra Engine Module Loaded |\n");

94 
	`LOGINFF
("|______________________________________________________|\n");

96 
RETURNS
;

97 
	}
}

99 
	$dz_ö‰a_ígöe_moduÀ_exô
()

101 
	`LOGINFF
(" ______________________________________________________ \n");

102 
	`LOGINFF
("| |\n");

103 
	`LOGINFF
("| ZAIDSTOR Infra Engine Module UnLoaded |\n");

104 
	`LOGINFF
("|______________________________________________________|\n");

105 
	`dz_avm_log_fûe_˛o£
();

106 
	}
}

108 
moduÀ_öô
(
dz_ö‰a_ígöe_moduÀ_öô
);

109 
moduÀ_exô
(
dz_ö‰a_ígöe_moduÀ_exô
);

110 
MODULE_LICENSE
(
DZ_MODULE_LICENSE
);

111 
MODULE_AUTHOR
(
DZ_MODULE_AUTHOR
);

	@infra_engine/infra_engine_align.c

9 
	~"¥ŸŸy≥s.h
"

16 
INT
 
	gdz_Æignmít_ígöe_swôch
 = 
DZ_ENABLED
;

17 
EXPORT_SYMBOL
(
dz_Æignmít_ígöe_swôch
);

23 
ALIGN_COUNTERS
 
	gdz_Æign_cou¡îs
;

24 
PALIGN_COUNTERS
 
	gpdz_Æign_cou¡îs
;

25 
EXPORT_SYMBOL
(
dz_Æign_cou¡îs
);

26 
EXPORT_SYMBOL
(
pdz_Æign_cou¡îs
);

28 
ATOMIC64
 
	gÆign_iocou¡_disk_ªad
;

29 
EXPORT_SYMBOL
(
Æign_iocou¡_disk_ªad
);

31 
ATOMIC64
 
	gÆign_iocou¡_disk_ªad_öã∫Æ
;

32 
EXPORT_SYMBOL
(
Æign_iocou¡_disk_ªad_öã∫Æ
);

34 
ATOMIC64
 
	gÆign_iocou¡_ªads_∑πül_∑ge
;

35 
EXPORT_SYMBOL
(
Æign_iocou¡_ªads_∑πül_∑ge
);

37 
ATOMIC64
 
	gÆign_iocou¡_ªads_sögÀ_∑ge
;

38 
EXPORT_SYMBOL
(
Æign_iocou¡_ªads_sögÀ_∑ge
);

40 
ATOMIC64
 
	gÆign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

41 
EXPORT_SYMBOL
(
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
);

43 
ATOMIC64
 
	gÆign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

44 
EXPORT_SYMBOL
(
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
);

46 
ATOMIC64
 
	gÆign_iocou¡_ªads_mu…i_∑ge
;

47 
EXPORT_SYMBOL
(
Æign_iocou¡_ªads_mu…i_∑ge
);

49 
ATOMIC64
 
	gÆign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

50 
EXPORT_SYMBOL
(
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
);

52 
ATOMIC64
 
	gÆign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

53 
EXPORT_SYMBOL
(
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
);

55 
ATOMIC64
 
	gÆign_iocou¡_ªads_mu…i_èû_u«lig√d_∑ge
;

56 
EXPORT_SYMBOL
(
Æign_iocou¡_ªads_mu…i_èû_u«lig√d_∑ge
);

58 
ATOMIC64
 
	gÆign_iocou¡_ªads_mu…i_hód_u«lig√d_∑ge
;

59 
EXPORT_SYMBOL
(
Æign_iocou¡_ªads_mu…i_hód_u«lig√d_∑ge
);

61 
ATOMIC64
 
	gÆign_iocou¡_ªads_mu…i_bŸh_u«lig√d_∑ge
;

62 
EXPORT_SYMBOL
(
Æign_iocou¡_ªads_mu…i_bŸh_u«lig√d_∑ge
);

64 
ATOMIC64
 
	gÆign_iocou¡_disk_wrôe
;

65 
EXPORT_SYMBOL
(
Æign_iocou¡_disk_wrôe
);

67 
ATOMIC64
 
	gÆign_iocou¡_disk_wrôe_öã∫Æ
;

68 
EXPORT_SYMBOL
(
Æign_iocou¡_disk_wrôe_öã∫Æ
);

70 
ATOMIC64
 
	gÆign_iocou¡_wrôes_∑πül_∑ge
;

71 
EXPORT_SYMBOL
(
Æign_iocou¡_wrôes_∑πül_∑ge
);

73 
ATOMIC64
 
	gÆign_iocou¡_wrôes_sögÀ_∑ge
;

74 
EXPORT_SYMBOL
(
Æign_iocou¡_wrôes_sögÀ_∑ge
);

76 
ATOMIC64
 
	gÆign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

77 
EXPORT_SYMBOL
(
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
);

79 
ATOMIC64
 
	gÆign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

80 
EXPORT_SYMBOL
(
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
);

82 
ATOMIC64
 
	gÆign_iocou¡_wrôes_mu…i_∑ge
;

83 
EXPORT_SYMBOL
(
Æign_iocou¡_wrôes_mu…i_∑ge
);

85 
ATOMIC64
 
	gÆign_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

86 
EXPORT_SYMBOL
(
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
);

88 
ATOMIC64
 
	gÆign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

89 
EXPORT_SYMBOL
(
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
);

95 
	#NUMBER_OF_ALIGN_READ_THREADS
 2

	)

96 
	#NUMBER_OF_ALIGN_WRITE_THREADS
 2

	)

98 
PCHAR
 
	gALIGN_WRITE_THREAD_POOL_NAME
 = "awrite_thread_pool";

99 
PCHAR
 
	gALIGN_WRITE_THREAD_POOL_SHORT_NAME
 = "awtpool";

100 
EXPORT_SYMBOL
(
ALIGN_WRITE_THREAD_POOL_NAME
);

101 
EXPORT_SYMBOL
(
ALIGN_WRITE_THREAD_POOL_SHORT_NAME
);

103 
PCHAR
 
	gALIGN_READ_THREAD_POOL_NAME
 = "aread_thread_pool";

104 
PCHAR
 
	gALIGN_READ_THREAD_POOL_SHORT_NAME
 = "artpool";

105 
EXPORT_SYMBOL
(
ALIGN_READ_THREAD_POOL_NAME
);

106 
EXPORT_SYMBOL
(
ALIGN_READ_THREAD_POOL_SHORT_NAME
);

108 
USHORT
 
	gnum_Æign_ªad_thªads
 = 
NUMBER_OF_ALIGN_READ_THREADS
;

109 
EXPORT_SYMBOL
(
num_Æign_ªad_thªads
);

111 
USHORT
 
	gnum_Æign_wrôe_thªads
 = 
NUMBER_OF_ALIGN_WRITE_THREADS
;

112 
EXPORT_SYMBOL
(
num_Æign_wrôe_thªads
);

114 
PDZ_THREAD_POOL
 
	gÆign_ªad_thªad_poﬁ
 = 
NULL
;

115 
EXPORT_SYMBOL
(
Æign_ªad_thªad_poﬁ
);

117 
PDZ_THREAD_POOL
 
	gÆign_wrôe_thªad_poﬁ
 = 
NULL
;

118 
EXPORT_SYMBOL
(
Æign_wrôe_thªad_poﬁ
);

	@infra_engine/infra_engine_bec.c

9 
	~"¥ŸŸy≥s.h
"

16 
BEC_COUNTERS
 
	gdz_bec_cou¡îs
;

17 
PBEC_COUNTERS
 
	gpdz_bec_cou¡îs
;

18 
EXPORT_SYMBOL
(
dz_bec_cou¡îs
);

19 
EXPORT_SYMBOL
(
pdz_bec_cou¡îs
);

24 
	#NUMBER_OF_BEC_THREADS
 4

	)

26 
PCHAR
 
	gBEC_THREAD_POOL_NAME
 = "bec_thread_pool";

27 
PCHAR
 
	gBEC_THREAD_POOL_SHORT_NAME
 = "bcpool";

28 
EXPORT_SYMBOL
(
BEC_THREAD_POOL_NAME
);

29 
EXPORT_SYMBOL
(
BEC_THREAD_POOL_SHORT_NAME
);

32 
PDZ_THREAD_POOL
 
	gbec_thªad_poﬁ
 = 
NULL
;

33 
EXPORT_SYMBOL
(
bec_thªad_poﬁ
);

35 
USHORT
 
	gnum_bec_thªads
 = 
NUMBER_OF_BEC_THREADS
;

36 
EXPORT_SYMBOL
(
num_bec_thªads
);

39 
DECLARE_RWSEM
(
bec_lock
);

44 
LIST_HEAD
 
	gbec_li°_hód
;

45 
EXPORT_SYMBOL
(
bec_li°_hód
);

47 
PRADIX_TREE_ROOT
 
	gbec_ødix_åì
;

48 
EXPORT_SYMBOL
(
bec_ødix_åì
);

50 
ATOMIC64
 
	gbec_pba_∑ge_cou¡
;

51 
EXPORT_SYMBOL
(
bec_pba_∑ge_cou¡
);

56 
INT
 
	gbec_cutoff_nodes
;

57 
EXPORT_SYMBOL
(
bec_cutoff_nodes
);

59 
INT
 
	gbec_cutoff_≥r˚¡
;

60 
EXPORT_SYMBOL
(
bec_cutoff_≥r˚¡
);

62 
ULONG
 
	gbec_size
 = 0;

63 
EXPORT_SYMBOL
(
bec_size
);

68 
ATOMIC64
 
	gbec_ˇche_hô
;

69 
EXPORT_SYMBOL
(
bec_ˇche_hô
);

71 
ATOMIC64
 
	gbec_ˇche_miss
;

72 
EXPORT_SYMBOL
(
bec_ˇche_miss
);

74 
ATOMIC64
 
	gbec_ˇche_dñëe
;

75 
EXPORT_SYMBOL
(
bec_ˇche_dñëe
);

80 
	#NUMBER_OF_BEC_NODE_POOL_ENTRIES
 
_128K


	)

81 
INT
 
	gdz_bec_node_mempoﬁ_cou¡
 = 
NUMBER_OF_BEC_NODE_POOL_ENTRIES
;

82 
EXPORT_SYMBOL
(
dz_bec_node_mempoﬁ_cou¡
);

84 
INT
 
	gdz_pba_∑ge_mempoﬁ_cou¡
 = 
NUMBER_OF_BEC_NODE_POOL_ENTRIES
;

85 
EXPORT_SYMBOL
(
dz_pba_∑ge_mempoﬁ_cou¡
);

	@infra_engine/infra_engine_bio_read.c

9 
	~"¥ŸŸy≥s.h
"

11 
PBLOCK_DEVICE
 
DATA_DISK_DEVICE
;

12 
NAME
 
DATA_DISK_DEVICE_NAME
;

13 
CHAR
 
sysfs_avm_gë_èrgë_«me
[
DZ_SYSFS_PAGE_SIZE
];

15 #ifde‡
DZ_KERNEL_VERSION_4


16 
RVOID
 
	$dz_ªad_biod⁄e_sync
(
PBIO
 
bio
)

18 
PDZ_COMPLETION
 
i‹
 = (PDZ_COMPLETION)
bio
->
bi_¥iv©e
;

20 
îr‹
 = 
	`blk_°©us_to_î∫o
(
bio
->
bi_°©us
);

22 
	`LOGALIGN
("Inside Done: bio->bi_size = %d, bio = %p, bio->bi_cnt = %d bio_page = %p, bi_status = %d\n",

23 
	`DZ_BIO_GET_SIZE
(
bio
), bio, 
	`ATOMIC_READ
(
	`DZ_BIO_GET_CNT
(bio)),
	`bio_∑ge
(bio), bio->
bi_°©us
);

25 
i‹
->
îr‹
 =Érror;

27 
	`com∂ëe
(&
i‹
->
io_com∂ëi⁄
);

29 
	}
}

32 
RVOID
 
	$dz_ªad_biod⁄e_sync
(
PBIO
 
bio
, 
îr‹
)

34 
PDZ_COMPLETION
 
i‹
 = (PDZ_COMPLETION)
bio
->
bi_¥iv©e
;

35 
INT
 
ªt
 = 0;

38 i‡(
	`u∆ikñy
(!
	`bio_Êagged
(
bio
, 
BIO_UPTODATE
Ë&& !
îr‹
)) {

39 
îr‹
 = -
EIO
;

42 
	`LOGALIGN
("Inside Done: bio->bi_size = %d, bio = %p, bio->bi_cnt = %d bio_page = %p\n",

43 
	`DZ_BIO_GET_SIZE
(
bio
), bio, 
	`ATOMIC_READ
(bio->
bi_˙t
),
	`bio_∑ge
(bio));

45 
i‹
->
îr‹
 =Érror;

46 
ªt
 = 
	`ã°_bô
(
BIO_UPTODATE
, &
bio
->
bi_Êags
);

48 
	`com∂ëe
(&
i‹
->
io_com∂ëi⁄
);

50 
	}
}

52 
EXPORT_SYMBOL
(
dz_ªad_biod⁄e_sync
);

59 
RINT
 
	$dz_ªad_d©a_‰om_øw_disk_sync
(
PBLOCK_DEVICE
 
devi˚
,

60 
SECTOR
 
£˘‹
, 
PDATA_PAGES_T
 
d©a_∑ges
, 
UINT
 
bio_size
)

62 
PPAGE
 
∑ge
 = 
NULL
;

63 
PBIO
 
bio
 = 
NULL
;

64 
UINT
 
pgd©Æí
 = 0;

65 
UINT
 
pg˙t
 = (
bio_size
 + 
PAGE_SIZE
 - 1Ë>> 
PAGE_SHIFT
;

66 
INT
 
ªt
 = 
SUCCESS
;

67 
INT
 
i
 = 0;

68 
INT
 
îr‹
 = 
SUCCESS
;

69 
DZ_COMPLETION
 
io_com∂ëi⁄
;

71 i‡(
pg˙t
 > 
DZ_NUMBER_OF_READ_PAGES_IN_A_BIO
) {

72 
	`LOGE
("Required Pagesáre moreÅhan %d\n",

73 
DZ_NUMBER_OF_READ_PAGES_IN_A_BIO
);

74 
RETURNF
;

77 i‡(!
devi˚
) {

78 
	`LOGE
("Device is NULL. Can'tÖroceedáhead\n");

79 
RETURNF
;

83 i‡(
	`dz_Æloc_d©a_∑ges
(
d©a_∑ges
, 
pg˙t
)) {

84 
	`LOGE
("UnableÅo create Data Pages Vector \n");

85 
RETURNF
;

88 
bio
 = 
	`dz_bio_Æloc
(
pg˙t
);

89 i‡(!
bio
) {

90 
	`LOGE
("UnableÅo get free bio\n");

91 
	`dz_‰ì_d©a_∑ges
(
d©a_∑ges
, 
Ál£
);

92 
RETURNF
;

95 
io_com∂ëi⁄
.
îr‹
 = 0;

96 
	`DZ_BIO_SET_DEV
(
bio
, 
devi˚
);

97 
	`DZ_BIO_SET_SECTOR
(
bio
, 
£˘‹
);

98 
	`DZ_BIO_SET_END_IO
(
bio
, 
dz_ªad_biod⁄e_sync
);

99 
	`DZ_BIO_SET_ZIDX
(
bio
);

100 
	`DZ_BIO_SET_READ
(
bio
);

101 
	`DZ_BIO_SET_NEXT
(
bio
, 
NULL
);

102 
bio
->
bi_¥iv©e
 = (
VOID
 *)&
io_com∂ëi⁄
;

105 
i
=0; i < 
pg˙t
; i++) {

106 
∑ge
 = 
d©a_∑ges
->
∑gevec
[
i
].
bv_∑ge
;

107 
pgd©Æí
 = (
bio_size
 > 
PAGE_SIZE
) ? PAGE_SIZE : bio_size;

109 i‡(!
	`bio_add_∑ge
(
bio
, 
∑ge
, 
pgd©Æí
, 0)) {

110 
	`LOGE
("UnableÅoáddÖageÅo bio\n");

111 
ªt
 = 
FAILURE
;

112 
exô_Áûuª
;

116 
d©a_∑ges
->
∑gevec
[
i
].
bv_off£t
 = 0;

117 
d©a_∑ges
->
∑gevec
[
i
].
bv_Àn
 = 
pgd©Æí
;

119 
bio_size
 -
pgd©Æí
;

120 i‡(!
bio_size
) ;

122 
	`öô_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

124 
	`DZ_OS_KERNEL_GENERIC_MAKE_REQUEST
(
bio
);

125 
	`waô_f‹_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

129 
îr‹
 = 
io_com∂ëi⁄
.error;

130 i‡(
	`u∆ikñy
(
îr‹
)){

131 
	`LOGE
("Eº‹ i¿ªadögÑaw d©a. Eº‹ Codê: %d", 
îr‹
);

132 
	`¥öt_biom
(
bio
, "bio withÉrror");

134 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

135 
RETURN
;

137 
exô_Áûuª
:

139 
	`dz_‰ì_d©a_∑ges
(
d©a_∑ges
, 
Ál£
);

140 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

141 
RETURN
;

142 
	}
}

147 
PPAGE
 
	$dz_ªad_∑ge_‰om_øw_disk_sync
(
PBLOCK_DEVICE
 
devi˚
,

148 
SECTOR
 
£˘‹
, 
UINT
 
bio_size
)

150 
PPAGE
 
∑ge
 = 
NULL
;

151 
PBIO
 
bio
 = 
NULL
;

152 
INT
 
îr‹
 = 0;

153 
DZ_COMPLETION
 
io_com∂ëi⁄
;

155 
∑ge
 = 
	`dz_ªad_∑ge_Æloc
();

156 i‡(!
∑ge
) {

157 
	`LOGE
("UnableÅo get freeÑeadÖage\n");

158 
RETURNN
;

161 
bio
 = 
	`dz_bio_Æloc
(1);

162 i‡(!
bio
) {

163 
	`LOGE
("UnableÅo get free bio\n");

164 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

165 
RETURNN
;

168 
io_com∂ëi⁄
.
îr‹
 = 0;

169 
	`DZ_BIO_SET_DEV
(
bio
, 
devi˚
);

170 
	`DZ_BIO_SET_SECTOR
(
bio
, 
£˘‹
);

171 
	`DZ_BIO_SET_END_IO
(
bio
, 
dz_ªad_biod⁄e_sync
);

172 
	`DZ_BIO_SET_ZIDX
(
bio
);

173 
	`DZ_BIO_SET_READ
(
bio
);

174 
	`DZ_BIO_SET_NEXT
(
bio
, 
NULL
);

175 
bio
->
bi_¥iv©e
 = (
VOID
 *)&
io_com∂ëi⁄
;

179 i‡(!
	`bio_add_∑ge
(
bio
, 
∑ge
, 
PAGE_SIZE
, 0)) {

180 
	`LOGE
("UnableÅoáddÖageÅo bio\n");

181 
	`dz_ªad_∑ge_‰ì
(
∑ge
);

182 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

183 
RETURNN
;

185 
	`öô_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

187 
	`DZ_OS_KERNEL_GENERIC_MAKE_REQUEST
(
bio
);

188 
	`waô_f‹_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

192 
îr‹
 = 
io_com∂ëi⁄
.error;

193 i‡(
	`u∆ikñy
(
îr‹
)){

194 
	`LOGE
("Eº‹ i¿ªadögÑaw d©a. Eº‹ Codê: %d", 
îr‹
);

195 
	`¥öt_biom
(
bio
, "bio withÉrror");

196 
RETURNN
;

198 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

199  
∑ge
;

200 
	}
}

201 
EXPORT_SYMBOL
(
dz_ªad_∑ge_‰om_øw_disk_sync
);

209 
PPAGE
 
	$dz_ªad_∑ge_sync
(
PBIO
 
bio
)

211 
PPAGE
 
∑ge
 = 
	`bio_∑ge
(
bio
);

212 
INT
 
îr‹
 = 0;

213 
DZ_COMPLETION
 
io_com∂ëi⁄
;

215 
io_com∂ëi⁄
.
îr‹
 = 0;

216 
	`DZ_BIO_SET_END_IO
(
bio
, 
dz_ªad_biod⁄e_sync
);

217 
	`DZ_BIO_SET_ZIDX
(
bio
);

218 
	`DZ_BIO_SET_READ
(
bio
);

219 
	`DZ_BIO_SET_NEXT
(
bio
, 
NULL
);

220 
bio
->
bi_¥iv©e
 = (
VOID
 *)&
io_com∂ëi⁄
;

225 
	`öô_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

227 
	`DZ_OS_KERNEL_GENERIC_MAKE_REQUEST
(
bio
);

228 
	`waô_f‹_com∂ëi⁄
(&
io_com∂ëi⁄
.
com∂ëi⁄
);

232 
îr‹
 = 
io_com∂ëi⁄
.error;

233 i‡(
	`u∆ikñy
(
îr‹
)){

234 
	`LOGE
("Eº‹ i¿ªadögÑaw d©a. Eº‹ Codê: %d", 
îr‹
);

235 
	`¥öt_biom
(
bio
, "bio withÉrror");

236 
RETURNN
;

238  
∑ge
;

239 
	}
}

240 
EXPORT_SYMBOL
(
dz_ªad_∑ge_sync
);

242 
RINT
 
	$dz_ªad_d©a
(
PIOREQUEST
 
i‹eque°
, 
PDATA_PAGES
 
d©a_∑ges
)

244 
PBLOCK_DEVICE
 
bdev
 = 
DATA_DISK_DEVICE
;

245 
INT
 
ªt
 = 
SUCCESS
;

246 
boﬁ
 
bdev∑ss
 = 
åue
;

248 i‡(!
bdev
) {

249 i‡(
	`°æí
(
DATA_DISK_DEVICE_NAME
) == 0) {

250 
	`LOGI
("PleaseÖrovideá device for issuing writes\n");

251 
RETURNF
;

253 
bdev∑ss
 = 
Ál£
;

254 
bdev
 = 
	`dz_bdev_›í
(
DATA_DISK_DEVICE_NAME
);

255 i‡(!
bdev
) {

256 
	`LOGE
("U«bÀÅÿ›í devi˚ %s\n", 
DATA_DISK_DEVICE_NAME
);

257  
FAILURE
;

261 
ªt
 = 
	`dz_ªad_d©a_‰om_øw_disk_sync
(
bdev
, 
i‹eque°
->
i‹_£˘‹
,

262 
d©a_∑ges
, 
i‹eque°
->
i‹_size
);

264 i‡(
bdev∑ss
 =
Ál£
) {

265 
	`dz_bdev_˛o£
(
bdev
);

267 
RETURN
;

268 
	}
}

269 
EXPORT_SYMBOL
(
dz_ªad_d©a
);

271 
RINT
 
	$dz_ªad_d©a_‰om_block_devi˚
(
PIOREQUEST
 
i‹eque°
, 
CHAR
 *
bdev_«me
, 
PDATA_PAGES
 
d©a_∑ges
)

273 
PBLOCK_DEVICE
 
bdev
 = 
NULL
;

274 
INT
 
ªt
 = 
SUCCESS
;

276 
bdev
 = 
	`dz_bdev_›í
(
bdev_«me
);

277 i‡(!
bdev
) {

278 
	`LOGE
("U«bÀÅÿ›í devi˚ %s\n", 
bdev_«me
);

279  
FAILURE
;

282 
ªt
 = 
	`dz_ªad_d©a_‰om_øw_disk_sync
(
bdev
, 
i‹eque°
->
i‹_£˘‹
,

283 
d©a_∑ges
, 
i‹eque°
->
i‹_size
);

285 
	`dz_bdev_˛o£
(
bdev
);

286 
RETURN
;

287 
	}
}

288 
EXPORT_SYMBOL
(
dz_ªad_d©a_‰om_block_devi˚
);

	@infra_engine/infra_engine_bio_write.c

9 
	~"bio_ígöe.h
"

11 
PBLOCK_DEVICE
 
DATA_DISK_DEVICE
;

12 
NAME
 
DATA_DISK_DEVICE_NAME
;

13 
PPBA_BLOCK
 
pba_èbÀ
;

14 
PHASH_BLOCK
 
hash_èbÀ
;

15 
PLBA_BLOCK
 
lba_èbÀ
;

16 
CHAR
 
sysfs_avm_gë_èrgë_«me
[
DZ_SYSFS_PAGE_SIZE
];

17 
SIZE
 
dz_pba_∑ge_mempoﬁ_cou¡
;

18 
U64
 
lba_èbÀ_size
;

19 
U64
 
pba_èbÀ_size
;

20 
U64
 
hash_èbÀ_size
;

21 
BITMAP
 
pba_bôm≠
;

22 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

23 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

25 
SPINLOCK
 
lba_èbÀ_lock
;

26 
SPINLOCK
 
hash_èbÀ_lock
;

27 
SPINLOCK
 
pba_èbÀ_lock
;

29 
INT
 
	gdz_doubÀ_∑ge
 = 0;

30 
EXPORT_SYMBOL
(
dz_doubÀ_∑ge
);

32 #ifde‡
DZ_KERNEL_VERSION_4


33 
RVOID
 
	$dz_wrôe_biod⁄e_sync
(
PBIO
 
bio
)

35 
PDZ_COMPLETION
 
comp
 = (PDZ_COMPLETION)
bio
->
bi_¥iv©e
;

36 
comp
->
îr‹
 = 
	`blk_°©us_to_î∫o
(
bio
->
bi_°©us
);

37 
	`LOGD
("Com∂ëi⁄:îr‹=%d\n", 
îr‹
);

38 
	`com∂ëe
(&
comp
->
io_com∂ëi⁄
);

44 
	}
}

46 
RVOID
 
	$dz_wrôe_biod⁄e_sync
(
PBIO
 
bio
, 
INT
 
îr‹
)

48 
PDZ_COMPLETION
 
comp
 = (PDZ_COMPLETION)
bio
->
bi_¥iv©e
;

49 
comp
->
îr‹
 =Érror;

50 
	`LOGD
("Com∂ëi⁄:îr‹=%d\n", 
îr‹
);

51 
	`com∂ëe
(&
comp
->
io_com∂ëi⁄
);

57 
	}
}

59 
EXPORT_SYMBOL
(
dz_wrôe_biod⁄e_sync
);

65 
RINT
 
	$dz_wrôe_d©a_to_øw_disk_sync
(
PBLOCK_DEVICE
 
devi˚
,

66 
SECTOR
 
£˘‹
, 
PVOID
 
d©a
, 
UINT
 
bio_size
)

68 
PPAGE
 
∑ge
 = 
NULL
;

69 
PBIO
 
bio
 = 
NULL
;

70 
PVOID
 
∑gebuf
 = 
NULL
;

71 
CHAR
 *
pd©a
 = 
NULL
;

72 
UINT
 
pgd©Æí
 = 0;

73 
UINT
 
pg˙t
 = (
bio_size
 + 
PAGE_SIZE
 - 1Ë>> 
PAGE_SHIFT
;

74 
INT
 
ªt
 = 
SUCCESS
;

75 
INT
 
i
 = 0;

76 
INT
 
îr‹
 = 
SUCCESS
;

77 
DZ_COMPLETION
 
com∂ëi⁄
;

81 i‡(
pg˙t
 > 
DZ_NUMBER_OF_WRITE_PAGES_IN_A_BIO
) {

82 
	`LOGE
("Required Pagesáre moreÅhan %d\n",

83 
DZ_NUMBER_OF_WRITE_PAGES_IN_A_BIO
);

84 
RETURNF
;

87 i‡(!
devi˚
) {

88 
	`LOGE
("Device is NULL. Can'tÖroceedáhead\n");

89 
RETURNF
;

91 i‡(!
d©a
) {

92 
	`LOGE
("Data is NULL\n");

93 
RETURNF
;

96 
	`MEMSET
(&
com∂ëi⁄
);

98 
bio
 = 
	`dz_bio_Æloc
(
pg˙t
);

99 i‡(!
bio
) {

100 
	`LOGE
("UnableÅo get free bio\n");

101 
RETURNF
;

103 
	`DZ_BIO_SET_DEV
(
bio
, 
devi˚
);

104 
	`DZ_BIO_SET_SECTOR
(
bio
, 
£˘‹
);

105 
	`DZ_BIO_SET_END_IO
(
bio
, 
dz_wrôe_biod⁄e_sync
);

106 
	`DZ_BIO_SET_ZIDX
(
bio
);

107 
	`DZ_BIO_SET_WRITE
(
bio
);

108 
	`DZ_BIO_SET_NEXT
(
bio
, 
NULL
);

109 
bio
->
bi_¥iv©e
 = &(
com∂ëi⁄
);

112 
pd©a
 = (
CHAR
 *)
d©a
;

113 
i
=0; i < 
pg˙t
; i++) {

114 
∑ge
 = 
	`dz_wrôe_∑ge_Æloc
();

115 i‡(!
∑ge
) {

116 
	`LOGE
("UnableÅo get free writeÖage\n");

117 
RETURNF
;

120 
pgd©Æí
 = (
bio_size
 > 
PAGE_SIZE
) ? PAGE_SIZE : bio_size;

121 i‡(!
	`bio_add_∑ge
(
bio
, 
∑ge
, 
pgd©Æí
, 0)) {

122 
	`LOGE
("UnableÅoáddÖageÅo bio\n");

123 
ªt
 = 
FAILURE
;

124 
exô
;

126 
∑gebuf
 = 
	`km≠
(
∑ge
);

127 
	`mem£t
(
∑gebuf
, 0, 
pgd©Æí
);

128 
	`mem˝y
(
∑gebuf
, 
pd©a
, 
pgd©Æí
);

129 
	`kunm≠
(
∑ge
);

130 
pd©a
 +
pgd©Æí
;

132 
bio_size
 -
pgd©Æí
;

133 i‡(!
bio_size
) ;

135 
	`öô_com∂ëi⁄
(&
com∂ëi⁄
.
io_com∂ëi⁄
);

136 
	`DZ_OS_KERNEL_GENERIC_MAKE_REQUEST
(
bio
);

137 
	`waô_f‹_com∂ëi⁄
(&
com∂ëi⁄
.
io_com∂ëi⁄
);

140 
îr‹
 = 
com∂ëi⁄
.error;

141 i‡(
	`u∆ikñy
(
îr‹
)){

142 
	`LOG
("Eº‹ i¿wrôögÑaw d©a. Eº‹ Codê: %d", 
îr‹
);

143 
ªt
 = 
îr‹
;

144 
	`¥öt_biom
(
bio
, "bio withÉrror");

148 
exô
:

149 
	`dz_bio_bvec_wrôe_∑ge_‰ì
(
bio
);

150 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

151 
RETURN
;

152 
	}
}

153 
EXPORT_SYMBOL
(
dz_wrôe_d©a_to_øw_disk_sync
);

160 
RINT
 
	$dz_wrôe_∑ge_to_øw_disk_sync
(
PBLOCK_DEVICE
 
devi˚
,

161 
SECTOR
 
£˘‹
, 
UINT
 
bio_size
, 
PPAGE
 
∑ge
)

163 
PBIO
 
bio
 = 
NULL
;

164 
INT
 
ªt
 = 
SUCCESS
;

165 
INT
 
îr‹
 = 
SUCCESS
;

166 
DZ_COMPLETION
 
com∂ëi⁄
;

168 
	`MEMSET
(&
com∂ëi⁄
);

170 
bio
 = 
	`dz_bio_Æloc
(1);

171 i‡(!
bio
) {

172 
	`LOGE
("UnableÅo get free bio\n");

173 
RETURNF
;

175 
	`DZ_BIO_SET_DEV
(
bio
, 
devi˚
);

176 
	`DZ_BIO_SET_SECTOR
(
bio
, 
£˘‹
);

177 
	`DZ_BIO_SET_END_IO
(
bio
, 
dz_wrôe_biod⁄e_sync
);

178 
	`DZ_BIO_SET_ZIDX
(
bio
);

179 
	`DZ_BIO_SET_WRITE
(
bio
);

180 
	`DZ_BIO_SET_NEXT
(
bio
, 
NULL
);

182 
	`DZ_BIO_SET_PRIVATE
(
bio
, &(
com∂ëi⁄
));

185 i‡(!
	`bio_add_∑ge
(
bio
, 
∑ge
,

186 
PAGE_SIZE
, 0)) {

187 
	`LOGE
("UnableÅoáddÖageÅo bio\n");

188 
ªt
 = 
FAILURE
;

189 
exô
;

192 
	`öô_com∂ëi⁄
(&
com∂ëi⁄
.
io_com∂ëi⁄
);

193 
	`DZ_OS_KERNEL_GENERIC_MAKE_REQUEST
(
bio
);

194 
	`LOGD
("Waiting for IOÅo complete\n");

195 
	`waô_f‹_com∂ëi⁄
(&
com∂ëi⁄
.
io_com∂ëi⁄
);

198 
îr‹
 = 
com∂ëi⁄
.error;

199 i‡(
	`u∆ikñy
(
îr‹
)){

200 
	`LOG
("Eº‹ i¿wrôögÑaw d©a. Eº‹ Codê: %d", 
îr‹
);

201 
ªt
 = 
îr‹
;

202 
	`¥öt_biom
(
bio
, "bio withÉrror");

205 
exô
:

206 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

207 
RETURN
;

208 
	}
}

209 
EXPORT_SYMBOL
(
dz_wrôe_∑ge_to_øw_disk_sync
);

211 
RVOID
 
	$dz_chûd_biod⁄e
(
PBIO
 
bio
, 
INT
 
îr‹
)

213 
PIOREQUEST
 
ci‹eque°
 = (PIOREQUESTË
bio
->
bi_¥iv©e
;

214 
PIOREQUEST
 
pi‹eque°
 = 
NULL
;

216 i‡(
ci‹eque°
->
i‹_∑ª¡
) {

217 
pi‹eque°
 = 
ci‹eque°
->
i‹_∑ª¡
;

219 i‡(
	`©omic_dec_™d_ã°
(&
pi‹eque°
->
i‹_chûd_˙t
)) {

223 i‡(
bio
->
bi_°©us
 !
BLK_STS_OK
) {

224 
	`IOREQUEST_DONE_ERROR
(
pi‹eque°
);

230 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

231 
	`dz_io_‰ì
(
ci‹eque°
);

234 
	}
}

235 
EXPORT_SYMBOL
(
dz_chûd_biod⁄e
);

237 
RINT
 
	$dz_wrôe_d©a
(
PIOREQUEST
 
i‹eque°
)

240 
PBLOCK_DEVICE
 
bdev
 = 
DATA_DISK_DEVICE
;

241 
INT
 
ªt
 = 
SUCCESS
;

242 
boﬁ
 
bdev∑ss
 = 
åue
;

244 i‡(!
bdev
) {

245 i‡(
	`°æí
(
DATA_DISK_DEVICE_NAME
) == 0) {

246 
	`LOG
("PleaseÖrovideá device for issuing writes\n");

247 
RETURNF
;

249 
bdev∑ss
 = 
Ál£
;

250 
bdev
 = 
	`dz_bdev_›í
(
DATA_DISK_DEVICE_NAME
);

251 i‡(!
bdev
) {

252 
	`LOG
("U«bÀÅÿ›í devi˚ %s\n", 
DATA_DISK_DEVICE_NAME
);

253  
FAILURE
;

257 i‡(
dz_doubÀ_∑ge
) {

265 
ªt
 = 
	`dz_wrôe_d©a_to_øw_disk_sync
(
bdev
, 
i‹eque°
->
i‹_£˘‹
,

266 
i‹eque°
->
i‹_¥iv©e
, i‹eque°->
i‹_size
);

269 i‡(
bdev∑ss
 =
Ál£
) {

270 
	`dz_bdev_˛o£
(
bdev
);

272 
RETURN
;

274 
	}
}

275 
EXPORT_SYMBOL
(
dz_wrôe_d©a
);

277 
RINT
 
	$dz_wrôe_d©a_to_block_devi˚
(
PIOREQUEST
 
i‹eque°
, 
CHAR
 *
bdev_«me
)

280 
PBLOCK_DEVICE
 
bdev
 = 
DATA_DISK_DEVICE
;

281 
INT
 
ªt
 = 
SUCCESS
;

283 
bdev
 = 
	`dz_bdev_›í
(
bdev_«me
);

284 i‡(!
bdev
) {

285 
	`LOGE
("U«bÀÅÿ›í devi˚ %s\n", 
bdev_«me
);

286  
FAILURE
;

288 
	`LOGF
("Devi˚ %†›íed suc˚ssfuŒy\n", 
bdev_«me
);

291 
ªt
 = 
	`dz_wrôe_d©a_to_øw_disk_sync
(
bdev
, 
i‹eque°
->
i‹_£˘‹
,

292 
i‹eque°
->
i‹_¥iv©e
, i‹eque°->
i‹_size
);

294 
	`dz_bdev_˛o£
(
bdev
);

295 
RETURN
;

297 
	}
}

298 
EXPORT_SYMBOL
(
dz_wrôe_d©a_to_block_devi˚
);

	@infra_engine/infra_engine_dedupe.c

9 
	~"¥ŸŸy≥s.h
"

16 
	#NUMBER_OF_DEDUPE_THREADS
 4

	)

18 
USHORT
 
	gdedu≥_num_thªads
 = 
NUMBER_OF_DEDUPE_THREADS
;

19 
EXPORT_SYMBOL
(
dedu≥_num_thªads
);

21 
PCHAR
 
	gDEDUPE_THREAD_POOL_NAME
 = "dedupe_thread_pool";

22 
PCHAR
 
	gDEDUPE_THREAD_POOL_SHORT_NAME
 = "ddpool";

24 
PCHAR
 
	gDEDUPE_READ_THREAD_POOL_NAME
 = "rdedupe_thread_pool";

25 
PCHAR
 
	gDEDUPE_READ_THREAD_POOL_SHORT_NAME
 = "rddpool";

27 
PCHAR
 
	gDEDUPE_WRITE_THREAD_POOL_NAME
 = "wdedupe_thread_pool";

28 
PCHAR
 
	gDEDUPE_WRITE_THREAD_POOL_SHORT_NAME
 = "wddpool";

30 
EXPORT_SYMBOL
(
DEDUPE_THREAD_POOL_NAME
);

31 
EXPORT_SYMBOL
(
DEDUPE_THREAD_POOL_SHORT_NAME
);

33 
EXPORT_SYMBOL
(
DEDUPE_READ_THREAD_POOL_NAME
);

34 
EXPORT_SYMBOL
(
DEDUPE_READ_THREAD_POOL_SHORT_NAME
);

36 
EXPORT_SYMBOL
(
DEDUPE_WRITE_THREAD_POOL_NAME
);

37 
EXPORT_SYMBOL
(
DEDUPE_WRITE_THREAD_POOL_SHORT_NAME
);

42 
DDE_COUNTERS
 
	gdz_dde_cou¡îs
;

43 
PDDE_COUNTERS
 
	gpdz_dde_cou¡îs
;

44 
EXPORT_SYMBOL
(
dz_dde_cou¡îs
);

45 
EXPORT_SYMBOL
(
pdz_dde_cou¡îs
);

52 
ATOMIC64
 
	gdedu≥_zî€d_out_∑ge_ªads
;

53 
EXPORT_SYMBOL
(
dedu≥_zî€d_out_∑ge_ªads
);

55 
ATOMIC64
 
	gdedu≥_disk_ªads
;

56 
EXPORT_SYMBOL
(
dedu≥_disk_ªads
);

58 
ATOMIC64
 
	gdedu≥_disk_wrôes
;

59 
EXPORT_SYMBOL
(
dedu≥_disk_wrôes
);

62 
ATOMIC64
 
	gdedu≥_ˇche_hôs
;

63 
EXPORT_SYMBOL
(
dedu≥_ˇche_hôs
);

67 
ATOMIC64
 
	gdedu≥_dñëed_íåõs
;

68 
EXPORT_SYMBOL
(
dedu≥_dñëed_íåõs
);

73 
U64
 
	gpba_èbÀ_size
 = 0;

74 
EXPORT_SYMBOL
(
pba_èbÀ_size
);

76 
U64
 
	ghash_èbÀ_size
 = 0;

77 
EXPORT_SYMBOL
(
hash_èbÀ_size
);

79 
U64
 
	glba_èbÀ_size
 = 0;

80 
EXPORT_SYMBOL
(
lba_èbÀ_size
);

83 
U32
 
	gnumbî_of_l⁄gs_f‹_gpba
;

84 
EXPORT_SYMBOL
(
numbî_of_l⁄gs_f‹_gpba
);

86 
U32
 
	gnumbî_of_l⁄gs_f‹_pba
;

87 
EXPORT_SYMBOL
(
numbî_of_l⁄gs_f‹_pba
);

89 
U32
 
	gnumbî_of_l⁄gs_f‹_lba
;

90 
EXPORT_SYMBOL
(
numbî_of_l⁄gs_f‹_lba
);

93 
PPBA_BLOCK
 
	gdedu≥_pba_èbÀ
;

94 
EXPORT_SYMBOL
(
dedu≥_pba_èbÀ
);

96 
PLBA_BLOCK
 
	gdedu≥_lba_èbÀ
;

97 
EXPORT_SYMBOL
(
dedu≥_lba_èbÀ
);

99 
PHASH_BLOCK
 
	gdedu≥_hash_èbÀ
;

100 
EXPORT_SYMBOL
(
dedu≥_hash_èbÀ
);

105 
BITMAP
 
	gpba_bôm≠
;

106 
EXPORT_SYMBOL
(
pba_bôm≠
);

108 
BITMAP
 
	glba_bôm≠
;

109 
EXPORT_SYMBOL
(
lba_bôm≠
);

111 
BITMAP
 
	ggpba_bôm≠
;

112 
EXPORT_SYMBOL
(
gpba_bôm≠
);

123 
U64
 
	gdedu≥_tŸ_logiˇl_•a˚
;

124 
EXPORT_SYMBOL
(
dedu≥_tŸ_logiˇl_•a˚
);

127 
U64
 
	gdedu≥_tŸ_physiˇl_•a˚
;

128 
EXPORT_SYMBOL
(
dedu≥_tŸ_physiˇl_•a˚
);

131 
ATOMIC64
 
	gdedu≥_cur_logiˇl_•a˚
;

132 
EXPORT_SYMBOL
(
dedu≥_cur_logiˇl_•a˚
);

135 
ATOMIC64
 
	gdedu≥_cur_physiˇl_•a˚
;

136 
EXPORT_SYMBOL
(
dedu≥_cur_physiˇl_•a˚
);

139 
ATOMIC64
 
	gdedu≥_cur_du∂iˇã_•a˚
;

140 
EXPORT_SYMBOL
(
dedu≥_cur_du∂iˇã_•a˚
);

	@infra_engine/infra_engine_experiment.c

9 
	~"¥ŸŸy≥s.h
"

11 
PBLOCK_DEVICE
 
DATA_DISK_DEVICE
;

12 
NAME
 
DATA_DISK_DEVICE_NAME
;

13 
OBJECT_LIST
 
globÆ_obje˘_li°
;

14 
U64
 
lba_èbÀ_size
;

15 
U64
 
pba_èbÀ_size
;

16 
U64
 
hash_èbÀ_size
;

17 
U64
 
sysfs_avm_‰ì_∑ge_cou¡
;

19 
BUF_MAP
 
buf„r_m≠
[];

21 
	#TEST_PASSED
 100

	)

22 
	#TEST_FAILED
 -1

	)

23 
RVOID
 
	$ã°_bôm≠
(
VOID
)

25 *
bôm≠
;

26 
U32
 
numbî_of_l⁄gs
;

27 
U64
 
pba_ödex
;

28 
UINT
 
cou¡
 = 0;

29 
UINT
 
limô
 = 100;

31 
numbî_of_l⁄gs
 = 
	`BITS_TO_LONGS
(
limô
);

32 
	`PRINT_UINT
(
numbî_of_l⁄gs
);

33 
bôm≠
 = 
	`kmÆloc
(
numbî_of_l⁄gs
 * (), 
GFP_KERNEL
);

34 
	`mem£t
(
bôm≠
 , 0, 
numbî_of_l⁄gs
 * ());

35 
pba_ödex
 = 
	`föd_fú°_zîo_bô
(
bôm≠
, 
limô
);

36 
	`PRINT_U64
(
pba_ödex
);

37 
	`ã°_™d_£t_bô
(
pba_ödex
, 
bôm≠
);

39 
	`LOG
("LOOPING\n");

41 
cou¡
 = 0; cou¡ < 
limô
 + 2; count ++) {

42 
	`PRINT_UINT
(
cou¡
);

43 
pba_ödex
 = 
	`föd_fú°_zîo_bô
(
bôm≠
, 
limô
);

44 
	`PRINT_U64
(
pba_ödex
);

45 
	`ã°_™d_£t_bô
(
pba_ödex
, 
bôm≠
);

47 
	`LOG
("LOOPING DONE\n");

49 
	`LOG
("Freeing 50th index\n");

50 i‡(!
	`ã°_™d_˛ór_bô
(50, 
bôm≠
)){

51 
	`LOGA
("askedÅoÖutÖba:%d which isÇot in use.", 50);

54 
pba_ödex
 = 
	`föd_fú°_zîo_bô
(
bôm≠
, 
limô
);

55 
	`PRINT_U64
(
pba_ödex
);

56 
	`ã°_™d_£t_bô
(
pba_ödex
, 
bôm≠
);

58 
pba_ödex
 = 
	`föd_fú°_zîo_bô
(
bôm≠
, 
limô
);

59 
	`PRINT_U64
(
pba_ödex
);

60 
	`ã°_™d_£t_bô
(
pba_ödex
, 
bôm≠
);

61 
	}
}

	@infra_engine/infra_engine_experiment_data.c

9 
	~"¥ŸŸy≥s.h
"

10 
OBJECT_LIST
 
globÆ_obje˘_li°
;

11 
U64
 
lba_èbÀ_size
;

12 
U64
 
pba_èbÀ_size
;

13 
U64
 
hash_èbÀ_size
;

14 
U64
 
sysfs_avm_‰ì_∑ge_cou¡
;

16 
CHAR
 
	gbuf„r_512B
[] = "\
512_BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
512_BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
512_BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
512_BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
512_BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
512_BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
512_BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
512_BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
";

27 
CHAR
 
	gbuf„r_1K
[] = "\
1K__BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
1K__BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
1K__BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
1K__BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
1K__BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
1K__BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
1K__BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
1K__BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
1K__BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
1K__BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
1K__BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
1K__BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
1K__BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
1K__BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
1K__BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
1K__BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
";

46 
CHAR
 
	gbuf„r_2K
[] = "\
2K__BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
2K__BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
2K__BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
2K__BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
2K__BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
2K__BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
2K__BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
2K__BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
2K__BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
2K__BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
2K__BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
2K__BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
2K__BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
2K__BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
2K__BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
2K__BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
2K__BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
2K__BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
2K__BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
2K__BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
2K__BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
2K__BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
2K__BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
2K__BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
2K__BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
2K__BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
2K__BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
2K__BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
2K__BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
2K__BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
2K__BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
2K__BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
";

81 
CHAR
 
	gbuf„r_3K
[] = "\
3K__BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
3K__BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
3K__BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
3K__BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
3K__BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
3K__BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
3K__BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
3K__BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
3K__BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
3K__BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
3K__BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
3K__BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
3K__BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
3K__BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
3K__BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
3K__BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
3K__BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
3K__BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
3K__BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
3K__BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
3K__BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
3K__BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
3K__BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
3K__BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
3K__BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
3K__BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
3K__BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
3K__BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
3K__BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
3K__BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
3K__BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
3K__BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
3K__BUF_LINE_33_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_33,\n\
3K__BUF_LINE_34_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_34,\n\
3K__BUF_LINE_35_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_35,\n\
3K__BUF_LINE_36_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_36,\n\
3K__BUF_LINE_37_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_37,\n\
3K__BUF_LINE_38_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_38,\n\
3K__BUF_LINE_39_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_39,\n\
3K__BUF_LINE_40_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_40,\n\
3K__BUF_LINE_41_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_41,\n\
3K__BUF_LINE_42_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_42,\n\
3K__BUF_LINE_43_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_43,\n\
3K__BUF_LINE_44_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_44,\n\
3K__BUF_LINE_45_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_45,\n\
3K__BUF_LINE_46_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_46,\n\
3K__BUF_LINE_47_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_47,\n\
3K__BUF_LINE_48_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_48,\n\
";

131 
CHAR
 
	gbuf„r_4K
[] = "\
4K__BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
4K__BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
4K__BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
4K__BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
4K__BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
4K__BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
4K__BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
4K__BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
4K__BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
4K__BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
4K__BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
4K__BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
4K__BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
4K__BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
4K__BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
4K__BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
4K__BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
4K__BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
4K__BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
4K__BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
4K__BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
4K__BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
4K__BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
4K__BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
4K__BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
4K__BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
4K__BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
4K__BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
4K__BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
4K__BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
4K__BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
4K__BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
4K__BUF_LINE_33_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_33,\n\
4K__BUF_LINE_34_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_34,\n\
4K__BUF_LINE_35_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_35,\n\
4K__BUF_LINE_36_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_36,\n\
4K__BUF_LINE_37_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_37,\n\
4K__BUF_LINE_38_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_38,\n\
4K__BUF_LINE_39_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_39,\n\
4K__BUF_LINE_40_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_40,\n\
4K__BUF_LINE_41_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_41,\n\
4K__BUF_LINE_42_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_42,\n\
4K__BUF_LINE_43_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_43,\n\
4K__BUF_LINE_44_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_44,\n\
4K__BUF_LINE_45_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_45,\n\
4K__BUF_LINE_46_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_46,\n\
4K__BUF_LINE_47_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_47,\n\
4K__BUF_LINE_48_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_48,\n\
4K__BUF_LINE_49_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_49,\n\
4K__BUF_LINE_50_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_50,\n\
4K__BUF_LINE_51_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_51,\n\
4K__BUF_LINE_52_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_52,\n\
4K__BUF_LINE_53_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_53,\n\
4K__BUF_LINE_54_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_54,\n\
4K__BUF_LINE_55_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_55,\n\
4K__BUF_LINE_56_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_56,\n\
4K__BUF_LINE_57_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_57,\n\
4K__BUF_LINE_58_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_58,\n\
4K__BUF_LINE_59_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_59,\n\
4K__BUF_LINE_60_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_60,\n\
4K__BUF_LINE_61_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_61,\n\
4K__BUF_LINE_62_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_62,\n\
4K__BUF_LINE_63_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_63,\n\
4K__BUF_LINE_64_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_64,\n\
";

199 
CHAR
 
	gbuf„r_5K
[] = "\
5K__BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
5K__BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
5K__BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
5K__BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
5K__BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
5K__BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
5K__BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
5K__BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
5K__BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
5K__BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
5K__BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
5K__BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
5K__BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
5K__BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
5K__BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
5K__BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
5K__BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
5K__BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
5K__BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
5K__BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
5K__BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
5K__BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
5K__BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
5K__BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
5K__BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
5K__BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
5K__BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
5K__BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
5K__BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
5K__BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
5K__BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
5K__BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
5K__BUF_LINE_33_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_33,\n\
5K__BUF_LINE_34_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_34,\n\
5K__BUF_LINE_35_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_35,\n\
5K__BUF_LINE_36_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_36,\n\
5K__BUF_LINE_37_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_37,\n\
5K__BUF_LINE_38_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_38,\n\
5K__BUF_LINE_39_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_39,\n\
5K__BUF_LINE_40_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_40,\n\
5K__BUF_LINE_41_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_41,\n\
5K__BUF_LINE_42_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_42,\n\
5K__BUF_LINE_43_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_43,\n\
5K__BUF_LINE_44_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_44,\n\
5K__BUF_LINE_45_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_45,\n\
5K__BUF_LINE_46_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_46,\n\
5K__BUF_LINE_47_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_47,\n\
5K__BUF_LINE_48_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_48,\n\
5K__BUF_LINE_49_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_49,\n\
5K__BUF_LINE_50_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_50,\n\
5K__BUF_LINE_51_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_51,\n\
5K__BUF_LINE_52_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_52,\n\
5K__BUF_LINE_53_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_53,\n\
5K__BUF_LINE_54_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_54,\n\
5K__BUF_LINE_55_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_55,\n\
5K__BUF_LINE_56_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_56,\n\
5K__BUF_LINE_57_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_57,\n\
5K__BUF_LINE_58_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_58,\n\
5K__BUF_LINE_59_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_59,\n\
5K__BUF_LINE_60_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_60,\n\
5K__BUF_LINE_61_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_61,\n\
5K__BUF_LINE_62_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_62,\n\
5K__BUF_LINE_63_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_63,\n\
5K__BUF_LINE_64_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_64,\n\
5K__BUF_LINE_65_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_65,\n\
5K__BUF_LINE_66_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_66,\n\
5K__BUF_LINE_67_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_67,\n\
5K__BUF_LINE_68_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_68,\n\
5K__BUF_LINE_69_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_69,\n\
5K__BUF_LINE_70_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_70,\n\
5K__BUF_LINE_71_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_71,\n\
5K__BUF_LINE_72_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_72,\n\
5K__BUF_LINE_73_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_73,\n\
5K__BUF_LINE_74_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_74,\n\
5K__BUF_LINE_75_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_75,\n\
5K__BUF_LINE_76_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_76,\n\
5K__BUF_LINE_77_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_77,\n\
5K__BUF_LINE_78_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_78,\n\
5K__BUF_LINE_79_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_79,\n\
5K__BUF_LINE_80_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_80,\n\
";

282 
CHAR
 
	gbuf„r_6K
[] = "\
6K__BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
6K__BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
6K__BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
6K__BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
6K__BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
6K__BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
6K__BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
6K__BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
6K__BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
6K__BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
6K__BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
6K__BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
6K__BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
6K__BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
6K__BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
6K__BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
6K__BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
6K__BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
6K__BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
6K__BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
6K__BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
6K__BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
6K__BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
6K__BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
6K__BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
6K__BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
6K__BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
6K__BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
6K__BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
6K__BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
6K__BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
6K__BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
6K__BUF_LINE_33_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_33,\n\
6K__BUF_LINE_34_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_34,\n\
6K__BUF_LINE_35_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_35,\n\
6K__BUF_LINE_36_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_36,\n\
6K__BUF_LINE_37_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_37,\n\
6K__BUF_LINE_38_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_38,\n\
6K__BUF_LINE_39_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_39,\n\
6K__BUF_LINE_40_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_40,\n\
6K__BUF_LINE_41_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_41,\n\
6K__BUF_LINE_42_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_42,\n\
6K__BUF_LINE_43_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_43,\n\
6K__BUF_LINE_44_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_44,\n\
6K__BUF_LINE_45_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_45,\n\
6K__BUF_LINE_46_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_46,\n\
6K__BUF_LINE_47_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_47,\n\
6K__BUF_LINE_48_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_48,\n\
6K__BUF_LINE_49_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_49,\n\
6K__BUF_LINE_50_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_50,\n\
6K__BUF_LINE_51_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_51,\n\
6K__BUF_LINE_52_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_52,\n\
6K__BUF_LINE_53_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_53,\n\
6K__BUF_LINE_54_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_54,\n\
6K__BUF_LINE_55_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_55,\n\
6K__BUF_LINE_56_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_56,\n\
6K__BUF_LINE_57_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_57,\n\
6K__BUF_LINE_58_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_58,\n\
6K__BUF_LINE_59_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_59,\n\
6K__BUF_LINE_60_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_60,\n\
6K__BUF_LINE_61_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_61,\n\
6K__BUF_LINE_62_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_62,\n\
6K__BUF_LINE_63_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_63,\n\
6K__BUF_LINE_64_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_64,\n\
6K__BUF_LINE_65_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_65,\n\
6K__BUF_LINE_66_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_66,\n\
6K__BUF_LINE_67_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_67,\n\
6K__BUF_LINE_68_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_68,\n\
6K__BUF_LINE_69_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_69,\n\
6K__BUF_LINE_70_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_70,\n\
6K__BUF_LINE_71_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_71,\n\
6K__BUF_LINE_72_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_72,\n\
6K__BUF_LINE_73_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_73,\n\
6K__BUF_LINE_74_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_74,\n\
6K__BUF_LINE_75_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_75,\n\
6K__BUF_LINE_76_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_76,\n\
6K__BUF_LINE_77_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_77,\n\
6K__BUF_LINE_78_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_78,\n\
6K__BUF_LINE_79_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_79,\n\
6K__BUF_LINE_80_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_80,\n\
6K__BUF_LINE_81_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_81,\n\
6K__BUF_LINE_82_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_82,\n\
6K__BUF_LINE_83_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_83,\n\
6K__BUF_LINE_84_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_84,\n\
6K__BUF_LINE_85_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_85,\n\
6K__BUF_LINE_86_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_86,\n\
6K__BUF_LINE_87_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_87,\n\
6K__BUF_LINE_88_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_88,\n\
6K__BUF_LINE_89_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_89,\n\
6K__BUF_LINE_90_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_90,\n\
6K__BUF_LINE_91_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_91,\n\
6K__BUF_LINE_92_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_92,\n\
6K__BUF_LINE_93_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_93,\n\
6K__BUF_LINE_94_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_94,\n\
6K__BUF_LINE_95_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_95,\n\
6K__BUF_LINE_96_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_96,\n\
";

381 
CHAR
 
	gbuf„r_7K
[] = "\
7K__BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
7K__BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
7K__BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
7K__BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
7K__BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
7K__BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
7K__BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
7K__BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
7K__BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
7K__BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
7K__BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
7K__BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
7K__BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
7K__BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
7K__BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
7K__BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
7K__BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
7K__BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
7K__BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
7K__BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
7K__BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
7K__BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
7K__BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
7K__BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
7K__BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
7K__BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
7K__BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
7K__BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
7K__BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
7K__BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
7K__BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
7K__BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
7K__BUF_LINE_33_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_33,\n\
7K__BUF_LINE_34_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_34,\n\
7K__BUF_LINE_35_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_35,\n\
7K__BUF_LINE_36_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_36,\n\
7K__BUF_LINE_37_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_37,\n\
7K__BUF_LINE_38_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_38,\n\
7K__BUF_LINE_39_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_39,\n\
7K__BUF_LINE_40_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_40,\n\
7K__BUF_LINE_41_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_41,\n\
7K__BUF_LINE_42_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_42,\n\
7K__BUF_LINE_43_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_43,\n\
7K__BUF_LINE_44_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_44,\n\
7K__BUF_LINE_45_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_45,\n\
7K__BUF_LINE_46_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_46,\n\
7K__BUF_LINE_47_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_47,\n\
7K__BUF_LINE_48_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_48,\n\
7K__BUF_LINE_49_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_49,\n\
7K__BUF_LINE_50_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_50,\n\
7K__BUF_LINE_51_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_51,\n\
7K__BUF_LINE_52_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_52,\n\
7K__BUF_LINE_53_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_53,\n\
7K__BUF_LINE_54_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_54,\n\
7K__BUF_LINE_55_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_55,\n\
7K__BUF_LINE_56_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_56,\n\
7K__BUF_LINE_57_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_57,\n\
7K__BUF_LINE_58_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_58,\n\
7K__BUF_LINE_59_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_59,\n\
7K__BUF_LINE_60_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_60,\n\
7K__BUF_LINE_61_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_61,\n\
7K__BUF_LINE_62_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_62,\n\
7K__BUF_LINE_63_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_63,\n\
7K__BUF_LINE_64_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_64,\n\
7K__BUF_LINE_65_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_65,\n\
7K__BUF_LINE_66_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_66,\n\
7K__BUF_LINE_67_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_67,\n\
7K__BUF_LINE_68_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_68,\n\
7K__BUF_LINE_69_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_69,\n\
7K__BUF_LINE_70_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_70,\n\
7K__BUF_LINE_71_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_71,\n\
7K__BUF_LINE_72_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_72,\n\
7K__BUF_LINE_73_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_73,\n\
7K__BUF_LINE_74_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_74,\n\
7K__BUF_LINE_75_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_75,\n\
7K__BUF_LINE_76_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_76,\n\
7K__BUF_LINE_77_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_77,\n\
7K__BUF_LINE_78_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_78,\n\
7K__BUF_LINE_79_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_79,\n\
7K__BUF_LINE_80_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_80,\n\
7K__BUF_LINE_81_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_81,\n\
7K__BUF_LINE_82_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_82,\n\
7K__BUF_LINE_83_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_83,\n\
7K__BUF_LINE_84_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_84,\n\
7K__BUF_LINE_85_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_85,\n\
7K__BUF_LINE_86_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_86,\n\
7K__BUF_LINE_87_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_87,\n\
7K__BUF_LINE_88_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_88,\n\
7K__BUF_LINE_89_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_89,\n\
7K__BUF_LINE_90_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_90,\n\
7K__BUF_LINE_91_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_91,\n\
7K__BUF_LINE_92_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_92,\n\
7K__BUF_LINE_93_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_93,\n\
7K__BUF_LINE_94_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_94,\n\
7K__BUF_LINE_95_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_95,\n\
7K__BUF_LINE_96_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_96,\n\
7K__BUF_LINE_97_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_97,\n\
7K__BUF_LINE_98_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_98,\n\
7K__BUF_LINE_99_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_99,\n\
7K_BF_LINE_100_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_100,\n\
7K_BF_LINE_101_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_101,\n\
7K_BF_LINE_102_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_102,\n\
7K_BF_LINE_103_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_103,\n\
7K_BF_LINE_104_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_104,\n\
7K_BF_LINE_105_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_105,\n\
7K_BF_LINE_106_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_106,\n\
7K_BF_LINE_107_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_107,\n\
7K_BF_LINE_108_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_108,\n\
7K_BF_LINE_109_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_109,\n\
7K_BF_LINE_110_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_110,\n\
7K_BF_LINE_111_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_111,\n\
7K_BF_LINE_112_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_112,\n\
";

496 
CHAR
 
	gbuf„r_8K
[] = "\
8K__BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
8K__BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
8K__BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
8K__BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
8K__BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
8K__BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
8K__BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
8K__BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
8K__BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
8K__BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
8K__BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
8K__BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
8K__BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
8K__BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
8K__BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
8K__BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
8K__BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
8K__BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
8K__BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
8K__BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
8K__BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
8K__BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
8K__BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
8K__BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
8K__BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
8K__BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
8K__BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
8K__BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
8K__BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
8K__BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
8K__BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
8K__BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
8K__BUF_LINE_33_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_33,\n\
8K__BUF_LINE_34_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_34,\n\
8K__BUF_LINE_35_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_35,\n\
8K__BUF_LINE_36_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_36,\n\
8K__BUF_LINE_37_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_37,\n\
8K__BUF_LINE_38_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_38,\n\
8K__BUF_LINE_39_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_39,\n\
8K__BUF_LINE_40_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_40,\n\
8K__BUF_LINE_41_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_41,\n\
8K__BUF_LINE_42_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_42,\n\
8K__BUF_LINE_43_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_43,\n\
8K__BUF_LINE_44_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_44,\n\
8K__BUF_LINE_45_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_45,\n\
8K__BUF_LINE_46_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_46,\n\
8K__BUF_LINE_47_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_47,\n\
8K__BUF_LINE_48_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_48,\n\
8K__BUF_LINE_49_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_49,\n\
8K__BUF_LINE_50_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_50,\n\
8K__BUF_LINE_51_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_51,\n\
8K__BUF_LINE_52_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_52,\n\
8K__BUF_LINE_53_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_53,\n\
8K__BUF_LINE_54_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_54,\n\
8K__BUF_LINE_55_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_55,\n\
8K__BUF_LINE_56_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_56,\n\
8K__BUF_LINE_57_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_57,\n\
8K__BUF_LINE_58_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_58,\n\
8K__BUF_LINE_59_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_59,\n\
8K__BUF_LINE_60_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_60,\n\
8K__BUF_LINE_61_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_61,\n\
8K__BUF_LINE_62_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_62,\n\
8K__BUF_LINE_63_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_63,\n\
8K__BUF_LINE_64_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_64,\n\
8K__BUF_LINE_65_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_65,\n\
8K__BUF_LINE_66_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_66,\n\
8K__BUF_LINE_67_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_67,\n\
8K__BUF_LINE_68_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_68,\n\
8K__BUF_LINE_69_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_69,\n\
8K__BUF_LINE_70_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_70,\n\
8K__BUF_LINE_71_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_71,\n\
8K__BUF_LINE_72_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_72,\n\
8K__BUF_LINE_73_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_73,\n\
8K__BUF_LINE_74_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_74,\n\
8K__BUF_LINE_75_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_75,\n\
8K__BUF_LINE_76_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_76,\n\
8K__BUF_LINE_77_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_77,\n\
8K__BUF_LINE_78_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_78,\n\
8K__BUF_LINE_79_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_79,\n\
8K__BUF_LINE_80_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_80,\n\
8K__BUF_LINE_81_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_81,\n\
8K__BUF_LINE_82_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_82,\n\
8K__BUF_LINE_83_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_83,\n\
8K__BUF_LINE_84_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_84,\n\
8K__BUF_LINE_85_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_85,\n\
8K__BUF_LINE_86_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_86,\n\
8K__BUF_LINE_87_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_87,\n\
8K__BUF_LINE_88_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_88,\n\
8K__BUF_LINE_89_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_89,\n\
8K__BUF_LINE_90_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_90,\n\
8K__BUF_LINE_91_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_91,\n\
8K__BUF_LINE_92_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_92,\n\
8K__BUF_LINE_93_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_93,\n\
8K__BUF_LINE_94_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_94,\n\
8K__BUF_LINE_95_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_95,\n\
8K__BUF_LINE_96_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_96,\n\
8K__BUF_LINE_97_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_97,\n\
8K__BUF_LINE_98_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_98,\n\
8K__BUF_LINE_99_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_99,\n\
8K_BF_LINE_100_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_100,\n\
8K_BF_LINE_101_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_101,\n\
8K_BF_LINE_102_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_102,\n\
8K_BF_LINE_103_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_103,\n\
8K_BF_LINE_104_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_104,\n\
8K_BF_LINE_105_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_105,\n\
8K_BF_LINE_106_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_106,\n\
8K_BF_LINE_107_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_107,\n\
8K_BF_LINE_108_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_108,\n\
8K_BF_LINE_109_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_109,\n\
8K_BF_LINE_110_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_110,\n\
8K_BF_LINE_111_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_111,\n\
8K_BF_LINE_112_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_112,\n\
8K_BF_LINE_113_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_113,\n\
8K_BF_LINE_114_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_114,\n\
8K_BF_LINE_115_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_115,\n\
8K_BF_LINE_116_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_116,\n\
8K_BF_LINE_117_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_117,\n\
8K_BF_LINE_118_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_118,\n\
8K_BF_LINE_119_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_119,\n\
8K_BF_LINE_120_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_120,\n\
8K_BF_LINE_121_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_121,\n\
8K_BF_LINE_122_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_122,\n\
8K_BF_LINE_123_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_123,\n\
8K_BF_LINE_124_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_124,\n\
8K_BF_LINE_125_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_125,\n\
8K_BF_LINE_126_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_126,\n\
8K_BF_LINE_127_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_127,\n\
8K_BF_LINE_128_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_128,\n\
";

627 
CHAR
 
	gbuf„r_9K
[] = "\
9K__BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
9K__BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
9K__BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
9K__BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
9K__BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
9K__BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
9K__BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
9K__BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
9K__BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
9K__BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
9K__BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
9K__BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
9K__BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
9K__BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
9K__BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
9K__BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
9K__BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
9K__BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
9K__BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
9K__BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
9K__BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
9K__BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
9K__BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
9K__BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
9K__BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
9K__BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
9K__BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
9K__BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
9K__BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
9K__BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
9K__BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
9K__BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
9K__BUF_LINE_33_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_33,\n\
9K__BUF_LINE_34_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_34,\n\
9K__BUF_LINE_35_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_35,\n\
9K__BUF_LINE_36_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_36,\n\
9K__BUF_LINE_37_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_37,\n\
9K__BUF_LINE_38_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_38,\n\
9K__BUF_LINE_39_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_39,\n\
9K__BUF_LINE_40_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_40,\n\
9K__BUF_LINE_41_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_41,\n\
9K__BUF_LINE_42_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_42,\n\
9K__BUF_LINE_43_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_43,\n\
9K__BUF_LINE_44_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_44,\n\
9K__BUF_LINE_45_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_45,\n\
9K__BUF_LINE_46_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_46,\n\
9K__BUF_LINE_47_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_47,\n\
9K__BUF_LINE_48_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_48,\n\
9K__BUF_LINE_49_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_49,\n\
9K__BUF_LINE_50_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_50,\n\
9K__BUF_LINE_51_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_51,\n\
9K__BUF_LINE_52_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_52,\n\
9K__BUF_LINE_53_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_53,\n\
9K__BUF_LINE_54_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_54,\n\
9K__BUF_LINE_55_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_55,\n\
9K__BUF_LINE_56_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_56,\n\
9K__BUF_LINE_57_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_57,\n\
9K__BUF_LINE_58_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_58,\n\
9K__BUF_LINE_59_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_59,\n\
9K__BUF_LINE_60_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_60,\n\
9K__BUF_LINE_61_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_61,\n\
9K__BUF_LINE_62_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_62,\n\
9K__BUF_LINE_63_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_63,\n\
9K__BUF_LINE_64_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_64,\n\
9K__BUF_LINE_65_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_65,\n\
9K__BUF_LINE_66_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_66,\n\
9K__BUF_LINE_67_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_67,\n\
9K__BUF_LINE_68_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_68,\n\
9K__BUF_LINE_69_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_69,\n\
9K__BUF_LINE_70_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_70,\n\
9K__BUF_LINE_71_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_71,\n\
9K__BUF_LINE_72_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_72,\n\
9K__BUF_LINE_73_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_73,\n\
9K__BUF_LINE_74_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_74,\n\
9K__BUF_LINE_75_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_75,\n\
9K__BUF_LINE_76_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_76,\n\
9K__BUF_LINE_77_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_77,\n\
9K__BUF_LINE_78_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_78,\n\
9K__BUF_LINE_79_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_79,\n\
9K__BUF_LINE_80_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_80,\n\
9K__BUF_LINE_81_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_81,\n\
9K__BUF_LINE_82_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_82,\n\
9K__BUF_LINE_83_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_83,\n\
9K__BUF_LINE_84_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_84,\n\
9K__BUF_LINE_85_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_85,\n\
9K__BUF_LINE_86_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_86,\n\
9K__BUF_LINE_87_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_87,\n\
9K__BUF_LINE_88_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_88,\n\
9K__BUF_LINE_89_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_89,\n\
9K__BUF_LINE_90_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_90,\n\
9K__BUF_LINE_91_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_91,\n\
9K__BUF_LINE_92_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_92,\n\
9K__BUF_LINE_93_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_93,\n\
9K__BUF_LINE_94_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_94,\n\
9K__BUF_LINE_95_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_95,\n\
9K__BUF_LINE_96_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_96,\n\
9K__BUF_LINE_97_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_97,\n\
9K__BUF_LINE_98_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_98,\n\
9K__BUF_LINE_99_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_99,\n\
9K_BF_LINE_100_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_100,\n\
9K_BF_LINE_101_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_101,\n\
9K_BF_LINE_102_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_102,\n\
9K_BF_LINE_103_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_103,\n\
9K_BF_LINE_104_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_104,\n\
9K_BF_LINE_105_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_105,\n\
9K_BF_LINE_106_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_106,\n\
9K_BF_LINE_107_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_107,\n\
9K_BF_LINE_108_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_108,\n\
9K_BF_LINE_109_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_109,\n\
9K_BF_LINE_110_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_110,\n\
9K_BF_LINE_111_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_111,\n\
9K_BF_LINE_112_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_112,\n\
9K_BF_LINE_113_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_113,\n\
9K_BF_LINE_114_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_114,\n\
9K_BF_LINE_115_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_115,\n\
9K_BF_LINE_116_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_116,\n\
9K_BF_LINE_117_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_117,\n\
9K_BF_LINE_118_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_118,\n\
9K_BF_LINE_119_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_119,\n\
9K_BF_LINE_120_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_120,\n\
9K_BF_LINE_121_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_121,\n\
9K_BF_LINE_122_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_122,\n\
9K_BF_LINE_123_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_123,\n\
9K_BF_LINE_124_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_124,\n\
9K_BF_LINE_125_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_125,\n\
9K_BF_LINE_126_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_126,\n\
9K_BF_LINE_127_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_127,\n\
9K_BF_LINE_128_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_128,\n\
9K_BF_LINE_129_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_129,\n\
9K_BF_LINE_130_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_130,\n\
9K_BF_LINE_131_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_131,\n\
9K_BF_LINE_132_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_132,\n\
9K_BF_LINE_133_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_133,\n\
9K_BF_LINE_134_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_134,\n\
9K_BF_LINE_135_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_135,\n\
9K_BF_LINE_136_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_136,\n\
9K_BF_LINE_137_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_137,\n\
9K_BF_LINE_138_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_138,\n\
9K_BF_LINE_139_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_139,\n\
9K_BF_LINE_140_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_140,\n\
9K_BF_LINE_141_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_141,\n\
9K_BF_LINE_142_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_142,\n\
9K_BF_LINE_143_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_143,\n\
9K_BF_LINE_144_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_144,\n\
";

774 
CHAR
 
	gbuf„r_10K
[] = "\
10K_BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
10K_BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
10K_BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
10K_BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
10K_BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
10K_BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
10K_BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
10K_BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
10K_BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
10K_BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
10K_BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
10K_BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
10K_BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
10K_BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
10K_BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
10K_BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
10K_BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
10K_BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
10K_BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
10K_BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
10K_BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
10K_BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
10K_BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
10K_BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
10K_BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
10K_BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
10K_BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
10K_BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
10K_BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
10K_BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
10K_BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
10K_BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
10K_BUF_LINE_33_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_33,\n\
10K_BUF_LINE_34_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_34,\n\
10K_BUF_LINE_35_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_35,\n\
10K_BUF_LINE_36_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_36,\n\
10K_BUF_LINE_37_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_37,\n\
10K_BUF_LINE_38_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_38,\n\
10K_BUF_LINE_39_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_39,\n\
10K_BUF_LINE_40_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_40,\n\
10K_BUF_LINE_41_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_41,\n\
10K_BUF_LINE_42_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_42,\n\
10K_BUF_LINE_43_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_43,\n\
10K_BUF_LINE_44_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_44,\n\
10K_BUF_LINE_45_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_45,\n\
10K_BUF_LINE_46_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_46,\n\
10K_BUF_LINE_47_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_47,\n\
10K_BUF_LINE_48_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_48,\n\
10K_BUF_LINE_49_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_49,\n\
10K_BUF_LINE_50_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_50,\n\
10K_BUF_LINE_51_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_51,\n\
10K_BUF_LINE_52_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_52,\n\
10K_BUF_LINE_53_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_53,\n\
10K_BUF_LINE_54_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_54,\n\
10K_BUF_LINE_55_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_55,\n\
10K_BUF_LINE_56_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_56,\n\
10K_BUF_LINE_57_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_57,\n\
10K_BUF_LINE_58_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_58,\n\
10K_BUF_LINE_59_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_59,\n\
10K_BUF_LINE_60_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_60,\n\
10K_BUF_LINE_61_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_61,\n\
10K_BUF_LINE_62_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_62,\n\
10K_BUF_LINE_63_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_63,\n\
10K_BUF_LINE_64_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_64,\n\
10K_BUF_LINE_65_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_65,\n\
10K_BUF_LINE_66_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_66,\n\
10K_BUF_LINE_67_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_67,\n\
10K_BUF_LINE_68_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_68,\n\
10K_BUF_LINE_69_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_69,\n\
10K_BUF_LINE_70_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_70,\n\
10K_BUF_LINE_71_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_71,\n\
10K_BUF_LINE_72_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_72,\n\
10K_BUF_LINE_73_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_73,\n\
10K_BUF_LINE_74_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_74,\n\
10K_BUF_LINE_75_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_75,\n\
10K_BUF_LINE_76_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_76,\n\
10K_BUF_LINE_77_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_77,\n\
10K_BUF_LINE_78_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_78,\n\
10K_BUF_LINE_79_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_79,\n\
10K_BUF_LINE_80_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_80,\n\
10K_BUF_LINE_81_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_81,\n\
10K_BUF_LINE_82_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_82,\n\
10K_BUF_LINE_83_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_83,\n\
10K_BUF_LINE_84_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_84,\n\
10K_BUF_LINE_85_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_85,\n\
10K_BUF_LINE_86_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_86,\n\
10K_BUF_LINE_87_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_87,\n\
10K_BUF_LINE_88_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_88,\n\
10K_BUF_LINE_89_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_89,\n\
10K_BUF_LINE_90_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_90,\n\
10K_BUF_LINE_91_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_91,\n\
10K_BUF_LINE_92_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_92,\n\
10K_BUF_LINE_93_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_93,\n\
10K_BUF_LINE_94_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_94,\n\
10K_BUF_LINE_95_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_95,\n\
10K_BUF_LINE_96_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_96,\n\
10K_BUF_LINE_97_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_97,\n\
10K_BUF_LINE_98_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_98,\n\
10K_BUF_LINE_99_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_99,\n\
10KBF_LINE_100_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_100,\n\
10KBF_LINE_101_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_101,\n\
10KBF_LINE_102_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_102,\n\
10KBF_LINE_103_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_103,\n\
10KBF_LINE_104_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_104,\n\
10KBF_LINE_105_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_105,\n\
10KBF_LINE_106_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_106,\n\
10KBF_LINE_107_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_107,\n\
10KBF_LINE_108_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_108,\n\
10KBF_LINE_109_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_109,\n\
10KBF_LINE_110_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_110,\n\
10KBF_LINE_111_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_111,\n\
10KBF_LINE_112_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_112,\n\
10KBF_LINE_113_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_113,\n\
10KBF_LINE_114_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_114,\n\
10KBF_LINE_115_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_115,\n\
10KBF_LINE_116_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_116,\n\
10KBF_LINE_117_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_117,\n\
10KBF_LINE_118_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_118,\n\
10KBF_LINE_119_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_119,\n\
10KBF_LINE_120_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_120,\n\
10KBF_LINE_121_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_121,\n\
10KBF_LINE_122_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_122,\n\
10KBF_LINE_123_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_123,\n\
10KBF_LINE_124_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_124,\n\
10KBF_LINE_125_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_125,\n\
10KBF_LINE_126_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_126,\n\
10KBF_LINE_127_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_127,\n\
10KBF_LINE_128_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_128,\n\
10KBF_LINE_129_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_129,\n\
10KBF_LINE_130_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_130,\n\
10KBF_LINE_131_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_131,\n\
10KBF_LINE_132_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_132,\n\
10KBF_LINE_133_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_133,\n\
10KBF_LINE_134_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_134,\n\
10KBF_LINE_135_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_135,\n\
10KBF_LINE_136_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_136,\n\
10KBF_LINE_137_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_137,\n\
10KBF_LINE_138_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_138,\n\
10KBF_LINE_139_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_139,\n\
10KBF_LINE_140_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_140,\n\
10KBF_LINE_141_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_141,\n\
10KBF_LINE_142_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_142,\n\
10KBF_LINE_143_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_143,\n\
10KBF_LINE_144_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_144,\n\
10KBF_LINE_145_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_145,\n\
10KBF_LINE_146_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_146,\n\
10KBF_LINE_147_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_147,\n\
10KBF_LINE_148_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_148,\n\
10KBF_LINE_149_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_149,\n\
10KBF_LINE_150_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_150,\n\
10KBF_LINE_151_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_151,\n\
10KBF_LINE_152_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_152,\n\
10KBF_LINE_153_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_153,\n\
10KBF_LINE_154_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_154,\n\
10KBF_LINE_155_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_155,\n\
10KBF_LINE_156_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_156,\n\
10KBF_LINE_157_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_157,\n\
10KBF_LINE_158_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_158,\n\
10KBF_LINE_159_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_159,\n\
10KBF_LINE_150_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_160,\n\
";

937 
CHAR
 
	gbuf„r_11K
[] = "\
11K_BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
11K_BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
11K_BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
11K_BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
11K_BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
11K_BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
11K_BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
11K_BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
11K_BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
11K_BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
11K_BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
11K_BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
11K_BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
11K_BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
11K_BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
11K_BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
11K_BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
11K_BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
11K_BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
11K_BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
11K_BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
11K_BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
11K_BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
11K_BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
11K_BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
11K_BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
11K_BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
11K_BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
11K_BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
11K_BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
11K_BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
11K_BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
11K_BUF_LINE_33_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_33,\n\
11K_BUF_LINE_34_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_34,\n\
11K_BUF_LINE_35_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_35,\n\
11K_BUF_LINE_36_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_36,\n\
11K_BUF_LINE_37_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_37,\n\
11K_BUF_LINE_38_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_38,\n\
11K_BUF_LINE_39_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_39,\n\
11K_BUF_LINE_40_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_40,\n\
11K_BUF_LINE_41_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_41,\n\
11K_BUF_LINE_42_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_42,\n\
11K_BUF_LINE_43_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_43,\n\
11K_BUF_LINE_44_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_44,\n\
11K_BUF_LINE_45_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_45,\n\
11K_BUF_LINE_46_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_46,\n\
11K_BUF_LINE_47_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_47,\n\
11K_BUF_LINE_48_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_48,\n\
11K_BUF_LINE_49_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_49,\n\
11K_BUF_LINE_50_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_50,\n\
11K_BUF_LINE_51_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_51,\n\
11K_BUF_LINE_52_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_52,\n\
11K_BUF_LINE_53_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_53,\n\
11K_BUF_LINE_54_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_54,\n\
11K_BUF_LINE_55_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_55,\n\
11K_BUF_LINE_56_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_56,\n\
11K_BUF_LINE_57_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_57,\n\
11K_BUF_LINE_58_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_58,\n\
11K_BUF_LINE_59_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_59,\n\
11K_BUF_LINE_60_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_60,\n\
11K_BUF_LINE_61_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_61,\n\
11K_BUF_LINE_62_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_62,\n\
11K_BUF_LINE_63_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_63,\n\
11K_BUF_LINE_64_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_64,\n\
11K_BUF_LINE_65_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_65,\n\
11K_BUF_LINE_66_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_66,\n\
11K_BUF_LINE_67_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_67,\n\
11K_BUF_LINE_68_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_68,\n\
11K_BUF_LINE_69_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_69,\n\
11K_BUF_LINE_70_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_70,\n\
11K_BUF_LINE_71_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_71,\n\
11K_BUF_LINE_72_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_72,\n\
11K_BUF_LINE_73_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_73,\n\
11K_BUF_LINE_74_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_74,\n\
11K_BUF_LINE_75_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_75,\n\
11K_BUF_LINE_76_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_76,\n\
11K_BUF_LINE_77_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_77,\n\
11K_BUF_LINE_78_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_78,\n\
11K_BUF_LINE_79_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_79,\n\
11K_BUF_LINE_80_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_80,\n\
11K_BUF_LINE_81_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_81,\n\
11K_BUF_LINE_82_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_82,\n\
11K_BUF_LINE_83_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_83,\n\
11K_BUF_LINE_84_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_84,\n\
11K_BUF_LINE_85_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_85,\n\
11K_BUF_LINE_86_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_86,\n\
11K_BUF_LINE_87_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_87,\n\
11K_BUF_LINE_88_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_88,\n\
11K_BUF_LINE_89_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_89,\n\
11K_BUF_LINE_90_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_90,\n\
11K_BUF_LINE_91_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_91,\n\
11K_BUF_LINE_92_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_92,\n\
11K_BUF_LINE_93_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_93,\n\
11K_BUF_LINE_94_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_94,\n\
11K_BUF_LINE_95_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_95,\n\
11K_BUF_LINE_96_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_96,\n\
11K_BUF_LINE_97_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_97,\n\
11K_BUF_LINE_98_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_98,\n\
11K_BUF_LINE_99_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_99,\n\
11KBF_LINE_100_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_100,\n\
11KBF_LINE_101_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_101,\n\
11KBF_LINE_102_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_102,\n\
11KBF_LINE_103_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_103,\n\
11KBF_LINE_104_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_104,\n\
11KBF_LINE_105_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_105,\n\
11KBF_LINE_106_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_106,\n\
11KBF_LINE_107_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_107,\n\
11KBF_LINE_108_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_108,\n\
11KBF_LINE_109_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_109,\n\
11KBF_LINE_110_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_110,\n\
11KBF_LINE_111_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_111,\n\
11KBF_LINE_112_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_112,\n\
11KBF_LINE_113_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_113,\n\
11KBF_LINE_114_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_114,\n\
11KBF_LINE_115_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_115,\n\
11KBF_LINE_116_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_116,\n\
11KBF_LINE_117_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_117,\n\
11KBF_LINE_118_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_118,\n\
11KBF_LINE_119_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_119,\n\
11KBF_LINE_120_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_120,\n\
11KBF_LINE_121_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_121,\n\
11KBF_LINE_122_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_122,\n\
11KBF_LINE_123_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_123,\n\
11KBF_LINE_124_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_124,\n\
11KBF_LINE_125_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_125,\n\
11KBF_LINE_126_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_126,\n\
11KBF_LINE_127_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_127,\n\
11KBF_LINE_128_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_128,\n\
11KBF_LINE_129_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_129,\n\
11KBF_LINE_130_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_130,\n\
11KBF_LINE_131_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_131,\n\
11KBF_LINE_132_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_132,\n\
11KBF_LINE_133_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_133,\n\
11KBF_LINE_134_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_134,\n\
11KBF_LINE_135_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_135,\n\
11KBF_LINE_136_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_136,\n\
11KBF_LINE_137_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_137,\n\
11KBF_LINE_138_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_138,\n\
11KBF_LINE_139_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_139,\n\
11KBF_LINE_140_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_140,\n\
11KBF_LINE_141_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_141,\n\
11KBF_LINE_142_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_142,\n\
11KBF_LINE_143_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_143,\n\
11KBF_LINE_144_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_144,\n\
11KBF_LINE_145_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_145,\n\
11KBF_LINE_146_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_146,\n\
11KBF_LINE_147_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_147,\n\
11KBF_LINE_148_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_148,\n\
11KBF_LINE_149_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_149,\n\
11KBF_LINE_150_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_150,\n\
11KBF_LINE_151_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_151,\n\
11KBF_LINE_152_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_152,\n\
11KBF_LINE_153_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_153,\n\
11KBF_LINE_154_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_154,\n\
11KBF_LINE_155_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_155,\n\
11KBF_LINE_156_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_156,\n\
11KBF_LINE_157_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_157,\n\
11KBF_LINE_158_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_158,\n\
11KBF_LINE_159_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_159,\n\
11KBF_LINE_160_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_160,\n\
11KBF_LINE_161_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_161,\n\
11KBF_LINE_162_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_162,\n\
11KBF_LINE_163_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_163,\n\
11KBF_LINE_164_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_164,\n\
11KBF_LINE_165_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_165,\n\
11KBF_LINE_166_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_166,\n\
11KBF_LINE_167_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_167,\n\
11KBF_LINE_168_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_168,\n\
11KBF_LINE_169_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_169,\n\
11KBF_LINE_170_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_170,\n\
11KBF_LINE_171_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_171,\n\
11KBF_LINE_172_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_172,\n\
11KBF_LINE_173_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_173,\n\
11KBF_LINE_174_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_174,\n\
11KBF_LINE_175_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_175,\n\
11KBF_LINE_176_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_176,\n\
";

1116 
CHAR
 
	gbuf„r_12K
[] = "\
12K_BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
12K_BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
12K_BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
12K_BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
12K_BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
12K_BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
12K_BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
12K_BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
12K_BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
12K_BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
12K_BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
12K_BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
12K_BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
12K_BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
12K_BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
12K_BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
12K_BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
12K_BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
12K_BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
12K_BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
12K_BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
12K_BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
12K_BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
12K_BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
12K_BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
12K_BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
12K_BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
12K_BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
12K_BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
12K_BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
12K_BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
12K_BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
12K_BUF_LINE_33_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_33,\n\
12K_BUF_LINE_34_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_34,\n\
12K_BUF_LINE_35_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_35,\n\
12K_BUF_LINE_36_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_36,\n\
12K_BUF_LINE_37_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_37,\n\
12K_BUF_LINE_38_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_38,\n\
12K_BUF_LINE_39_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_39,\n\
12K_BUF_LINE_40_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_40,\n\
12K_BUF_LINE_41_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_41,\n\
12K_BUF_LINE_42_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_42,\n\
12K_BUF_LINE_43_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_43,\n\
12K_BUF_LINE_44_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_44,\n\
12K_BUF_LINE_45_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_45,\n\
12K_BUF_LINE_46_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_46,\n\
12K_BUF_LINE_47_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_47,\n\
12K_BUF_LINE_48_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_48,\n\
12K_BUF_LINE_49_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_49,\n\
12K_BUF_LINE_50_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_50,\n\
12K_BUF_LINE_51_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_51,\n\
12K_BUF_LINE_52_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_52,\n\
12K_BUF_LINE_53_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_53,\n\
12K_BUF_LINE_54_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_54,\n\
12K_BUF_LINE_55_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_55,\n\
12K_BUF_LINE_56_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_56,\n\
12K_BUF_LINE_57_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_57,\n\
12K_BUF_LINE_58_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_58,\n\
12K_BUF_LINE_59_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_59,\n\
12K_BUF_LINE_60_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_60,\n\
12K_BUF_LINE_61_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_61,\n\
12K_BUF_LINE_62_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_62,\n\
12K_BUF_LINE_63_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_63,\n\
12K_BUF_LINE_64_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_64,\n\
12K_BUF_LINE_65_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_65,\n\
12K_BUF_LINE_66_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_66,\n\
12K_BUF_LINE_67_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_67,\n\
12K_BUF_LINE_68_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_68,\n\
12K_BUF_LINE_69_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_69,\n\
12K_BUF_LINE_70_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_70,\n\
12K_BUF_LINE_71_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_71,\n\
12K_BUF_LINE_72_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_72,\n\
12K_BUF_LINE_73_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_73,\n\
12K_BUF_LINE_74_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_74,\n\
12K_BUF_LINE_75_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_75,\n\
12K_BUF_LINE_76_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_76,\n\
12K_BUF_LINE_77_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_77,\n\
12K_BUF_LINE_78_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_78,\n\
12K_BUF_LINE_79_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_79,\n\
12K_BUF_LINE_80_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_80,\n\
12K_BUF_LINE_81_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_81,\n\
12K_BUF_LINE_82_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_82,\n\
12K_BUF_LINE_83_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_83,\n\
12K_BUF_LINE_84_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_84,\n\
12K_BUF_LINE_85_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_85,\n\
12K_BUF_LINE_86_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_86,\n\
12K_BUF_LINE_87_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_87,\n\
12K_BUF_LINE_88_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_88,\n\
12K_BUF_LINE_89_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_89,\n\
12K_BUF_LINE_90_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_90,\n\
12K_BUF_LINE_91_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_91,\n\
12K_BUF_LINE_92_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_92,\n\
12K_BUF_LINE_93_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_93,\n\
12K_BUF_LINE_94_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_94,\n\
12K_BUF_LINE_95_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_95,\n\
12K_BUF_LINE_96_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_96,\n\
12K_BUF_LINE_97_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_97,\n\
12K_BUF_LINE_98_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_98,\n\
12K_BUF_LINE_99_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_99,\n\
12KBF_LINE_100_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_100,\n\
12KBF_LINE_101_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_101,\n\
12KBF_LINE_102_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_102,\n\
12KBF_LINE_103_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_103,\n\
12KBF_LINE_104_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_104,\n\
12KBF_LINE_105_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_105,\n\
12KBF_LINE_106_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_106,\n\
12KBF_LINE_107_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_107,\n\
12KBF_LINE_108_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_108,\n\
12KBF_LINE_109_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_109,\n\
12KBF_LINE_110_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_110,\n\
12KBF_LINE_111_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_111,\n\
12KBF_LINE_112_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_112,\n\
12KBF_LINE_113_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_113,\n\
12KBF_LINE_114_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_114,\n\
12KBF_LINE_115_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_115,\n\
12KBF_LINE_116_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_116,\n\
12KBF_LINE_117_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_117,\n\
12KBF_LINE_118_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_118,\n\
12KBF_LINE_119_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_119,\n\
12KBF_LINE_120_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_120,\n\
12KBF_LINE_121_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_121,\n\
12KBF_LINE_122_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_122,\n\
12KBF_LINE_123_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_123,\n\
12KBF_LINE_124_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_124,\n\
12KBF_LINE_125_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_125,\n\
12KBF_LINE_126_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_126,\n\
12KBF_LINE_127_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_127,\n\
12KBF_LINE_128_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_128,\n\
12KBF_LINE_129_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_129,\n\
12KBF_LINE_130_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_130,\n\
12KBF_LINE_131_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_131,\n\
12KBF_LINE_132_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_132,\n\
12KBF_LINE_133_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_133,\n\
12KBF_LINE_134_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_134,\n\
12KBF_LINE_135_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_135,\n\
12KBF_LINE_136_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_136,\n\
12KBF_LINE_137_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_137,\n\
12KBF_LINE_138_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_138,\n\
12KBF_LINE_139_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_139,\n\
12KBF_LINE_140_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_140,\n\
12KBF_LINE_141_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_141,\n\
12KBF_LINE_142_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_142,\n\
12KBF_LINE_143_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_143,\n\
12KBF_LINE_144_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_144,\n\
12KBF_LINE_145_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_145,\n\
12KBF_LINE_146_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_146,\n\
12KBF_LINE_147_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_147,\n\
12KBF_LINE_148_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_148,\n\
12KBF_LINE_149_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_149,\n\
12KBF_LINE_150_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_150,\n\
12KBF_LINE_151_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_151,\n\
12KBF_LINE_152_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_152,\n\
12KBF_LINE_153_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_153,\n\
12KBF_LINE_154_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_154,\n\
12KBF_LINE_155_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_155,\n\
12KBF_LINE_156_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_156,\n\
12KBF_LINE_157_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_157,\n\
12KBF_LINE_158_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_158,\n\
12KBF_LINE_159_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_159,\n\
12KBF_LINE_160_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_160,\n\
12KBF_LINE_161_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_161,\n\
12KBF_LINE_162_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_162,\n\
12KBF_LINE_163_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_163,\n\
12KBF_LINE_164_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_164,\n\
12KBF_LINE_165_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_165,\n\
12KBF_LINE_166_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_166,\n\
12KBF_LINE_167_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_167,\n\
12KBF_LINE_168_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_168,\n\
12KBF_LINE_169_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_169,\n\
12KBF_LINE_170_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_170,\n\
12KBF_LINE_171_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_171,\n\
12KBF_LINE_172_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_172,\n\
12KBF_LINE_173_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_173,\n\
12KBF_LINE_174_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_174,\n\
12KBF_LINE_175_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_175,\n\
12KBF_LINE_176_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_176,\n\
12KBF_LINE_177_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_177,\n\
12KBF_LINE_178_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_178,\n\
12KBF_LINE_179_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_179,\n\
12KBF_LINE_180_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_180,\n\
12KBF_LINE_181_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_181,\n\
12KBF_LINE_182_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_182,\n\
12KBF_LINE_183_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_183,\n\
12KBF_LINE_184_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_184,\n\
12KBF_LINE_185_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_185,\n\
12KBF_LINE_186_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_186,\n\
12KBF_LINE_187_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_187,\n\
12KBF_LINE_188_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_188,\n\
12KBF_LINE_189_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_189,\n\
12KBF_LINE_190_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_190,\n\
12KBF_LINE_191_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_191,\n\
12KBF_LINE_192_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_192,\n\
";

1311 
CHAR
 
	gbuf„r_13K
[] = "\
13K_BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
13K_BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
13K_BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
13K_BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
13K_BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
13K_BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
13K_BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
13K_BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
13K_BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
13K_BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
13K_BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
13K_BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
13K_BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
13K_BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
13K_BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
13K_BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
13K_BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
13K_BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
13K_BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
13K_BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
13K_BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
13K_BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
13K_BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
13K_BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
13K_BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
13K_BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
13K_BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
13K_BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
13K_BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
13K_BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
13K_BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
13K_BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
13K_BUF_LINE_33_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_33,\n\
13K_BUF_LINE_34_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_34,\n\
13K_BUF_LINE_35_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_35,\n\
13K_BUF_LINE_36_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_36,\n\
13K_BUF_LINE_37_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_37,\n\
13K_BUF_LINE_38_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_38,\n\
13K_BUF_LINE_39_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_39,\n\
13K_BUF_LINE_40_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_40,\n\
13K_BUF_LINE_41_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_41,\n\
13K_BUF_LINE_42_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_42,\n\
13K_BUF_LINE_43_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_43,\n\
13K_BUF_LINE_44_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_44,\n\
13K_BUF_LINE_45_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_45,\n\
13K_BUF_LINE_46_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_46,\n\
13K_BUF_LINE_47_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_47,\n\
13K_BUF_LINE_48_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_48,\n\
13K_BUF_LINE_49_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_49,\n\
13K_BUF_LINE_50_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_50,\n\
13K_BUF_LINE_51_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_51,\n\
13K_BUF_LINE_52_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_52,\n\
13K_BUF_LINE_53_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_53,\n\
13K_BUF_LINE_54_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_54,\n\
13K_BUF_LINE_55_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_55,\n\
13K_BUF_LINE_56_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_56,\n\
13K_BUF_LINE_57_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_57,\n\
13K_BUF_LINE_58_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_58,\n\
13K_BUF_LINE_59_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_59,\n\
13K_BUF_LINE_60_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_60,\n\
13K_BUF_LINE_61_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_61,\n\
13K_BUF_LINE_62_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_62,\n\
13K_BUF_LINE_63_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_63,\n\
13K_BUF_LINE_64_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_64,\n\
13K_BUF_LINE_65_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_65,\n\
13K_BUF_LINE_66_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_66,\n\
13K_BUF_LINE_67_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_67,\n\
13K_BUF_LINE_68_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_68,\n\
13K_BUF_LINE_69_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_69,\n\
13K_BUF_LINE_70_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_70,\n\
13K_BUF_LINE_71_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_71,\n\
13K_BUF_LINE_72_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_72,\n\
13K_BUF_LINE_73_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_73,\n\
13K_BUF_LINE_74_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_74,\n\
13K_BUF_LINE_75_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_75,\n\
13K_BUF_LINE_76_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_76,\n\
13K_BUF_LINE_77_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_77,\n\
13K_BUF_LINE_78_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_78,\n\
13K_BUF_LINE_79_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_79,\n\
13K_BUF_LINE_80_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_80,\n\
13K_BUF_LINE_81_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_81,\n\
13K_BUF_LINE_82_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_82,\n\
13K_BUF_LINE_83_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_83,\n\
13K_BUF_LINE_84_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_84,\n\
13K_BUF_LINE_85_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_85,\n\
13K_BUF_LINE_86_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_86,\n\
13K_BUF_LINE_87_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_87,\n\
13K_BUF_LINE_88_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_88,\n\
13K_BUF_LINE_89_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_89,\n\
13K_BUF_LINE_90_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_90,\n\
13K_BUF_LINE_91_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_91,\n\
13K_BUF_LINE_92_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_92,\n\
13K_BUF_LINE_93_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_93,\n\
13K_BUF_LINE_94_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_94,\n\
13K_BUF_LINE_95_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_95,\n\
13K_BUF_LINE_96_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_96,\n\
13K_BUF_LINE_97_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_97,\n\
13K_BUF_LINE_98_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_98,\n\
13K_BUF_LINE_99_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_99,\n\
13KBF_LINE_100_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_100,\n\
13KBF_LINE_101_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_101,\n\
13KBF_LINE_102_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_102,\n\
13KBF_LINE_103_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_103,\n\
13KBF_LINE_104_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_104,\n\
13KBF_LINE_105_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_105,\n\
13KBF_LINE_106_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_106,\n\
13KBF_LINE_107_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_107,\n\
13KBF_LINE_108_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_108,\n\
13KBF_LINE_109_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_109,\n\
13KBF_LINE_110_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_110,\n\
13KBF_LINE_111_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_111,\n\
13KBF_LINE_112_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_112,\n\
13KBF_LINE_113_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_113,\n\
13KBF_LINE_114_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_114,\n\
13KBF_LINE_115_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_115,\n\
13KBF_LINE_116_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_116,\n\
13KBF_LINE_117_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_117,\n\
13KBF_LINE_118_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_118,\n\
13KBF_LINE_119_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_119,\n\
13KBF_LINE_120_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_120,\n\
13KBF_LINE_121_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_121,\n\
13KBF_LINE_122_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_122,\n\
13KBF_LINE_123_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_123,\n\
13KBF_LINE_124_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_124,\n\
13KBF_LINE_125_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_125,\n\
13KBF_LINE_126_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_126,\n\
13KBF_LINE_127_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_127,\n\
13KBF_LINE_128_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_128,\n\
13KBF_LINE_129_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_129,\n\
13KBF_LINE_130_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_130,\n\
13KBF_LINE_131_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_131,\n\
13KBF_LINE_132_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_132,\n\
13KBF_LINE_133_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_133,\n\
13KBF_LINE_134_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_134,\n\
13KBF_LINE_135_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_135,\n\
13KBF_LINE_136_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_136,\n\
13KBF_LINE_137_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_137,\n\
13KBF_LINE_138_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_138,\n\
13KBF_LINE_139_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_139,\n\
13KBF_LINE_140_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_140,\n\
13KBF_LINE_141_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_141,\n\
13KBF_LINE_142_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_142,\n\
13KBF_LINE_143_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_143,\n\
13KBF_LINE_144_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_144,\n\
13KBF_LINE_145_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_145,\n\
13KBF_LINE_146_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_146,\n\
13KBF_LINE_147_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_147,\n\
13KBF_LINE_148_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_148,\n\
13KBF_LINE_149_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_149,\n\
13KBF_LINE_150_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_150,\n\
13KBF_LINE_151_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_151,\n\
13KBF_LINE_152_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_152,\n\
13KBF_LINE_153_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_153,\n\
13KBF_LINE_154_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_154,\n\
13KBF_LINE_155_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_155,\n\
13KBF_LINE_156_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_156,\n\
13KBF_LINE_157_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_157,\n\
13KBF_LINE_158_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_158,\n\
13KBF_LINE_159_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_159,\n\
13KBF_LINE_160_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_160,\n\
13KBF_LINE_161_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_161,\n\
13KBF_LINE_162_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_162,\n\
13KBF_LINE_163_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_163,\n\
13KBF_LINE_164_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_164,\n\
13KBF_LINE_165_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_165,\n\
13KBF_LINE_166_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_166,\n\
13KBF_LINE_167_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_167,\n\
13KBF_LINE_168_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_168,\n\
13KBF_LINE_169_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_169,\n\
13KBF_LINE_170_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_170,\n\
13KBF_LINE_171_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_171,\n\
13KBF_LINE_172_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_172,\n\
13KBF_LINE_173_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_173,\n\
13KBF_LINE_174_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_174,\n\
13KBF_LINE_175_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_175,\n\
13KBF_LINE_176_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_176,\n\
13KBF_LINE_177_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_177,\n\
13KBF_LINE_178_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_178,\n\
13KBF_LINE_179_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_179,\n\
13KBF_LINE_180_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_180,\n\
13KBF_LINE_181_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_181,\n\
13KBF_LINE_182_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_182,\n\
13KBF_LINE_183_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_183,\n\
13KBF_LINE_184_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_184,\n\
13KBF_LINE_185_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_185,\n\
13KBF_LINE_186_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_186,\n\
13KBF_LINE_187_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_187,\n\
13KBF_LINE_188_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_188,\n\
13KBF_LINE_189_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_189,\n\
13KBF_LINE_190_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_190,\n\
13KBF_LINE_191_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_191,\n\
13KBF_LINE_192_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_192,\n\
13KBF_LINE_193_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_193,\n\
13KBF_LINE_194_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_194,\n\
13KBF_LINE_195_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_195,\n\
13KBF_LINE_196_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_196,\n\
13KBF_LINE_197_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_197,\n\
13KBF_LINE_198_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_198,\n\
13KBF_LINE_199_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_199,\n\
13KBF_LINE_200_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_200,\n\
13KBF_LINE_201_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_201,\n\
13KBF_LINE_202_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_202,\n\
13KBF_LINE_203_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_203,\n\
13KBF_LINE_204_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_204,\n\
13KBF_LINE_205_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_205,\n\
13KBF_LINE_206_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_206,\n\
13KBF_LINE_207_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_207,\n\
13KBF_LINE_208_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_208,\n\
";

1522 
CHAR
 
	gbuf„r_14K
[] = "\
14K_BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
14K_BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
14K_BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
14K_BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
14K_BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
14K_BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
14K_BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
14K_BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
14K_BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
14K_BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
14K_BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
14K_BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
14K_BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
14K_BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
14K_BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
14K_BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
14K_BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
14K_BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
14K_BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
14K_BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
14K_BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
14K_BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
14K_BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
14K_BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
14K_BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
14K_BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
14K_BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
14K_BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
14K_BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
14K_BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
14K_BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
14K_BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
14K_BUF_LINE_33_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_33,\n\
14K_BUF_LINE_34_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_34,\n\
14K_BUF_LINE_35_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_35,\n\
14K_BUF_LINE_36_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_36,\n\
14K_BUF_LINE_37_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_37,\n\
14K_BUF_LINE_38_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_38,\n\
14K_BUF_LINE_39_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_39,\n\
14K_BUF_LINE_40_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_40,\n\
14K_BUF_LINE_41_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_41,\n\
14K_BUF_LINE_42_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_42,\n\
14K_BUF_LINE_43_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_43,\n\
14K_BUF_LINE_44_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_44,\n\
14K_BUF_LINE_45_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_45,\n\
14K_BUF_LINE_46_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_46,\n\
14K_BUF_LINE_47_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_47,\n\
14K_BUF_LINE_48_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_48,\n\
14K_BUF_LINE_49_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_49,\n\
14K_BUF_LINE_50_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_50,\n\
14K_BUF_LINE_51_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_51,\n\
14K_BUF_LINE_52_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_52,\n\
14K_BUF_LINE_53_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_53,\n\
14K_BUF_LINE_54_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_54,\n\
14K_BUF_LINE_55_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_55,\n\
14K_BUF_LINE_56_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_56,\n\
14K_BUF_LINE_57_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_57,\n\
14K_BUF_LINE_58_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_58,\n\
14K_BUF_LINE_59_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_59,\n\
14K_BUF_LINE_60_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_60,\n\
14K_BUF_LINE_61_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_61,\n\
14K_BUF_LINE_62_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_62,\n\
14K_BUF_LINE_63_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_63,\n\
14K_BUF_LINE_64_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_64,\n\
14K_BUF_LINE_65_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_65,\n\
14K_BUF_LINE_66_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_66,\n\
14K_BUF_LINE_67_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_67,\n\
14K_BUF_LINE_68_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_68,\n\
14K_BUF_LINE_69_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_69,\n\
14K_BUF_LINE_70_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_70,\n\
14K_BUF_LINE_71_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_71,\n\
14K_BUF_LINE_72_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_72,\n\
14K_BUF_LINE_73_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_73,\n\
14K_BUF_LINE_74_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_74,\n\
14K_BUF_LINE_75_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_75,\n\
14K_BUF_LINE_76_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_76,\n\
14K_BUF_LINE_77_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_77,\n\
14K_BUF_LINE_78_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_78,\n\
14K_BUF_LINE_79_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_79,\n\
14K_BUF_LINE_80_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_80,\n\
14K_BUF_LINE_81_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_81,\n\
14K_BUF_LINE_82_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_82,\n\
14K_BUF_LINE_83_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_83,\n\
14K_BUF_LINE_84_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_84,\n\
14K_BUF_LINE_85_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_85,\n\
14K_BUF_LINE_86_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_86,\n\
14K_BUF_LINE_87_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_87,\n\
14K_BUF_LINE_88_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_88,\n\
14K_BUF_LINE_89_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_89,\n\
14K_BUF_LINE_90_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_90,\n\
14K_BUF_LINE_91_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_91,\n\
14K_BUF_LINE_92_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_92,\n\
14K_BUF_LINE_93_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_93,\n\
14K_BUF_LINE_94_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_94,\n\
14K_BUF_LINE_95_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_95,\n\
14K_BUF_LINE_96_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_96,\n\
14K_BUF_LINE_97_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_97,\n\
14K_BUF_LINE_98_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_98,\n\
14K_BUF_LINE_99_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_99,\n\
14KBF_LINE_100_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_100,\n\
14KBF_LINE_101_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_101,\n\
14KBF_LINE_102_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_102,\n\
14KBF_LINE_103_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_103,\n\
14KBF_LINE_104_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_104,\n\
14KBF_LINE_105_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_105,\n\
14KBF_LINE_106_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_106,\n\
14KBF_LINE_107_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_107,\n\
14KBF_LINE_108_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_108,\n\
14KBF_LINE_109_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_109,\n\
14KBF_LINE_110_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_110,\n\
14KBF_LINE_111_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_111,\n\
14KBF_LINE_112_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_112,\n\
14KBF_LINE_113_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_113,\n\
14KBF_LINE_114_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_114,\n\
14KBF_LINE_115_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_115,\n\
14KBF_LINE_116_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_116,\n\
14KBF_LINE_117_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_117,\n\
14KBF_LINE_118_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_118,\n\
14KBF_LINE_119_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_119,\n\
14KBF_LINE_120_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_120,\n\
14KBF_LINE_121_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_121,\n\
14KBF_LINE_122_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_122,\n\
14KBF_LINE_123_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_123,\n\
14KBF_LINE_124_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_124,\n\
14KBF_LINE_125_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_125,\n\
14KBF_LINE_126_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_126,\n\
14KBF_LINE_127_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_127,\n\
14KBF_LINE_128_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_128,\n\
14KBF_LINE_129_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_129,\n\
14KBF_LINE_130_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_130,\n\
14KBF_LINE_131_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_131,\n\
14KBF_LINE_132_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_132,\n\
14KBF_LINE_133_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_133,\n\
14KBF_LINE_134_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_134,\n\
14KBF_LINE_135_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_135,\n\
14KBF_LINE_136_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_136,\n\
14KBF_LINE_137_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_137,\n\
14KBF_LINE_138_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_138,\n\
14KBF_LINE_139_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_139,\n\
14KBF_LINE_140_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_140,\n\
14KBF_LINE_141_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_141,\n\
14KBF_LINE_142_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_142,\n\
14KBF_LINE_143_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_143,\n\
14KBF_LINE_144_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_144,\n\
14KBF_LINE_145_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_145,\n\
14KBF_LINE_146_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_146,\n\
14KBF_LINE_147_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_147,\n\
14KBF_LINE_148_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_148,\n\
14KBF_LINE_149_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_149,\n\
14KBF_LINE_150_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_150,\n\
14KBF_LINE_151_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_151,\n\
14KBF_LINE_152_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_152,\n\
14KBF_LINE_153_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_153,\n\
14KBF_LINE_154_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_154,\n\
14KBF_LINE_155_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_155,\n\
14KBF_LINE_156_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_156,\n\
14KBF_LINE_157_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_157,\n\
14KBF_LINE_158_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_158,\n\
14KBF_LINE_159_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_159,\n\
14KBF_LINE_160_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_160,\n\
14KBF_LINE_161_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_161,\n\
14KBF_LINE_162_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_162,\n\
14KBF_LINE_163_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_163,\n\
14KBF_LINE_164_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_164,\n\
14KBF_LINE_165_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_165,\n\
14KBF_LINE_166_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_166,\n\
14KBF_LINE_167_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_167,\n\
14KBF_LINE_168_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_168,\n\
14KBF_LINE_169_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_169,\n\
14KBF_LINE_170_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_170,\n\
14KBF_LINE_171_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_171,\n\
14KBF_LINE_172_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_172,\n\
14KBF_LINE_173_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_173,\n\
14KBF_LINE_174_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_174,\n\
14KBF_LINE_175_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_175,\n\
14KBF_LINE_176_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_176,\n\
14KBF_LINE_177_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_177,\n\
14KBF_LINE_178_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_178,\n\
14KBF_LINE_179_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_179,\n\
14KBF_LINE_180_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_180,\n\
14KBF_LINE_181_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_181,\n\
14KBF_LINE_182_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_182,\n\
14KBF_LINE_183_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_183,\n\
14KBF_LINE_184_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_184,\n\
14KBF_LINE_185_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_185,\n\
14KBF_LINE_186_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_186,\n\
14KBF_LINE_187_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_187,\n\
14KBF_LINE_188_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_188,\n\
14KBF_LINE_189_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_189,\n\
14KBF_LINE_190_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_190,\n\
14KBF_LINE_191_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_191,\n\
14KBF_LINE_192_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_192,\n\
14KBF_LINE_193_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_193,\n\
14KBF_LINE_194_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_194,\n\
14KBF_LINE_195_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_195,\n\
14KBF_LINE_196_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_196,\n\
14KBF_LINE_197_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_197,\n\
14KBF_LINE_198_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_198,\n\
14KBF_LINE_199_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_199,\n\
14KBF_LINE_200_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_200,\n\
14KBF_LINE_201_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_201,\n\
14KBF_LINE_202_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_202,\n\
14KBF_LINE_203_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_203,\n\
14KBF_LINE_204_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_204,\n\
14KBF_LINE_205_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_205,\n\
14KBF_LINE_206_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_206,\n\
14KBF_LINE_207_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_207,\n\
14KBF_LINE_208_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_208,\n\
14KBF_LINE_200_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_209,\n\
14KBF_LINE_210_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_210,\n\
14KBF_LINE_211_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_211,\n\
14KBF_LINE_212_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_212,\n\
14KBF_LINE_213_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_213,\n\
14KBF_LINE_214_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_214,\n\
14KBF_LINE_215_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_215,\n\
14KBF_LINE_216_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_216,\n\
14KBF_LINE_217_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_217,\n\
14KBF_LINE_218_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_218,\n\
14KBF_LINE_219_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_219,\n\
14KBF_LINE_220_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_220,\n\
14KBF_LINE_221_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_221,\n\
14KBF_LINE_222_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_222,\n\
14KBF_LINE_223_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_223,\n\
14KBF_LINE_224_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_224,\n\
";

1749 
CHAR
 
	gbuf„r_15K
[] = "\
15K_BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
15K_BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
15K_BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
15K_BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
15K_BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
15K_BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
15K_BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
15K_BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
15K_BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
15K_BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
15K_BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
15K_BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
15K_BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
15K_BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
15K_BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
15K_BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
15K_BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
15K_BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
15K_BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
15K_BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
15K_BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
15K_BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
15K_BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
15K_BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
15K_BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
15K_BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
15K_BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
15K_BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
15K_BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
15K_BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
15K_BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
15K_BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
15K_BUF_LINE_33_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_33,\n\
15K_BUF_LINE_34_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_34,\n\
15K_BUF_LINE_35_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_35,\n\
15K_BUF_LINE_36_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_36,\n\
15K_BUF_LINE_37_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_37,\n\
15K_BUF_LINE_38_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_38,\n\
15K_BUF_LINE_39_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_39,\n\
15K_BUF_LINE_40_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_40,\n\
15K_BUF_LINE_41_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_41,\n\
15K_BUF_LINE_42_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_42,\n\
15K_BUF_LINE_43_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_43,\n\
15K_BUF_LINE_44_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_44,\n\
15K_BUF_LINE_45_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_45,\n\
15K_BUF_LINE_46_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_46,\n\
15K_BUF_LINE_47_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_47,\n\
15K_BUF_LINE_48_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_48,\n\
15K_BUF_LINE_49_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_49,\n\
15K_BUF_LINE_50_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_50,\n\
15K_BUF_LINE_51_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_51,\n\
15K_BUF_LINE_52_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_52,\n\
15K_BUF_LINE_53_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_53,\n\
15K_BUF_LINE_54_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_54,\n\
15K_BUF_LINE_55_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_55,\n\
15K_BUF_LINE_56_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_56,\n\
15K_BUF_LINE_57_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_57,\n\
15K_BUF_LINE_58_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_58,\n\
15K_BUF_LINE_59_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_59,\n\
15K_BUF_LINE_60_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_60,\n\
15K_BUF_LINE_61_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_61,\n\
15K_BUF_LINE_62_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_62,\n\
15K_BUF_LINE_63_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_63,\n\
15K_BUF_LINE_64_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_64,\n\
15K_BUF_LINE_65_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_65,\n\
15K_BUF_LINE_66_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_66,\n\
15K_BUF_LINE_67_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_67,\n\
15K_BUF_LINE_68_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_68,\n\
15K_BUF_LINE_69_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_69,\n\
15K_BUF_LINE_70_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_70,\n\
15K_BUF_LINE_71_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_71,\n\
15K_BUF_LINE_72_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_72,\n\
15K_BUF_LINE_73_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_73,\n\
15K_BUF_LINE_74_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_74,\n\
15K_BUF_LINE_75_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_75,\n\
15K_BUF_LINE_76_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_76,\n\
15K_BUF_LINE_77_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_77,\n\
15K_BUF_LINE_78_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_78,\n\
15K_BUF_LINE_79_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_79,\n\
15K_BUF_LINE_80_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_80,\n\
15K_BUF_LINE_81_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_81,\n\
15K_BUF_LINE_82_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_82,\n\
15K_BUF_LINE_83_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_83,\n\
15K_BUF_LINE_84_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_84,\n\
15K_BUF_LINE_85_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_85,\n\
15K_BUF_LINE_86_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_86,\n\
15K_BUF_LINE_87_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_87,\n\
15K_BUF_LINE_88_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_88,\n\
15K_BUF_LINE_89_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_89,\n\
15K_BUF_LINE_90_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_90,\n\
15K_BUF_LINE_91_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_91,\n\
15K_BUF_LINE_92_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_92,\n\
15K_BUF_LINE_93_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_93,\n\
15K_BUF_LINE_94_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_94,\n\
15K_BUF_LINE_95_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_95,\n\
15K_BUF_LINE_96_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_96,\n\
15K_BUF_LINE_97_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_97,\n\
15K_BUF_LINE_98_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_98,\n\
15K_BUF_LINE_99_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_99,\n\
15KBF_LINE_100_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_100,\n\
15KBF_LINE_101_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_101,\n\
15KBF_LINE_102_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_102,\n\
15KBF_LINE_103_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_103,\n\
15KBF_LINE_104_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_104,\n\
15KBF_LINE_105_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_105,\n\
15KBF_LINE_106_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_106,\n\
15KBF_LINE_107_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_107,\n\
15KBF_LINE_108_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_108,\n\
15KBF_LINE_109_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_109,\n\
15KBF_LINE_110_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_110,\n\
15KBF_LINE_111_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_111,\n\
15KBF_LINE_112_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_112,\n\
15KBF_LINE_113_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_113,\n\
15KBF_LINE_114_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_114,\n\
15KBF_LINE_115_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_115,\n\
15KBF_LINE_116_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_116,\n\
15KBF_LINE_117_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_117,\n\
15KBF_LINE_118_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_118,\n\
15KBF_LINE_119_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_119,\n\
15KBF_LINE_120_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_120,\n\
15KBF_LINE_121_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_121,\n\
15KBF_LINE_122_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_122,\n\
15KBF_LINE_123_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_123,\n\
15KBF_LINE_124_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_124,\n\
15KBF_LINE_125_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_125,\n\
15KBF_LINE_126_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_126,\n\
15KBF_LINE_127_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_127,\n\
15KBF_LINE_128_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_128,\n\
15KBF_LINE_129_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_129,\n\
15KBF_LINE_130_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_130,\n\
15KBF_LINE_131_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_131,\n\
15KBF_LINE_132_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_132,\n\
15KBF_LINE_133_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_133,\n\
15KBF_LINE_134_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_134,\n\
15KBF_LINE_135_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_135,\n\
15KBF_LINE_136_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_136,\n\
15KBF_LINE_137_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_137,\n\
15KBF_LINE_138_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_138,\n\
15KBF_LINE_139_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_139,\n\
15KBF_LINE_140_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_140,\n\
15KBF_LINE_141_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_141,\n\
15KBF_LINE_142_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_142,\n\
15KBF_LINE_143_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_143,\n\
15KBF_LINE_144_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_144,\n\
15KBF_LINE_145_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_145,\n\
15KBF_LINE_146_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_146,\n\
15KBF_LINE_147_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_147,\n\
15KBF_LINE_148_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_148,\n\
15KBF_LINE_149_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_149,\n\
15KBF_LINE_150_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_150,\n\
15KBF_LINE_151_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_151,\n\
15KBF_LINE_152_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_152,\n\
15KBF_LINE_153_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_153,\n\
15KBF_LINE_154_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_154,\n\
15KBF_LINE_155_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_155,\n\
15KBF_LINE_156_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_156,\n\
15KBF_LINE_157_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_157,\n\
15KBF_LINE_158_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_158,\n\
15KBF_LINE_159_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_159,\n\
15KBF_LINE_160_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_160,\n\
15KBF_LINE_161_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_161,\n\
15KBF_LINE_162_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_162,\n\
15KBF_LINE_163_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_163,\n\
15KBF_LINE_164_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_164,\n\
15KBF_LINE_165_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_165,\n\
15KBF_LINE_166_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_166,\n\
15KBF_LINE_167_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_167,\n\
15KBF_LINE_168_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_168,\n\
15KBF_LINE_169_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_169,\n\
15KBF_LINE_170_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_170,\n\
15KBF_LINE_171_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_171,\n\
15KBF_LINE_172_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_172,\n\
15KBF_LINE_173_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_173,\n\
15KBF_LINE_174_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_174,\n\
15KBF_LINE_175_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_175,\n\
15KBF_LINE_176_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_176,\n\
15KBF_LINE_177_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_177,\n\
15KBF_LINE_178_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_178,\n\
15KBF_LINE_179_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_179,\n\
15KBF_LINE_180_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_180,\n\
15KBF_LINE_181_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_181,\n\
15KBF_LINE_182_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_182,\n\
15KBF_LINE_183_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_183,\n\
15KBF_LINE_184_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_184,\n\
15KBF_LINE_185_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_185,\n\
15KBF_LINE_186_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_186,\n\
15KBF_LINE_187_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_187,\n\
15KBF_LINE_188_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_188,\n\
15KBF_LINE_189_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_189,\n\
15KBF_LINE_190_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_190,\n\
15KBF_LINE_191_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_191,\n\
15KBF_LINE_192_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_192,\n\
15KBF_LINE_193_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_193,\n\
15KBF_LINE_194_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_194,\n\
15KBF_LINE_195_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_195,\n\
15KBF_LINE_196_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_196,\n\
15KBF_LINE_197_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_197,\n\
15KBF_LINE_198_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_198,\n\
15KBF_LINE_199_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_199,\n\
15KBF_LINE_200_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_200,\n\
15KBF_LINE_201_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_201,\n\
15KBF_LINE_202_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_202,\n\
15KBF_LINE_203_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_203,\n\
15KBF_LINE_204_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_204,\n\
15KBF_LINE_205_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_205,\n\
15KBF_LINE_206_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_206,\n\
15KBF_LINE_207_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_207,\n\
15KBF_LINE_208_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_208,\n\
15KBF_LINE_200_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_209,\n\
15KBF_LINE_210_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_210,\n\
15KBF_LINE_211_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_211,\n\
15KBF_LINE_212_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_212,\n\
15KBF_LINE_213_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_213,\n\
15KBF_LINE_214_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_214,\n\
15KBF_LINE_215_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_215,\n\
15KBF_LINE_216_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_216,\n\
15KBF_LINE_217_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_217,\n\
15KBF_LINE_218_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_218,\n\
15KBF_LINE_219_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_219,\n\
15KBF_LINE_220_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_220,\n\
15KBF_LINE_221_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_221,\n\
15KBF_LINE_222_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_222,\n\
15KBF_LINE_223_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_223,\n\
15KBF_LINE_224_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_224,\n\
15KBF_LINE_225_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_225,\n\
15KBF_LINE_226_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_226,\n\
15KBF_LINE_227_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_227,\n\
15KBF_LINE_228_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_228,\n\
15KBF_LINE_229_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_229,\n\
15KBF_LINE_230_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_230,\n\
15KBF_LINE_231_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_231,\n\
15KBF_LINE_232_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_232,\n\
15KBF_LINE_233_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_233,\n\
15KBF_LINE_234_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_234,\n\
15KBF_LINE_235_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_235,\n\
15KBF_LINE_236_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_236,\n\
15KBF_LINE_237_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_237,\n\
15KBF_LINE_238_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_238,\n\
15KBF_LINE_239_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_239,\n\
15KBF_LINE_240_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_240,\n\
";

1992 
CHAR
 
	gbuf„r_16K
[] = "\
16K_BUF_LINE_01_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_01,\n\
16K_BUF_LINE_02_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_02,\n\
16K_BUF_LINE_03_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_03,\n\
16K_BUF_LINE_04_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_04,\n\
16K_BUF_LINE_05_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_05,\n\
16K_BUF_LINE_06_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_06,\n\
16K_BUF_LINE_07_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_07,\n\
16K_BUF_LINE_08_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_08,\n\
16K_BUF_LINE_09_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_09,\n\
16K_BUF_LINE_10_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_10,\n\
16K_BUF_LINE_11_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_11,\n\
16K_BUF_LINE_12_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_12,\n\
16K_BUF_LINE_13_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_13,\n\
16K_BUF_LINE_14_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_14,\n\
16K_BUF_LINE_15_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_15,\n\
16K_BUF_LINE_16_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_16,\n\
16K_BUF_LINE_17_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_17,\n\
16K_BUF_LINE_18_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_18,\n\
16K_BUF_LINE_19_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_19,\n\
16K_BUF_LINE_20_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_20,\n\
16K_BUF_LINE_21_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_21,\n\
16K_BUF_LINE_22_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_22,\n\
16K_BUF_LINE_23_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_23,\n\
16K_BUF_LINE_24_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_24,\n\
16K_BUF_LINE_25_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_25,\n\
16K_BUF_LINE_26_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_26,\n\
16K_BUF_LINE_27_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_27,\n\
16K_BUF_LINE_28_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_28,\n\
16K_BUF_LINE_29_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_29,\n\
16K_BUF_LINE_30_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_30,\n\
16K_BUF_LINE_31_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_31,\n\
16K_BUF_LINE_32_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_32,\n\
16K_BUF_LINE_33_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_33,\n\
16K_BUF_LINE_34_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_34,\n\
16K_BUF_LINE_35_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_35,\n\
16K_BUF_LINE_36_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_36,\n\
16K_BUF_LINE_37_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_37,\n\
16K_BUF_LINE_38_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_38,\n\
16K_BUF_LINE_39_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_39,\n\
16K_BUF_LINE_40_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_40,\n\
16K_BUF_LINE_41_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_41,\n\
16K_BUF_LINE_42_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_42,\n\
16K_BUF_LINE_43_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_43,\n\
16K_BUF_LINE_44_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_44,\n\
16K_BUF_LINE_45_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_45,\n\
16K_BUF_LINE_46_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_46,\n\
16K_BUF_LINE_47_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_47,\n\
16K_BUF_LINE_48_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_48,\n\
16K_BUF_LINE_49_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_49,\n\
16K_BUF_LINE_50_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_50,\n\
16K_BUF_LINE_51_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_51,\n\
16K_BUF_LINE_52_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_52,\n\
16K_BUF_LINE_53_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_53,\n\
16K_BUF_LINE_54_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_54,\n\
16K_BUF_LINE_55_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_55,\n\
16K_BUF_LINE_56_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_56,\n\
16K_BUF_LINE_57_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_57,\n\
16K_BUF_LINE_58_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_58,\n\
16K_BUF_LINE_59_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_59,\n\
16K_BUF_LINE_60_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_60,\n\
16K_BUF_LINE_61_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_61,\n\
16K_BUF_LINE_62_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_62,\n\
16K_BUF_LINE_63_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_63,\n\
16K_BUF_LINE_64_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_64,\n\
16K_BUF_LINE_65_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_65,\n\
16K_BUF_LINE_66_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_66,\n\
16K_BUF_LINE_67_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_67,\n\
16K_BUF_LINE_68_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_68,\n\
16K_BUF_LINE_69_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_69,\n\
16K_BUF_LINE_70_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_70,\n\
16K_BUF_LINE_71_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_71,\n\
16K_BUF_LINE_72_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_72,\n\
16K_BUF_LINE_73_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_73,\n\
16K_BUF_LINE_74_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_74,\n\
16K_BUF_LINE_75_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_75,\n\
16K_BUF_LINE_76_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_76,\n\
16K_BUF_LINE_77_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_77,\n\
16K_BUF_LINE_78_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_78,\n\
16K_BUF_LINE_79_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_79,\n\
16K_BUF_LINE_80_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_80,\n\
16K_BUF_LINE_81_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_81,\n\
16K_BUF_LINE_82_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_82,\n\
16K_BUF_LINE_83_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_83,\n\
16K_BUF_LINE_84_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_84,\n\
16K_BUF_LINE_85_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_85,\n\
16K_BUF_LINE_86_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_86,\n\
16K_BUF_LINE_87_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_87,\n\
16K_BUF_LINE_88_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_88,\n\
16K_BUF_LINE_89_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_89,\n\
16K_BUF_LINE_90_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_90,\n\
16K_BUF_LINE_91_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_91,\n\
16K_BUF_LINE_92_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_92,\n\
16K_BUF_LINE_93_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_93,\n\
16K_BUF_LINE_94_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_94,\n\
16K_BUF_LINE_95_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_95,\n\
16K_BUF_LINE_96_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_96,\n\
16K_BUF_LINE_97_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_97,\n\
16K_BUF_LINE_98_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_98,\n\
16K_BUF_LINE_99_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_99,\n\
16KBF_LINE_100_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_100,\n\
16KBF_LINE_101_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_101,\n\
16KBF_LINE_102_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_102,\n\
16KBF_LINE_103_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_103,\n\
16KBF_LINE_104_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_104,\n\
16KBF_LINE_105_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_105,\n\
16KBF_LINE_106_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_106,\n\
16KBF_LINE_107_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_107,\n\
16KBF_LINE_108_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_108,\n\
16KBF_LINE_109_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_109,\n\
16KBF_LINE_110_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_110,\n\
16KBF_LINE_111_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_111,\n\
16KBF_LINE_112_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_112,\n\
16KBF_LINE_113_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_113,\n\
16KBF_LINE_114_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_114,\n\
16KBF_LINE_115_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_115,\n\
16KBF_LINE_116_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_116,\n\
16KBF_LINE_117_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_117,\n\
16KBF_LINE_118_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_118,\n\
16KBF_LINE_119_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_119,\n\
16KBF_LINE_120_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_120,\n\
16KBF_LINE_121_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_121,\n\
16KBF_LINE_122_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_122,\n\
16KBF_LINE_123_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_123,\n\
16KBF_LINE_124_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_124,\n\
16KBF_LINE_125_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_125,\n\
16KBF_LINE_126_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_126,\n\
16KBF_LINE_127_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_127,\n\
16KBF_LINE_128_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_128,\n\
16KBF_LINE_129_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_129,\n\
16KBF_LINE_130_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_130,\n\
16KBF_LINE_131_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_131,\n\
16KBF_LINE_132_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_132,\n\
16KBF_LINE_133_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_133,\n\
16KBF_LINE_134_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_134,\n\
16KBF_LINE_135_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_135,\n\
16KBF_LINE_136_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_136,\n\
16KBF_LINE_137_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_137,\n\
16KBF_LINE_138_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_138,\n\
16KBF_LINE_139_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_139,\n\
16KBF_LINE_140_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_140,\n\
16KBF_LINE_141_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_141,\n\
16KBF_LINE_142_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_142,\n\
16KBF_LINE_143_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_143,\n\
16KBF_LINE_144_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_144,\n\
16KBF_LINE_145_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_145,\n\
16KBF_LINE_146_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_146,\n\
16KBF_LINE_147_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_147,\n\
16KBF_LINE_148_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_148,\n\
16KBF_LINE_149_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_149,\n\
16KBF_LINE_150_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_150,\n\
16KBF_LINE_151_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_151,\n\
16KBF_LINE_152_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_152,\n\
16KBF_LINE_153_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_153,\n\
16KBF_LINE_154_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_154,\n\
16KBF_LINE_155_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_155,\n\
16KBF_LINE_156_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_156,\n\
16KBF_LINE_157_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_157,\n\
16KBF_LINE_158_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_158,\n\
16KBF_LINE_159_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_159,\n\
16KBF_LINE_160_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_160,\n\
16KBF_LINE_161_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_161,\n\
16KBF_LINE_162_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_162,\n\
16KBF_LINE_163_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_163,\n\
16KBF_LINE_164_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_164,\n\
16KBF_LINE_165_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_165,\n\
16KBF_LINE_166_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_166,\n\
16KBF_LINE_167_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_167,\n\
16KBF_LINE_168_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_168,\n\
16KBF_LINE_169_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_169,\n\
16KBF_LINE_170_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_170,\n\
16KBF_LINE_171_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_171,\n\
16KBF_LINE_172_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_172,\n\
16KBF_LINE_173_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_173,\n\
16KBF_LINE_174_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_174,\n\
16KBF_LINE_175_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_175,\n\
16KBF_LINE_176_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_176,\n\
16KBF_LINE_177_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_177,\n\
16KBF_LINE_178_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_178,\n\
16KBF_LINE_179_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_179,\n\
16KBF_LINE_180_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_180,\n\
16KBF_LINE_181_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_181,\n\
16KBF_LINE_182_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_182,\n\
16KBF_LINE_183_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_183,\n\
16KBF_LINE_184_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_184,\n\
16KBF_LINE_185_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_185,\n\
16KBF_LINE_186_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_186,\n\
16KBF_LINE_187_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_187,\n\
16KBF_LINE_188_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_188,\n\
16KBF_LINE_189_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_189,\n\
16KBF_LINE_190_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_190,\n\
16KBF_LINE_191_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_191,\n\
16KBF_LINE_192_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_192,\n\
16KBF_LINE_193_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_193,\n\
16KBF_LINE_194_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_194,\n\
16KBF_LINE_195_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_195,\n\
16KBF_LINE_196_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_196,\n\
16KBF_LINE_197_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_197,\n\
16KBF_LINE_198_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_198,\n\
16KBF_LINE_199_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_199,\n\
16KBF_LINE_200_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_200,\n\
16KBF_LINE_201_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_201,\n\
16KBF_LINE_202_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_202,\n\
16KBF_LINE_203_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_203,\n\
16KBF_LINE_204_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_204,\n\
16KBF_LINE_205_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_205,\n\
16KBF_LINE_206_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_206,\n\
16KBF_LINE_207_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_207,\n\
16KBF_LINE_208_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_208,\n\
16KBF_LINE_200_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_209,\n\
16KBF_LINE_210_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_210,\n\
16KBF_LINE_211_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_211,\n\
16KBF_LINE_212_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_212,\n\
16KBF_LINE_213_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_213,\n\
16KBF_LINE_214_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_214,\n\
16KBF_LINE_215_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_215,\n\
16KBF_LINE_216_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_216,\n\
16KBF_LINE_217_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_217,\n\
16KBF_LINE_218_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_218,\n\
16KBF_LINE_219_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_219,\n\
16KBF_LINE_220_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_220,\n\
16KBF_LINE_221_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_221,\n\
16KBF_LINE_222_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_222,\n\
16KBF_LINE_223_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_223,\n\
16KBF_LINE_224_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_224,\n\
16KBF_LINE_225_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_225,\n\
16KBF_LINE_226_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_226,\n\
16KBF_LINE_227_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_227,\n\
16KBF_LINE_228_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_228,\n\
16KBF_LINE_229_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_229,\n\
16KBF_LINE_230_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_230,\n\
16KBF_LINE_231_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_231,\n\
16KBF_LINE_232_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_232,\n\
16KBF_LINE_233_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_233,\n\
16KBF_LINE_234_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_234,\n\
16KBF_LINE_235_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_235,\n\
16KBF_LINE_236_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_236,\n\
16KBF_LINE_237_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_237,\n\
16KBF_LINE_238_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_238,\n\
16KBF_LINE_239_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_239,\n\
16KBF_LINE_240_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_240,\n\
16KBF_LINE_241_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_241,\n\
16KBF_LINE_242_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_242,\n\
16KBF_LINE_243_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_243,\n\
16KBF_LINE_244_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_244,\n\
16KBF_LINE_245_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_245,\n\
16KBF_LINE_246_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_246,\n\
16KBF_LINE_247_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_247,\n\
16KBF_LINE_248_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_248,\n\
16KBF_LINE_249_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_249,\n\
16KBF_LINE_250_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_250,\n\
16KBF_LINE_251_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_251,\n\
16KBF_LINE_252_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_252,\n\
16KBF_LINE_253_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_253,\n\
16KBF_LINE_254_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_254,\n\
16KBF_LINE_255_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_255,\n\
16KBF_LINE_256_THERE_IS_NO_RIGHT_WAY_TODO_WRONG_THING_LINE_256,\n\
";

2251 
	#GET_IO_DATA
(
size
, 
°¨t
, 
íd
, 
buf
) \

2252 i‡((
size
 > 
°¨t
Ë&& (sizê<
íd
)) { \

2253  
buf
; \

2254 }

	)

2256 
CHAR
 *
	$dz_gë_io_d©a
(
INT
 
size
)

2259 
	`GET_IO_DATA
(
size
, 
_15K
, 
_16K
, 
buf„r_16K
);

2260 
	`GET_IO_DATA
(
size
, 
_14K
, 
_15K
, 
buf„r_15K
);

2261 
	`GET_IO_DATA
(
size
, 
_13K
, 
_14K
, 
buf„r_14K
);

2262 
	`GET_IO_DATA
(
size
, 
_12K
, 
_13K
, 
buf„r_13K
);

2263 
	`GET_IO_DATA
(
size
, 
_11K
, 
_12K
, 
buf„r_12K
);

2264 
	`GET_IO_DATA
(
size
, 
_10K
, 
_11K
, 
buf„r_11K
);

2265 
	`GET_IO_DATA
(
size
, 
_9K
, 
_10K
, 
buf„r_10K
);

2266 
	`GET_IO_DATA
(
size
, 
_8K
, 
_9K
 , 
buf„r_9K
);

2267 
	`GET_IO_DATA
(
size
, 
_7K
, 
_8K
 , 
buf„r_8K
);

2268 
	`GET_IO_DATA
(
size
, 
_6K
, 
_7K
 , 
buf„r_7K
);

2269 
	`GET_IO_DATA
(
size
, 
_5K
, 
_6K
 , 
buf„r_6K
);

2270 
	`GET_IO_DATA
(
size
, 
_4K
, 
_5K
 , 
buf„r_5K
);

2271 
	`GET_IO_DATA
(
size
, 
_3K
, 
_4K
 , 
buf„r_4K
);

2272 
	`GET_IO_DATA
(
size
, 
_2K
, 
_3K
 , 
buf„r_3K
);

2273 
	`GET_IO_DATA
(
size
, 
_1K
, 
_2K
 , 
buf„r_2K
);

2274 
	`GET_IO_DATA
(
size
, 512, 
_1K
 , 
buf„r_1K
);

2275 
	`GET_IO_DATA
(
size
, 0, 512 , 
buf„r_512B
);

2277  
NULL
;

2279 
	}
}

2280 
EXPORT_SYMBOL
(
dz_gë_io_d©a
);

	@infra_engine/infra_engine_fec.c

9 
	~"¥ŸŸy≥s.h
"

16 
FEC_COUNTERS
 
	gdz_„c_cou¡îs
;

17 
PFEC_COUNTERS
 
	gpdz_„c_cou¡îs
;

18 
EXPORT_SYMBOL
(
dz_„c_cou¡îs
);

19 
EXPORT_SYMBOL
(
pdz_„c_cou¡îs
);

21 
U64
 
	g„c_a˘ive_thªshﬁd_≥rc
 = 50;

22 
EXPORT_SYMBOL
(
„c_a˘ive_thªshﬁd_≥rc
);

24 
U64
 
	g„c_a˘ive_thªshﬁd
 = 0;

25 
EXPORT_SYMBOL
(
„c_a˘ive_thªshﬁd
);

27 
U64
 
	g„c_a˘ive_cou¡
 = 0;

28 
EXPORT_SYMBOL
–
„c_a˘ive_cou¡
);

30 
U64
 
	g„c_Êush_cou¡
 = 0;

31 
EXPORT_SYMBOL
(
„c_Êush_cou¡
);

33 
ATOMIC64
 
	g„c_a˘ive_cou¡_£quí˚
;

34 
EXPORT_SYMBOL
(
„c_a˘ive_cou¡_£quí˚
);

36 
ATOMIC64
 
	g„c_‰ì_cou¡_£quí˚
;

37 
EXPORT_SYMBOL
(
„c_‰ì_cou¡_£quí˚
);

39 
ATOMIC64
 
	g„c_cur_Êush_cou¡
;

40 
EXPORT_SYMBOL
(
„c_cur_Êush_cou¡
);

42 
ATOMIC64
 
	g„c_Êush_›s_cou¡
;

43 
EXPORT_SYMBOL
(
„c_Êush_›s_cou¡
);

45 
ATOMIC64
 
	g„c_cur_Êush_›s_cou¡
;

46 
EXPORT_SYMBOL
(
„c_cur_Êush_›s_cou¡
);

48 
ATOMIC64
 
	g„c_mem‹y_ªads_cou¡
;

49 
EXPORT_SYMBOL
(
„c_mem‹y_ªads_cou¡
);

51 
ATOMIC64
 
	g„c_f‹w¨ded_ªads_cou¡
;

52 
EXPORT_SYMBOL
(
„c_f‹w¨ded_ªads_cou¡
);

54 
ATOMIC64
 
	g„c_iocou¡_ªads_∑πül_∑ge
;

55 
EXPORT_SYMBOL
(
„c_iocou¡_ªads_∑πül_∑ge
);

57 
ATOMIC64
 
	g„c_iocou¡_ªads_sögÀ_∑ge
;

58 
EXPORT_SYMBOL
(
„c_iocou¡_ªads_sögÀ_∑ge
);

60 
ATOMIC64
 
	g„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

61 
EXPORT_SYMBOL
(
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
);

63 
ATOMIC64
 
	g„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

64 
EXPORT_SYMBOL
(
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
);

66 
ATOMIC64
 
	g„c_iocou¡_ªads_mu…i_∑ge
;

67 
EXPORT_SYMBOL
(
„c_iocou¡_ªads_mu…i_∑ge
);

69 
ATOMIC64
 
	g„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

70 
EXPORT_SYMBOL
(
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
);

72 
ATOMIC64
 
	g„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

73 
EXPORT_SYMBOL
(
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
);

75 
ATOMIC64
 
	g„c_iocou¡_ªads_mu…i_èû_u«lig√d_∑ge
;

76 
EXPORT_SYMBOL
(
„c_iocou¡_ªads_mu…i_èû_u«lig√d_∑ge
);

78 
ATOMIC64
 
	g„c_iocou¡_ªads_mu…i_hód_u«lig√d_∑ge
;

79 
EXPORT_SYMBOL
(
„c_iocou¡_ªads_mu…i_hód_u«lig√d_∑ge
);

81 
ATOMIC64
 
	g„c_iocou¡_ªads_mu…i_bŸh_u«lig√d_∑ge
;

82 
EXPORT_SYMBOL
(
„c_iocou¡_ªads_mu…i_bŸh_u«lig√d_∑ge
);

84 
ATOMIC64
 
	g„c_iocou¡_wrôes_∑πül_∑ge
;

85 
EXPORT_SYMBOL
(
„c_iocou¡_wrôes_∑πül_∑ge
);

87 
ATOMIC64
 
	g„c_iocou¡_wrôes_sögÀ_∑ge
;

88 
EXPORT_SYMBOL
(
„c_iocou¡_wrôes_sögÀ_∑ge
);

90 
ATOMIC64
 
	g„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

91 
EXPORT_SYMBOL
(
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
);

93 
ATOMIC64
 
	g„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

94 
EXPORT_SYMBOL
(
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
);

96 
ATOMIC64
 
	g„c_iocou¡_wrôes_mu…i_∑ge
;

97 
EXPORT_SYMBOL
(
„c_iocou¡_wrôes_mu…i_∑ge
);

99 
ATOMIC64
 
	g„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

100 
EXPORT_SYMBOL
(
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
);

102 
ATOMIC64
 
	g„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

103 
EXPORT_SYMBOL
(
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
);

108 
U64
 
	g„c_èbÀ_size
 = 0;

109 
EXPORT_SYMBOL
(
„c_èbÀ_size
);

114 
PFEC_TABLE
 
	g„c_èbÀs_a˘ive
 = 
NULL
;

115 
EXPORT_SYMBOL
(
„c_èbÀs_a˘ive
);

117 
PFEC_TABLE
 
	g„c_èbÀs_Êush
 = 
NULL
;

118 
EXPORT_SYMBOL
(
„c_èbÀs_Êush
);

123 
U64
 
	gtime_„c_wrôe_°¨t
 = 0;

124 
EXPORT_SYMBOL
(
time_„c_wrôe_°¨t
);

126 
U64
 
	gtime_„c_wrôe_swôch
 = 0;

127 
EXPORT_SYMBOL
(
time_„c_wrôe_swôch
);

129 
U64
 
	gtime_Êush_¥ï¨e_°¨t
 = 0;

130 
EXPORT_SYMBOL
(
time_Êush_¥ï¨e_°¨t
);

132 
U64
 
	gtime_Êush_°¨t
 = 0;

133 
EXPORT_SYMBOL
(
time_Êush_°¨t
);

135 
U64
 
	gtime_Êush_íd
 = 0;

136 
EXPORT_SYMBOL
(
time_Êush_íd
);

142 
	#NUMBER_OF_READ_THREADS
 8

	)

143 
	#NUMBER_OF_WRITE_THREADS
 8

	)

144 
	#NUMBER_OF_FLUSH_THREADS
 1

	)

147 
PCHAR
 
	gFLUSH_THREAD_POOL_NAME
 = "flush_thread_pool";

148 
PCHAR
 
	gFLUSH_THREAD_POOL_SHORT_NAME
 = "ftpool";

149 
EXPORT_SYMBOL
(
FLUSH_THREAD_POOL_NAME
);

150 
EXPORT_SYMBOL
(
FLUSH_THREAD_POOL_SHORT_NAME
);

152 
PCHAR
 
	gWRITE_THREAD_POOL_NAME
 = "write_thread_pool";

153 
PCHAR
 
	gWRITE_THREAD_POOL_SHORT_NAME
 = "wtpool";

154 
EXPORT_SYMBOL
(
WRITE_THREAD_POOL_NAME
);

155 
EXPORT_SYMBOL
(
WRITE_THREAD_POOL_SHORT_NAME
);

157 
PCHAR
 
	gREAD_THREAD_POOL_NAME
 = "read_thread_pool";

158 
PCHAR
 
	gREAD_THREAD_POOL_SHORT_NAME
 = "rtpool";

159 
EXPORT_SYMBOL
(
READ_THREAD_POOL_NAME
);

160 
EXPORT_SYMBOL
(
READ_THREAD_POOL_SHORT_NAME
);

162 
USHORT
 
	gnum_ªad_thªads
 = 
NUMBER_OF_READ_THREADS
;

163 
EXPORT_SYMBOL
(
num_ªad_thªads
);

165 
USHORT
 
	gnum_wrôe_thªads
 = 
NUMBER_OF_WRITE_THREADS
;

166 
EXPORT_SYMBOL
(
num_wrôe_thªads
);

168 
USHORT
 
	gnum_Êush_thªads
 = 
NUMBER_OF_FLUSH_THREADS
;

169 
EXPORT_SYMBOL
(
num_Êush_thªads
);

171 
PDZ_THREAD_POOL
 
	gªad_thªad_poﬁ
 = 
NULL
;

172 
EXPORT_SYMBOL
(
ªad_thªad_poﬁ
);

174 
PDZ_THREAD_POOL
 
	gwrôe_thªad_poﬁ
 = 
NULL
;

175 
EXPORT_SYMBOL
(
wrôe_thªad_poﬁ
);

177 
PDZ_THREAD_POOL
 
	gÊush_thªad_poﬁ
 = 
NULL
;

178 
EXPORT_SYMBOL
(
Êush_thªad_poﬁ
);

181 
PDZ_THREAD_POOL
 
	g„c_ªad_thªad_poﬁ
 = 
NULL
;

182 
EXPORT_SYMBOL
(
„c_ªad_thªad_poﬁ
);

184 
PDZ_THREAD_POOL
 
	g„c_wrôe_thªad_poﬁ
 = 
NULL
;

185 
EXPORT_SYMBOL
(
„c_wrôe_thªad_poﬁ
);

187 
PDZ_THREAD_POOL
 
	g„c_Êush_thªad_poﬁ
 = 
NULL
;

188 
EXPORT_SYMBOL
(
„c_Êush_thªad_poﬁ
);

	@infra_engine/infra_engine_file.c

9 
	~"¥ŸŸy≥s.h
"

11 #ifde‡
DZ_KERNEL_VERSION_4


13 
fûe
 *
	$dz_fûe_›í
(c⁄° *
∑th
, 
INT
 
Êags
, INT 
rights
)

15 
fûe
 *
fûp
 = 
NULL
;

16 
mm_£gmít_t
 
ﬁdfs
;

17 
INT
 
îr
 = 0;

19 
ﬁdfs
 = 
	`gë_fs
();

20 
	`£t_fs
(
	`gë_ds
());

21 
fûp
 = 
	`fûp_›í
(
∑th
, 
Êags
, 
rights
);

22 
	`£t_fs
(
ﬁdfs
);

23 i‡(
	`IS_ERR
(
fûp
)) {

24 
îr
 = 
	`PTR_ERR
(
fûp
);

25 
RETURNN
;

27  
fûp
;

28 
	}
}

29 
EXPORT_SYMBOL
(
dz_fûe_›í
);

31 
RVOID
 
	$dz_fûe_˛o£
(
fûe
 *file)

33 
	`fûp_˛o£
(
fûe
, 
NULL
);

34 
	}
}

35 
EXPORT_SYMBOL
(
dz_fûe_˛o£
);

37 
ssize_t
 
	$dz_fûe_ªad
(
fûe
 *fûe, *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
)

39  
	`kî√l_ªad
(
fûe
, 
buf
, 
cou¡
, 
pos
);

40 
	}
}

41 
EXPORT_SYMBOL
(
dz_fûe_ªad
);

43 
ssize_t
 
	$dz_fûe_wrôe
(
fûe
 *fûe, c⁄° *
buf
, 
size_t
 
cou¡
, 
loff_t
 *
pos
)

45  
	`kî√l_wrôe
(
fûe
, 
buf
, 
cou¡
, 
pos
);

46 
	}
}

47 
EXPORT_SYMBOL
(
dz_fûe_wrôe
);

49 
RINT
 
	$dz_fûe_sync
(
fûe
 *file)

51  
	`vfs_fsync
(
fûe
, 0);

52 
	}
}

53 
EXPORT_SYMBOL
(
dz_fûe_sync
);

56 
fûe
 *
	$dz_fûe_›í
(c⁄° *
∑th
, 
INT
 
Êags
, INT 
rights
)

58 
fûe
 *
fûp
 = 
NULL
;

59 
mm_£gmít_t
 
ﬁdfs
;

60 
INT
 
îr
 = 0;

62 
ﬁdfs
 = 
	`gë_fs
();

63 
	`£t_fs
(
	`gë_ds
());

64 
fûp
 = 
	`fûp_›í
(
∑th
, 
Êags
, 
rights
);

65 
	`£t_fs
(
ﬁdfs
);

66 i‡(
	`IS_ERR
(
fûp
)) {

67 
îr
 = 
	`PTR_ERR
(
fûp
);

68 
RETURNN
;

70  
fûp
;

71 
	}
}

72 
EXPORT_SYMBOL
(
dz_fûe_›í
);

74 
RVOID
 
	$dz_fûe_˛o£
(
fûe
 *file)

76 
	`fûp_˛o£
(
fûe
, 
NULL
);

77 
	}
}

78 
EXPORT_SYMBOL
(
dz_fûe_˛o£
);

80 
ssize_t
 
	$dz_fûe_ªad
(
fûe
 *fûe, 
__u£r
 *
d©a
, 
size_t
 
size
, 
loff_t
 *
off£t
)

82 
mm_£gmít_t
 
ﬁdfs
;

83 
INT
 
ªt
;

85 
ﬁdfs
 = 
	`gë_fs
();

86 
	`£t_fs
(
	`gë_ds
());

88 
ªt
 = 
	`vfs_ªad
(
fûe
, 
d©a
, 
size
, &
off£t
);

90 
	`£t_fs
(
ﬁdfs
);

91  
ªt
;

92 
	}
}

93 
EXPORT_SYMBOL
(
dz_fûe_ªad
);

95 
ssize_t
 
	$dz_fûe_wrôe
(
fûe
 *fûe, c⁄° 
__u£r
 *
d©a
, 
size_t
 
size
, 
loff_t
 
off£t
)

97 
mm_£gmít_t
 
ﬁdfs
;

98 
INT
 
ªt
;

100 
ﬁdfs
 = 
	`gë_fs
();

101 
	`£t_fs
(
	`gë_ds
());

103 
ªt
 = 
	`vfs_wrôe
(
fûe
, 
d©a
, 
size
, &
off£t
);

105 
	`£t_fs
(
ﬁdfs
);

106  
ªt
;

107 
	}
}

108 
EXPORT_SYMBOL
(
dz_fûe_wrôe
);

110 
RINT
 
	$dz_fûe_sync
(
fûe
 *file)

112  
	`vfs_fsync
(
fûe
, 0);

113 
	}
}

114 
EXPORT_SYMBOL
(
dz_fûe_sync
);

	@infra_engine/infra_engine_globals.c

9 
	~"¥ŸŸy≥s.h
"

12 
SPINLOCK
 
	g¥öt_i‹eque°_lock
;

13 
EXPORT_SYMBOL
(
¥öt_i‹eque°_lock
);

15 
PMD_LOCK
 
	gmd_lock_èbÀ
 = 
NULL
;

16 
EXPORT_SYMBOL
(
md_lock_èbÀ
);

	@infra_engine/infra_engine_hash_murmur3.c

11 
	~"¥ŸŸy≥s.h
"

12 
	~"ö‰a_ígöe_hash_murmur3.h
"

18 #i‡
deföed
(
_MSC_VER
)

20 
	#FORCE_INLINE
 
__f‹˚ölöe


	)

22 
	#BIG_CONSTANT
(
x
Ë(x)

	)

28 
	#FORCE_INLINE
 
	`__©åibuã__
((
Æways_ölöe
))

	)

30 
ölöe
 
uöt32_t
 
	$rŸl32
(
uöt32_t
 
x
, 
öt8_t
 
r
)

32  (
x
 << 
r
) | (x >> (32 -Ñ));

33 
	}
}

35 
ölöe
 
uöt64_t
 
	$rŸl64
(
uöt64_t
 
x
, 
öt8_t
 
r
)

37  (
x
 << 
r
) | (x >> (64 -Ñ));

38 
	}
}

39 
	#ROTL32
(
x
,
y
Ë
	`rŸl32
(x,y)

	)

40 
	#ROTL64
(
x
,
y
Ë
	`rŸl64
(x,y)

	)

41 
	#BIG_CONSTANT
(
x
Ë(x##
LLU
)

	)

51 
uöt32_t
 
	$gëblock_32bô
(c⁄° 
uöt32_t
 * 
p
, 
i
)

53  
p
[
i
];

54 
	}
}

57 
uöt64_t
 
	$gëblock_64bô
(c⁄° 
uöt64_t
 * 
p
, 
i
)

59  
p
[
i
];

60 
	}
}

65 
uöt32_t
 
	$fmix_32bô
(
uöt32_t
 
h
)

67 
h
 ^= h >> 16;

68 
h
 *= 0x85ebca6b;

69 
h
 ^= h >> 13;

70 
h
 *= 0xc2b2ae35;

71 
h
 ^= h >> 16;

73  
h
;

74 
	}
}

77 
uöt64_t
 
	$fmix_64bô
(
uöt64_t
 
k
)

79 
k
 ^= k >> 33;

80 
k
 *
	`BIG_CONSTANT
(0xff51afd7ed558ccd);

81 
k
 ^= k >> 33;

82 
k
 *
	`BIG_CONSTANT
(0xc4ceb9fe1a85ec53);

83 
k
 ^= k >> 33;

85  
k
;

86 
	}
}

89 
	$MurmurHash3_x86_32
(c⁄° *
key
, 
Àn
, 
uöt32_t
 
£ed
, *
out
)

91 c⁄° 
uöt8_t
 *
d©a
 = (c⁄° uöt8_t*)
key
;

92 c⁄° 
nblocks
 = 
Àn
 / 4;

93 
i
 = 0;

94 c⁄° 
uöt8_t
 *
èû
 = 
NULL
;

95 
uöt32_t
 
k1
 = 0;

96 
uöt32_t
 
h1
 = 
£ed
;

98 
uöt32_t
 
c1
 = 0xcc9e2d51;

99 
uöt32_t
 
c2
 = 0x1b873593;

101 c⁄° 
uöt32_t
 * 
blocks
 = (c⁄° uöt32_à*)(
d©a
 + 
nblocks
*4);

103 
i
 = -
nblocks
; i; i++)

105 
uöt32_t
 
k1
 = 
	`gëblock_32bô
(
blocks
,
i
);

107 
k1
 *
c1
;

108 
k1
 = 
	`ROTL32
(k1,15);

109 
k1
 *
c2
;

111 
h1
 ^
k1
;

112 
h1
 = 
	`ROTL32
(h1,13);

113 
h1
 = h1*5+0xe6546b64;

117 
èû
 = (c⁄° 
uöt8_t
*)(
d©a
 + 
nblocks
*4);

118 
k1
 = 0;

120 
Àn
 & 3)

122 3: 
k1
 ^
èû
[2] << 16;

123 2: 
k1
 ^
èû
[1] << 8;

124 1: 
k1
 ^
èû
[0];

125 
k1
 *
c1
; k1 = 
	`ROTL32
(k1,15); k1 *
c2
; 
h1
 ^= k1;

128 
h1
 ^
Àn
;

129 
h1
 = 
	`fmix_32bô
(h1);

130 *(
uöt32_t
*)
out
 = 
h1
;

131 
	}
}

132 
EXPORT_SYMBOL
(
MurmurHash3_x86_32
);

135 
	$MurmurHash3_x86_128
(c⁄° *
key
, c⁄° 
Àn
, 
uöt32_t
 
£ed
,

136 *
out
 )

138 c⁄° 
uöt8_t
 * 
d©a
 = (c⁄° uöt8_t*)
key
;

139 c⁄° 
nblocks
 = 
Àn
 / 16;

140 
i
 = 0;

141 c⁄° 
uöt8_t
 * 
èû
;

142 
uöt32_t
 
h1
 = 
£ed
;

143 
uöt32_t
 
h2
 = 
£ed
;

144 
uöt32_t
 
h3
 = 
£ed
;

145 
uöt32_t
 
h4
 = 
£ed
;

146 
uöt32_t
 
k1
 = 0;

147 
uöt32_t
 
k2
 = 0;

148 
uöt32_t
 
k3
 = 0;

149 
uöt32_t
 
k4
 = 0;

151 
uöt32_t
 
c1
 = 0x239b961b;

152 
uöt32_t
 
c2
 = 0xab0e9789;

153 
uöt32_t
 
c3
 = 0x38b34ae5;

154 
uöt32_t
 
c4
 = 0xa1e38b93;

157 c⁄° 
uöt32_t
 * 
blocks
 = (c⁄° uöt32_à*)(
d©a
 + 
nblocks
*16);

159 
i
 = -
nblocks
; i; i++)

161 
uöt32_t
 
k1
 = 
	`gëblock_32bô
(
blocks
,
i
*4+0);

162 
uöt32_t
 
k2
 = 
	`gëblock_32bô
(
blocks
,
i
*4+1);

163 
uöt32_t
 
k3
 = 
	`gëblock_32bô
(
blocks
,
i
*4+2);

164 
uöt32_t
 
k4
 = 
	`gëblock_32bô
(
blocks
,
i
*4+3);

166 
k1
 *
c1
; k1 = 
	`ROTL32
(k1,15); k1 *
c2
; 
h1
 ^= k1;

167 
h1
 = 
	`ROTL32
(h1,19); h1 +
h2
; h1 = h1*5+0x561ccd1b;

168 
k2
 *
c2
; k2 = 
	`ROTL32
(k2,16); k2 *
c3
; 
h2
 ^= k2;

169 
h2
 = 
	`ROTL32
(h2,17); h2 +
h3
; h2 = h2*5+0x0bcaa747;

170 
k3
 *
c3
; k3 = 
	`ROTL32
(k3,17); k3 *
c4
; 
h3
 ^= k3;

171 
h3
 = 
	`ROTL32
(h3,15); h3 +
h4
; h3 = h3*5+0x96cd1c35;

172 
k4
 *
c4
; k4 = 
	`ROTL32
(k4,18); k4 *
c1
; 
h4
 ^= k4;

173 
h4
 = 
	`ROTL32
(h4,13); h4 +
h1
; h4 = h4*5+0x32ac3b17;

176 
èû
 = (c⁄° 
uöt8_t
*)(
d©a
 + 
nblocks
*16);

178 
k1
 = 0;

179 
k2
 = 0;

180 
k3
 = 0;

181 
k4
 = 0;

183 
Àn
 & 15)

185 15: 
k4
 ^
èû
[14] << 16;

186 14: 
k4
 ^
èû
[13] << 8;

187 13: 
k4
 ^
èû
[12] << 0;

188 
k4
 *
c4
; k4 = 
	`ROTL32
(k4,18); k4 *
c1
; 
h4
 ^= k4;

190 12: 
k3
 ^
èû
[11] << 24;

191 11: 
k3
 ^
èû
[10] << 16;

192 10: 
k3
 ^
èû
[ 9] << 8;

193 9: 
k3
 ^
èû
[ 8] << 0;

194 
k3
 *
c3
; k3 = 
	`ROTL32
(k3,17); k3 *
c4
; 
h3
 ^= k3;

196 8: 
k2
 ^
èû
[ 7] << 24;

197 7: 
k2
 ^
èû
[ 6] << 16;

198 6: 
k2
 ^
èû
[ 5] << 8;

199 5: 
k2
 ^
èû
[ 4] << 0;

200 
k2
 *
c2
; k2 = 
	`ROTL32
(k2,16); k2 *
c3
; 
h2
 ^= k2;

202 4: 
k1
 ^
èû
[ 3] << 24;

203 3: 
k1
 ^
èû
[ 2] << 16;

204 2: 
k1
 ^
èû
[ 1] << 8;

205 1: 
k1
 ^
èû
[ 0] << 0;

206 
k1
 *
c1
; k1 = 
	`ROTL32
(k1,15); k1 *
c2
; 
h1
 ^= k1;

210 
h1
 ^
Àn
; 
h2
 ^Àn; 
h3
 ^Àn; 
h4
 ^=Üen;

212 
h1
 +
h2
; h1 +
h3
; h1 +
h4
;

213 
h2
 +
h1
; 
h3
 +h1; 
h4
 += h1;

215 
h1
 = 
	`fmix_32bô
(h1);

216 
h2
 = 
	`fmix_32bô
(h2);

217 
h3
 = 
	`fmix_32bô
(h3);

218 
h4
 = 
	`fmix_32bô
(h4);

220 
h1
 +
h2
; h1 +
h3
; h1 +
h4
;

221 
h2
 +
h1
; 
h3
 +h1; 
h4
 += h1;

223 ((
uöt32_t
*)
out
)[0] = 
h1
;

224 ((
uöt32_t
*)
out
)[1] = 
h2
;

225 ((
uöt32_t
*)
out
)[2] = 
h3
;

226 ((
uöt32_t
*)
out
)[3] = 
h4
;

227 
	}
}

228 
EXPORT_SYMBOL
(
MurmurHash3_x86_128
);

231 
	$MurmurHash3_x64_128
(c⁄° *
key
, c⁄° 
size_t
 
Àn
, c⁄° 
uöt32_t
 
£ed
,

232 *
out
 )

234 c⁄° 
uöt8_t
 * 
d©a
 = (c⁄° uöt8_t*)
key
;

235 c⁄° 
size_t
 
nblocks
 = 
Àn
 / 16;

236 
i
 = 0;

237 c⁄° 
uöt8_t
 *
èû
 = 
NULL
;

238 
uöt64_t
 
h1
 = 
£ed
;

239 
uöt64_t
 
h2
 = 
£ed
;

240 
uöt64_t
 
k1
 = 0;

241 
uöt64_t
 
k2
 = 0;

243 
uöt64_t
 
c1
 = 
	`BIG_CONSTANT
(0x87c37b91114253d5);

244 
uöt64_t
 
c2
 = 
	`BIG_CONSTANT
(0x4cf5ad432745937f);

246 c⁄° 
uöt64_t
 * 
blocks
 = (c⁄° uöt64_à*)(
d©a
);

248 
i
 = 0; i < 
nblocks
; i++)

250 
uöt64_t
 
k1
 = 
	`gëblock_64bô
(
blocks
,
i
*2+0);

251 
uöt64_t
 
k2
 = 
	`gëblock_64bô
(
blocks
,
i
*2+1);

253 
k1
 *
c1
; k1 = 
	`ROTL64
(k1,31); k1 *
c2
; 
h1
 ^= k1;

255 
h1
 = 
	`ROTL64
(h1,27); h1 +
h2
; h1 = h1*5+0x52dce729;

257 
k2
 *
c2
; k2 = 
	`ROTL64
(k2,33); k2 *
c1
; 
h2
 ^= k2;

259 
h2
 = 
	`ROTL64
(h2,31); h2 +
h1
; h2 = h2*5+0x38495ab5;

263 
èû
 = (c⁄° 
uöt8_t
*)(
d©a
 + 
nblocks
*16);

265 
k1
 = 0;

266 
k2
 = 0;

268 
Àn
 & 15)

270 15: 
k2
 ^(
uöt64_t
)(
èû
[14]) << 48;

271 14: 
k2
 ^(
uöt64_t
)(
èû
[13]) << 40;

272 13: 
k2
 ^(
uöt64_t
)(
èû
[12]) << 32;

273 12: 
k2
 ^(
uöt64_t
)(
èû
[11]) << 24;

274 11: 
k2
 ^(
uöt64_t
)(
èû
[10]) << 16;

275 10: 
k2
 ^(
uöt64_t
)(
èû
[ 9]) << 8;

276 9: 
k2
 ^(
uöt64_t
)(
èû
[ 8]) << 0;

277 
k2
 *
c2
; k2 = 
	`ROTL64
(k2,33); k2 *
c1
; 
h2
 ^= k2;

279 8: 
k1
 ^(
uöt64_t
)(
èû
[ 7]) << 56;

280 7: 
k1
 ^(
uöt64_t
)(
èû
[ 6]) << 48;

281 6: 
k1
 ^(
uöt64_t
)(
èû
[ 5]) << 40;

282 5: 
k1
 ^(
uöt64_t
)(
èû
[ 4]) << 32;

283 4: 
k1
 ^(
uöt64_t
)(
èû
[ 3]) << 24;

284 3: 
k1
 ^(
uöt64_t
)(
èû
[ 2]) << 16;

285 2: 
k1
 ^(
uöt64_t
)(
èû
[ 1]) << 8;

286 1: 
k1
 ^(
uöt64_t
)(
èû
[ 0]) << 0;

287 
k1
 *
c1
; k1 = 
	`ROTL64
(k1,31); k1 *
c2
; 
h1
 ^= k1;

291 
h1
 ^
Àn
; 
h2
 ^=Üen;

293 
h1
 +
h2
;

294 
h2
 +
h1
;

296 
h1
 = 
	`fmix_64bô
(h1);

297 
h2
 = 
	`fmix_64bô
(h2);

299 
h1
 +
h2
;

300 
h2
 +
h1
;

302 ((
uöt64_t
*)
out
)[0] = 
h1
;

303 ((
uöt64_t
*)
out
)[1] = 
h2
;

304 
	}
}

305 
EXPORT_SYMBOL
(
MurmurHash3_x64_128
);

	@infra_engine/infra_engine_interval.c

9 
	~"¥ŸŸy≥s.h
"

11 
PDZ_INTERVAL_NODE
 
	gINTERVAL_TREE_ROOT
 = 
NULL
;

12 
PDZ_INTERVAL_NODE
 
	gINTERVAL_TREE_HEAD
 = 
NULL
;

13 
PDZ_INTERVAL_NODE
 
	gOVERLAP_NODE
 = 
NULL
;

14 
BOOL
 
	gINTERVAL_OVERLAP_FOUND
 = 
FALSE
;

19 
PDZ_INTERVAL_NODE
 
dz_Æloc_öãrvÆ_node
(
VOID
);

20 
RVOID
 
dz_‰ì_öãrvÆ_node
(
PDZ_INTERVAL_NODE
);

21 
RVOID
 
dz_¥öt_öãrvÆ_åì_node
(
PDZ_INTERVAL_NODE
 
node
, 
BOOL
);

22 
RVOID
 
dz_¥öt_öãrvÆ
(
PDZ_INTERVAL
 
öãrvÆ
);

23 
RVOID
 
dz_¥öt_öãrvÆ_åì_Àvñ
(
PDZ_INTERVAL_NODE
 
roŸ
, 
INT
 
des
, INT 
cuº
);

24 
PDZ_INTERVAL_NODE
 
dz_föd_möimum_öãrvÆ
(PDZ_INTERVAL_NODE 
roŸ
);

25 
PDZ_INTERVAL_NODE
 
dz_dñëe_öãrvÆ
(PDZ_INTERVAL_NODE 
roŸ
, 
PDZ_INTERVAL
 
öãrvÆ
);

30 
RVOID
 
dz_po°‹dî_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
node
);

31 
RVOID
 
dz_¥e‹dî_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
node
);

32 
RVOID
 
dz_ö‹dî_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
node
);

33 
BOOL
 
dz_check_ovîœp
(
PDZ_INTERVAL
 
öãrvÆ
, PDZ_INTERVAL 
öãrvÆ2
);

34 
PDZ_INTERVAL_NODE
 
dz_ö£π_öãrvÆ
(PDZ_INTERVAL_NODE 
roŸ
, 
PDZ_INTERVAL
 
öãrvÆ
);

41 
RVOID
 
	$dz_¥öt_öãrvÆ_åì_node
(
PDZ_INTERVAL_NODE
 
node
, 
BOOL
 
Êag
)

43 i‡(!
node
) {

44 
	`LOGTGT
("Node Print: Interval Node is NULL\n");

49 i‡(
Êag
 =
TRUE
) {

50 
	`LOGTGT
("[-----------INTERVAL NODE----------]\n");

51 
	`LOGTGT
("[ ]\n");

52 
	`LOGTGT
("[ NODE = %p]\n", 
node
);

53 
	`LOGTGT
("[ NODE->öãrvÆ = [%Œò- %Œi]]\n", 
node
->
öãrvÆ
.
low
,Çode->öãrvÆ.
high
);

54 
	`LOGTGT
("[ NODE->max = %Œi]\n", 
node
->
max
);

55 
	`LOGTGT
("[ NODE->À· = %p]\n", 
node
->
À·
);

56 
	`LOGTGT
("[ NODE->righà = %p]\n", 
node
->
right
);

57 
	`LOGTGT
("[ NODE->∑ª¡ = %p]\n", 
node
->
∑ª¡
);

58 
	`LOGTGT
("[----------------------------------]\n");

62 
	`LOGTGT
("[-----------INTERVAL------------]\n");

63 
	`LOGTGT
("[ NODE->öãrvÆ = [%Œò- %Œi]]\n", 
node
->
öãrvÆ
.
low
,Çode->öãrvÆ.
high
);

64 
	`LOGTGT
("[-------------------------------]\n");

68 
	}
}

70 
RVOID
 
	$dz_¥öt_öãrvÆ
(
PDZ_INTERVAL
 
öãrvÆ
)

72 
	`LOGTGT
("INTERVAL : [%Œò- %Œi]", 
öãrvÆ
->
low
, i¡îvÆ->
high
);

73 
	}
}

75 
PDZ_INTERVAL_NODE
 
	$dz_Æloc_öãrvÆ_node
(
VOID
)

77 
PDZ_INTERVAL_NODE
 
node
 = 
	`dz_kmÆloc
((
DZ_INTERVAL_NODE
), 
GFP_KERNEL
);

78 i‡(!
node
) {

79 
	`LOGTGTE
("%s","Error, UnableÅoállocate memory for intervalÅreeÇode\n");

80 
RETURNN
;

82 
	`MEMSET
(
node
);

83  
node
;

84 
	}
}

86 
RVOID
 
	$dz_‰ì_öãrvÆ_node
(
PDZ_INTERVAL_NODE
 
node
)

88 i‡(!
node
) {

89 
	`LOGTGTE
("%s","Error, Freeingánálready freedup intervalÇode\n");

92 
	`dz_k‰ì
(
node
, (
DZ_INTERVAL_NODE
));

94 
	}
}

99 
RVOID
 
	$dz_po°‹dî_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
node
)

104 i‡(
node
->
À·
) {

105 
	`dz_po°‹dî_öãrvÆ_åì
(
node
->
À·
);

108 i‡(
node
->
right
) {

109 
	`dz_po°‹dî_öãrvÆ_åì
(
node
->
right
);

111 
	}
}

113 
RVOID
 
	$dz_¥e‹dî_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
node
)

117 i‡(
node
->
À·
) {

118 
	`dz_¥e‹dî_öãrvÆ_åì
(
node
->
À·
);

121 i‡(
node
->
right
) {

122 
	`dz_¥e‹dî_öãrvÆ_åì
(
node
->
right
);

124 
	}
}

126 
RVOID
 
	$dz_ö‹dî_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
node
)

128 i‡(
node
->
À·
) {

129 
	`dz_ö‹dî_öãrvÆ_åì
(
node
->
À·
);

131 
	`dz_¥öt_öãrvÆ_åì_node
(
node
, 
TRUE
);

133 i‡(
node
->
right
) {

134 
	`dz_ö‹dî_öãrvÆ_åì
(
node
->
right
);

136 
	}
}

138 
BOOL
 
	$dz_check_ovîœp
(
PDZ_INTERVAL
 
öãrvÆ1
, PDZ_INTERVAL 
öãrvÆ2
)

140 i‡(
öãrvÆ1
->
low
 <
öãrvÆ2
->
high
 && interval2->low <= interval1->high) {

141 
	`LOGTGT
("OVERLAP FOUND: [%lli %lli] [%lli %lli]\n",

142 
öãrvÆ1
->
low
, i¡îvÆ1->
high
,

143 
öãrvÆ2
->
low
, i¡îvÆ2->
high
);

145 
INTERVAL_OVERLAP_FOUND
 = 
TRUE
;

146 
OVERLAP_NODE
 = (
PDZ_INTERVAL_NODE
)
öãrvÆ1
;

147 
	`dz_¥öt_öãrvÆ_åì_node
(
OVERLAP_NODE
, 
TRUE
);

148  
TRUE
;

150  
FALSE
;

152 
	}
}

154 
PDZ_INTERVAL_NODE
 
	$dz_föd_möimum_öãrvÆ
(
PDZ_INTERVAL_NODE
 
roŸ
)

157 
roŸ
->
À·
 !
NULL
)

158 
roŸ
 =ÑoŸ->
À·
;

160  
roŸ
;

161 
	}
}

163 
UINT
 
	$dz_height_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
roŸ
)

165 
UINT
 
lheight
 = 0;

166 
UINT
 
rheight
 = 0;

168 i‡(
roŸ
) {

169 
lheight
 = 
	`dz_height_öãrvÆ_åì
(
roŸ
->
À·
);

170 
rheight
 = 
	`dz_height_öãrvÆ_åì
(
roŸ
->
right
);

172 i‡(
lheight
 > 
rheight
) {

173  (
lheight
 + 1);

175  (
rheight
 + 1);

180 
	}
}

182 
RVOID
 
	$dz_¥öt_öãrvÆ_åì_Àvñ
(
PDZ_INTERVAL_NODE
 
roŸ
, 
INT
 
des
, INT 
cuº
)

185 i‡(
roŸ
) {

186 i‡(
des
 =
cuº
) {

187 
	`dz_¥öt_öãrvÆ
((
PDZ_INTERVAL
)
roŸ
);

190 
	`dz_¥öt_öãrvÆ_åì_Àvñ
(
roŸ
->
À·
, 
des
, 
cuº
 + 1);

191 
	`dz_¥öt_öãrvÆ_åì_Àvñ
(
roŸ
->
right
, 
des
, 
cuº
 + 1);

197 
des
 = 
cuº
;

199 
	}
}

201 
RVOID
 
	$dz_¥öt_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
roŸ
)

203 
h
, 
i
;

204 
h
 = 
	`dz_height_öãrvÆ_åì
(
roŸ
);

205 
	`LOGTGT
("HEIGHT : %d\n", 
h
);

206 
i
 = 0; i < 
h
; i++) {

207 
	`LOGTGT
("LEVEL %d :", 
i
);

208 
	`dz_¥öt_öãrvÆ_åì_Àvñ
(
roŸ
, 
i
, 0);

209 
	`LOGTGT
("\n");

211 
	}
}

219 
RVOID
 
	$dz_dñëe_cuºít_öãrvÆ_node
(
PDZ_INTERVAL_NODE
 
node
)

222 
PDZ_INTERVAL_NODE
 
ãmp
 = 
NULL
;

223 
PDZ_INTERVAL_NODE
 
∑ª¡
 = 
NULL
;

224 i‡(!
node
) {

225 
	`LOGTGT
 ("Node is NULL\n");

228 i‡(!
node
->
∑ª¡
) {

229 
	`LOGTGT
 ("Node Parent is NULL\n");

233 
∑ª¡
 = 
node
->parent;

237 i‡(
∑ª¡
->
À·
 =
node
) {

238 i‡(
node
->
À·
 =
NULL
 &&Çode->
right
 != NULL) {

239 
ãmp
 = 
node
->
right
;

240 
	`dz_‰ì_öãrvÆ_node
(
node
);

241 
∑ª¡
->
À·
 = 
ãmp
;

242 
ãmp
->
∑ª¡
 =Öarent;

243 } i‡(
node
->
right
 =
NULL
 &&Çode->
À·
 != NULL) {

244 
ãmp
 = 
node
->
À·
;

245 
	`dz_‰ì_öãrvÆ_node
(
node
);

246 
∑ª¡
->
À·
 = 
ãmp
;

247 
ãmp
->
∑ª¡
 =Öarent;

250 
ãmp
 = 
	`dz_föd_möimum_öãrvÆ
(
node
->
right
);

251 
node
->
öãrvÆ
 = 
ãmp
->interval;

252 
node
->
right
 = 
	`dz_dñëe_öãrvÆ
“ode->right, &(
ãmp
->
öãrvÆ
));

258 i‡(
∑ª¡
->
right
 =
node
) {

259 i‡(
node
->
À·
 =
NULL
 &&Çode->
right
 != NULL) {

260 
ãmp
 = 
node
->
right
;

261 
	`dz_‰ì_öãrvÆ_node
(
node
);

262 
∑ª¡
->
right
 = 
ãmp
;

263 
ãmp
->
∑ª¡
 =Öarent;

264 } i‡(
node
->
right
 =
NULL
 &&Çode->
À·
 != NULL) {

265 
ãmp
 = 
node
->
À·
;

266 
	`dz_‰ì_öãrvÆ_node
(
node
);

267 
∑ª¡
->
right
 = 
ãmp
;

268 
ãmp
->
∑ª¡
 =Öarent;

271 
ãmp
 = 
	`dz_föd_möimum_öãrvÆ
(
node
->
right
);

272 
node
->
öãrvÆ
 = 
ãmp
->interval;

273 
node
->
right
 = 
	`dz_dñëe_öãrvÆ
“ode->right, &(
ãmp
->
öãrvÆ
));

278 
	}
}

280 
PDZ_INTERVAL_NODE
 
	$dz_dñëe_öãrvÆ
(
PDZ_INTERVAL_NODE
 
roŸ
, 
PDZ_INTERVAL
 
öãrvÆ
)

282 i‡(
roŸ
 =
NULL
) {

283  
NULL
;

286 i‡(
öãrvÆ
->
low
 < ((
PDZ_INTERVAL
)
roŸ
)->low) {

287 
roŸ
->
À·
 = 
	`dz_dñëe_öãrvÆ
‘oŸ->À·, 
öãrvÆ
);

289 } i‡(
öãrvÆ
->
low
 > ((
PDZ_INTERVAL
)
roŸ
)->low) {

290 
roŸ
->
right
 = 
	`dz_dñëe_öãrvÆ
‘oŸ->right, 
öãrvÆ
);

292 } i‡((
öãrvÆ
->
low
 =((
PDZ_INTERVAL
)
roŸ
)->lowË&& (öãrvÆ->
high
 == ((PDZ_INTERVAL)root)->high)) {

293 
PDZ_INTERVAL_NODE
 
ãmp
 = 
NULL
;

294 i‡(
roŸ
->
À·
 =
NULL
 &&ÑoŸ->
right
 == NULL) {

295 
	`dz_‰ì_öãrvÆ_node
(
roŸ
);

296 
roŸ
 = 
NULL
;

298 } i‡(
roŸ
->
À·
 =
NULL
) {

299 
ãmp
 = 
roŸ
->
right
;

300 
ãmp
->
∑ª¡
 = 
roŸ
->parent;

301 
	`dz_‰ì_öãrvÆ_node
(
roŸ
);

302  
ãmp
;

304 } i‡(
roŸ
->
right
 =
NULL
) {

305 
ãmp
 = 
roŸ
->
À·
;

306 
ãmp
->
∑ª¡
 = 
roŸ
->parent;

307 
	`dz_‰ì_öãrvÆ_node
(
roŸ
);

308  
ãmp
;

315 
ãmp
 = 
	`dz_föd_möimum_öãrvÆ
(
roŸ
->
right
);

316 
ãmp
->
∑ª¡
 = 
roŸ
->parent;

317 
roŸ
->
öãrvÆ
 = 
ãmp
->interval;

318 
roŸ
->
right
 = 
	`dz_dñëe_öãrvÆ
‘oŸ->right, &(
ãmp
->
öãrvÆ
));

322 
roŸ
->
right
 = 
	`dz_dñëe_öãrvÆ
‘oŸ->right, 
öãrvÆ
);

325  
roŸ
;

326 
	}
}

328 
PDZ_INTERVAL_NODE
 
	$dz_ö£π_öãrvÆ
(
PDZ_INTERVAL_NODE
 
roŸ
, 
PDZ_INTERVAL
 
öãrvÆ
)

330 i‡(
INTERVAL_OVERLAP_FOUND
 =
TRUE
) {

331  
roŸ
;

334 i‡(
roŸ
 =
NULL
) {

335  (
PDZ_INTERVAL_NODE
)
öãrvÆ
;

338 
	`dz_check_ovîœp
((
PDZ_INTERVAL
)
roŸ
, 
öãrvÆ
);

340 i‡(
öãrvÆ
->
low
 < ((
PDZ_INTERVAL
)
roŸ
)->low) {

341 
roŸ
->
À·
 = 
	`dz_ö£π_öãrvÆ
‘oŸ->À·, 
öãrvÆ
);

342 i‡(
roŸ
->
À·
) {

343 
roŸ
->
À·
->
∑ª¡
 =Ñoot;

346 
roŸ
->
right
 = 
	`dz_ö£π_öãrvÆ
‘oŸ->right, 
öãrvÆ
);

347 i‡(
roŸ
->
right
) {

348 
roŸ
->
right
->
∑ª¡
 =Ñoot;

352 i‡(
roŸ
->
max
 < 
öãrvÆ
->
high
) {

353 
roŸ
->
max
 = 
öãrvÆ
->
high
;

356  
roŸ
;

357 
	}
}

359 
LBA
 
	$dz_födmax_öãrvÆ_åì
(
LBA
 
a
, LBA 
b
, LBA 
c
)

362  
a
>
b
?◊>
c
?a:c):(b>c?b:c);

364 
RETURNS
;

365 
	}
}

367 
•ölock_t
 
	gdz_•ölock
;

368 
rwlock_t
 
	gdz_rwlock
;

369 
rw_£m≠h‹e
 
	gdz_rw£m≠h‹e
;

370 
£m≠h‹e
 
	gdz_£m≠h‹e
;

371 
VOID
 
	$dz_£m≠h‹e_ã°
(
VOID
)

373 
	`£ma_öô
(&
dz_£m≠h‹e
, 1);

377 
	`LOG
("Inôü»Sem≠h‹ê cou¡ = %u, cou¡ = 0x%x\n", 
dz_£m≠h‹e
.
cou¡
, dz_semaphore.count);

378 
	`down
(&
dz_£m≠h‹e
);

379 
	`LOG
("A·î down(ËSem≠h‹ê cou¡ = %u, cou¡ = 0x%x\n", 
dz_£m≠h‹e
.
cou¡
, dz_semaphore.count);

380 
	`up
(&
dz_£m≠h‹e
);

381 
	`LOG
("A·î up(ËSem≠h‹ê cou¡ = %u, cou¡ = 0x%x\n", 
dz_£m≠h‹e
.
cou¡
, dz_semaphore.count);

384 
	}
}

386 
VOID
 
	$dz_•ö_lock_ã°
(
VOID
)

388 
	`•ö_lock_öô
(&
dz_•ölock
);

389 
	`LOG
("SPINLOCK =%u, = 0x%x\n", (
UINT
)
dz_•ölock
.
æock
.
øw_lock
.
hód_èû
, (UINT)dz_spinlock.rlock.raw_lock.head_tail);

391 
	}
}

393 
VOID
 
	$dz_ªad_wrôe_•ö_lock_ã°
(
VOID
)

395 
	`rwlock_öô
(&
dz_rwlock
);

396 
	`LOG
("Inôü»RWÑaw_lock.lock = %Œd,Ñaw_lock.lock = 0x%Œx\n", 
dz_rwlock
.
øw_lock
.
lock
, dz_rwlock.raw_lock.lock);

397 
	`LOG
("Inôü»RWÑaw_lock.ªad = %u,Ñaw_lock.ªad = 0x%x\n", 
dz_rwlock
.
øw_lock
.
ªad
, dz_rwlock.raw_lock.read);

398 
	`LOG
("Inôü»RWÑaw_lock.wrôê = %d,Ñaw_lock.wrôê = 0x%x\n", 
dz_rwlock
.
øw_lock
.
wrôe
, dz_rwlock.raw_lock.write);

400 
	`ªad_lock
(&
dz_rwlock
);

401 
	`LOG
("A·î READ_LOCK RWÑaw_lock.lock = %Œd,Ñaw_lock.lock = 0x%Œx\n", 
dz_rwlock
.
øw_lock
.
lock
, dz_rwlock.raw_lock.lock);

402 
	`LOG
("A·î READ_LOCK RWÑaw_lock.ªad = %u,Ñaw_lock.ªad = 0x%x\n", 
dz_rwlock
.
øw_lock
.
ªad
, dz_rwlock.raw_lock.read);

403 
	`LOG
("A·î READ_LOCK RWÑaw_lock.wrôê = %d,Ñaw_lock.wrôê = 0x%x\n", 
dz_rwlock
.
øw_lock
.
wrôe
, dz_rwlock.raw_lock.write);

405 
	`ªad_u∆ock
(&
dz_rwlock
);

406 
	`LOG
("A·î READ_UNLOCK RWÑaw_lock.lock = %Œd,Ñaw_lock.lock = 0x%Œx\n", 
dz_rwlock
.
øw_lock
.
lock
, dz_rwlock.raw_lock.lock);

407 
	`LOG
("A·î READ_UNLOCK RWÑaw_lock.ªad = %u,Ñaw_lock.ªad = 0x%x\n", 
dz_rwlock
.
øw_lock
.
ªad
, dz_rwlock.raw_lock.read);

408 
	`LOG
("A·î READ_UNLOCK RWÑaw_lock.wrôê = %d,Ñaw_lock.wrôê = 0x%x\n", 
dz_rwlock
.
øw_lock
.
wrôe
, dz_rwlock.raw_lock.write);

409 
	`wrôe_lock
(&
dz_rwlock
);

410 
	`LOG
("A·î WRITE_LOCK RWÑaw_lock.lock = %Œd,Ñaw_lock.lock = 0x%Œx\n", 
dz_rwlock
.
øw_lock
.
lock
, dz_rwlock.raw_lock.lock);

411 
	`LOG
("A·î WRITE_LOCK RWÑaw_lock.ªad = %u,Ñaw_lock.ªad = 0x%x\n", 
dz_rwlock
.
øw_lock
.
ªad
, dz_rwlock.raw_lock.read);

412 
	`LOG
("A·î WRITE_LOCK RWÑaw_lock.wrôê = %d,Ñaw_lock.wrôê = 0x%x\n", 
dz_rwlock
.
øw_lock
.
wrôe
, dz_rwlock.raw_lock.write);

413 
	`wrôe_u∆ock
(&
dz_rwlock
);

414 
	`LOG
("A·î WRITE_UNLOCK RWÑaw_lock.lock = %Œd,Ñaw_lock.lock = 0x%Œx\n", 
dz_rwlock
.
øw_lock
.
lock
, dz_rwlock.raw_lock.lock);

415 
	`LOG
("A·î WRITE_UNLOCK RWÑaw_lock.ªad = %u,Ñaw_lock.ªad = 0x%x\n", 
dz_rwlock
.
øw_lock
.
ªad
, dz_rwlock.raw_lock.read);

416 
	`LOG
("A·î WRITE_UNLOCK RWÑaw_lock.wrôê%d,Ñaw_lock.wrôê = 0x%x\n", 
dz_rwlock
.
øw_lock
.
wrôe
, dz_rwlock.raw_lock.write);

417 
	}
}

419 
VOID
 
	$dz_ªad_wrôe_£m≠h‹e_ã°
(
VOID
)

421 
	`öô_rw£m
(&
dz_rw£m≠h‹e
);

422 
	`LOG
("RWSEM_WAITING_BIAS = %ld, 0x%lx\n",
RWSEM_WAITING_BIAS
,RWSEM_WAITING_BIAS);

423 
	`LOG
("RWSEM_ACTIVE_READ_BIAS = %ld, 0x%lx\n",
RWSEM_ACTIVE_READ_BIAS
,RWSEM_ACTIVE_READ_BIAS);

424 
	`LOG
("RWSEM_ACTIVE_WRITE_BIAS = %ld, 0x%lx\n",
RWSEM_ACTIVE_WRITE_BIAS
,RWSEM_ACTIVE_WRITE_BIAS);

425 
	`LOG
("Inôü»RWSem≠h‹ê cou¡ = %ld, cou¡ = 0x%lx\n", 
dz_rw£m≠h‹e
.
cou¡
, dz_rwsemaphore.count);

427 
	`down_ªad
(&
dz_rw£m≠h‹e
);

428 
	`LOG
("A·î down_ªad RWSem≠h‹ê cou¡ = %ld, cou¡ = 0x%lx\n", 
dz_rw£m≠h‹e
.
cou¡
, dz_rwsemaphore.count);

429 
	`up_ªad
(&
dz_rw£m≠h‹e
);

430 
	`LOG
("A·î up_ªad RWSem≠h‹ê cou¡ = %ld, cou¡ = 0x%lx\n", 
dz_rw£m≠h‹e
.
cou¡
, dz_rwsemaphore.count);

432 
	`down_wrôe
(&
dz_rw£m≠h‹e
);

433 
	`LOG
("A·î down_wrôêRWSem≠h‹ê cou¡ = %ld, cou¡ = 0x%lx\n", 
dz_rw£m≠h‹e
.
cou¡
, dz_rwsemaphore.count);

434 
	`up_wrôe
(&
dz_rw£m≠h‹e
);

435 
	`LOG
("A·î up_wrôê RWSem≠h‹ê cou¡ = %ld, cou¡ = 0x%lx\n", 
dz_rw£m≠h‹e
.
cou¡
, dz_rwsemaphore.count);

437 
	}
}

440 
VOID
 
	$dz_lock_ã°
(
VOID
)

457 
	`LOG
("CONFIG_NR_CPUS = %d, 0x%x\n", 
CONFIG_NR_CPUS
, CONFIG_NR_CPUS);

458 
	`dz_•ö_lock_ã°
();

459 
	`dz_ªad_wrôe_•ö_lock_ã°
();

460 
	`dz_£m≠h‹e_ã°
();

461 
	`dz_ªad_wrôe_£m≠h‹e_ã°
();

463 
	}
}

465 
PDZ_BINARY_NODE
 
	$dz_bö¨y_åì_ö£π
(
PDZ_BINARY_NODE
 
roŸ
, 
INT
 
d©a
)

467 i‡(
roŸ
 =
NULL
) {

468 
roŸ
 = 
	`DZ_ALLOC_BINARY_NODE
();

469 
	`MEMSET
(
roŸ
);

470 
roŸ
->
d©a
 = data;

471  
roŸ
;

474 i‡(
d©a
 < 
roŸ
->data) {

475 
roŸ
->
À·
 = 
	`dz_bö¨y_åì_ö£π
‘oŸ->À·, 
d©a
);

477 
roŸ
->
right
 = 
	`dz_bö¨y_åì_ö£π
‘oŸ->right, 
d©a
);

480  
roŸ
;

481 
	}
}

483 
PDZ_BINARY_NODE
 
	$dz_hóp_max_ö£π
(
PDZ_BINARY_NODE
 
roŸ
, 
INT
 
d©a
)

485 i‡(
roŸ
 =
NULL
) {

486 
roŸ
 = 
	`DZ_ALLOC_BINARY_NODE
();

487 
	`MEMSET
(
roŸ
);

488 
roŸ
->
d©a
 = data;

489  
roŸ
;

492 i‡(
d©a
 < 
roŸ
->data) {

493 
roŸ
->
À·
 = 
	`dz_bö¨y_åì_ö£π
‘oŸ->À·, 
d©a
);

495 
roŸ
->
right
 = 
	`dz_bö¨y_åì_ö£π
‘oŸ->right, 
d©a
);

498 
d©a
 = 
roŸ
->data;

499 
roŸ
->
d©a
 =ÑoŸ->
right
->data;

500 
roŸ
->
right
->
d©a
 = data;

504  
roŸ
;

505 
	}
}

508 
BOOL
 
	$dz_¥o˚ss_öãrvÆ_åì
(
LBA
 
off£t
, 
UINT
 
iosize
)

510 
PDZ_INTERVAL_NODE
 
node
 = 
	`dz_Æloc_öãrvÆ_node
();

512 
	`dz_lock_ã°
();

514 i‡(
INTERVAL_TREE_ROOT
 =
NULL
 ) {

515 
INTERVAL_TREE_ROOT
 = 
node
;

516 
node
->
öãrvÆ
.
low
 = 
off£t
;

517 
node
->
öãrvÆ
.
high
 =Çode->öãrvÆ.
low
 + 
iosize
 - 1;

518 
node
->
max
 =Çode->
öãrvÆ
.
high
;

519 
	`dz_¥öt_öãrvÆ
((
PDZ_INTERVAL
)
node
);

520 
	`LOGTGT
("\n");

521 
RETURNT
;

523 
node
->
öãrvÆ
.
low
 = 
off£t
;

524 
node
->
öãrvÆ
.
high
 =Çode->öãrvÆ.
low
 + 
iosize
 - 1;

525 
node
->
max
 =Çode->
öãrvÆ
.
high
;

529 
	`dz_¥öt_öãrvÆ
((
PDZ_INTERVAL
)
node
);

530 
	`LOGTGT
("\n");

532 
INTERVAL_TREE_ROOT
 = 
	`dz_ö£π_öãrvÆ
(INTERVAL_TREE_ROOT, (
PDZ_INTERVAL
)
node
);

534 i‡(!
INTERVAL_TREE_ROOT
) {

535 
RETURNFA
;

538 i‡(
INTERVAL_OVERLAP_FOUND
) {

539 
	`dz_‰ì_öãrvÆ_node
(
node
);

542 
	`LOGTGT
("INTERVAL TREE -> IN-ORDER TRAVERSAL\n");

543 
	`dz_ö‹dî_öãrvÆ_åì
(
INTERVAL_TREE_ROOT
);

545 
	`LOGTGT
("TREE ROOT\n");

546 
	`dz_¥öt_öãrvÆ_åì_node
(
INTERVAL_TREE_ROOT
, 
TRUE
);

548 
	`LOGTGT
("INTERVAL TREE -> PRE-ORDER TRAVERSAL\n");

549 
	`dz_¥e‹dî_öãrvÆ_åì
(
INTERVAL_TREE_ROOT
);

551 
	`LOGTGT
("INTERVAL TREE -> POST-ORDER TRAVERSAL\n");

552 
	`dz_po°‹dî_öãrvÆ_åì
(
INTERVAL_TREE_ROOT
);

554 
	`LOGTGT
("INTERVAL TREE -> LEVEL-ORDER TRAVERSAL\n");

555 
	`dz_¥öt_öãrvÆ_åì
(
INTERVAL_TREE_ROOT
);

557 i‡(
INTERVAL_OVERLAP_FOUND
) {

558 
	`LOGTGT
("DELETING OVERLAP NODE\n");

559 
	`dz_dñëe_cuºít_öãrvÆ_node
(
OVERLAP_NODE
);

560 
	`dz_¥öt_öãrvÆ_åì
(
INTERVAL_TREE_ROOT
);

561 
	`dz_ö‹dî_öãrvÆ_åì
(
INTERVAL_TREE_ROOT
);

563 
RETURNT
;

564 
	}
}

566 
EXPORT_SYMBOL
(
dz_¥o˚ss_öãrvÆ_åì
);

	@infra_engine/infra_engine_iorequest.c

9 
	~"¥ŸŸy≥s.h
"

11 
PPBA_BLOCK
 
pba_èbÀ
;

12 
PHASH_BLOCK
 
hash_èbÀ
;

13 
PLBA_BLOCK
 
lba_èbÀ
;

14 
CHAR
 
sysfs_avm_gë_èrgë_«me
[
DZ_SYSFS_PAGE_SIZE
];

15 
SIZE
 
dz_pba_∑ge_mempoﬁ_cou¡
;

16 
U64
 
lba_èbÀ_size
;

17 
U64
 
pba_èbÀ_size
;

18 
U64
 
hash_èbÀ_size
;

19 
BITMAP
 
pba_bôm≠
;

20 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

21 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

22 
SPINLOCK
 
¥öt_i‹eque°_lock
;

24 
RVOID
 
	$dz_öô_chûd_bio
(
PBIO
 
∑ª¡_bio
, PBIO 
chûd
, 
SECTOR
 
£˘‹
, 
BIO_CALLBACK
 
d⁄e
, 
PVOID
 
¥iv©e
)

26 #ifde‡
DZ_KERNEL_VERSION_4


27 
chûd
->
bi_disk
 = 
∑ª¡_bio
->bi_disk;

28 
	`DZ_BIO_SET_SECTOR
(
chûd
, 
£˘‹
);

29 
chûd
->
bi_›f
 = 
∑ª¡_bio
->bi_opf;

32 
	`DZ_BIO_SET_ZIDX
(
chûd
);

34 
chûd
->
bi_íd_io
 = 
d⁄e
;

35 
chûd
->
bi_√xt
 = 
NULL
;

37 
chûd
->
bi_¥iv©e
 = 
¥iv©e
;

38 
	}
}

39 
EXPORT_SYMBOL
(
dz_öô_chûd_bio
);

41 
RVOID
 
	$dz_q_chûd_i‹eque°_to_∑ª¡_q
(
PDZIO
 
∑ª¡_i‹eque°
, PDZIO 
chûd_i‹eque°
)

44 
	`li°_add_èû
(&
chûd_i‹eque°
->
i‹_ioq
, &
∑ª¡_i‹eque°
->
i‹_ioq_hód_loˇl
);

45 
	}
}

46 
EXPORT_SYMBOL
(
dz_q_chûd_i‹eque°_to_∑ª¡_q
);

48 
RVOID
 
	$dz_mîge_∑ª¡_loˇl_q_to_thªadpoﬁ_q
(
DZ_THREAD_POOL
 *
poﬁ
, 
PIOREQUEST
 
∑ª¡_i‹eque°
)

51 i‡(
poﬁ
->
ioq_›í
) {

55 
	`©omic_add
(
	`©omic_ªad
(&
∑ª¡_i‹eque°
->
i‹_chûd_˙t
), &
poﬁ
->
ioq_num_ios
);

59 
	`•ö_lock
(&
poﬁ
->
ioq_lock
);

61 
	`li°_•li˚_èû
(&
∑ª¡_i‹eque°
->
i‹_ioq_hód_loˇl
, &
poﬁ
->
ioq_hód
);

62 
	`•ö_u∆ock
(&
poﬁ
->
ioq_lock
);

63 
	`com∂ëe
(&
poﬁ
->
ioq_addôi⁄
);

65 
	`LOG
("IO Reque° Addôi⁄ i†dißbÀd i¿poﬁ %s\n", 
poﬁ
->
«me
);

67 
	}
}

68 
EXPORT_SYMBOL
(
dz_mîge_∑ª¡_loˇl_q_to_thªadpoﬁ_q
);

70 
UINT
 
	$dz_out°™dög_i‹eque°s
(
DZ_THREAD_POOL
 *
poﬁ
)

72  
	`©omic_ªad
(&
poﬁ
->
ioq_num_ios
);

73 
	}
}

75 
PDZIO
 
	$dz_dq_i‹eque°
(
DZ_THREAD_POOL
 *
poﬁ
)

77 
PDZIO
 
i‹eque°
 = 
NULL
;

78 
	`•ö_lock
(&
poﬁ
->
ioq_lock
);

79 i‡(
	`li°_em±y
(&
poﬁ
->
ioq_hód
)) {

82 #ifde‡
DZ_KERNEL_VERSION_4


83 
	`öô_com∂ëi⁄
(&
poﬁ
->
ioq_addôi⁄
);

85 
	`INIT_COMPLETION
(
poﬁ
->
ioq_addôi⁄
);

87 
	`•ö_u∆ock
(&
poﬁ
->
ioq_lock
);

88 
out
;

90 
i‹eque°
 = 
	`li°_fú°_íåy
(&
poﬁ
->
ioq_hód
, 
dz_i‹eque°_s
, 
i‹_ioq
);

91 
	`li°_dñ
(&
i‹eque°
->
i‹_ioq
);

93 
	`•ö_u∆ock
(&
poﬁ
->
ioq_lock
);

94 
out
:

95  
i‹eque°
;

96 
	}
}

99 
RVOID
 
	$dz_q_i‹eque°_li°
(
DZ_THREAD_POOL
 *
poﬁ
, 
li°_hód
 *
√wli°
, 
UINT
 
cou¡
)

101 i‡(
poﬁ
->
ioq_›í
) {

103 
	`©omic_add
(
cou¡
, &
poﬁ
->
ioq_num_ios
);

104 
	`•ö_lock
(&
poﬁ
->
ioq_lock
);

105 
	`li°_•li˚_èû
(
√wli°
, &
poﬁ
->
ioq_hód
);

106 
	`•ö_u∆ock
(&
poﬁ
->
ioq_lock
);

107 
	`com∂ëe
(&
poﬁ
->
ioq_addôi⁄
);

109 
	`LOG
("IO Reque° Addôi⁄ i†dißbÀd i¿poﬁ %s\n", 
poﬁ
->
«me
);

111 
	}
}

114 
RVOID
 
	$dz_q_i‹eque°
(
DZ_THREAD_POOL
 *
poﬁ
, 
PDZIO
 
i‹eque°
)

116 i‡(
poﬁ
->
ioq_›í
) {

117 
	`©omic_öc
(&
poﬁ
->
ioq_num_ios
);

118 
	`•ö_lock
(&
poﬁ
->
ioq_lock
);

119 
	`li°_add_èû
(&
i‹eque°
->
i‹_ioq
, &
poﬁ
->
ioq_hód
);

120 
	`•ö_u∆ock
(&
poﬁ
->
ioq_lock
);

121 
	`com∂ëe
(&
poﬁ
->
ioq_addôi⁄
);

123 
	`LOG
("IO Reque° Addôi⁄ i†dißbÀd f‹Öoﬁ %s\n", 
poﬁ
->
«me
);

125 
	}
}

126 
EXPORT_SYMBOL
(
dz_q_i‹eque°
);

128 
RVOID
 
	$dz_q_i‹eque°_thªad_poﬁ
(
PDZIO
 
i‹eque°
)

130 
DZ_THREAD_POOL
 *
poﬁ
 = 
i‹eque°
->
i‹_thªad_poﬁ
;

131 i‡(
poﬁ
->
ioq_›í
) {

132 
	`©omic_öc
(&
poﬁ
->
ioq_num_ios
);

133 
	`•ö_lock
(&
poﬁ
->
ioq_lock
);

134 
	`li°_add_èû
(&
i‹eque°
->
i‹_ioq
, &
poﬁ
->
ioq_hód
);

135 
	`•ö_u∆ock
(&
poﬁ
->
ioq_lock
);

136 
	`com∂ëe
(&
poﬁ
->
ioq_addôi⁄
);

138 
	`LOG
("IO Reque° Addôi⁄ i†dißbÀd i¿poﬁ %s\n", 
poﬁ
->
«me
);

140 
	}
}

141 
EXPORT_SYMBOL
(
dz_q_i‹eque°_thªad_poﬁ
);

143 
RVOID
 
	$¥öt_i‹eque°_lôe
(
PIOREQUEST
 
p
, *
°r
)

145 
CHAR
 *
m¨kî
 = 
	`dz_kmÆloc
(
NAME_LENGTH
, 
GFP_KERNEL
);

146 i‡(!
m¨kî
) {

147 
	`LOG
("UnableÅoállocate memory forÖrint_iorequest\n");

150 
	`mem£t
(
m¨kî
, 0, 
NAME_LENGTH
);

151 
	`•ö_lock
(&
¥öt_i‹eque°_lock
);

152 
	`LOGINF
("Prötög i‹eque° infÿ: %s\n", 
°r
);

153 
	`LOGINF
("i‹eque° = %p\n", 
p
);

154 
	`LOGINF
("i‹eque°->i‹_ty≥ = %u\n", 
p
->
i‹_ty≥
);

155 
	`LOGINF
("i‹eque°->i‹_lb® = %Œi\n", (
U64
)
p
->
i‹_lba
);

156 
	`LOGINF
("i‹eque°->i‹_sizê = %Œi\n", (
U64
)
p
->
i‹_size
);

157 
	`LOGINF
("i‹eque°->i‹_£˘‹ = %Œi\n", (
U64
)
p
->
i‹_£˘‹
);

158 
	`LOGINF
("i‹eque°->i‹_chûd_˙t%d\n", 
	`©omic_ªad
(&
p
->
i‹_chûd_˙t
));

159 
	`LOGINF
("i‹eque°->i‹_biÿ = %p\n", 
p
->
i‹_bio
);

162 
	`LOGINF
("i‹eque°->∑ª¡ = %p\n", 
p
->
i‹_∑ª¡
);

163 i‡(
p
->
i‹_∑ª¡
) {

164 i‡(
p
->
i‹_∑ª¡
->
i‹_bio
) {

165 
	`LOGINF
("i‹eque°->∑ª¡->i‹_biÿ = %p\n", 
p
->
i‹_∑ª¡
->
i‹_bio
);

168 i‡(
p
->
i‹_thªad_poﬁ
) {

169 
	`LOGINF
("i‹eque°->thªad_poﬁ = %† \n", 
p
->
i‹_thªad_poﬁ
->
«me
);

172 i‡(
p
->
i‹_bio
) {

173 i‡(
p
->
i‹_bio
->
bi_¥iv©e
 ==Ö) {

178 
	`¥öt_biom
(
p
->
i‹_bio
, 
m¨kî
);

181 
	`•ö_u∆ock
(&
¥öt_i‹eque°_lock
);

182 
	`dz_k‰ì
(
m¨kî
, 
NAME_LENGTH
);

183 
	`LOG
("\n\n");

184 
	}
}

189 
RVOID
 
	$¥öt_i‹eque°
(
PIOREQUEST
 
p
, *
°r
)

191 
CHAR
 *
m¨kî
 = 
	`dz_kmÆloc
(
NAME_LENGTH
, 
GFP_KERNEL
);

192 i‡(!
m¨kî
) {

193 
	`LOG
("UnableÅoállocate memory forÖrint_iorequest\n");

196 
	`•ö_lock
(&
¥öt_i‹eque°_lock
);

197 
	`LOGINF
("Prötög i‹eque° infÿ: %s\n", 
°r
);

198 
	`LOGINF
("i‹eque° = %p\n", 
p
);

199 
	`LOGINF
("i‹eque°->i‹_lb® = %Œi\n", (
U64
)
p
->
i‹_lba
);

200 
	`LOGINF
("i‹eque°->i‹_sizê = %Œi\n", (
U64
)
p
->
i‹_size
);

201 
	`LOGINF
("i‹eque°->i‹_£˘‹ = %Œi\n", (
U64
)
p
->
i‹_£˘‹
);

202 
	`LOGINF
("i‹eque°->i‹_chûd_˙t%d\n", 
	`©omic_ªad
(&
p
->
i‹_chûd_˙t
));

203 
	`LOGINF
("i‹eque°->i‹_biÿ = %p\n", 
p
->
i‹_bio
);

204 i‡(
p
->
i‹_bio
->
bi_√xt
) {

205 
	`LOGINF
("i‹eque°->siblög_biÿ = %p\n", 
p
->
i‹_bio
->
bi_√xt
);

207 
	`LOGINF
("i‹eque°->i‹_∑ª¡ = %p\n", 
p
->
i‹_∑ª¡
);

208 i‡(
p
->
i‹_∑ª¡
) {

209 i‡(
p
->
i‹_∑ª¡
->
i‹_bio
) {

210 
	`LOGINF
("i‹eque°->∑ª¡_biÿ = %p\n", 
p
->
i‹_∑ª¡
->
i‹_bio
);

213 i‡(
p
->
i‹_thªad_poﬁ
) {

214 
	`LOGINF
("i‹eque°->thªad_poﬁ = %† \n", 
p
->
i‹_thªad_poﬁ
->
«me
);

217 
	`mem£t
(
m¨kî
, 0, 
NAME_LENGTH
);

218 i‡(
p
->
i‹_bio
) {

219 i‡(
p
->
i‹_bio
->
bi_¥iv©e
 ==Ö) {

220 
	`•rötf
(
m¨kî
,"%s: I¡î«»bio", 
°r
);

222 
	`•rötf
(
m¨kî
,"%s: Exã∫Æ bio", 
°r
);

224 
	`¥öt_biom
(
p
->
i‹_bio
, 
m¨kî
);

225 i‡(
p
->
i‹_bio
->
bi_√xt
) {

226 
	`mem£t
(
m¨kî
, 0, 
NAME_LENGTH
);

227 
	`•rötf
(
m¨kî
,"%s: siblög bio", 
°r
);

228 
	`¥öt_biom
(
p
->
i‹_bio
->
bi_√xt
, 
m¨kî
);

232 i‡(!
p
->
i‹_∑ª¡
) {

233 
exô
;

235 
p
 =Ö->
i‹_∑ª¡
;

237 
	`LOGINF
("Prötög P¨íài‹eque° infÿ : %s\n", 
°r
);

238 
	`LOGINF
("∑ª¡_i‹eque° = %∞ \n", 
p
);

239 
	`LOGINF
("∑ª¡_i‹eque°->i‹_lb® = %Œi\n", (
U64
)
p
->
i‹_lba
);

240 
	`LOGINF
("∑ª¡_i‹eque°->i‹_sizê = %Œi\n", (
U64
)
p
->
i‹_size
);

241 
	`LOGINF
("∑ª¡_i‹eque°->i‹_£˘‹ = %Œi\n", (
U64
)
p
->
i‹_£˘‹
);

242 
	`LOGINF
("∑ª¡_i‹eque°->i‹_chûd_˙à%d\n", 
	`©omic_ªad
(&
p
->
i‹_chûd_˙t
));

243 
	`LOGINF
("∑ª¡_i‹eque°->i‹_biÿ = %p\n", 
p
->
i‹_bio
);

244 i‡(
p
->
i‹_thªad_poﬁ
) {

245 
	`LOGINF
("∑ª¡_i‹eque°->thªad_poﬁ = %† \n", 
p
->
i‹_thªad_poﬁ
->
«me
);

248 
	`mem£t
(
m¨kî
, 0, 
NAME_LENGTH
);

249 i‡(
p
->
i‹_bio
) {

250 i‡(
p
->
i‹_bio
->
bi_¥iv©e
 ==Ö) {

251 
	`•rötf
(
m¨kî
,"%s: P¨íàI¡î«»bio", 
°r
);

253 
	`•rötf
(
m¨kî
,"%s: P¨íàExã∫Æ bio", 
°r
);

255 
	`¥öt_biom
(
p
->
i‹_bio
, 
m¨kî
);

256 i‡(
p
->
i‹_bio
->
bi_√xt
) {

257 
	`mem£t
(
m¨kî
, 0, 
NAME_LENGTH
);

258 
	`•rötf
(
m¨kî
,"%s: P¨íàsiblög bio", 
°r
);

259 
	`¥öt_biom
(
p
->
i‹_bio
->
bi_√xt
, 
m¨kî
);

263 
exô
:

264 
	`•ö_u∆ock
(&
¥öt_i‹eque°_lock
);

265 
	`dz_k‰ì
(
m¨kî
, 
NAME_LENGTH
);

266 
	`LOG
("\n\n");

267 
	}
}

268 
EXPORT_SYMBOL
(
¥öt_i‹eque°
);

270 
RVOID
 
	$dz_Áke_iod⁄e
(
PIOREQUEST
 
i‹eque°
)

272 i‡(
i‹eque°
->
i‹_∑ª¡
) {

273 
	`READ_IO_DONE
(
i‹eque°
);

278 
	`READ_IO_DONE
(
i‹eque°
);

279 
	`dz_io_‰ì
(
i‹eque°
);

280 
	}
}

281 
EXPORT_SYMBOL
(
dz_Áke_iod⁄e
);

283 
RVOID
 
	$dz_iod⁄e
(
PIOREQUEST
 
i‹eque°
)

285 i‡(
i‹eque°
->
i‹_∑ª¡
) {

286 
	`IO_DONE
(
i‹eque°
);

291 
	`IO_DONE
(
i‹eque°
);

292 
	`i‹eque°_put
(
i‹eque°
);

293 
	}
}

294 
EXPORT_SYMBOL
(
dz_iod⁄e
);

296 
RVOID
 
	$dz_iod⁄e_îr‹
(
PIOREQUEST
 
i‹eque°
, 
INT
 
îr‹
)

298 i‡(
i‹eque°
->
i‹_∑ª¡
) {

299 
	`IO_DONE_ERROR
(
i‹eque°
);

304 
	`IO_DONE_ERROR
(
i‹eque°
);

305 
	`i‹eque°_put
(
i‹eque°
);

306 
	}
}

307 
EXPORT_SYMBOL
(
dz_iod⁄e_îr‹
);

310 
RVOID
 
	$i‹eque°_gë
(
PIOREQUEST
 
i‹eque°
)

312 
	`ATOMIC_INC
(
i‹eque°
->
i‹_ªf_˙t
);

313 
	}
}

314 
EXPORT_SYMBOL
(
i‹eque°_gë
);

317 
RVOID
 
	$i‹eque°_put
(
PIOREQUEST
 
i‹eque°
)

320 i‡(
	`ATOMIC_READ
(
i‹eque°
->
i‹_ªf_˙t
) == 0) {

321 
	`dz_io_‰ì
(
i‹eque°
);

324 i‡(
	`©omic_dec_™d_ã°
(&
i‹eque°
->
i‹_ªf_˙t
)) {

325 
	`dz_io_‰ì
(
i‹eque°
);

330 
	}
}

331 
EXPORT_SYMBOL
(
i‹eque°_put
);

	@infra_engine/infra_engine_locks.c

9 
	~"¥ŸŸy≥s.h
"

11 
rw_£m≠h‹e
 
bec_lock
;

13 
RVOID
 
	$_ACQUIRE_TRANSACTION_LOCK
()

16 
	}
}

17 
EXPORT_SYMBOL
(
_ACQUIRE_TRANSACTION_LOCK
);

19 
RVOID
 
	$_RELEASE_TRANSACTION_LOCK
()

22 
	}
}

23 
EXPORT_SYMBOL
(
_RELEASE_TRANSACTION_LOCK
);

25 
RVOID
 
	$_ACQUIRE_FEC_LOCK_READ
(
PLBA_BLOCK
 
lba_íåy
)

27 
	`bô_•ö_lock
(
FEC_LBA_LOCK_BIT
, &(
lba_íåy
)->
d⁄Ÿch™ge
);

28 
	}
}

29 
EXPORT_SYMBOL
(
_ACQUIRE_FEC_LOCK_READ
);

31 
RVOID
 
	$_RELEASE_FEC_LOCK_READ
(
PLBA_BLOCK
 
lba_íåy
)

33 
	`bô_•ö_u∆ock
(
FEC_LBA_LOCK_BIT
, &(
lba_íåy
)->
d⁄Ÿch™ge
);

34 
	}
}

35 
EXPORT_SYMBOL
(
_RELEASE_FEC_LOCK_READ
);

37 
RVOID
 
	$_ACQUIRE_FEC_LOCK_WRITE
(
PLBA_BLOCK
 
lba_íåy
)

39 
	`bô_•ö_lock
(
FEC_LBA_LOCK_BIT
, &(
lba_íåy
)->
d⁄Ÿch™ge
);

40 
	}
}

41 
EXPORT_SYMBOL
(
_ACQUIRE_FEC_LOCK_WRITE
);

43 
RVOID
 
	$_RELEASE_FEC_LOCK_WRITE
(
PLBA_BLOCK
 
lba_íåy
)

45 
	`bô_•ö_u∆ock
(
FEC_LBA_LOCK_BIT
, &(
lba_íåy
)->
d⁄Ÿch™ge
);

46 
	}
}

47 
EXPORT_SYMBOL
(
_RELEASE_FEC_LOCK_WRITE
);

49 
RVOID
 
	$_ACQUIRE_LBA_LOCK_READ
(
PLBA_BLOCK
 
lba_íåy
)

51 
	`bô_•ö_lock
(
DEDUPE_LBA_LOCK_BIT
, &(
lba_íåy
)->
d⁄Ÿch™ge
);

52 
	`LOGD
("Acquúed LBA LOCK Ród f‹Üb®%p\n", 
lba_íåy
);

53 
	}
}

54 
EXPORT_SYMBOL
(
_ACQUIRE_LBA_LOCK_READ
);

56 
RVOID
 
	$_RELEASE_LBA_LOCK_READ
(
PLBA_BLOCK
 
lba_íåy
)

58 
	`bô_•ö_u∆ock
(
DEDUPE_LBA_LOCK_BIT
, &(
lba_íåy
)->
d⁄Ÿch™ge
);

59 
	`LOGD
("Rñó£ LBA LOCK Ród f‹Üb®%p\n", 
lba_íåy
);

60 
	}
}

61 
EXPORT_SYMBOL
(
_RELEASE_LBA_LOCK_READ
);

63 
RVOID
 
	$_ACQUIRE_LBA_LOCK_WRITE
(
PLBA_BLOCK
 
lba_íåy
)

65 
ªåyÆl
:

66 
	`bô_•ö_lock
(
DEDUPE_LBA_LOCK_BIT
, &(
lba_íåy
)->
d⁄Ÿch™ge
);

67 
	`LOGD
("Acquúed LBA LOCK Wrôêf‹Üb®%p\n", 
lba_íåy
);

68 i‡((
lba_íåy
)->
ö_u£
) {

69 
	`bô_•ö_u∆ock
(
DEDUPE_LBA_LOCK_BIT
, &(
lba_íåy
)->
d⁄Ÿch™ge
);

70 
	`SLEEP_MILLI_SECONDS
(1);

71 
	`˝u_ªœx
();

72 
ªåyÆl
;

74 (
lba_íåy
)->
ö_u£
 = 
åue
;

75 
	`bô_•ö_u∆ock
(
DEDUPE_LBA_LOCK_BIT
, &(
lba_íåy
)->
d⁄Ÿch™ge
);

77 
	}
}

78 
EXPORT_SYMBOL
(
_ACQUIRE_LBA_LOCK_WRITE
);

80 
RVOID
 
	$_RELEASE_LBA_LOCK_WRITE
(
PLBA_BLOCK
 
lba_íåy
)

82 i‡((
lba_íåy
)->
ö_u£
) {

83 (
lba_íåy
)->
ö_u£
 = 
Ál£
;

84 
	`bô_•ö_u∆ock
(
DEDUPE_LBA_LOCK_BIT
, &(
lba_íåy
)->
d⁄Ÿch™ge
);

86 
	`bô_•ö_u∆ock
(
DEDUPE_LBA_LOCK_BIT
, &(
lba_íåy
)->
d⁄Ÿch™ge
);

87 
	`LOGE
("wrongÜbaÑelease\n");

88 
	`BUG_ON
(1);

90 
	`LOGD
("Rñó£ LBA LOCK Wrôêf‹Üb®%p\n", 
lba_íåy
);

91 
	}
}

92 
EXPORT_SYMBOL
(
_RELEASE_LBA_LOCK_WRITE
);

94 
RVOID
 
	$_ACQUIRE_LBA_LOCK
(
PLBA_BLOCK
 
lba_íåy
)

96 
	`LBA_LOCK
((
lba_íåy
));

98 
	}
}

99 
EXPORT_SYMBOL
(
_ACQUIRE_LBA_LOCK
);

101 
RVOID
 
	$_RELEASE_LBA_LOCK
(
PLBA_BLOCK
 
lba_íåy
)

103 
	`LBA_UNLOCK
((
lba_íåy
));

105 
	}
}

106 
EXPORT_SYMBOL
(
_RELEASE_LBA_LOCK
);

108 
RVOID
 
	$_ACQUIRE_LBA_LOCK_DEBUG
(
PLBA_BLOCK
 
lba_íåy
)

110 
ªåyÆl
:

111 
	`LBA_LOCK
((
lba_íåy
));

112 i‡((
lba_íåy
)->
ö_u£
) {

113 
	`LBA_UNLOCK
((
lba_íåy
));

115 
	`˝u_ªœx
();

116 
ªåyÆl
;

118 (
lba_íåy
)->
ö_u£
 = 
åue
;

119 
	`LBA_UNLOCK
((
lba_íåy
));

121 
	}
}

122 
EXPORT_SYMBOL
(
_ACQUIRE_LBA_LOCK_DEBUG
);

124 
RVOID
 
	$_RELEASE_LBA_LOCK_DEBUG
(
PLBA_BLOCK
 
lba_íåy
)

126 
	`LBA_LOCK
((
lba_íåy
));

127 i‡((
lba_íåy
)->
ö_u£
) {

128 (
lba_íåy
)->
ö_u£
 = 
Ál£
;

129 
	`LBA_UNLOCK
((
lba_íåy
));

131 
	`LBA_UNLOCK
((
lba_íåy
));

132 
	`LOGE
("wrongÜbaÑelease\n");

133 
	`BUG_ON
(1);

135 
	}
}

137 
RVOID
 
	$_ACQUIRE_PBA_LOCK
(
PPBA_BLOCK
 
pba_íåy
)

140 
	}
}

141 
EXPORT_SYMBOL
(
_ACQUIRE_PBA_LOCK
);

143 
RVOID
 
	$_DZ_DDE_RELEASE_PBA_LOCK
(
PPBA_BLOCK
 
pba_íåy
)

146 
	}
}

147 
EXPORT_SYMBOL
(
_DZ_DDE_RELEASE_PBA_LOCK
);

149 
RVOID
 
	$_ACQUIRE_PBA_LOCK_DEBUG
(
PPBA_BLOCK
 
pba_íåy
)

151 
ªåy≠l
:

152 
	`PBA_LOCK
((
pba_íåy
));

153 i‡((
pba_íåy
)->
ö_u£
) {

154 
	`PBA_UNLOCK
((
pba_íåy
));

155 
ªåy≠l
;

157 (
pba_íåy
)->
ö_u£
 = 
åue
;

158 
	`PBA_UNLOCK
((
pba_íåy
));

160 
	}
}

161 
EXPORT_SYMBOL
(
_ACQUIRE_PBA_LOCK_DEBUG
);

163 
RVOID
 
	$_RELEASE_PBA_LOCK_DEBUG
(
PPBA_BLOCK
 
pba_íåy
)

165 
	`PBA_LOCK
((
pba_íåy
));

166 i‡((
pba_íåy
)->
ö_u£
) {

167 (
pba_íåy
)->
ö_u£
 = 
Ál£
;

168 
	`PBA_UNLOCK
((
pba_íåy
));

170 
	`PBA_UNLOCK
((
pba_íåy
));

171 
	`LOGE
("wrongÖbaÑelease\n");

172 
	`BUG_ON
(1);

174 
	}
}

175 
EXPORT_SYMBOL
(
_RELEASE_PBA_LOCK_DEBUG
);

177 
RVOID
 
	$_ACQUIRE_HBA_LOCK
(
PHBA_BLOCK
 
hash_íåy
)

179 
	`HASH_LOCK
((
hash_íåy
));

180 
	}
}

181 
EXPORT_SYMBOL
(
_ACQUIRE_HBA_LOCK
);

183 
RVOID
 
	$_DZ_DDE_RELEASE_HBA_LOCK
(
PHBA_BLOCK
 
hash_íåy
)

185 
	`HASH_UNLOCK
((
hash_íåy
));

186 
	}
}

187 
EXPORT_SYMBOL
(
_DZ_DDE_RELEASE_HBA_LOCK
);

189 
RVOID
 
	$_ACQUIRE_HBA_LOCK_DEBUG
(
PHBA_BLOCK
 
hash_íåy
)

191 
ªåyahl
:

192 
	`HASH_LOCK
((
hash_íåy
));

193 i‡((
hash_íåy
)->
ö_u£
) {

194 
	`HASH_UNLOCK
((
hash_íåy
));

195 
ªåyahl
;

197 (
hash_íåy
)->
ö_u£
 = 
åue
;

198 
	`HASH_UNLOCK
((
hash_íåy
));

200 
	}
}

201 
EXPORT_SYMBOL
(
_ACQUIRE_HBA_LOCK_DEBUG
);

203 
RVOID
 
	$_RELEASE_HBA_LOCK_DEBUG
(
PHBA_BLOCK
 
hash_íåy
)

205 
	`HASH_LOCK
((
hash_íåy
));

206 i‡((
hash_íåy
)->
ö_u£
) {

207 (
hash_íåy
)->
ö_u£
 = 
Ál£
;

208 
	`HASH_UNLOCK
((
hash_íåy
));

210 
	`HASH_UNLOCK
((
hash_íåy
));

211 
	`LOGE
("wrong hbaÑelease\n");

212 
	`BUG_ON
(1);

214 
	}
}

215 
EXPORT_SYMBOL
(
_RELEASE_HBA_LOCK_DEBUG
);

217 
RVOID
 
	$_ACQUIRE_BEC_LOCK_READ
()

219 
	`down_ªad
(&
bec_lock
);

220 
	}
}

221 
EXPORT_SYMBOL
(
_ACQUIRE_BEC_LOCK_READ
);

223 
RVOID
 
	$_RELEASE_BEC_LOCK_READ
()

225 
	`up_ªad
(&
bec_lock
);

226 
	}
}

227 
EXPORT_SYMBOL
(
_RELEASE_BEC_LOCK_READ
);

229 
RVOID
 
	$_ACQUIRE_BEC_LOCK_WRITE
()

232 
	`down_wrôe
(&
bec_lock
);

234 
	}
}

235 
EXPORT_SYMBOL
(
_ACQUIRE_BEC_LOCK_WRITE
);

237 
RVOID
 
	$_RELEASE_BEC_LOCK_WRITE
()

239 
	`up_wrôe
(&
bec_lock
);

240 
	}
}

241 
EXPORT_SYMBOL
(
_RELEASE_BEC_LOCK_WRITE
);

245 
	#DZ_RW_LOCK_BIAS
 0x00100000

	)

246 
	#DZ_WRITE_LOCK_CMP
 
DZ_RW_LOCK_BIAS


	)

247 
	sdz_rwlock_s
 {

249 
s32
 
	mlock
;

250 
s32
 
	mwrôe
;

252 
	mbªak_lock
;

253 } 
	tdz_rwlock_t
, 
	tDZ_RWLOCK
, 
	tDZ_READ_WRITE_LOCK
, *
	tPDZ_RWLOCK
;

256 
RVOID
 
	$dz_wrôe_lock_Á°
(
PDZ_RWLOCK
 
lock
)

258 
©omic_t
 *
cou¡
 = 
NULL
;

260 
	`¥ìm±_dißbÀ
();

261 
cou¡
 = (
©omic_t
 *)&
lock
->
wrôe
;

262 i‡(
	`©omic_sub_™d_ã°
(
DZ_WRITE_LOCK_CMP
, 
cou¡
)) {

266 
	`©omic_add
(
DZ_WRITE_LOCK_CMP
, 
cou¡
);

267 
	`¥ìm±_íabÀ
();

271 if(
lock
->
wrôe
 !
DZ_WRITE_LOCK_CMP
) {

272 
	`˝u_ªœx
();

278 
	}
}

280 
RVOID
 
	$dz_wrôe_u∆ock_Á°
(
PDZ_RWLOCK
 
lock
)

282 
lock
->
wrôe
 = 
DZ_WRITE_LOCK_CMP
;

283 
	`¥ìm±_íabÀ
();

284 
	}
}

287 
RVOID
 
	$dz_ªad_lock_Á°
(
PDZ_RWLOCK
 
lock
)

290 
©omic_t
 *
cou¡
 = 
NULL
;

292 
	`¥ìm±_dißbÀ
();

293 
cou¡
 = (
©omic_t
 *)&
lock
->lock;

295 i‡(
	`©omic_dec_ªtu∫
(
cou¡
) >= 0) {

299 
	`©omic_öc
(
cou¡
);

300 
	`¥ìm±_íabÀ
();

304 i‡(
lock
->lock == 0) {

305 
	`˝u_ªœx
();

311 
	}
}

313 
RVOID
 
	$dz_ªad_u∆ock_Á°
(
PDZ_RWLOCK
 
lock
)

315 
©omic_t
 *
cou¡
 = (©omic_à*)&
lock
->lock;

316 
	`©omic_öc
(
cou¡
);

317 
	`¥ìm±_íabÀ
();

318 
	}
}

	@infra_engine/infra_engine_log.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#DZ_AVM_LOG_FILE
 "/dev/dzlog"

	)

12 
fûe
 *
	gdz_log_fûï
 = 
NULL
;

13 
EXPORT_SYMBOL
(
dz_log_fûï
);

15 
ATOMIC64
 
	gdz_avm_log_fûe_ödex
;

16 
EXPORT_SYMBOL
(
dz_avm_log_fûe_ödex
);

18 
RINT
 
	$dz_avm_log_fûe_›í
(
VOID
)

20 
dz_log_fûï
 = 
	`dz_fûe_›í
(
DZ_AVM_LOG_FILE
, 
O_WRONLY
, 0);

21 i‡(!
dz_log_fûï
) {

22 
	`LOGE
("Eº‹ i¿O≥nög Log Fûê%s\n", 
DZ_AVM_LOG_FILE
);

23 
RETURNF
;

25 
	`LOG
("Log Fûê%†O≥√d suc˚ssfuŒy\n", 
DZ_AVM_LOG_FILE
);

26 
RETURNS
;

28 
	`ATOMIC64_SET
(
dz_avm_log_fûe_ödex
, 0);

29 
	}
}

30 
EXPORT_SYMBOL
(
dz_avm_log_fûe_›í
);

32 
RINT
 
	$dz_avm_log_fûe_wrôe_øw
(
CHAR
 *
d©a
, 
UINT
 
size
 )

34  
	`dz_fûe_wrôe
(
dz_log_fûï
, 
d©a
, 
size
, 0);

35 
	}
}

36 
EXPORT_SYMBOL
(
dz_avm_log_fûe_wrôe_øw
);

38 
RINT
 
	$dz_avm_log_fûe_wrôe
(c⁄° *
f‹m©
, ...)

42 
CHAR
 
logbuf
[128];

43 
INT
 
cou¡
;

44 
INT
 
cou¡2
;

45 
va_li°
 
¨gs
;

46 
	`MEMSET
(
logbuf
);

47 
	`ATOMIC64_INC
(
dz_avm_log_fûe_ödex
);

48 
	`va_°¨t
(
¨gs
, 
f‹m©
);

49 
cou¡
 = 
	`•rötf
(
logbuf
,"%Œi:[%Œi]", (
U64
)
	`GET_CURRENT_TIME
(), (U64)
	`ATOMIC64_READ
(
dz_avm_log_fûe_ödex
));

50 
cou¡2
 = 
	`v•rötf
(
logbuf
+
cou¡
, 
f‹m©
, 
¨gs
 );

52  
	`dz_fûe_wrôe
(
dz_log_fûï
, 
logbuf
, 
cou¡
+
cou¡2
, 0);

53 
	}
}

55 
EXPORT_SYMBOL
(
dz_avm_log_fûe_wrôe
);

57 
RVOID
 
	$dz_avm_log_fûe_˛o£
()

59 
	`dz_fûe_˛o£
(
dz_log_fûï
);

61 
	}
}

62 
EXPORT_SYMBOL
(
dz_avm_log_fûe_˛o£
);

	@infra_engine/infra_engine_memory_pool.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#NUMBER_OF_BIO_POOL_ENTRIES
 
_256K


	)

12 
	#NUMBER_OF_PAGE_POOL_ENTRIES
 
_512K


	)

13 
	#NUMBER_OF_READ_PAGE_POOL_ENTRIES
 
_256K


	)

14 
	#NUMBER_OF_WRITE_PAGE_POOL_ENTRIES
 
_256K


	)

15 
	#NUMBER_OF_IO_POOL_ENTRIES
 
_256K


	)

17 
	$RINT
 (* 
	tCREATE_FUN
 )(
	tUINT
 );

18 
	$RVOID
 (* 
	tDESTROY_FUN
 )(
	tVOID
 );

19 
	$RPVOID
 (* 
	tALLOC_FUN
 )(
	tVOID
 );

20 
	$RVOID
 (* 
	tFREE_FUN
 )(
	tPVOID
 );

22 
INT
 
dz_bio_mempoﬁ_cou¡
 = 
NUMBER_OF_BIO_POOL_ENTRIES
;

23 
INT
 
dz_∑ge_mempoﬁ_cou¡
 = 
NUMBER_OF_PAGE_POOL_ENTRIES
;

26 
INT
 
dz_io_mempoﬁ_cou¡
 = 
NUMBER_OF_IO_POOL_ENTRIES
;

41 
PBIO_SET
 
dz_bio_mempoﬁ
 = 
NULL
;

42 
PMEMPOOL
 
dz_∑ge_mempoﬁ
 = 
NULL
;

43 
PMEMPOOL
 
dz_ªad_∑ge_mempoﬁ
 = 
NULL
;

44 
PMEMPOOL
 
dz_wrôe_∑ge_mempoﬁ
 = 
NULL
;

45 
PMEMPOOL
 
dz_io_mempoﬁ
 = 
NULL
;

47 
kmem_ˇche
 *
dz_io_ˇche
;

53 
INLINE
 
VOID
 
	$log_mem‹y_ußge
(
U64
 
cou¡
)

55 
	`BASE_COUNTER_ATOMIC64_ADD
(
dz_tŸÆ_mem‹y_c⁄sumed_by_Æl_poﬁs
, 
cou¡
);

56 
cou¡
 = 
	`BASE_COUNTER_ATOMIC64_READ
(
dz_tŸÆ_mem‹y_c⁄sumed_by_Æl_poﬁs
);

57 
	`LOGINF
("Mem‹y Ußge: %Œu\n", 
cou¡
);

58 
	}
}

59 
EXPORT_SYMBOL
(
log_mem‹y_ußge
);

62 
INLINE
 
VOID
 
	$ªdu˚_mem‹y_ußge
(
U64
 
cou¡
)

64 
	`BASE_COUNTER_ATOMIC64_SUB
(
dz_tŸÆ_mem‹y_c⁄sumed_by_Æl_poﬁs
, 
cou¡
);

65 
cou¡
 = 
	`BASE_COUNTER_ATOMIC64_READ
(
dz_tŸÆ_mem‹y_c⁄sumed_by_Æl_poﬁs
);

66 
	`LOGINF
("Redu˚d Mem‹y Ußge: %Œu\n", 
cou¡
);

67 
	}
}

68 
EXPORT_SYMBOL
(
ªdu˚_mem‹y_ußge
);

70 
U64
 
	$dz_gë_mem‹y_ußge
(
VOID
)

72  
	`BASE_COUNTER_ATOMIC64_READ
(
dz_tŸÆ_mem‹y_c⁄sumed_by_Æl_poﬁs
);

73 
	}
}

74 
EXPORT_SYMBOL
(
dz_gë_mem‹y_ußge
);

76 
RVOID
 
	$dz_mem‹y_c⁄sum±i⁄
(
U64
 
öôül
, U64 *
ußge
, 
CHAR
 *
m¨kî
)

78 
U64
 
föÆ
 = 
	`BASE_COUNTER_ATOMIC64_READ
(
dz_tŸÆ_mem‹y_c⁄sumed_by_Æl_poﬁs
);

79 *
ußge
 = 
föÆ
 - 
öôül
;

81 
	`LOGINF
("\n");

82 
	`LOGINF
("TŸÆ Mem‹y C⁄sumed by %s:\n", 
m¨kî
);

83 
	`LOGINF
("Enter : %lli MB | %lli KB | %lli Bytes\n",

84 ((
öôül
)/
MB
), ((öôül)/
KB
), (initial));

85 
	`LOGINF
("Exit : %lli MB | %lli KB | %lli Bytes\n",

86 ((
föÆ
)/
MB
), ((föÆ)/
KB
), (final));

87 
	`LOGINF
("Usage : %lli MB | %lli KB | %lli Bytes\n",

88 ((*
ußge
)/
MB
), ((*ußge)/
KB
), (*usage));

89 
	}
}

90 
EXPORT_SYMBOL
(
dz_mem‹y_c⁄sum±i⁄
);

92 
RVOID
 
	$dz_mem‹y_ªdu˘i⁄
(
U64
 
öôül
, U64 *
ªdu˚d
, 
CHAR
 *
m¨kî
)

94 
U64
 
föÆ
 = 
	`BASE_COUNTER_ATOMIC64_READ
(
dz_tŸÆ_mem‹y_c⁄sumed_by_Æl_poﬁs
);

95 *
ªdu˚d
 = 
öôül
 - 
föÆ
;

97 
	`LOGINF
("\nTŸÆ Mem‹y Redu˚d by %s:\n", 
m¨kî
);

98 
	`LOGINF
("Enter : %lli MB | %lli KB | %lli Bytes\n",

99 ((
öôül
)/
MB
), ((öôül)/
KB
), (initial));

100 
	`LOGINF
("Exit : %lli MB | %lli KB | %lli Bytes\n",

101 ((
föÆ
)/
MB
), ((föÆ)/
KB
), (final));

102 
	`LOGINF
("Reduced : %lli MB | %lli KB | %lli Bytes\n",

103 ((*
ªdu˚d
)/
MB
), ((*ªdu˚d)/
KB
), (*reduced));

104 
	}
}

105 
EXPORT_SYMBOL
(
dz_mem‹y_ªdu˘i⁄
);

107 
RVOID
 
	$dz_tŸÆ_mem‹y_c⁄sum±i⁄
(
VOID
)

109 
U64
 
föÆ
 = 
	`BASE_COUNTER_ATOMIC64_READ
(
dz_tŸÆ_mem‹y_c⁄sumed_by_Æl_poﬁs
);

110 
	`LOGINF
("\n");

111 
	`LOGINF
("Total Memory Consumed :%lli MB | %lli KB | %lli Bytes\n\n",

112 ((
föÆ
)/
MB
), ((föÆ)/
KB
), (final));

113 
	}
}

114 
EXPORT_SYMBOL
(
dz_tŸÆ_mem‹y_c⁄sum±i⁄
);

116 
RVOID
 
	$dz_check_mem‹y_Àak
(
VOID
)

118 i‡(
	`BASE_COUNTER_ATOMIC64_READ
(
dz_tŸÆ_mem‹y_c⁄sumed_by_Æl_poﬁs
) > 0) {

119 
	`LOGW
("<-------Memory Leaks Encountered------->\n");

121 
	`LOGW
("<-------Memory Leaks in Bytes %lu --->\n",

122 
	`BASE_COUNTER_ATOMIC64_READ
(
dz_tŸÆ_mem‹y_c⁄sumed_by_Æl_poﬁs
));

123 } i‡(
	`BASE_COUNTER_ATOMIC64_READ
(
dz_tŸÆ_mem‹y_c⁄sumed_by_Æl_poﬁs
) < 0) {

124 
	`LOGW
("<-------Memory Freed MoreÅhan once ------->\n");

126 
	`LOGINF
("Congratulations ! No MemoryÜeaksÉncountered\n");

128 
	}
}

129 
EXPORT_SYMBOL
(
dz_check_mem‹y_Àak
);

132 
RINT
 
	$dz_¸óã_bio_poﬁ
(
UINT
 
num_bios
)

134 
	#DZ_UNIT_SIZE
 ((
bio
))

	)

136 
dz_bio_mempoﬁ
 = 
NULL
;

137 i‡(
dz_bio_mempoﬁ
) {

138 
	`LOGINF
("biÿpoﬁ cª©ed f‹ %d bios\n", 
num_bios
);

139 
	`log_mem‹y_ußge
(
num_bios
 * 
DZ_UNIT_SIZE
);

140  
SUCCESS
;

142 
	`LOGINF
("bioÖool creation failed\n");

143  
FAILURE
;

145 #unde‡
DZ_UNIT_SIZE


146 
	}
}

147 
EXPORT_SYMBOL
(
dz_¸óã_bio_poﬁ
);

149 
RVOID
 
	$dz_de°roy_bio_poﬁ
(
UINT
 
num_bios
)

151 
	#DZ_UNIT_SIZE
 ((
bio
))

	)

152 
	`LOGINF
("Destroying bioset / biopool\n");

153 i‡(
dz_bio_mempoﬁ
) {

155 
	`ªdu˚_mem‹y_ußge
(
num_bios
 * 
DZ_UNIT_SIZE
);

157 
	`LOGINF
("dz_bio_mempool is NULL\n");

159 
dz_bio_mempoﬁ
 = 
NULL
;

160 #unde‡
DZ_UNIT_SIZE


161 
	}
}

162 
EXPORT_SYMBOL
(
dz_de°roy_bio_poﬁ
);

164 
PBIO
 
	$dz_bio_Æloc
(
UINT
 
ƒ_iovecs
)

166 i‡(!
dz_bio_mempoﬁ
Ë 
NULL
;

167  
	`bio_Æloc_bio£t
 (
GFP_NOIO
, 
ƒ_iovecs
, 
dz_bio_mempoﬁ
);

168 
	}
}

169 
EXPORT_SYMBOL
(
dz_bio_Æloc
);

171 
RVOID
 
	$dz_bio_Æloc_ã°
(
VOID
)

173 
INT
 
i
 = 0;

174 
i
 = 0; i < 2 * 
dz_bio_mempoﬁ_cou¡
; i++) {

175 
PBIO
 
bio
 = 
	`dz_bio_Æloc
(1);

176 i‡(
bio
 =
NULL
) {

177 
	`LOG
("BiÿAŒoˇti⁄ Faûedáàcou¡ %d\n", 
i
);

179 
	`LOGINF
("BiÿAŒoˇti⁄áà%d i†%p\n", 
i
, (*)
bio
);

187 
	}
}

188 
EXPORT_SYMBOL
(
dz_bio_Æloc_ã°
);

190 
RVOID
 
	$dz_bio_‰ì
(
PBIO
 
bio
)

197 
	}
};

198 
EXPORT_SYMBOL
(
dz_bio_‰ì
);

201 
RINT
 
	$dz_¸óã_io_poﬁ
(
UINT
 
num_ios
)

203 
	#DZ_UNIT_SIZE
 ((
dz_i‹eque°_s
))

	)

204 
dz_io_ˇche
 = 
	`KMEM_CACHE
(
dz_i‹eque°_s
, 0);

205 
dz_io_mempoﬁ
 = 
	`mempoﬁ_¸óã_¶ab_poﬁ
(
num_ios
, 
dz_io_ˇche
);

208 i‡(
dz_io_mempoﬁ
 ) {

209 
	`LOGINF
("IO InfoÖool created foráccomodating %u IOs. Unit Size %lu \n",

210 
num_ios
, 
DZ_UNIT_SIZE
);

211 
	`log_mem‹y_ußge
(
num_ios
 * 
DZ_UNIT_SIZE
);

212 
	`BASE_COUNTER_ATOMIC64_SET
(
dz_i‹eque°_Æloc_˙t
, 0);

213 
	`BASE_COUNTER_ATOMIC64_SET
(
dz_i‹eque°_‰ì_˙t
, 0);

214 
RETURNS
;

216 
	`LOGE
("IO InfoÖool creation failed\n");

217 
RETURNF
;

220 #unde‡
DZ_UNIT_SIZE


221 
	}
}

222 
EXPORT_SYMBOL
(
dz_¸óã_io_poﬁ
);

224 
RVOID
 
	$dz_de°roy_io_poﬁ
(
UINT
 
num_ios
)

226 
	#DZ_UNIT_SIZE
 ((
dz_i‹eque°_s
))

	)

227 
	`LOGINF
("Destroying IO Info Pool\n");

228 i‡(
dz_io_mempoﬁ
) {

229 
	`mempoﬁ_de°roy
(
dz_io_mempoﬁ
);

230 
	`kmem_ˇche_de°roy
(
dz_io_ˇche
);

231 
	`ªdu˚_mem‹y_ußge
(
num_ios
 * 
DZ_UNIT_SIZE
);

233 #unde‡
DZ_UNIT_SIZE


234 
	}
}

235 
EXPORT_SYMBOL
(
dz_de°roy_io_poﬁ
);

237 
RPVOID
 
	$dz_io_Æloc
(
VOID
)

239 
PIOREQUEST
 
±r
 = 
NULL
;

240 i‡(!
dz_io_mempoﬁ
 )  
NULL
;

242 
a˘i⁄
:

243 
±r
 = 
	`mempoﬁ_Æloc
(
dz_io_mempoﬁ
, 
GFP_KERNEL
);

247 i‡(
±r
) {

249 
	`BASE_COUNTER_ATOMIC64_INC
(
dz_i‹eque°_Æloc_˙t
);

250  
±r
;

252 
	`DELAY_MICRO_SECONDS
(10);

253 
a˘i⁄
;

255 
	}
}

256 
EXPORT_SYMBOL
(
dz_io_Æloc
);

258 
RVOID
 
	$dz_io_‰ì
(
PVOID
 
io
)

260 i‡(!
io
) {

261 
	`LOGW
("IO Info is NULL\n");

264 
	`BASE_COUNTER_ATOMIC64_INC
(
dz_i‹eque°_‰ì_˙t
);

267 
	`mempoﬁ_‰ì
(
io
, 
dz_io_mempoﬁ
 );

269 
	}
}

270 
EXPORT_SYMBOL
(
dz_io_‰ì
);

274 
RINT
 
	$dz_¸óã_∑ge_poﬁ
(
SIZE
 
num_∑ges
)

276 
	#DZ_UNIT_SIZE
 ( 
PAGE_SIZE
 )

	)

278 
	`LOGINF
("Creating Page Pool foráccomodating %uÖages\n",

279 (
UINT
)
num_∑ges
);

280 
dz_∑ge_mempoﬁ
 = 
	`mempoﬁ_¸óã_∑ge_poﬁ
(
num_∑ges
, 0);

281 i‡(
dz_∑ge_mempoﬁ
) {

282 
	`LOGINF
("PageÖool created foráccomodating %uÖages. Unit Size %lu \n",

283 (
UINT
)
num_∑ges
, 
DZ_UNIT_SIZE
);

284 
	`log_mem‹y_ußge
(
num_∑ges
 * 
DZ_UNIT_SIZE
);

285 
	`BASE_COUNTER_ATOMIC64_SET
(
dz_∑ge_Æloc_˙t
, 0);

286 
	`BASE_COUNTER_ATOMIC64_SET
(
dz_∑ge_‰ì_˙t
, 0);

287 
RETURNS
;

289 
	`LOGE
("pageÖool creation failed\n");

290 
RETURNF
;

293 #unde‡
DZ_UNIT_SIZE


294 
	}
}

295 
EXPORT_SYMBOL
(
dz_¸óã_∑ge_poﬁ
);

297 
RVOID
 
	$dz_de°roy_∑ge_poﬁ
(
SIZE
 
num_∑ges
)

299 
	`LOGINF
("Destroying Page Pool\n");

300 i‡(
dz_∑ge_mempoﬁ
) {

301 
	`mempoﬁ_de°roy
(
dz_∑ge_mempoﬁ
);

302 
	`ªdu˚_mem‹y_ußge
(
num_∑ges
 * 
PAGE_SIZE
);

304 
	`LOG
("dz_page_mempool is NULL\n");

306 
	}
}

307 
EXPORT_SYMBOL
(
dz_de°roy_∑ge_poﬁ
);

309 
RPVOID
 
	$dz_∑ge_Æloc
(
VOID
)

311 
PVOID
 
±r
 = 
NULL
;

313 i‡(!
dz_∑ge_mempoﬁ
Ë 
NULL
;

315 
±r
 = 
	`mempoﬁ_Æloc
(
dz_∑ge_mempoﬁ
, 
GFP_NOIO
);

316 i‡(
±r
) {

317 
	`BASE_COUNTER_ATOMIC64_INC
(
dz_∑ge_Æloc_˙t
);

318  
±r
;

320  
NULL
;

322 
	}
}

323 
EXPORT_SYMBOL
(
dz_∑ge_Æloc
);

325 
RVOID
 
	$dz_∑ge_‰ì
(
PPAGE
 
∑ge
)

327 i‡(!
∑ge
) {

328 
	`LOGW
("Page is NULL\n");

331 
	`BASE_COUNTER_ATOMIC64_INC
(
dz_∑ge_‰ì_˙t
);

332 
	`mempoﬁ_‰ì
(
∑ge
, 
dz_∑ge_mempoﬁ
);

334 
	}
}

335 
EXPORT_SYMBOL
(
dz_∑ge_‰ì
);

343 
RINT
 
	$dz_¸óã_ªad_∑ge_poﬁ
(
SIZE
 
num_∑ges
)

345 
	#DZ_UNIT_SIZE
 ( 
PAGE_SIZE
 )

	)

347 
dz_ªad_∑ge_mempoﬁ
 = 
	`mempoﬁ_¸óã_∑ge_poﬁ
(
num_∑ges
, 0);

348 i‡(
dz_ªad_∑ge_mempoﬁ
) {

349 
	`LOGINF
("Read PageÖool created foráccomodating %uÖages. Unit Size %lu \n",

350 (
UINT
)
num_∑ges
, 
DZ_UNIT_SIZE
);

351 
	`log_mem‹y_ußge
(
num_∑ges
 * 
DZ_UNIT_SIZE
);

352 
RETURNS
;

354 
	`LOGE
("read_pageÖool creation failed\n");

355 
RETURNF
;

358 #unde‡
DZ_UNIT_SIZE


359 
	}
}

360 
EXPORT_SYMBOL
(
dz_¸óã_ªad_∑ge_poﬁ
);

362 
RVOID
 
	$dz_de°roy_ªad_∑ge_poﬁ
(
SIZE
 
num_∑ges
)

364 
	`LOGINF
("Destroying Read Page Pool\n");

365 i‡(
dz_ªad_∑ge_mempoﬁ
) {

366 
	`mempoﬁ_de°roy
(
dz_ªad_∑ge_mempoﬁ
);

367 
	`ªdu˚_mem‹y_ußge
(
num_∑ges
 * 
PAGE_SIZE
);

369 
	`LOG
("dz_read_page_mempool is NULL\n");

371 
	}
}

372 
EXPORT_SYMBOL
(
dz_de°roy_ªad_∑ge_poﬁ
);

374 
RPVOID
 
	$dz_ªad_∑ge_Æloc
(
VOID
)

376  
	`dz_∑ge_Æloc
();

377 
	}
}

378 
EXPORT_SYMBOL
(
dz_ªad_∑ge_Æloc
);

380 
RVOID
 
	$dz_ªad_∑ge_‰ì
(
PPAGE
 
∑ge
)

382 
	`dz_∑ge_‰ì
(
∑ge
);

383 
	}
}

384 
EXPORT_SYMBOL
(
dz_ªad_∑ge_‰ì
);

387 
RINT
 
	$dz_¸óã_wrôe_∑ge_poﬁ
(
SIZE
 
num_∑ges
)

389 
	#DZ_UNIT_SIZE
 ( 
PAGE_SIZE
 )

	)

391 
dz_wrôe_∑ge_mempoﬁ
 = 
	`mempoﬁ_¸óã_∑ge_poﬁ
(
num_∑ges
, 0);

392 i‡(
dz_wrôe_∑ge_mempoﬁ
) {

393 
	`LOGINF
("Write PageÖool created foráccomodating %uÖages. Unit Size %lu \n",

394 (
UINT
)
num_∑ges
, 
DZ_UNIT_SIZE
);

395 
	`log_mem‹y_ußge
(
num_∑ges
 * 
DZ_UNIT_SIZE
);

396 
RETURNS
;

398 
	`LOGE
("write_pageÖool creation failed\n");

399 
RETURNF
;

402 #unde‡
DZ_UNIT_SIZE


403 
	}
}

405 
RVOID
 
	$dz_de°roy_wrôe_∑ge_poﬁ
(
SIZE
 
num_∑ges
)

409 
	`LOGINF
("Destroying Write Page Pool\n");

410 i‡(
dz_wrôe_∑ge_mempoﬁ
) {

411 
	`mempoﬁ_de°roy
(
dz_wrôe_∑ge_mempoﬁ
);

412 
	`ªdu˚_mem‹y_ußge
(
num_∑ges
 * 
PAGE_SIZE
);

414 
	`LOG
("dz_write_page_mempool is NULL\n");

416 
dz_wrôe_∑ge_mempoﬁ
 = 
NULL
;

417 
	}
}

419 
RPVOID
 
	$dz_wrôe_∑ge_Æloc
(
VOID
)

426  
	`dz_∑ge_Æloc
();

427 
	}
}

428 
EXPORT_SYMBOL
(
dz_wrôe_∑ge_Æloc
);

430 
RVOID
 
	$dz_wrôe_∑ge_‰ì
(
PPAGE
 
∑ge
)

440 
	`dz_∑ge_‰ì
(
∑ge
);

441 
	}
}

442 
EXPORT_SYMBOL
(
dz_wrôe_∑ge_‰ì
);

444 
RVOID
 
	$dz_wrôe_∑ge_‰ì_debug
(
PPAGE
 
∑ge
)

446 
	`mempoﬁ_‰ì
(
∑ge
, 
dz_wrôe_∑ge_mempoﬁ
);

447 
	`LOGINF
("dz_write_page_mempool:free:curr_nr = %d,Ötr = %p\n",

448 
dz_wrôe_∑ge_mempoﬁ
->
cuº_ƒ
, 
∑ge
);

449 
	}
}

450 
EXPORT_SYMBOL
(
dz_wrôe_∑ge_‰ì_debug
);

453 
RPVOID
 
	$dz_kmÆloc
(
SIZE
 
size
, 
INT
 
Êags
)

455 
PVOID
 
±r
 = 
NULL
;

456 
±r
 = 
	`kmÆloc
(
size
, 
Êags
);

458 i‡(
±r
) {

459 
	`log_mem‹y_ußge
(
size
);

461  
±r
;

462 
	}
}

463 
EXPORT_SYMBOL
(
dz_kmÆloc
);

465 
RVOID
 
	$dz_k‰ì
(
PVOID
 
±r
, 
SIZE
 
size
)

467 i‡(
±r
) {

468 
	`k‰ì
(
±r
);

469 
±r
 = 
NULL
;

470 
	`ªdu˚_mem‹y_ußge
(
size
);

472 
	`LOGW
("Memory isálready freed or unallocated\n");

474 
	}
}

475 
EXPORT_SYMBOL
(
dz_k‰ì
);

477 
PBIO
 
	$dz_bio_∑ge_Æloc
(
PBLOCK_DEVICE
 
bdev
)

479 
PBIO
 
bio
 = 
NULL
;

480 
PPAGE
 
∑ge
 = 
NULL
;

481 
biﬂŒoc
:

482 
bio
 = 
	`dz_bio_Æloc
(1);

483 i‡(!
bio
) {

484 
	`LOGE
("UnableÅo get free bio\n");

485 
	`DELAY_MICRO_SECONDS
(10);

486 
biﬂŒoc
;

488 
∑góŒoc
:

489 
∑ge
 = 
	`dz_∑ge_Æloc
();

490 i‡(!
∑ge
) {

491 
	`LOGE
("UnableÅo get freeÖage\n");

492 
	`DELAY_MICRO_SECONDS
(10);

493 
∑góŒoc
;

495 
	`DZ_BIO_SET_DEV
(
bio
, 
bdev
);

496 i‡(!
	`bio_add_∑ge
(
bio
, 
∑ge
, 
PAGE_SIZE
, 0)) {

498 
	`LOGE
("UnableÅoáddÖageÅo bio\n");

499 
	`BUG_ON
(1);

501  
bio
;

502 
	}
}

503 
EXPORT_SYMBOL
(
dz_bio_∑ge_Æloc
);

505 
RVOID
 
	$dz_bio_∑ge_‰ì
(
PBIO
 
bio
)

510 
	`dz_∑ge_‰ì
(
	`bio_∑ge
(
bio
));

511 
	`DZ_OS_KERNEL_BIO_PUT
(
bio
);

512 
	}
}

513 
EXPORT_SYMBOL
(
dz_bio_∑ge_‰ì
);

516 
RINT
 
	$dz_¸óã_mem‹y_poﬁs
(
VOID
)

518 
INT
 
ªt
 = 0;

519 
dz_bio_mempoﬁ
 = 
NULL
;

520 
dz_ªad_∑ge_mempoﬁ
 = 
NULL
;

521 
dz_wrôe_∑ge_mempoﬁ
 = 
NULL
;

523 
	`LOGINF
(" ____________________________________________ \n");

524 
	`LOGINF
("| |\n");

525 
	`LOGINF
("| Creating Memory Pools |\n");

526 
	`LOGINF
("|____________________________________________|\n");

528 
ªt
 = 
	`dz_¸óã_bio_poﬁ
 (
dz_bio_mempoﬁ_cou¡
);

529 i‡(
ªt
 =
FAILURE
) {

530 
RETURNF
;

534 
ªt
 = 
	`dz_¸óã_∑ge_poﬁ
 (
dz_∑ge_mempoﬁ_cou¡
);

535 i‡(
ªt
 =
FAILURE
) {

536 
RETURNF
;

538 
ªt
 = 
	`dz_¸óã_io_poﬁ
 (
dz_io_mempoﬁ_cou¡
);

539 i‡(
ªt
 =
FAILURE
) {

540 
RETURNF
;

543 
	`LOGINF
(" ____________________________________________ \n");

544 
	`LOGINF
("|____________________________________________|\n");

546  
SUCCESS
;

547 
	}
}

548 
EXPORT_SYMBOL
(
dz_¸óã_mem‹y_poﬁs
);

551 
RINT
 
	$dz_de°roy_mem‹y_poﬁs
(
VOID
)

553 
	`dz_de°roy_io_poﬁ
 (
dz_io_mempoﬁ_cou¡
);

554 
	`dz_de°roy_∑ge_poﬁ
 (
dz_∑ge_mempoﬁ_cou¡
);

557 
	`dz_de°roy_bio_poﬁ
 (
dz_bio_mempoﬁ_cou¡
);

558  
SUCCESS
;

559 
	}
}

560 
EXPORT_SYMBOL
(
dz_de°roy_mem‹y_poﬁs
);

	@infra_engine/infra_engine_metadata.c

9 
	~"¥ŸŸy≥s.h
"

17 
PBLOCK_DEVICE
 
	gavm_mëad©a_bdev
 = 
NULL
;

18 
EXPORT_SYMBOL
(
avm_mëad©a_bdev
);

23 
U64
 
	gmëad©a_lba_èbÀ_size
 = 0;

24 
EXPORT_SYMBOL
(
mëad©a_lba_èbÀ_size
);

29 
U64
 
	gmëad©a_lba_lock_èbÀ_size
 = 0;

30 
EXPORT_SYMBOL
(
mëad©a_lba_lock_èbÀ_size
);

36 
PMDD_BLOCK
 
	gmëad©a_lba_èbÀ
;

37 
EXPORT_SYMBOL
(
mëad©a_lba_èbÀ
);

41 
PMDD_LOCK
 
	gmëad©a_lba_lock_èbÀ
;

42 
EXPORT_SYMBOL
(
mëad©a_lba_lock_èbÀ
);

48 
	#DZ_METADATA_FLUSH_INTERVAL
 15

49 
	#DZ_METADATA_NUMBER_OF_FLUSH_THREADS
 1

	)

51 
PCHAR
 
	gMETADATA_FLUSH_THREAD_POOL_NAME
 = "metadata_flush_thread_pool";

52 
EXPORT_SYMBOL
(
METADATA_FLUSH_THREAD_POOL_NAME
);

54 
PCHAR
 
	gMETADATA_FLUSH_THREAD_POOL_SHORT_NAME
 = "mdpool";

55 
EXPORT_SYMBOL
(
METADATA_FLUSH_THREAD_POOL_SHORT_NAME
);

57 
USHORT
 
	gnum_mëad©a_Êush_thªads
 = 
DZ_METADATA_NUMBER_OF_FLUSH_THREADS
;

58 
EXPORT_SYMBOL
(
num_mëad©a_Êush_thªads
);

60 
PDZ_THREAD_POOL
 
	gmëad©a_Êush_thªad_poﬁ
 = 
NULL
;

61 
EXPORT_SYMBOL
(
mëad©a_Êush_thªad_poﬁ
);

63 
BOOL
 
	gmëad©a_Êush_timî_°›
;

64 
EXPORT_SYMBOL
(
mëad©a_Êush_timî_°›
);

66 
ULONG
 
	gmëad©a_Êush_öãrvÆ
 = 
DZ_METADATA_FLUSH_INTERVAL
;

67 
EXPORT_SYMBOL
(
mëad©a_Êush_öãrvÆ
);

69 
THREAD
 *
	gmëad©a_Êush_timî_thªad
;

70 
EXPORT_SYMBOL
(
mëad©a_Êush_timî_thªad
);

	@infra_engine/infra_engine_object.c

9 
	~"¥ŸŸy≥s.h
"

11 
OBJECT_LIST
 
	gglobÆ_obje˘_li°
;

12 
EXPORT_SYMBOL
(
globÆ_obje˘_li°
);

14 
U64
 
lba_èbÀ_size
;

15 
U64
 
pba_èbÀ_size
;

16 
U64
 
hash_èbÀ_size
;

17 
U64
 
sysfs_avm_‰ì_∑ge_cou¡
;

19 
U64
 
	gobj_cou¡
;

20 
SPINLOCK
 
	gobj_å™s_lock
;

22 
RINT
 
	$dz_obje˘_öô
()

24 
obj_cou¡
 = 0;

25 
	`•ö_lock_öô
(&
obj_å™s_lock
);

26 
	`MEMSET
(&
globÆ_obje˘_li°
);

27 
	`INIT_LIST_HEAD
(&
globÆ_obje˘_li°
.
obje˘q_hód
);

28 
	`©omic64_£t
(&
globÆ_obje˘_li°
.
obje˘q_num_ôems
, 0);

29 
	`•ö_lock_öô
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

30 
	`LOGINF
("Global Object List Initialized\n");

32 
RETURNS
;

33 
	}
}

35 
POBJECT_LIST
 
	$dz_gë_obje˘_li°
()

37  &
globÆ_obje˘_li°
;

38 
	}
}

39 
EXPORT_SYMBOL
(
dz_gë_obje˘_li°
);

42 
RVOID
 
	$dz_q_obje˘
(
OBJECT_LIST
 *
ﬁ
, 
PDEVICE_OBJECT
 
obje˘
)

44 
	`©omic64_öc
(&
ﬁ
->
obje˘q_num_ôems
);

45 
	`•ö_lock
(&
ﬁ
->
obje˘q_lock
);

46 
	`li°_add_èû
(&
obje˘
->
obje˘q
, &
ﬁ
->
obje˘q_hód
);

47 
	`•ö_u∆ock
(&
ﬁ
->
obje˘q_lock
);

48 
	}
}

49 
EXPORT_SYMBOL
(
dz_q_obje˘
);

51 
PDEVICE_OBJECT
 
	$dz_dq_obje˘
(
OBJECT_LIST
 *
ﬁ
, *
«me
)

53 
PDEVICE_OBJECT
 
obje˘
 = 
NULL
;

54 
obje˘
 = 
	`dz_föd_obje˘
(
ﬁ
, 
«me
);

55 i‡(
obje˘
) {

56 
	`li°_dñ
(&
obje˘
->
obje˘q
);

58  
obje˘
;

59 
	}
}

60 
EXPORT_SYMBOL
(
dz_dq_obje˘
);

62 
PDEVICE_OBJECT
 
	$dz_föd_obje˘
(
OBJECT_LIST
 *
ﬁ
, *
«me
)

64 
PDEVICE_OBJECT
 
obje˘
 = 
NULL
;

65 
	`•ö_lock
(&
ﬁ
->
obje˘q_lock
);

66 i‡(
	`li°_em±y
(&
ﬁ
->
obje˘q_hód
)) {

67 
	`•ö_u∆ock
(&
ﬁ
->
obje˘q_lock
);

68 
out
;

70 
	`li°_f‹_óch_íåy
(
obje˘
, &
ﬁ
->
obje˘q_hód
, 
obje˘q
) {

71 i‡(
	`°rcmp
(
obje˘
->
obj_«me
, 
«me
)==0) {

77 
	`•ö_u∆ock
(&
ﬁ
->
obje˘q_lock
);

78 
out
:

79  
obje˘
;

80 
	}
}

81 
EXPORT_SYMBOL
(
dz_föd_obje˘
);

96 
RVOID
 
	$¥öt_obje˘_li°
(
VOID
)

98 
PDEVICE_OBJECT
 
obje˘
 = 
NULL
;

100 
	`•ö_lock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

101 
	`li°_f‹_óch_íåy
(
obje˘
, &
globÆ_obje˘_li°
.
obje˘q_hód
, 
obje˘q
) {

102 i‡(
obje˘
->
obj_ty≥
 =
åue
) {

103 
	`LOGINF
(" ______________________________________________________ \n");

104 
	`LOGINF
("| |\n");

105 
	`LOGINF
("| Printing Object List |\n");

106 
	`LOGINF
("|______________________________________________________|\n");

107 
	`¥öt_avm_devi˚
((
PAVM_DEVICE
)
obje˘
);

108 
	`LOGINF
(" ______________________________________________________ \n");

109 
	`LOGINF
("|______________________________________________________|\n");

111 
	`LOGINF
(" ______________________________________________________ \n");

112 
	`LOGINF
("| |\n");

113 
	`LOGINF
("| Printing Object List |\n");

114 
	`LOGINF
("|______________________________________________________|\n");

115 
	`¥öt_avm_vﬁume
((
PDDVOL
)
obje˘
);

116 
	`LOGINF
(" ______________________________________________________ \n");

117 
	`LOGINF
("|______________________________________________________|\n");

120 
	`•ö_u∆ock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

121 
	}
}

122 
EXPORT_SYMBOL
(
¥öt_obje˘_li°
);

124 
RVOID
 
	$¥öt_obje˘_li°_V2
(
VOID
)

126 
PDEVICE_OBJECT
 
obje˘
 = 
NULL
;

127 
LIST_HEAD
 *
íåy
;

129 
	`LOGINF
(" ______________________________________________________ \n");

130 
	`LOGINF
("| |\n");

131 
	`LOGINF
("| Printing Object List V2 |\n");

132 
	`LOGINF
("|______________________________________________________|\n");

134 
	`•ö_lock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

135 
	`li°_f‹_óch
(
íåy
, &
globÆ_obje˘_li°
.
obje˘q_hód
) {

136 
obje˘
 = 
	`li°_íåy
(
íåy
, 
dz_èrgë_obje˘_s
, 
obje˘q
);

137 i‡(
obje˘
->
obj_ty≥
 =
åue
) {

138 
	`¥öt_avm_devi˚
((
PAVM_DEVICE
)
obje˘
);

140 
	`¥öt_avm_vﬁume
((
PDDVOL
)
obje˘
);

143 
	`•ö_u∆ock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

144 
	`LOGINF
(" ______________________________________________________ \n");

145 
	`LOGINF
("|______________________________________________________|\n");

146 
	}
}

147 
EXPORT_SYMBOL
(
¥öt_obje˘_li°_V2
);

	@infra_engine/infra_engine_switches_tunables.c

9 
	~"¥ŸŸy≥s.h
"

17 
INT
 
	gdz_swôch_„c_ígöe
 = 
DZ_DISABLED
;

18 
EXPORT_SYMBOL
(
dz_swôch_„c_ígöe
);

20 
INT
 
	gdz_swôch_bec_ígöe
 = 
DZ_DISABLED
;

21 
EXPORT_SYMBOL
(
dz_swôch_bec_ígöe
);

23 
INT
 
	gdz_swôch_dedu≥_ígöe
 = 
DZ_DISABLED
;

24 
EXPORT_SYMBOL
(
dz_swôch_dedu≥_ígöe
);

26 
INT
 
	gdz_swôch_Æignmít_ígöe
 = 
DZ_ENABLED
;

27 
EXPORT_SYMBOL
(
dz_swôch_Æignmít_ígöe
);

29 
INT
 
	gdz_swôch_Æignmít_ígöe_mu…i_block_ªad
 = 
DZ_DISABLED
;

30 
EXPORT_SYMBOL
(
dz_swôch_Æignmít_ígöe_mu…i_block_ªad
);

32 
INT
 
	gdz_swôch_Æignmít_ígöe_mu…i_block_wrôe
 = 
DZ_DISABLED
;

33 
EXPORT_SYMBOL
(
dz_swôch_Æignmít_ígöe_mu…i_block_wrôe
);

35 
INT
 
	gdz_swôch_Æignmít_ígöe_∑πül_block_ªad
 = 
DZ_DISABLED
;

36 
EXPORT_SYMBOL
(
dz_swôch_Æignmít_ígöe_∑πül_block_ªad
);

38 
INT
 
	gdz_swôch_Æignmít_ígöe_∑πül_block_wrôe
 = 
DZ_DISABLED
;

39 
EXPORT_SYMBOL
(
dz_swôch_Æignmít_ígöe_∑πül_block_wrôe
);

45 
INT
 
	gdz_swôch_∑s°hrough_mode
 = 
DZ_DISABLED
;

46 
EXPORT_SYMBOL
(
dz_swôch_∑s°hrough_mode
);

49 
INT
 
	gdz_swôch_∑s°hrough_ªad
 = 
DZ_DISABLED
;

50 
EXPORT_SYMBOL
(
dz_swôch_∑s°hrough_ªad
);

52 
INT
 
	gdz_swôch_∑s°hrough_wrôe
 = 
DZ_ENABLED
;

53 
EXPORT_SYMBOL
(
dz_swôch_∑s°hrough_wrôe
);

55 
INT
 
	gdz_swôch_Áke_wrôe
 = 
DZ_DISABLED
;

56 
EXPORT_SYMBOL
(
dz_swôch_Áke_wrôe
);

58 
INT
 
	gdz_swôch_Áke_ªad
 = 
DZ_DISABLED
;

59 
EXPORT_SYMBOL
(
dz_swôch_Áke_ªad
);

	@infra_engine/infra_engine_target.c

9 
	~"¥ŸŸy≥s.h
"

17 
INT
 
	gdz_swôch_èrgë_i›©h
 = 
DZ_DISABLED
;

18 
EXPORT_SYMBOL
(
dz_swôch_èrgë_i›©h
);

24 
BASIC_COUNTERS
 
	gdz_basic_cou¡îs
;

25 
PBASIC_COUNTERS
 
	gpdz_basic_cou¡îs
;

26 
EXPORT_SYMBOL
(
dz_basic_cou¡îs
);

27 
EXPORT_SYMBOL
(
pdz_basic_cou¡îs
);

29 
AVM_COUNTERS
 
	gdz_avm_cou¡îs
;

30 
PAVM_COUNTERS
 
	gpdz_avm_cou¡îs
;

31 
EXPORT_SYMBOL
(
dz_avm_cou¡îs
);

32 
EXPORT_SYMBOL
(
pdz_avm_cou¡îs
);

37 
PBLOCK_DEVICE
 
	gDATA_DISK_DEVICE
 = 
NULL
;

38 
EXPORT_SYMBOL
(
DATA_DISK_DEVICE
);

40 
NAME
 
	gDATA_DISK_DEVICE_NAME
;

41 
EXPORT_SYMBOL
(
DATA_DISK_DEVICE_NAME
);

43 
PBLOCK_DEVICE
 
	gMETADATA_DISK_DEVICE
 = 
NULL
;

44 
EXPORT_SYMBOL
(
METADATA_DISK_DEVICE
);

46 
NAME
 
	gMETADATA_DISK_DEVICE_NAME
;

47 
EXPORT_SYMBOL
(
METADATA_DISK_DEVICE_NAME
);

49 
PBLOCK_DEVICE
 
	gTARGET_DEVICE
 = 
NULL
;

50 
EXPORT_SYMBOL
(
TARGET_DEVICE
);

52 
NAME
 
	gTARGET_DEVICE_NAME
;

53 
EXPORT_SYMBOL
(
TARGET_DEVICE_NAME
);

55 
SIZE
 
	gTARGET_DEVICE_SIZE
 = 0;

56 
EXPORT_SYMBOL
(
TARGET_DEVICE_SIZE
);

58 
PSUPERBLOCK
 
	gsu≥rblock
 = 
NULL
;

59 
EXPORT_SYMBOL
(
su≥rblock
);

61 
PAVM_DEVICE
 
	gaiß_devi˚_obje˘
 = 
NULL
;

62 
EXPORT_SYMBOL
(
aiß_devi˚_obje˘
);

68 
ATOMIC64
 
	gtŸ_≠∂iˇti⁄_iocou¡_ªads
;

69 
EXPORT_SYMBOL
(
tŸ_≠∂iˇti⁄_iocou¡_ªads
);

71 
ATOMIC64
 
	gtŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
;

72 
EXPORT_SYMBOL
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
);

74 
ATOMIC64
 
	gtŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
;

75 
EXPORT_SYMBOL
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
);

77 
ATOMIC64
 
	gtŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
;

78 
EXPORT_SYMBOL
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
);

83 
ATOMIC64
 
	gtŸ_≠∂iˇti⁄_iocou¡_wrôes
;

84 
EXPORT_SYMBOL
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes
);

86 
ATOMIC64
 
	gtŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
;

87 
EXPORT_SYMBOL
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
);

89 
ATOMIC64
 
	gtŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
;

90 
EXPORT_SYMBOL
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
);

92 
ATOMIC64
 
	gtŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
;

93 
EXPORT_SYMBOL
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
);

96 
ATOMIC64
 
	gtŸ_≠∂iˇti⁄_iocou¡
;

97 
EXPORT_SYMBOL
(
tŸ_≠∂iˇti⁄_iocou¡
);

102 
U64
 
	gtŸ_‰ì_•a˚
;

103 
EXPORT_SYMBOL
(
tŸ_‰ì_•a˚
);

	@infra_engine/infra_engine_thread_pool.c

9 
	~"¥ŸŸy≥s.h
"

12 
	#JOB_COMPLETION_TIMEOUT_VALUE
 
	`m£cs_to_jiffõs
(1000)

13 
	#IOREQUEST_COMPLETION_TIMEOUT_VALUE
 
	`m£cs_to_jiffõs
(1000)

14 
	#IO_COMPLETION_TIMEOUT_VALUE
 
	`m£cs_to_jiffõs
(100)

15 

	)

16 
PDZ_THREAD_POOL
 
	$dz_¸óã_thªad_poﬁ
(
CHAR
 *
«me
, CHAR *
¢ame
,

17 
UINT
 
num_thªads
,

18 
THREAD_INIT
 
öô
,

19 
THREAD_FREE
 
‰ì
,

20 
THREAD_FUNC
 
func
)

22 
cou¡
=0;

23 
PDZ_THREAD_POOL
 
dz_thªad_poﬁ
 = 
NULL
;

25 
DZ_THREAD
 *
w‹kî_thªad
 = 
NULL
;

27 
dz_thªad_poﬁ
 = 
	`dz_kmÆloc
((
DZ_WORKER_THREAD_POOL_T
), 
GFP_KERNEL
);

28 i‡(!
dz_thªad_poﬁ
) {

29 
	`LOGE
("UnableÅoállocate memory for dz_thread_pool\n");

30  
NULL
;

42 
w‹kî_thªad
 = 
	`dz_kmÆloc
(
num_thªads
 * (
WORKER_THREAD
), 
GFP_KERNEL
);

43 if(!
w‹kî_thªad
){

44 
	`LOGE
("UnableÅoállocate memory for workerÅhreads \n");

45 
	`dz_k‰ì
(
dz_thªad_poﬁ
, (
DZ_WORKER_THREAD_POOL_T
));

46  
NULL
;

48 
dz_thªad_poﬁ
->
w‹kî_thªad
 = worker_thread;

50 
	`°∫˝y
(
dz_thªad_poﬁ
->
«me
,Çame, 
NAME_LENGTH
);

52 
	`•ö_lock_öô
(&
dz_thªad_poﬁ
->
job_li°_lock
);

53 
	`•ö_lock_öô
(&
dz_thªad_poﬁ
->
ioq_lock
);

55 
	`INIT_LIST_HEAD
(&
dz_thªad_poﬁ
->
job_li°_hód
);

56 
	`INIT_LIST_HEAD
(&
dz_thªad_poﬁ
->
ioq_hód
);

58 
	`öô_waôqueue_hód
(&
dz_thªad_poﬁ
->
Æl_jobs_föished_waôq
);

59 
	`öô_waôqueue_hód
(&
dz_thªad_poﬁ
->
Æl_ios_föished_waôq
);

60 
	`öô_waôqueue_hód
(&
dz_thªad_poﬁ
->
Æl_a˘ive_thªads_föished_waôq
);

62 
	`öô_com∂ëi⁄
(&
dz_thªad_poﬁ
->
job_addôi⁄
);

63 
	`öô_com∂ëi⁄
(&
dz_thªad_poﬁ
->
ioq_addôi⁄
);

64 
	`öô_com∂ëi⁄
(&
dz_thªad_poﬁ
->
hÆt_a˘ive_thªads
);

65 
	`com∂ëe
(&
dz_thªad_poﬁ
->
hÆt_a˘ive_thªads
);

67 
	`©omic_£t
(&
dz_thªad_poﬁ
->
num_jobs
, 0);

68 
	`©omic_£t
(&
dz_thªad_poﬁ
->
num_a˘ive_thªads
, 0);

69 
	`©omic_£t
(&
dz_thªad_poﬁ
->
ioq_num_ios
, 0);

71 
dz_thªad_poﬁ
->
quõs˚
 = 
DZ_ACTIVE_IO
;

72 
dz_thªad_poﬁ
->
de°roy
 = 
Ál£
;

73 
dz_thªad_poﬁ
->
jobs
 = 
åue
;

74 
dz_thªad_poﬁ
->
ioq_›í
 = 
åue
;

76 
cou¡
=0; cou¡<
num_thªads
; count++) {

77 
w‹kî_thªad
->
thªad_öô
 = 
öô
;

78 
w‹kî_thªad
->
thªad_‰ì
 = 
‰ì
;

79 
w‹kî_thªad
->
thªad_func
 = 
func
;

80 
w‹kî_thªad
->
poﬁ
 = 
dz_thªad_poﬁ
;

81 
w‹kî_thªad
->
Æive
 = 
åue
;

82 
w‹kî_thªad
->
˛ónup_≥ndög
 = 
Ál£
;

85 
w‹kî_thªad
->
thªad
 = 
	`kthªad_¸óã
(
dz_io_d´m⁄
,

86 
w‹kî_thªad
, "%s_%d/%d", 
¢ame
, (
cou¡
+1), 
num_thªads
);

89 i‡(
	`IS_ERR
(
w‹kî_thªad
->
thªad
)) {

95 
	`LOGINF
("Kthread_create:pid %d,Ågid %d, Name %s \n",

96 
w‹kî_thªad
->
thªad
->
pid
,

97 
w‹kî_thªad
->
thªad
->
tgid
,

98 
w‹kî_thªad
->
thªad
->
comm
);

99 
	`wake_up_¥o˚ss
(
w‹kî_thªad
->
thªad
);

101 
dz_thªad_poﬁ
->
num_thªads
 = 
cou¡
 + 1;

106 
w‹kî_thªad
++;

108  
dz_thªad_poﬁ
;

109 
	}
}

110 
EXPORT_SYMBOL
(
dz_¸óã_thªad_poﬁ
);

121 
RVOID
 
	$dz_de°roy_thªad_poﬁ
(
PDZ_THREAD_POOL
 
poﬁ
)

123 
cou¡
 = 0;

124 
UINT
 
num_thªads
 = 
poﬁ
->num_threads;

126 
DZ_THREAD
 *
w‹kî_thªad
 = 
poﬁ
->worker_thread;

128 
	`LOGINF
("De°royög %s\n", 
poﬁ
->
«me
);

131 
poﬁ
->
ioq_›í
 = 
Ál£
;

136 i‡(
	`dz_out°™dög_i‹eque°s
(
poﬁ
)) {

138 
	`dz_waô_f‹_Æl_i‹eque°s_föished
(
poﬁ
);

148 
poﬁ
->
de°roy
 = 
åue
;

154 
	`com∂ëe_Æl
(&
poﬁ
->
ioq_addôi⁄
);

157 
cou¡
=0; cou¡<
num_thªads
; count++) {

158 
	`kthªad_°›
(
w‹kî_thªad
->
thªad
);

159 
	`LOGINF
("Kthread_stop:pid %d,Ågid %d, Name %s \n",

160 
w‹kî_thªad
->
thªad
->
pid
,

161 
w‹kî_thªad
->
thªad
->
tgid
,

162 
w‹kî_thªad
->
thªad
->
comm
);

164 i‡(
w‹kî_thªad
->
thªad_‰ì
) {

165 
w‹kî_thªad
->
	`thªad_‰ì
(worker_thread);

167 
w‹kî_thªad
++;

171 
	`dz_k‰ì
(
poﬁ
->
w‹kî_thªad
, 
num_thªads
 * (
WORKER_THREAD
));

174 
	`dz_k‰ì
(
poﬁ
, (
DZ_WORKER_THREAD_POOL_T
));

175 
	}
}

176 
EXPORT_SYMBOL
(
dz_de°roy_thªad_poﬁ
);

179 
RVOID
 
	$dz_thªad_exô
(
VOID
)

181 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

182 !
	`kthªad_should_°›
()) {

183 
	`scheduÀ
();

184 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

186 
	`__£t_cuºít_°©e
(
TASK_RUNNING
);

187 
	}
}

188 
EXPORT_SYMBOL
(
dz_thªad_exô
);

190 
RINT
 
	$dz_io_d´m⁄
(*
d©a
)

192 
DZ_THREAD_POOL
 *
poﬁ
;

193 
DZ_THREAD
 *
io_d´m⁄
;

194 
PDZIO
 
i‹eque°
;

196 
io_d´m⁄
 = (
DZ_THREAD
 *)
d©a
;

197 
poﬁ
 = 
io_d´m⁄
->pool;

199 
a˘i⁄
:

200 !
	`kthªad_should_°›
(Ë&& !
poﬁ
->
de°roy
) {

201 i‡(
poﬁ
->
quõs˚
 =
DZ_QUIESCE_IO
) {

204 i‡–
io_d´m⁄
->
Æive
 =
Ál£
 ) {

208 
i‹eque°
 = 
	`dz_dq_i‹eque°
(
poﬁ
);

209 if(
i‹eque°
) {

210 
	`©omic_öc
(&
poﬁ
->
num_a˘ive_thªads
);

213 if(
io_d´m⁄
->
thªad_func
) {

215 
io_d´m⁄
->
	`thªad_func
(
i‹eque°
);

218 i‡(
	`©omic_dec_™d_ã°
(&
poﬁ
->
num_a˘ive_thªads
)) {

219 
	`wake_up
(&
poﬁ
->
Æl_a˘ive_thªads_föished_waôq
);

221 i‡(
	`©omic_dec_™d_ã°
(&
poﬁ
->
ioq_num_ios
)) {

222 
	`wake_up
(&
poﬁ
->
Æl_ios_föished_waôq
);

225 
a˘i⁄
;

233 
	`waô_f‹_com∂ëi⁄_öãºu±ibÀ
(&
poﬁ
->
ioq_addôi⁄
);

237 i‡(
poﬁ
->
de°roy
) {

238 
	`dz_thªad_exô
();

246 
RETURNS
;

247 
	}
}

249 
UINT
 
	$dz_out°™dög_jobs
(
DZ_THREAD_POOL
 *
poﬁ
)

251  
	`©omic_ªad
(&
poﬁ
->
num_jobs
);

252 
	}
}

255 
RVOID
 
	$dz_waô_f‹_Æl_jobs_föished
(
DZ_THREAD_POOL
 *
poﬁ
)

257 
UINT
 
≥ndög_jobs
;

258 (
≥ndög_jobs
 = 
	`©omic_ªad
(&
poﬁ
->
num_jobs
))) {

259 
	`LOGINF
("Num o‡Pídög JOBS f‹ Poﬁ %†¨ê%u\n", 
poﬁ
->
«me
, 
≥ndög_jobs
);

260 
	`waô_evít_timeout
(
poﬁ
->
Æl_jobs_föished_waôq
, (
≥ndög_jobs
 =0), 
JOB_COMPLETION_TIMEOUT_VALUE
);

262 
	}
}

264 
RVOID
 
	$dz_waô_f‹_Æl_i‹eque°s_föished
(
DZ_THREAD_POOL
 *
poﬁ
)

266 
UINT
 
≥ndög_i‹eque°s
;

267 (
≥ndög_i‹eque°s
 = 
	`©omic_ªad
(&
poﬁ
->
ioq_num_ios
))) {

268 
	`LOGINF
("Num o‡Pídög IO Reque°†f‹ Poﬁ %†¨ê%u\n", 
poﬁ
->
«me
, 
≥ndög_i‹eque°s
);

269 
	`waô_evít_timeout
(
poﬁ
->
Æl_jobs_föished_waôq
, (
≥ndög_i‹eque°s
 =0), 
IOREQUEST_COMPLETION_TIMEOUT_VALUE
);

271 
	}
}

273 
RVOID
 
	$dz_waô_f‹_Æl_a˘ive_thªads_föished
(
DZ_THREAD_POOL
 *
poﬁ
)

275 
UINT
 
≥ndög_thªads
;

276 (
≥ndög_thªads
 = 
	`©omic_ªad
(&
poﬁ
->
num_a˘ive_thªads
))) {

277 
	`LOGINF
("Num o‡Pídög A˘ivêThªad†f‹ Poﬁ %†¨ê%u\n", 
poﬁ
->
«me
, 
≥ndög_thªads
);

278 
	`waô_evít_timeout
(
poﬁ
->
Æl_a˘ive_thªads_föished_waôq
, (
≥ndög_thªads
 =0), 
IO_COMPLETION_TIMEOUT_VALUE
);

280 
	}
}

	@infra_engine/infra_engine_utils.c

9 
	~"¥ŸŸy≥s.h
"

10 
	sdz_block_devi˚_s
 {

11 
block_devi˚
 *
	mbdev_øw
;

12 } 
	tdz_block_devi˚_t
;

15 
dz_block_devi˚_t
 
	gdz_block_devi˚
;

16 
OBJECT_LIST
 
globÆ_obje˘_li°
;

17 
U64
 
lba_èbÀ_size
;

18 
U64
 
pba_èbÀ_size
;

19 
U64
 
hash_èbÀ_size
;

20 
U64
 
sysfs_avm_‰ì_∑ge_cou¡
;

21 
SPINLOCK
 
	gdz_¥öt_lock
;

23 
RVOID
 
	$_¥öt_bio
(
bio
 *bio)

25 c⁄° *
	`bdev«me
(
block_devi˚
 *
bdev
, *
buf„r
);

26 
b
[
BDEVNAME_SIZE
];

27 
PVOID
 
mem
 = 
NULL
;

28 i‡(!
bio
) {

29 
	`LOG
("Bio is Null\n");

38 
	`LOGR
("| biÿ = %p\n", 
bio
);

39 
	`LOGR
("| bio direction = %s\n",

40 
	`bio_d©a_dú
(
bio
Ë=
WRITE
 ? "WRITE" : "READ");

41 
	`LOGR
("| bio->devi˚_«mê = %s\n", 
	`bdev«me
(
	`DZ_BIO_GET_DEV
(
bio
), 
b
));

42 
	`LOGR
("| bio->devi˚_«mê = %∞(Addªss)\n", 
	`DZ_BIO_GET_DEV
(
bio
));

43 #ifde‡
DZ_KERNEL_VERSION_4


44 
	`LOGR
("| bio->bi_Êag† = %hu, 0x%x\n", 
bio
->
bi_Êags
, bio->bi_flags);

46 
	`LOGR
("| bio->bi_Êag† = %lu, 0x%lx\n", 
bio
->
bi_Êags
, bio->bi_flags);

48 i‡(
	`bio_Êagged
(
bio
, 
BIO_OWNS_VEC
)) {

49 
	`LOGR
("| bio has BIO_OWNS_VEC flag set\n");

51 i‡(
	`bio_Êagged
(
bio
, 
BIO_UPTODATE
)) {

52 
	`LOGR
("| bio has BIO_UPTODATE flag set\n");

56 #ifde‡
DZ_KERNEL_VERSION_4


57 
	`LOGR
("| bio->bi_›‡ = %u, 0x%x\n", 
bio
->
bi_›f
, bio->bi_opf);

58 
	`LOGR
("| bio->bi_bdev = 0x%p\n", 
	`DZ_BIO_GET_DEV
(
bio
));

60 
	`LOGR
("| bio->bi_rw = %lu, 0x%lx\n", 
bio
->
bi_rw
, bio->bi_rw);

61 
	`LOGR
("| bio->bi_bdev = 0x%p\n", 
bio
->
bi_bdev
);

63 
	`LOGR
("| bio->bi_v˙à = %d\n", 
bio
->
bi_v˙t
);

64 
	`LOGR
("| bio->bi_˙à = %d\n", 
	`©omic_ªad
(& 
	`DZ_BIO_GET_CNT
(
bio
)));

65 
	`LOGR
("| bio->bi_max_vec† = %d\n", 
bio
->
bi_max_vecs
);

66 
	`LOGR
("| bio->bi_£˘‹ = %Œu, %Œd", (
ULONGLONG
)
	`DZ_BIO_GET_SECTOR
(
bio
), (
S64
)DZ_BIO_GET_SECTOR(bio));

67 
	`LOGR
("| bio->bi_sizê = %u", 
	`DZ_BIO_GET_SIZE
(
bio
));

68 
	`LOGR
("| bio->bi_idx = %u", 
	`DZ_BIO_GET_IDX
(
bio
));

69 
	`LOGR
("| bio->bi_√xà = %p", 
	`DZ_BIO_GET_NEXT
(
bio
));

70 
	`LOGR
("| bio->bi_¥iv©ê = %p", 
bio
->
bi_¥iv©e
 );

71 
	`LOGR
("| bio->bi_poﬁ = %p", 
bio
->
bi_poﬁ
 );

72 
	`LOGR
("| bio->bi_phys_£gmít† = %u\n", 
bio
->
bi_phys_£gmíts
);

73 
	`LOGR
("| bio->bi_£g_‰⁄t_sizê%u\n", 
bio
->
bi_£g_‰⁄t_size
);

74 
	`LOGR
("| bio->bi_£g_back_sizê = %u\n", 
bio
->
bi_£g_back_size
);

75 
	`LOGR
("| bio->bi_íd_iÿ = %p\n", 
bio
->
bi_íd_io
);

76 
	`LOGR
("| bio->bi_io_ve¯ = %p\n", 
bio
->
bi_io_vec
);

78 #ifde‡
DZ_KERNEL_VERSION_4


79 
bio_vec
 
bvec
;

80 
bvec_ôî
 
ôî
;

81 
	`LOGR
("| Printing biovec Information |\n");

82 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
ôî
) {

83 
	`LOGR
("| bio->bi_io_vec.bv_off£à%d\n", 
bvec
.
bv_off£t
);

84 
	`LOGR
("| bio->bi_io_vec.bv_À¿ = %d\n", 
bvec
.
bv_Àn
);

85 
	`LOGR
("| bio->bi_io_vec.bv_∑gê = %p\n", 
bvec
.
bv_∑ge
);

86 
mem
 = 
	`km≠
(
bvec
.
bv_∑ge
);

87 
	`LOGR
("| bio->bi_io_vec->bv_∑gê = %∞(km≠)\n", 
mem
);

88 
	`kunm≠
(
bvec
.
bv_∑ge
);

89 
	`LOGR
("\n");

92 
i
 = 0;

93 
bio_vec
 *
bvec
 = 
NULL
;

94 
	`LOGR
("| Printing biovec Information |\n");

95 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
i
) {

96 
	`LOGR
("| bio->bi_io_vec->bv_off£à%d\n", 
bvec
->
bv_off£t
);

97 
	`LOGR
("| bio->bi_io_vec->bv_À¿ = %d\n", 
bvec
->
bv_Àn
);

98 
	`LOGR
("| bio->bi_io_vec->bv_∑gê = %p\n", 
bvec
->
bv_∑ge
);

99 
mem
 = 
	`km≠
(
bvec
->
bv_∑ge
);

100 
	`LOGR
("| bio->bi_io_vec->bv_∑gê = %∞(km≠)\n", 
mem
);

101 
	`kunm≠
(
bvec
->
bv_∑ge
);

102 
	`LOGR
("\n");

111 
	}
}

113 
RVOID
 
	$¥öt_bio
(
bio
 *bio)

115 
	`LOGR
(" ______________________________________________________ \n");

116 
	`LOGR
("| |\n");

117 
	`LOGR
("| Printing bio Information |\n");

118 
	`LOGR
("|______________________________________________________|\n");

120 
	`_¥öt_bio
(
bio
);

121 
	`LOGR
(" ______________________________________________________ \n");

122 
	`LOGR
("|______________________________________________________|\n");

123 
	}
}

124 
EXPORT_SYMBOL
(
¥öt_bio
);

127 
RVOID
 
	$¥öt_biom
(
bio
 *bio, *
m¨k
)

129 
	`LOGR
(" ______________________________________________________ \n");

130 
	`LOGR
("| |\n");

131 
	`LOGR
("| Printing bio Information |\n");

132 
	`LOGR
("| %† \n", 
m¨k
);

133 
	`LOGR
("|______________________________________________________|\n");

135 
	`_¥öt_bio
(
bio
);

136 
	`LOGR
(" ______________________________________________________ \n");

137 
	`LOGR
("|______________________________________________________|\n");

138 
	}
}

139 
EXPORT_SYMBOL
(
¥öt_biom
);

141 
PBLOCK_DEVICE
 
	$dz_bdev_›í
(
dev_∑th
[])

144 
PBLOCK_DEVICE
 
bdev_øw
 = 
	`lookup_bdev
(
dev_∑th
);

145 
PBLOCK_DEVICE
 
bdev_øw1
 = 
NULL
;

146 
INT
 
ªt
 = 0;

147 
gídisk
 *
disk
 = 
NULL
;

150 i‡(
	`IS_ERR
(
bdev_øw
)) {

151 
	`LOGE
("ö o≥nögÑaw devi˚ %s\n", 
dev_∑th
);

152  
NULL
;

154 i‡(!
	`bdgë
(
bdev_øw
->
bd_dev
)) {

155 
	`LOGE
("in bdget()\n");

156  
NULL
;

158 
ªt
 = (
	`blkdev_gë
(
bdev_øw
, 
DZ_BLOCK_DEVICE_MODE
, &
dz_block_devi˚
));

159 i‡(
ªt
) {

160 
	`LOGE
("ö blkdev_gë(),Ñë=%d\n", 
ªt
);

161 
	`bdput
(
bdev_øw
);

162  
NULL
;

164 
	`LOGINF
("Block devi˚ %†›íed suc˚ssfuŒy. Addªs†i†%p\n",
dev_∑th
, 
bdev_øw
);

165 
disk
 = 
bdev_øw
->
bd_disk
;

166 
bdev_øw1
 = 
	`bdgë_disk
(
disk
, 10);

167 
	`LOGINF
("Disk Namê%s, New Addªs†%p\n", 
disk
->
disk_«me
, 
bdev_øw1
);

168  
bdev_øw
;

169 
	}
}

170 
EXPORT_SYMBOL
(
dz_bdev_›í
);

172 
RVOID
 
	$dz_bdev_˛o£
(
PBLOCK_DEVICE
 
bdev
)

174 
	`blkdev_put
(
bdev
, 
DZ_BLOCK_DEVICE_MODE
);

175 
	`bdput
(
bdev
);

176 
	}
}

177 
EXPORT_SYMBOL
(
dz_bdev_˛o£
);

179 
INLINE
 
LBA
 
	$dz_c⁄vît_£˘‹_to_lba
(
SECTOR
 
£˘‹
)

181  ((
£˘‹
 * 
SECTOR_SIZE
Ë/ 
LBA_BLOCK_SIZE
);

182 
	}
}

183 
EXPORT_SYMBOL
(
dz_c⁄vît_£˘‹_to_lba
);

185 
INLINE
 
SECTOR
 
	$dz_c⁄vît_lba_to_£˘‹
(
LBA
 
lba
)

187 i‡(0 =
lba
) {

190  ((
lba
 * 
LBA_BLOCK_SIZE
)/ 
SECTOR_SIZE
);

192 
	}
}

193 
EXPORT_SYMBOL
(
dz_c⁄vît_lba_to_£˘‹
);

195 
RINT
 
	$dz_bio_bvec_wrôe_∑ge_‰ì
(
PBIO
 
bio
)

197 #ifde‡
DZ_KERNEL_VERSION_4


198 
bio_vec
 
bvec
;

199 
bvec_ôî
 
ôî
;

200 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
ôî
) {

201 
	`LOGINF
("Fªeög bvec.bv_∑gê = %p\n", 
bvec
.
bv_∑ge
);

202 
	`dz_wrôe_∑ge_‰ì
(
bvec
.
bv_∑ge
);

203 
bvec
.
bv_∑ge
 = 
NULL
;

206 
bio_vec
 *
bvec
 = 
NULL
;

207 
i
 = 0;

208 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
i
) {

209 
	`LOGINF
("Fªeög bvec->bv_∑gê = %p\n", 
bvec
->
bv_∑ge
);

210 
	`dz_wrôe_∑ge_‰ì
(
bvec
->
bv_∑ge
);

211 
bvec
->
bv_∑ge
 = 
NULL
;

214 
RETURNS
;

215 
	}
}

217 
RINT
 
	$dz_bio_bvec_ªad_∑ge_‰ì
(
PBIO
 
bio
)

219 #ifde‡
DZ_KERNEL_VERSION_4


220 
bio_vec
 
bvec
;

221 
bvec_ôî
 
ôî
;

222 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
ôî
) {

223 
	`LOGINF
("Fªeög bvec.bv_∑gê = %p\n", 
bvec
.
bv_∑ge
);

224 
	`dz_ªad_∑ge_‰ì
(
bvec
.
bv_∑ge
);

225 
bvec
.
bv_∑ge
 = 
NULL
;

228 
bio_vec
 *
bvec
 = 
NULL
;

229 
i
 = 0;

230 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
i
) {

231 
	`dz_ªad_∑ge_‰ì
(
bvec
->
bv_∑ge
);

232 
bvec
->
bv_∑ge
 = 
NULL
;

235 
RETURNS
;

236 
	}
}

238 
INT
 
	$dz_bio_ve˘‹_∑ge_¥öt
(
PBIO
 
bio
)

240 #ifde‡
DZ_KERNEL_VERSION_4


241 
bio_vec
 
bvec
;

242 
bvec_ôî
 
ôî
;

243 
PVOID
 
d©a
 = 
NULL
;

244 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
ôî
) {

245 
	`LOGINF
("bvec.bv_∑gê = %p\n", 
bvec
.
bv_∑ge
);

246 
d©a
 = 
	`km≠
(
bvec
.
bv_∑ge
);

248 
	`kunm≠
(
bvec
.
bv_∑ge
);

251 
bio_vec
 *
bvec
 = 
NULL
;

252 
i
 = 0;

253 
PVOID
 
d©a
 = 
NULL
;

254 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
i
) {

255 
	`LOGINF
("bvec->bv_∑gê = %p\n", 
bvec
->
bv_∑ge
);

256 
d©a
 = 
	`km≠
(
bvec
->
bv_∑ge
);

258 
	`kunm≠
(
bvec
->
bv_∑ge
);

261 
RETURNS
;

262 
	}
}

265 
RINT
 
	$dz_Æloc_d©a_∑ges
(
PDATAPAGES_T
 
d©a_∑ges
, 
UINT
 
pg˙t
)

267 
PPAGE
 
∑ge
 = 
NULL
;

268 
INT
 
i
 = 0;

270 
d©a_∑ges
->
pg˙t
 =Ögcnt;

271 
d©a_∑ges
->
∑gevec
 = 
	`kmÆloc
(
pg˙t
 *  (
BIOVEC
), 
GFP_KERNEL
 | 
__GFP_ZERO
);

272 
	`mem£t
(
d©a_∑ges
->
∑gevec
, 0, 
pg˙t
 * (
BIOVEC
));

273 i‡(!
d©a_∑ges
->
∑gevec
) {

274 
	`LOGE
("UnableÅo create Data Pages Vector \n");

275 
exô_Áûuª
;

278 
i
=0; i < 
pg˙t
; i++) {

279 
bio_vec
 *
bvec
 = &(
d©a_∑ges
->
∑gevec
[
i
]);

280 
∑ge
 = 
	`dz_ªad_∑ge_Æloc
();

281 i‡(!
∑ge
) {

282 
	`LOGE
("UnableÅo get freeÑeadÖage\n");

283 
exô_Áûuª
;

285 
	`MEMSET_PAGE
(
∑ge
);

286 
	`LOGINF
("PagêAŒoˇãd = %p\n", 
∑ge
);

287 
bvec
->
bv_∑ge
 = 
∑ge
;

288 
bvec
->
bv_off£t
 = 0;

289 
bvec
->
bv_Àn
 = 
PAGE_SIZE
;

292 
RETURNS
;

294 
exô_Áûuª
:

295 
	`dz_‰ì_d©a_∑ges
(
d©a_∑ges
, 
Ál£
);

296 
RETURNF
;

297 
	}
}

300 
RVOID
 
	$dz_‰ì_d©a_∑ges
(
PDATAPAGES_T
 
d©a_∑ges
, 
BOOL
 
£lf
)

302 
INT
 
i
 = 0;

304 i‡(!
d©a_∑ges
) {

305 
	`LOGINF
("Data Pagesáreálready NULL\n");

311 
i
=0; i < 
d©a_∑ges
->
pg˙t
; i++){

312 
bio_vec
 *
bvec
 = &(
d©a_∑ges
->
∑gevec
[
i
]);

313 i‡(!
bvec
) {

314 
	`LOGINF
(" bvec is NULL\n");

316 if(
bvec
->
bv_∑ge
) {

317 
	`LOGINF
("PagêFªed = %p\n", 
bvec
->
bv_∑ge
);

318 
	`dz_ªad_∑ge_‰ì
(
bvec
->
bv_∑ge
);

319 
bvec
->
bv_∑ge
 = 
NULL
;

325 i‡(
d©a_∑ges
->
∑gevec
) {

326 
	`k‰ì
(
d©a_∑ges
->
∑gevec
);

328 i‡(
£lf
) {

329 
	`k‰ì
(
d©a_∑ges
);

333 
	}
}

334 
EXPORT_SYMBOL
(
dz_‰ì_d©a_∑ges
);

336 
RVOID
 
	$¥öt_∑ge
(
PPAGE
 
∑ge
)

338 
INT
 
j
 = 0;

339 
PVOID
 
∑ged©a
 = 
NULL
;

340 
CHAR
 
buf
[513] = {'\0'};

342 
	`LOGINF
(" ______________________________________________________ \n");

343 
	`LOGINF
("| |\n");

344 
	`LOGINF
("| Printing Page |\n");

345 
	`LOGINF
("|______________________________________________________|\n");

347 
∑ged©a
 = 
	`km≠
(
∑ge
);

348 
j
 = 0; j < 8; j++) {

349 
	`¥ötk
(
KERN_ERR
"\n");

350 
	`mem˝y
(
buf
, 
∑ged©a
, 512);

351 
	`¥ötk
(
KERN_ERR
"%s", 
buf
);

352 
∑ged©a
 += 512;

353 
	`mem£t
(
buf
, 0, 513);

355 
	`kunm≠
(
∑ge
);

357 
	`LOGINF
(" ______________________________________________________ \n");

358 
	`LOGINF
("|______________________________________________________|\n");

360 
	}
}

362 
RVOID
 
	$¥öt_bio_∑ge
(
PBIO
 
bio
)

364 
INT
 
j
 = 0;

366 #ifde‡
DZ_KERNEL_VERSION_4


367 
bio_vec
 
bvec
;

368 
bvec_ôî
 
ôî
;

369 
PVOID
 
∑ged©a
 = 
NULL
;

370 
CHAR
 
buf
[513] = {'\0'};

371 
	`LOGINF
(" ______________________________________________________ \n");

372 
	`LOGINF
("| |\n");

373 
	`LOGINF
("| Printing Bio Page |\n");

374 
	`LOGINF
("|______________________________________________________|\n");

376 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
ôî
) {

377 
∑ged©a
 = 
	`km≠
(
bvec
.
bv_∑ge
);

378 
j
 = 0; j < 8; j++) {

379 
	`¥ötk
(
KERN_ERR
"\n");

380 
	`mem˝y
(
buf
, 
∑ged©a
, 512);

381 
	`¥ötk
(
KERN_ERR
"%s", 
buf
);

382 
∑ged©a
 += 512;

383 
	`mem£t
(
buf
, 0, 513);

385 
	`kunm≠
(
bvec
.
bv_∑ge
);

388 
INT
 
i
 = 0;

389 
PVOID
 
∑ged©a
 = 
NULL
;

390 
CHAR
 
buf
[513] = {'\0'};

391 
bio_vec
 *
bvec
 = 
NULL
;

393 
	`LOGINF
(" ______________________________________________________ \n");

394 
	`LOGINF
("| |\n");

395 
	`LOGINF
("| Printing Bio Page |\n");

396 
	`LOGINF
("|______________________________________________________|\n");

398 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
i
) {

399 
∑ged©a
 = 
	`km≠
(
bvec
->
bv_∑ge
);

400 
j
 = 0; j < 8; j++) {

401 
	`¥ötk
(
KERN_ERR
"\n");

402 
	`mem˝y
(
buf
, 
∑ged©a
, 512);

403 
	`¥ötk
(
KERN_ERR
"%s", 
buf
);

404 
∑ged©a
 += 512;

405 
	`mem£t
(
buf
, 0, 513);

407 
	`kunm≠
(
bvec
->
bv_∑ge
);

411 
	`LOGINF
(" ______________________________________________________ \n");

412 
	`LOGINF
("|______________________________________________________|\n");

414 
	}
}

416 
RVOID
 
	$¥öt_bio_∑ge_löes
(
PBIO
 
bio
)

418 
INT
 
j
 = 0;

420 
PVOID
 
∑ged©a
 = 
NULL
;

421 
CHAR
 
buf
[65] = {'\0'};

422 #ifde‡
DZ_KERNEL_VERSION_4


423 
bio_vec
 
bvec
;

424 
bvec_ôî
 
ôî
;

426 
INT
 
i
 = 0;

427 
bio_vec
 *
bvec
 = 
NULL
;

431 
¥öt_lock_idx
 = 0;

433 i‡(
¥öt_lock_idx
 == 0) {

434 
	`•ö_lock_öô
(&
dz_¥öt_lock
);

435 
¥öt_lock_idx
 = 1;

441 
	`LOGINF
(" ______________________________________________________ \n");

442 
	`LOGINF
("| |\n");

443 
	`LOGINF
("| Printing Bio Page Line |\n");

444 
	`LOGINF
("|______________________________________________________|\n");

445 
	`mem£t
(
buf
, 0, 65);

446 #ifde‡
DZ_KERNEL_VERSION_4


447 
	`bio_f‹_óch_£gmít
(
bvec
, 
bio
, 
ôî
) {

448 
∑ged©a
 = 
	`km≠
(
bvec
.
bv_∑ge
);

449 
∑ged©a
 +
bvec
.
bv_off£t
; \

450 
j
 = 0; j < 64; j++) {

451 
	`mem˝y
(
buf
, 
∑ged©a
, 64);

452 
	`¥ötk
(
KERN_ERR
"<<[%s]>>", 
buf
);

459 
∑ged©a
 += 64;

460 
	`mem£t
(
buf
, 0, 65);

462 
	`kunm≠
(
bvec
.
bv_∑ge
);

466 
	`bio_f‹_óch_£gmít
(
bvec
, (
bio
), 
i
) {

467 
∑ged©a
 = 
	`km≠
(
bvec
->
bv_∑ge
);

468 
∑ged©a
 +
bvec
->
bv_off£t
; \

469 
j
 = 0; j < 64; j++) {

470 
	`mem˝y
(
buf
, 
∑ged©a
, 64);

471 
	`¥ötk
(
KERN_ERR
"<<[%s]>>", 
buf
);

478 
∑ged©a
 += 64;

479 
	`mem£t
(
buf
, 0, 65);

481 
	`kunm≠
(
bvec
->
bv_∑ge
);

485 
	`LOGINF
(" ______________________________________________________ \n");

486 
	`LOGINF
("|______________________________________________________|\n");

489 
	}
}

491 
RVOID
 
	$¥öt_d©a
(
PVOID
 
d©a
)

493 
INT
 
j
 = 0;

494 
PVOID
 
∑ged©a
 = 
d©a
;

495 
CHAR
 
buf
[513] = {'\0'};

497 
	`LOGINF
(" ______________________________________________________ \n");

498 
	`LOGINF
("| |\n");

499 
	`LOGINF
("| Printing Data Pages Information |\n");

500 
	`LOGINF
("|______________________________________________________|\n");

502 
j
 = 0; j < 8; j++) {

503 
	`¥ötk
(
KERN_ERR
"\n");

504 
	`mem˝y
(
buf
, 
∑ged©a
, 512);

505 
	`¥ötk
(
KERN_ERR
"%s", 
buf
);

506 
∑ged©a
 += 512;

507 
	`mem£t
(
buf
, 0, 513);

510 
	`LOGINF
(" ______________________________________________________ \n");

511 
	`LOGINF
("|______________________________________________________|\n");

513 
	}
}

514 
EXPORT_SYMBOL
(
¥öt_d©a
);

516 
RVOID
 
	$¥öt_d©a_∑ges
(
PDATAPAGES_T
 
d©a_∑ges
)

518 
INT
 
i
 = 0;

519 
INT
 
j
 = 0;

520 
PVOID
 
∑ged©a
 = 
NULL
;

521 
UINT
 
pg˙t
 = 0;

522 
PHASH
 
hash
 = 
NULL
;

523 
U32
 *
hash_¨øy
 = 
NULL
;

524 
CHAR
 
buf
[513] = {'\0'};

526 i‡(!
d©a_∑ges
) {

527 
	`LOGINF
("Data Pagesáre NULL\n");

530 
pg˙t
 = 
d©a_∑ges
->pgcnt;

531 
	`LOGINF
(" ______________________________________________________ \n");

532 
	`LOGINF
("| |\n");

533 
	`LOGINF
("| Printing Data Pages Information |\n");

534 
	`LOGINF
("|______________________________________________________|\n");

535 
	`LOGINF
("| d©a_∑ges->pg˙à = %d\n", 
pg˙t
);

537 
i
=0; i < 
pg˙t
; i++){

538 
bio_vec
 *
bvec
 = &(
d©a_∑ges
->
∑gevec
[
i
]);

539 i‡(!
bvec
) {

540 
	`LOGINF
("|Öagevec[%d/%d]->bv_off£à%d\n", 
i
, 
pg˙t
-1, 0);

541 
	`LOGINF
("|Öagevec[%d/%d]->bv_À¿ = %d\n", 
i
, 
pg˙t
-1, 0);

542 
	`LOGINF
("|Öagevec[%d/%d]->bv_∑gê = %p\n", 
i
, 
pg˙t
-1, 
NULL
);

544 
	`LOGINF
("|Öagevec[%d/%d]->bv_off£à%d\n", 
i
, 
pg˙t
-1, 
bvec
->
bv_off£t
);

545 
	`LOGINF
("|Öagevec[%d/%d]->bv_À¿ = %d\n", 
i
, 
pg˙t
-1, 
bvec
->
bv_Àn
);

546 
	`LOGINF
("|Öagevec[%d/%d]->bv_∑gê = %p\n", 
i
, 
pg˙t
-1, 
bvec
->
bv_∑ge
);

547 
∑ged©a
 = 
	`km≠
(
bvec
->
bv_∑ge
);

548 
∑ged©a
 +
bvec
->
bv_off£t
;

549 
	`¥ötk
(
KERN_ERR
"| ");

552 i‡(!
hash
) {

553 
	`LOGE
("UnableÅoállocate hash\n");

555 
hash_¨øy
 = 
hash
->hash;

558 
	`PRINT_HASH
(
hash
);

561 i‡(
bvec
->
bv_Àn
 < 
PAGE_SIZE
) {

562 
INT
 
k
 = 
bvec
->
bv_Àn
 / 512;

563 
j
 = 0; j < 
k
; j++) {

564 
	`¥ötk
(
KERN_ERR
"\n");

565 
	`mem˝y
(
buf
, 
∑ged©a
, 512);

566 
	`¥ötk
(
KERN_ERR
"%s", 
buf
);

567 
∑ged©a
 += 512;

568 
	`mem£t
(
buf
, 0, 513);

572 
j
 = 0; j < 8; j++) {

573 
	`¥ötk
(
KERN_ERR
"\n");

574 
	`mem˝y
(
buf
, 
∑ged©a
, 512);

575 
	`¥ötk
(
KERN_ERR
"%s", 
buf
);

576 
∑ged©a
 += 512;

577 
	`mem£t
(
buf
, 0, 513);

588 
	`kunm≠
(
bvec
->
bv_∑ge
);

592 
	`LOGINF
(" ______________________________________________________ \n");

593 
	`LOGINF
("|______________________________________________________|\n");

595 
	}
}

596 
EXPORT_SYMBOL
(
¥öt_d©a_∑ges
);

598 
RVOID
 
	$dz_∑nic
(*
°r
)

600 
bio
 *biÿ
NULL
;

601 
	`LOGINF
("Forcing System Panic in 3 Seconds\n");

602 
	`SLEEP
(3);

603 
	`LOGINF
("%lu\n", 
bio
->
bi_Êags
);

604 
	}
}

605 
EXPORT_SYMBOL
(
dz_∑nic
);

607 
RVOID
 
	$¥öt_avm_devi˚
(
PAVM_DEVICE
 
obj
)

610 
	`PRINT_STRING
(
obj
->obj.
obj_magi˙o
);

611 
	`PRINT_NAME
(
obj
->obj.
obj_«me
);

612 
	`PRINT_UUID
(
obj
->obj.
obj_uuid
);

613 
	`PRINT_COUNT
(
obj
->obj.
obj_°¨t_pba
);

614 
	`PRINT_COUNT
(
obj
->obj.
obj_íd_pba
);

615 
	`PRINT_FLAGS
(
obj
->obj.
obj_Êags
);

616 
	`PRINT_NAME
(
obj
->obj.
obj_dm_dev_«me
);

617 
	`PRINT_UUID
(
obj
->obj.
obj_dm_dev_uuid
);

618 
	`PRINT_COUNT
(
obj
->obj.
obj_chûd_˙t
);

620 
	`PRINT_COUNT
(
obj
->
‰ì_˙t
);

621 
	`PRINT_COUNT
(
obj
->
u£d_˙t
);

622 
	`PRINT_COUNT
(
obj
->
pvt_˙t
);

623 
	`PRINT_COUNT
(
obj
->
tŸ_˙t
);

624 
	`PRINT_COUNT
(
obj
->
tobe_îa£d_˙t
);

625 
	`PRINT_COUNT
(
obj
->
tŸ_îa£d_˙t
);

627 
	}
}

629 
RVOID
 
	$¥öt_avm_vﬁume
(
PDDVOL
 
ddvﬁ
)

631 
PVOID
 
lba_èbÀ
 = 
ddvﬁ
->
ddvﬁ_lba_èbÀ
;

632 
	`PRINT_STRING
 (
ddvﬁ
->
ddvﬁ_obj
.
obj_magi˙o
);

633 
	`PRINT_NAME
 (
ddvﬁ
->
ddvﬁ_obj
.
obj_«me
);

634 
	`PRINT_UUID
 (
ddvﬁ
->
ddvﬁ_obj
.
obj_uuid
);

635 
	`PRINT_LBA
 (
ddvﬁ
->
ddvﬁ_obj
.
obj_°¨t_lba
);

636 
	`PRINT_LBA
 (
ddvﬁ
->
ddvﬁ_obj
.
obj_íd_lba
);

637 
	`PRINT_FLAGS
 (
ddvﬁ
->
ddvﬁ_obj
.
obj_Êags
);

638 
	`PRINT_NAME
 (
ddvﬁ
->
ddvﬁ_obj
.
obj_dm_dev_«me
);

639 
	`PRINT_UUID
 (
ddvﬁ
->
ddvﬁ_obj
.
obj_dm_dev_uuid
);

640 
	`PRINT_POINTER
 (
ddvﬁ
->
ddvﬁ_∑ª¡
);

641 
	`PRINT_POINTER
 (
lba_èbÀ
);

642 
	}
}

644 
VOID
 
	$¥öt_˛i_¨gs
(
dm_èrgë
 *
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
)

646 
i
;

647 
	`LOGINF
("¨g¯%u\n", 
¨gc
);

648 
	`LOGINF
("èrgë->begö = %lu (Sèπ Se˘‹ Pas£d from CLI)\n", 
èrgë
->
begö
);

649 
	`LOGINF
("èrgë->À¿ = %lu (Se˘‹ Sizê Pas£d from CLI)\n", 
èrgë
->
begö
);

653 
i
=0; i < 
¨gc
; i++) {

654 
	`LOGINF
("¨gv[%d] = %s",
i
, 
¨gv
[i]);

656 
	}
}

657 
EXPORT_SYMBOL
(
¥öt_˛i_¨gs
);

659 
VOID
 
	$¥öt_bdev
(
PBLOCK_DEVICE
 
bdev
)

661 
b
[
BDEVNAME_SIZE
];

662 i‡(
bdev
) {

663 
	`LOGINF
("bdev = %s\n", 
	`bdev«me
(
bdev
, 
b
));

665 
	`LOGINF
("bdev is NULL\n");

667 
	}
}

669 
RVOID
 
	$¥öt_sizeof_ty≥s
(
VOID
)

671 
	`LOGINF
("\n%s(): Basi¯D©®Såu˘uªs\n", 
__func__
);

672 
	`LOGINF
("Size of int = %zu\n", ());

673 
	`LOGINF
("Size ofÜong int = %zu\n", ( ));

674 
	`LOGINF
("Size ofÜong unsigned int = %zu\n", ( ));

675 
	`LOGINF
("Size of Long = %zu\n", ());

676 
	`LOGINF
("Sizêo‡U64 = %zu\n", (
U64
));

677 
	`LOGINF
("Size of unsignedÜong = %zu\n", ());

678 
	`LOGINF
("Size of unsignedÜongÜong = %zu\n", ());

679 
	`LOGINF
("Size of signedÜong = %zu\n", (signed ));

680 
	`LOGINF
("Size of signedÜongÜong = %zu\n", (signed ));

681 
	`LOGINF
("Size ofÜongÜong unsigned int = %zu\n", ());

682 
	`LOGINF
("Size ofÜongÜong signed int = %zu\n", (signed ));

684 
	`LOGINF
("\n%s(): Kî√»D©®Såu˘uªs\n", 
__func__
);

685 
	`LOGINF
("Sizêo‡°ru˘ biÿ = %zu byãs\n", (
bio
));

686 
	`LOGINF
("Sizêo‡°ru˘ bio_ve¯ = %zu byãs\n", (
bio_vec
));

687 
	`LOGINF
("Sizêo‡°ru˘ bio_£à = %zu byãs\n", (
bio_£t
));

688 
	`LOGINF
("Sizêo‡°ru˘ block_devi˚ = %zu byãs\n", (
block_devi˚
));

689 
	`LOGINF
("Sizêo‡°ru˘Üi°_hód = %zu byãs\n", (
li°_hód
));

690 
	`LOGINF
("Sizêo‡°ru˘ dm_dev = %zu byãs\n", (
dm_dev
));

691 
	`LOGINF
("Sizêo‡°ru˘ dm_èrgë = %zu byãs\n", (
dm_èrgë
));

692 
	`LOGINF
("Sizêo‡°ru˘Öagê = %zu byãs\n", (
∑ge
));

693 
	`LOGINF
("Sizêo‡°ru˘ com∂ëi⁄ = %zu byãs\n", (
com∂ëi⁄
));

694 
	`LOGINF
("Sizêo‡°ru˘Ñadix_åì_roŸ = %zu byãs\n", (
ødix_åì_roŸ
));

696 
	`LOGINF
("%s(): ZAIDSTOR AVM D©®Såu˘uªs\n", 
__func__
);

697 
	`LOGINF
("Sizêo‡°ru˘ dz_bôm≠_† = %zu byãs\n", (
dz_bôm≠_s
));

698 
	`LOGINF
("Sizêo‡°ru˘ dz_èrgë_obje˘_† = %zu byãs\n", (
dz_èrgë_obje˘_s
));

699 
	`LOGINF
("Sizêo‡°ru˘ dz_èrgë_devi˚_† = %zu byãs\n", (
dz_èrgë_devi˚_s
));

700 
	`LOGINF
("Sizêo‡°ru˘ dz_dedu≥_vﬁume_† = %zu byãs\n", (
dz_dedu≥_vﬁume_s
));

701 
	`LOGINF
("Sizêo‡°ru˘ dz_obje˘_li°_† = %zu byãs\n", (
dz_obje˘_li°_s
));

702 
	`LOGINF
("Sizêo‡°ru˘ dz_bvec_hﬁdî_† = %zu byãs\n", (
dz_bvec_hﬁdî_s
));

703 
	`LOGINF
("Sizêo‡°ru˘ dz_i‹eque°_† = %zu byãs\n", (
dz_i‹eque°_s
));

704 
	`LOGINF
("Sizêo‡°ru˘ dz_dedu≥_öfo_† = %zu byãs\n", (
dz_dedu≥_öfo_s
));

705 
	`LOGINF
("Sizêo‡°ru˘ dz_d©a_∑ges_† = %zu byãs\n", (
dz_d©a_∑ges_s
));

706 
	`LOGINF
("Sizêo‡uni⁄ dz_lba_block_† = %zu byãs\n", (
dz_lba_block_s
));

707 
	`LOGINF
("Sizêo‡uni⁄ dz_hash_block_† = %zu byãs\n", (
dz_hash_block_s
));

708 
	`LOGINF
("Sizêo‡uni⁄ dz_pba_block_† = %zu byãs\n", (
dz_pba_block_s
));

709 
	`LOGINF
("Sizêo‡uni⁄ dz_„c_d©a_wrôe_† = %zu byãs\n", (
dz_„c_d©a_wrôe_s
));

710 
	`LOGINF
("Sizêo‡°ru˘ dz_„c_èbÀ_† = %zu byãs\n", (
dz_„c_èbÀ_s
));

711 
	`LOGINF
("Sizêo‡°ru˘ dz_mëad©a_disk_block_s%zu byãs\n", (
dz_mëad©a_disk_block_s
));

712 
	`LOGINF
("Sizêo‡°ru˘ dz_mëad©a_lock_† = %zu byãs\n", (
dz_mëad©a_lock_s
));

713 
	`LOGINF
("Sizêo‡°ru˘ dz_com∂ëi⁄_† = %zu byãs\n", (
dz_com∂ëi⁄_s
));

714 
	`LOGINF
("Sizêo‡°ru˘ dz_ddvﬁ_lba_block_† = %zu byãs\n", (
dz_ddvﬁ_lba_block_s
));

715 
	`LOGINF
("Sizêo‡°ru˘ dz_bec_ªque°_† = %zu byãs\n", (
dz_bec_ªque°_s
));

716 
	`LOGINF
("Sizêo‡°ru˘ dz_bec_node_† = %zu byãs\n", (
dz_bec_node_s
));

717 
	`LOGINF
("Sizêo‡°ru˘ dz_hash_† = %zu byãs\n", (
dz_hash_s
));

718 
	`LOGINF
("Sizêo‡°ru˘ dz_su≥rblock_† = %zu byãs\n", (
dz_su≥rblock_s
));

719 
	`LOGINF
("Sizêo‡°ru˘ dz_job_† = %zu byãs\n", (
dz_job_s
));

720 
	`LOGINF
("Sizêo‡°ru˘ dz_thªad_† = %zu byãs\n", (
dz_thªad_s
));

721 
	`LOGINF
("Sizêo‡°ru˘ dz_thªad_poﬁ_† = %zu byãs\n", (
dz_thªad_poﬁ_s
));

722 
	}
}

724 
RVOID
 
	$¥öt_lba_block
(
PLBA_BLOCK
 
lba_block
)

726 
	`LOGINF
("Printing LBA_BLOCK datastructure\n");

727 
	`LOGINF
("LBA_BLOCK->lock = %d, 0x%x\n", 
lba_block
->
lba_lock
,Üba_block->lba_lock);

728 
	`LOGINF
("LBA_BLOCK->ö_u£ = %d, 0x%x\n", 
lba_block
->
ö_u£
,Üba_block->in_use);

729 
	`LOGINF
("LBA_BLOCK->Æloˇãd = %d, 0x%x\n", 
lba_block
->
Æloˇãd
,Üba_block->allocated);

730 
	`LOGINF
("LBA_BLOCK->hash_ödex = %u, 0x%x\n", 
lba_block
->
hash_ödex
,Üba_block->hash_index);

731 
	`LOGINF
("LBA_BLOCK->hash_collision_index = %lli, 0x%llx\n",

732 (
U64
)
lba_block
->
hash_cﬁlisi⁄_èg
, (U64)lba_block->hash_collision_tag);

733 
	`LOGINF
("LBA_BLOCK->donotchange = %lu, 0x%lx\n",

734 
lba_block
->
d⁄Ÿch™ge
,Üba_block->donotchange);

735 
	}
}

736 
EXPORT_SYMBOL
(
¥öt_lba_block
);

738 
RVOID
 
	$¥öt_mëad©a_block
(
PMDD_BLOCK
 
pmdd
)

740 
	`LOGINF
("Printing MD_BLOCK datastructure\n");

741 
	`LOGINF
("mdd_lb® = %Œu\n", 
pmdd
->
mdd_lba
);

742 
	`LOGINF
("mdd_pba_ödex = %Œu\n", 
pmdd
->
mdd_pba_ödex
);

743 
	`LOGINF
("mdd_hash_ödex = %Œu\n", (
U64
)
pmdd
->
mdd_hash_ödex
);

744 
	`LOGINF
("mdd_dd_£˘‹ = %Œu\n", 
pmdd
->
mdd_dd_£˘‹
);

745 
	`LOGINF
("mdd_cﬁlisi⁄_èg = %Œu\n", (
U64
)
pmdd
->
mdd_hash_cﬁlisi⁄_èg
);

748 
	`LOGINF
("mdd_hash 64[0] = %llu, 64[1] = %llu\n",

749 (
U64
)
pmdd
->
mdd_hash
.
hash64
[0],

750 (
U64
)
pmdd
->
mdd_hash
.
hash64
[1]);

753 
	`LOGINF
("mdd_hash 64[0] = 0x%llx, 64[1] = 0x%llx\n",

754 (
U64
)
pmdd
->
mdd_hash
.
hash64
[0],

755 (
U64
)
pmdd
->
mdd_hash
.
hash64
[1]);

758 
	`LOGINF
("mdd_hash 32[0] = %u, 32[1] = %u 32[2] = %u 32[3] = %u\n",

759 
pmdd
->
mdd_hash
.
hash32
[0],

760 
pmdd
->
mdd_hash
.
hash32
[1],

761 
pmdd
->
mdd_hash
.
hash32
[2],

762 
pmdd
->
mdd_hash
.
hash32
[3]);

765 
	`LOGINF
("mdd_hash 32[0] = 0x%x, 32[1] = 0x%x 32[2] = 0x%x 32[3] = 0x%x\n",

766 
pmdd
->
mdd_hash
.
hash32
[0],

767 
pmdd
->
mdd_hash
.
hash32
[1],

768 
pmdd
->
mdd_hash
.
hash32
[2],

769 
pmdd
->
mdd_hash
.
hash32
[3]);

771 
	}
}

772 
EXPORT_SYMBOL
(
¥öt_mëad©a_block
);

774 
RINT
 
	$dz_gë_devi˚_size
(*
devi˚_«me
, 
ULONG
 *
rd_blocks
)

776 
INT
 
ªt
;

778 
PBLOCK_DEVICE
 
blockdev
 = 
NULL
;

779 
mm_£gmít_t
 
ﬁd_fs
;

781 
blockdev
 = 
	`dz_bdev_›í
(
devi˚_«me
);

782 i‡(! 
blockdev
) {

783 
	`LOGE
("U«bÀÅÿ›í devi˚ %s\n", 
devi˚_«me
);

786 
	`LOGINF
("Devi˚ %†O≥√d suc˚ssfuŒy\n", 
devi˚_«me
);

789 
ﬁd_fs
 = 
	`gë_fs
();

790 
	`£t_fs
(
KERNEL_DS
);

791 
ªt
 = 
	`blkdev_io˘l
(
blockdev
, 
FMODE_READ
, 
BLKGETSIZE64
, (
ULONG
)
rd_blocks
);

792 
	`£t_fs
(
ﬁd_fs
);

793 
	`dz_bdev_˛o£
(
blockdev
);

794  
ªt
;

795 
	}
}

796 
EXPORT_SYMBOL
(
dz_gë_devi˚_size
);

	@lab_engine/deep_copy/tree_deep_copy.c

1 
	~"åì_dìp_c›y.h
"

4 
PCH_TREE_NODE
 
	gdìp_åì_roŸ
 = 
NULL
;

7 
PCH_TREE_NODE
 
	gdìp_˛⁄e_roŸ
 = 
NULL
;

10 
PCH_MAP
 
ch_åì_m≠
;

13 
ULONGLONG
 *
ch_loˇl_queue
;

16 
PCH_TREE_NODE
 
	$ch_åì_dìp_c›y_wôh_m≠
(
PCH_TREE_NODE
 
roŸ
)

18 
PCH_TREE_NODE
 
˛⁄e
;

20 
˛⁄e
 = 
	`ch_åì_dìp_c›y_c‹e_wôh_m≠
(
roŸ
);

21 
	`ch_åì_dìp_c›y_cy˛e_wôh_m≠
(
roŸ
, 
˛⁄e
);

22  
˛⁄e
;

23 
	}
}

28 
PCH_TREE_NODE
 
	$ch_åì_dìp_c›y_c‹e_wôh_m≠
(
PCH_TREE_NODE
 
roŸ
)

30 
PCH_TREE_NODE
 
˛⁄e_node
 = 
NULL
;

31 
i
 = 0;

33 i‡(
roŸ
) {

34 
	`CLONE_NODE
(
˛⁄e_node
, 
roŸ
->
d©a
);

37 
	`SET_MAP
(
roŸ
->
d©a
, 
˛⁄e_node
);

39 
i
 = 0; i < 
CH_TREE_NODE_CHILDREN
; i++) {

40 i‡(
roŸ
->
chûdªns
[
i
]) {

41 
˛⁄e_node
->
chûdªns
[
i
] = 
	`ch_åì_dìp_c›y_c‹e_wôh_m≠
(
roŸ
->childrens[i]);

45  
˛⁄e_node
;

46 
	}
}

48 
VOID
 
	$ch_åì_dìp_c›y_cy˛e_wôh_m≠
(
PCH_TREE_NODE
 
roŸ
, PCH_TREE_NODE 
˛⁄e
)

50 
i
 = 0;

52 i‡(
roŸ
->
cy˛e
) {

53 
˛⁄e
->
cy˛e
 = (
PCH_TREE_NODE
)
	`GET_MAP
(
roŸ
->cy˛e->
d©a
);

56 
i
 = 0; i < 
CH_TREE_NODE_CHILDREN
; i++) {

57 i‡(
roŸ
->
chûdªns
[
i
]) {

58 
	`ch_åì_dìp_c›y_cy˛e_wôh_m≠
(
roŸ
->
chûdªns
[
i
], 
˛⁄e
->childrens[i]);

61 
	}
}

65 
PCH_TREE_NODE
 
	$ch_åì_dìp_c›y_wôh_modify_À·
(
PCH_TREE_NODE
 
roŸ
)

67 
PCH_TREE_NODE
 
˛⁄e
;

69 
˛⁄e
 = 
	`ch_åì_dìp_c›y_c‹e_wôh_modify_À·
(
roŸ
);

70 
	`ch_åì_¥öt_Àvñ_‹dî_löe_by_löe
(
roŸ
);

71 
	`ch_åì_dìp_c›y_cy˛e_wôh_modify_À·
(
roŸ
, 
˛⁄e
);

72 
	`ch_åì_dìp_c›y_ª°‹e_wôh_modify_À·
(
roŸ
, 
˛⁄e
);

73  
˛⁄e
;

74 
	}
}

80 
PCH_TREE_NODE
 
	$ch_åì_dìp_c›y_c‹e_wôh_modify_À·
(
PCH_TREE_NODE
 
roŸ
)

82 
PCH_TREE_NODE
 
˛⁄e_node
 = 
NULL
;

84 
PCH_TREE_NODE
 
ãmp
 = 
NULL
;

85 
i
 = 0;

87 i‡(
roŸ
) {

89 
ãmp
 = 
roŸ
->
chûdªns
[0];

90 
	`CLONE_NODE
(
˛⁄e_node
, 
roŸ
->
d©a
);

92 
roŸ
->
chûdªns
[0] = 
˛⁄e_node
;

94 
roŸ
->
chûdªns
[0]->chûdªns[0] = 
ãmp
;

96 i‡(
ãmp
) {

97 
ãmp
->
chûdªns
[0] = 
	`ch_åì_dìp_c›y_c‹e_wôh_modify_À·
(temp);

100 
i
 = 1; i < 
CH_TREE_NODE_CHILDREN
; i++) {

101 
˛⁄e_node
->
chûdªns
[
i
] = 
	`ch_åì_dìp_c›y_c‹e_wôh_modify_À·
(
roŸ
->childrens[i]);

104  
NULL
;

106  
roŸ
->
chûdªns
[0];

107 
	}
}

110 
VOID
 
	$ch_åì_dìp_c›y_cy˛e_wôh_modify_À·
(
PCH_TREE_NODE
 
roŸ
, PCH_TREE_NODE 
˛⁄e
)

112 
i
 = 0;

114 i‡(
roŸ
 =
NULL
)

117 i‡(
roŸ
->
cy˛e
) {

118 
˛⁄e
->
cy˛e
 = 
roŸ
->cy˛e->
chûdªns
[0];

120 
˛⁄e
->
cy˛e
 = 
NULL
;

123 i‡(
roŸ
->
chûdªns
[0] && 
˛⁄e
->childrens[0]) {

124 
	`ch_åì_dìp_c›y_cy˛e_wôh_modify_À·
(
roŸ
->
chûdªns
[0]->chûdªns[0], 
˛⁄e
->childrens[0]->childrens[0]);

126 
i
 = 1; i < 
CH_TREE_NODE_CHILDREN
; i++) {

127 
	`ch_åì_dìp_c›y_cy˛e_wôh_modify_À·
(
roŸ
->
chûdªns
[
i
], 
˛⁄e
->childrens[i]);

129 
	}
}

132 
VOID
 
	$ch_åì_dìp_c›y_ª°‹e_wôh_modify_À·
(
PCH_TREE_NODE
 
roŸ
, PCH_TREE_NODE 
˛⁄e
)

134 
PCH_TREE_NODE
 
node
 = 
NULL
;

135 
i
 = 0;

136 i‡(
roŸ
 =
NULL
)

139 i‡(
˛⁄e
->
chûdªns
[0]) {

140 
node
 = 
˛⁄e
->
chûdªns
[0]->childrens[0];

141 
roŸ
->
chûdªns
[0] = 
˛⁄e
->childrens[0];

142 
˛⁄e
->
chûdªns
[0] = 
node
;

144 
roŸ
->
chûdªns
[0] = 
NULL
;

147 
i
 = 0; i < 
CH_TREE_NODE_CHILDREN
; i++) {

148 
	`ch_åì_dìp_c›y_ª°‹e_wôh_modify_À·
(
roŸ
->
chûdªns
[
i
], 
˛⁄e
->childrens[i]);

150 
	}
}

152 
PCH_TREE_NODE
 
	$ch_åì_dìp_c›y_wôh_modify_™d_queue
(
PCH_TREE_NODE
 
roŸ
)

154 
PCH_TREE_NODE
 
˛⁄e
;

156 
˛⁄e
 = 
	`ch_åì_dìp_c›y_c‹e_wôh_modify_™d_queue
(
roŸ
);

157 
	`LOG
("Printing only cloneÅreeáfter queueing\n");

158 
	`RESET_QUEUE
();

159 
	`ch_åì_¥öt_Àvñ_‹dî_löe_by_löe
(
˛⁄e
);

161 
	`LOG
("END:Printing only cloneÅreeáfter queueing\n");

162 
	`ch_åì_dìp_c›y_cy˛e_wôh_modify_™d_queue
(
roŸ
, 
˛⁄e
);

163 
	`LOG
("Printing only cloneÅreeáfter copy cycling\n");

164 
	`RESET_QUEUE
();

165 
	`ch_åì_¥öt_Àvñ_‹dî_löe_by_löe
(
˛⁄e
);

167 
	`ch_åì_dìp_c›y_ª°‹e_wôh_modify_™d_queue
(
roŸ
);

168 
	`LOG
("Printing onlyÑootÅreeáfterÑestoring\n");

169 
	`RESET_QUEUE
();

170 
	`ch_åì_¥öt_Àvñ_‹dî_löe_by_löe
(
roŸ
);

171  
˛⁄e
;

172 
	}
}

176 
PCH_TREE_NODE
 
	$ch_åì_dìp_c›y_c‹e_wôh_modify_™d_queue
(
PCH_TREE_NODE
 
roŸ
)

178 
PCH_TREE_NODE
 
˛⁄e_node
 = 
NULL
;

179 
i
 = 0;

181 i‡(
roŸ
) {

182 
	`QUEUE
(
roŸ
->
cy˛e
);

183 
	`CLONE_NODE
(
˛⁄e_node
, 
roŸ
->
d©a
);

186 
˛⁄e_node
 ->
cy˛e
 = 
roŸ
->cycle;

188 
roŸ
->
cy˛e
 = 
˛⁄e_node
;

190 
i
 = 0; i < 
CH_TREE_NODE_CHILDREN
; i++) {

191 i‡(
roŸ
->
chûdªns
[
i
]) {

192 
˛⁄e_node
->
chûdªns
[
i
] = 
	`ch_åì_dìp_c›y_c‹e_wôh_modify_™d_queue
(
roŸ
->childrens[i]);

196  
˛⁄e_node
;

198 
	}
}

200 
VOID
 
	$ch_åì_dìp_c›y_cy˛e_wôh_modify_™d_queue
(
PCH_TREE_NODE
 
roŸ
, PCH_TREE_NODE 
˛⁄e
)

202 
i
 = 0;

204 i‡(!
roŸ
 && !
˛⁄e
) ;

206 i‡(
roŸ
->
cy˛e
 && 
˛⁄e
->cycle) {

208 
˛⁄e
->
cy˛e
 = clone->cycle->cycle;

211 
i
 = 0; i < 
CH_TREE_NODE_CHILDREN
; i++) {

212 i‡(
roŸ
->
chûdªns
[
i
]) {

213 
	`ch_åì_dìp_c›y_cy˛e_wôh_modify_™d_queue
(
roŸ
->
chûdªns
[
i
], 
˛⁄e
->childrens[i]);

216 
	}
}

218 
VOID
 
	$ch_åì_dìp_c›y_ª°‹e_wôh_modify_™d_queue
(
PCH_TREE_NODE
 
roŸ
)

220 
i
 = 0;

221 i‡(
roŸ
) {

222 
	`DEQUEUE
(
roŸ
->
cy˛e
);

223 
i
 = 0; i < 
CH_TREE_NODE_CHILDREN
; i++) {

224 i‡(
roŸ
->
chûdªns
[
i
]) {

225 
	`ch_åì_dìp_c›y_ª°‹e_wôh_modify_™d_queue
(
roŸ
->
chûdªns
[
i
]);

229 
	}
}

244 
PCH_TREE_NODE
 
	$ch_åì_¸óã
(
PCH_TREE_NODE
 
roŸ
)

246 i‡(!
roŸ
) {

247 
	`INSERT_NODE
(
roŸ
, 11);

250 
	`INSERT_NODE
(
roŸ
->
chûdªns
[0], 1121);

251 
	`INSERT_NODE
(
roŸ
->
chûdªns
[1], 1122);

252 
	`INSERT_NODE
(
roŸ
->
chûdªns
[2], 1123);

254 
	`INSERT_NODE
(
roŸ
->
chûdªns
[0]->childrens[0], 2131);

255 
	`INSERT_NODE
(
roŸ
->
chûdªns
[0]->childrens[1], 2132);

256 
	`INSERT_NODE
(
roŸ
->
chûdªns
[0]->childrens[2], 2133);

258 
	`INSERT_NODE
(
roŸ
->
chûdªns
[1]->childrens[0], 2231);

259 
	`INSERT_NODE
(
roŸ
->
chûdªns
[1]->childrens[1], 2232);

260 
	`INSERT_NODE
(
roŸ
->
chûdªns
[1]->childrens[2], 2233);

262 
roŸ
->
chûdªns
[0]->
cy˛e
 =Ñoot;

263 
roŸ
->
chûdªns
[1]->
cy˛e
 =Ñoot;

264 
roŸ
->
cy˛e
 =ÑoŸ->
chûdªns
[0]->childrens[0];

265  
roŸ
;

266 
	}
}

268 
VOID
 
	$ch_åì_dìp_c›y_≠¥ﬂch_m≠
(
VOID
)

271 
PCH_TREE_NODE
 
‹igöÆ
 = 
NULL
;

274 
	`ch_åì_dñëe
(
dìp_åì_roŸ
);

275 
dìp_åì_roŸ
 = 
NULL
;

278 
	`ch_åì_dñëe
(
dìp_˛⁄e_roŸ
);

279 
dìp_˛⁄e_roŸ
 = 
NULL
;

281 
	`RESET_QUEUE
();

283 
	`LOG
("##########################################################\n");

284 
	`LOG
(" MAP: Original Tree Begin \n");

285 
	`LOG
("##########################################################\n");

288 
dìp_åì_roŸ
 = 
	`ch_åì_¸óã
(deep_tree_root);

289 
	`LOG
("MAP:Original: Tree Created\n");

290 
‹igöÆ
 = 
dìp_åì_roŸ
;

294 
	`LOG
("MAP:Original: Printing Original Tree Root Node\n");

295 
	`PRINT_ORIGINAL_TREE_NODE
(
dìp_åì_roŸ
);

296 
	`LOG
("MAP:Original: Printing Original NodesátállÜevels \n");

297 
	`ch_åì_¥öt_Àvñ_‹dî_löe_by_löe
(
dìp_åì_roŸ
);

298 
	`LOG
("MAP:OrigöÆ: OrigöÆ TªêMem‹y AŒoˇti⁄ Cou¡ = %d\n", 
	`ch_åì_gë_Æloc_cou¡
());

300 
	`LOG
("##########################################################\n");

301 
	`LOG
(" MAP: DeepCopy Begin \n");

302 
	`LOG
("##########################################################\n");

305 
dìp_˛⁄e_roŸ
 = 
	`ch_åì_dìp_c›y_wôh_m≠
(
dìp_åì_roŸ
);

306 
	`LOG
("MAP:DeepCopy: Tree Created\n");

307 
	`LOG
("MAP:DeepCopy: Printing DeepCopy Tree Root Node\n");

308 
	`PRINT_DEEPCOPY_TREE_NODE
(
dìp_˛⁄e_roŸ
);

309 
	`LOG
("MAP:DeepCopy: Printing DeepCopy NodesátállÜevels \n");

310 
	`RESET_QUEUE
();

311 
	`ch_åì_¥öt_Àvñ_‹dî_löe_by_löe
(
dìp_˛⁄e_roŸ
);

313 
	`LOG
("MAP:DìpC›y: DìpC›y TªêMem‹y AŒoˇti⁄ Cou¡ = %d\n", 
	`ch_åì_gë_Æloc_cou¡
());

316 
	}
}

318 
VOID
 
	$ch_åì_dìp_c›y_≠¥ﬂch_modify_À·_chûd
(
VOID
)

321 
PCH_TREE_NODE
 
‹igöÆ
 = 
NULL
;

324 
	`ch_åì_dñëe
(
dìp_åì_roŸ
);

325 
dìp_åì_roŸ
 = 
NULL
;

328 
	`ch_åì_dñëe
(
dìp_˛⁄e_roŸ
);

329 
dìp_˛⁄e_roŸ
 = 
NULL
;

331 
	`RESET_QUEUE
();

334 
	`LOG
("##########################################################\n");

335 
	`LOG
(" MODIFY_LEFT: Original Tree Begin \n");

336 
	`LOG
("##########################################################\n");

339 
dìp_åì_roŸ
 = 
	`ch_åì_¸óã
(deep_tree_root);

340 
	`LOG
("ML:Original: Tree Created\n");

341 
‹igöÆ
 = 
dìp_åì_roŸ
;

345 
	`LOG
("ML:Original: Printing Original Tree Root Node\n");

346 
	`PRINT_ORIGINAL_TREE_NODE
(
dìp_åì_roŸ
);

347 
	`LOG
("ML:Original: Printing Original NodesátállÜevels \n");

348 
	`ch_åì_¥öt_Àvñ_‹dî_löe_by_löe
(
dìp_åì_roŸ
);

349 
	`LOG
("ML:OrigöÆ: OrigöÆ TªêMem‹y AŒoˇti⁄ Cou¡ = %d\n", 
	`ch_åì_gë_Æloc_cou¡
());

351 
	`LOG
("##########################################################\n");

352 
	`LOG
(" MODIFY_LEFT: DeepCopy Begin \n");

353 
	`LOG
("##########################################################\n");

356 
dìp_˛⁄e_roŸ
 = 
	`ch_åì_dìp_c›y_wôh_modify_À·
(
dìp_åì_roŸ
);

357 
	`LOG
("ML:DeepCopy: Tree Created\n");

358 
	`LOG
("ML:DeepCopy: Printing DeepCopy Tree Root Node\n");

359 
	`PRINT_DEEPCOPY_TREE_NODE
(
dìp_˛⁄e_roŸ
);

360 
	`LOG
("ML:DeepCopy: Printing DeepCopy NodesátállÜevels \n");

361 
	`RESET_QUEUE
();

362 
	`ch_åì_¥öt_Àvñ_‹dî_löe_by_löe
(
dìp_˛⁄e_roŸ
);

364 
	`LOG
("ML:DìpC›y: DìpC›y TªêMem‹y AŒoˇti⁄ Cou¡ = %d\n", 
	`ch_åì_gë_Æloc_cou¡
());

367 
	}
}

369 
VOID
 
	$ch_åì_dìp_c›y_≠¥ﬂch_modify_™d_queue
(
VOID
)

372 
PCH_TREE_NODE
 
‹igöÆ
 = 
NULL
;

375 
	`ch_åì_dñëe
(
dìp_åì_roŸ
);

376 
dìp_åì_roŸ
 = 
NULL
;

379 
	`ch_åì_dñëe
(
dìp_˛⁄e_roŸ
);

380 
dìp_˛⁄e_roŸ
 = 
NULL
;

382 
	`RESET_QUEUE
();

384 
	`LOG
("##########################################################\n");

385 
	`LOG
(" MODIFY_QUEUE: Original Tree Begin \n");

386 
	`LOG
("##########################################################\n");

389 
dìp_åì_roŸ
 = 
	`ch_åì_¸óã
(deep_tree_root);

390 
	`LOG
("MQ:Original: Tree Created\n");

391 
‹igöÆ
 = 
dìp_åì_roŸ
;

395 
	`LOG
("MQ:Original: Printing Original Tree Root Node\n");

396 
	`PRINT_ORIGINAL_TREE_NODE
(
dìp_åì_roŸ
);

397 
	`LOG
("MQ:Original: Printing Original NodesátállÜevels \n");

398 
	`ch_åì_¥öt_Àvñ_‹dî_löe_by_löe
(
dìp_åì_roŸ
);

399 
	`LOG
("MQ:OrigöÆ: OrigöÆ TªêMem‹y AŒoˇti⁄ Cou¡ = %d\n", 
	`ch_åì_gë_Æloc_cou¡
());

401 
	`LOG
("##########################################################\n");

402 
	`LOG
(" MODIFY_QUEUE: DeepCopy Begin \n");

403 
	`LOG
("##########################################################\n");

406 
dìp_˛⁄e_roŸ
 = 
	`ch_åì_dìp_c›y_wôh_modify_™d_queue
(
dìp_åì_roŸ
);

407 
	`LOG
("MQ:DeepCopy: Tree Created\n");

408 
	`LOG
("MQ:DeepCopy: Printing DeepCopy Tree Root Node\n");

409 
	`PRINT_DEEPCOPY_TREE_NODE
(
dìp_˛⁄e_roŸ
);

410 
	`LOG
("MQ:DeepCopy: Printing DeepCopy NodesátállÜevels \n");

411 
	`RESET_QUEUE
();

412 
	`ch_åì_¥öt_Àvñ_‹dî_löe_by_löe
(
dìp_˛⁄e_roŸ
);

414 
	`LOG
("MQ:DìpC›y: DìpC›y TªêMem‹y AŒoˇti⁄ Cou¡ = %d\n", 
	`ch_åì_gë_Æloc_cou¡
());

417 
	}
}

420 
VOID
 
	$ch_åì_maö
(
VOID
)

423 
	`ch_åì_dìp_c›y_≠¥ﬂch_modify_™d_queue
();

425 
	`ch_åì_dìp_c›y_≠¥ﬂch_modify_À·_chûd
();

426 
	`ch_åì_dìp_c›y_≠¥ﬂch_m≠
();

428 
	}
}

	@lab_engine/deep_copy/tree_deep_copy.h

1 #i‚de‡
_TREE_DEEP_COPY_H_


2 
	#_TREE_DEEP_COPY_H_


	)

4 
	~<löux/moduÀ.h
>

5 
	~<löux/kî√l.h
>

6 
	~<löux/öô.h
>

7 
	~<löux/moduÀ.h
>

8 
	~<löux/moduÀ∑øm.h
>

10 
	~<löux/kî√l.h
>

11 
	~<löux/fs.h
>

12 
	~<löux/î∫o.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/vmÆloc.h
>

15 
	~<löux/¶ab.h
>

17 
	#CH_MODULE_LICENSE
 "GPL"

	)

18 
	#CH_MODULE_AUTHOR
 "Cohesôy"

	)

20 
	tCHAR
;

21 
	tINT
;

22 
	tUINT
;

23 
	tULONGLONG
;

24 * 
	tPVOID
;

25 
	tVOID
;

26 
©omic_t
 
	tATOMIC
;

28 
	#CH_TREE_NODE_CHILDREN
 3

	)

31 
	såì_node_s
 {

32 
CHAR
 
	mch
;

33 
INT
 
	md©a
;

34 
åì_node_s
 *
	mchûdªns
[
CH_TREE_NODE_CHILDREN
];

35 
åì_node_s
 *
	mcy˛e
;

37 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tCH_TREE_NODE
, *
	tPCH_TREE_NODE
;

40 
	sm≠_s
 {

41 
INT
 
	mkey
;

43 
PVOID
 
	mvÆue
;

44 
PVOID
 
	mvÆ
;

46 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tCH_MAP
, *
	tPCH_MAP
;

50 
	#LOG
(
fmt
, 
¨gs
...) do { \

51 
	`¥ötk
 (
KERN_ERR
"[DìpC›y]:%d:" 
fmt
 ,
__LINE__
, ## 
¨gs
); \

52 } 0)

	)

56 
	#PRINT_ORIGINAL_TREE_NODE
(
node
) \

57 
	`ch_åì_¥öt_node
((
node
), "OrigöÆ")

	)

59 
	#PRINT_DEEPCOPY_TREE_NODE
(
node
) \

60 
	`ch_åì_¥öt_node
((
node
), "DìpC›y")

	)

62 
	#PRINT_DELETED_NODE
(
node
) \

63 
	`ch_åì_¥öt_node
((
node
), "Dñëed")

	)

65 
	#PRINT_ALLOCATED_NODE
(
node
) \

66 
	`ch_åì_¥öt_node
((
node
), "AŒoˇãd")

	)

68 
	#CLONE_NODE
(
¨g_node
, 
¨g_d©a
) \

69 *((
¨g_node
Ë
	`ch_åì_Æloc_node
()Ë(
CH_TREE_NODE
){ .
ch
 = 'C', .
d©a
 = (
¨g_d©a
), .
chûdªns
[0] = 
NULL
, NULL, NULL, NULL}

	)

71 
	#INSERT_NODE
(
¨g_node
, 
¨g_d©a
) \

72 *((
¨g_node
Ë
	`ch_åì_Æloc_node
()Ë(
CH_TREE_NODE
){ .
ch
 = 'O', .
d©a
 = (
¨g_d©a
), .
chûdªns
[0] = 
NULL
, NULL, NULL, NULL}

	)

75 
	#ATOMIC_SET
(
v¨
, 
vÆ
Ë
	`©omic_£t
(&(v¨), vÆ)

	)

76 
	#ATOMIC_INC
(
v¨
Ë
	`©omic_öc
(&(v¨))

	)

77 
	#ATOMIC_DEC
(
v¨
Ë
	`©omic_dec
(&(v¨))

	)

78 
	#ATOMIC_READ
(
v¨
Ë
	`©omic_ªad
(&(v¨))

	)

81 
VOID
 
ch_åì_öô
(VOID);

82 
VOID
 
ch_åì_de°roy
(VOID);

83 
PCH_TREE_NODE
 
ch_åì_¸óã
(PCH_TREE_NODE 
roŸ
);

84 
VOID
 
ch_åì_dñëe
(
PCH_TREE_NODE
 
roŸ
);

85 
PCH_TREE_NODE
 
ch_åì_Æloc_node
(
VOID
);

86 
VOID
 
ch_åì_dñëe_node
(
PCH_TREE_NODE
 
node
);

87 
VOID
 
ch_åì_maö
(VOID);

88 
VOID
 
ch_åì_¥öt_node
(
PCH_TREE_NODE
 
node
, *
m¨kî
);

89 
VOID
 
ch_åì_¥öt_Àvñ_‹dî
(
PCH_TREE_NODE
 
roŸ
);

90 
VOID
 
ch_åì_maö
(VOID);

91 
INT
 
ch_åì_gë_Æloc_cou¡
(
VOID
);

92 
VOID
 
ch_åì_¥öt_Àvñ_‹dî_löe_by_löe
(
PCH_TREE_NODE
 
roŸ
);

95 
VOID
 
ch_åì_dìp_c›y_≠¥ﬂch_m≠
(VOID);

96 
PCH_TREE_NODE
 
ch_åì_dìp_c›y_wôh_m≠
(PCH_TREE_NODE 
roŸ
);

97 
VOID
 
ch_åì_dìp_c›y_cy˛e_wôh_m≠
(
PCH_TREE_NODE
 
roŸ
, PCH_TREE_NODE 
˛⁄e
);

98 
PCH_TREE_NODE
 
ch_åì_dìp_c›y_c‹e_wôh_m≠
(PCH_TREE_NODE 
roŸ
);

101 
VOID
 
ch_åì_dìp_c›y_≠¥ﬂch_modify_À·_chûd
(VOID);

102 
PCH_TREE_NODE
 
ch_åì_dìp_c›y_wôh_modify_À·
(PCH_TREE_NODE 
roŸ
);

103 
PCH_TREE_NODE
 
ch_åì_dìp_c›y_c‹e_wôh_modify_À·
(PCH_TREE_NODE 
roŸ
);

104 
VOID
 
ch_åì_dìp_c›y_cy˛e_wôh_modify_À·
(
PCH_TREE_NODE
 
roŸ
, PCH_TREE_NODE 
˛⁄e
);

105 
VOID
 
ch_åì_dìp_c›y_ª°‹e_wôh_modify_À·
(
PCH_TREE_NODE
 
roŸ
, PCH_TREE_NODE 
˛⁄e
);

108 
VOID
 
ch_åì_dìp_c›y_≠¥ﬂch_modify_™d_queue
(VOID);

109 
PCH_TREE_NODE
 
ch_åì_dìp_c›y_wôh_modify_™d_queue
(PCH_TREE_NODE 
roŸ
);

110 
PCH_TREE_NODE
 
ch_åì_dìp_c›y_c‹e_wôh_modify_™d_queue
(PCH_TREE_NODE 
roŸ
);

111 
VOID
 
ch_åì_dìp_c›y_cy˛e_wôh_modify_™d_queue
(
PCH_TREE_NODE
 
roŸ
, PCH_TREE_NODE 
˛⁄e_roŸ
);

115 
PCH_MAP
 
ch_åì_¸óã_m≠
(
UINT
 
sz
);

116 
VOID
 
ch_åì_ª£t_m≠
(
PCH_MAP
 
mp
);

117 
PVOID
 
ch_åì_gë_m≠
(
ULONGLONG
 
Key
);

118 
VOID
 
ch_åì_£t_m≠
(
INT
 
key
, 
PVOID
 
VÆue
);

119 
VOID
 
ch_åì_¥öt_m≠
(VOID);

120 
VOID
 
ch_åì_dñëe_m≠
(
PCH_MAP
 
mp
);

123 
	#MAP_SIZE
 32

	)

124 
	#CREATE_MAP
() \

125 
ch_åì_m≠
 = 
	`ch_åì_¸óã_m≠
(
ch_åì_m≠_size
)

	)

127 
	#SET_MAP
(
¨g_key
, 
¨g_vÆue
) \

128 
	`ch_åì_£t_m≠
(
¨g_key
, 
¨g_vÆue
)

	)

130 
	#GET_MAP
(
¨g_key
) \

131 
	`ch_åì_gë_m≠
(
¨g_key
)

	)

133 
	#PRINT_MAP
() \

134 
	`ch_åì_¥öt_m≠
()

	)

136 
	#DELETE_MAP
(
¨g_m≠
) \

137 
	`ch_åì_dñëe_m≠
(
¨g_m≠
)

	)

140 
ULONGLONG
* 
ch_åì_¸óã_queue
(
UINT
 
sz
);

141 
VOID
 
ch_åì_íqueue
(
PVOID
 
ñemít
);

142 
PVOID
 
ch_åì_dequeue
(
VOID
);

143 
VOID
 
ch_åì_ª£t_queue
(VOID);

144 
VOID
 
ch_åì_dñëe_queue
(
PVOID
 
¨g_q
);

145 
INT
 
ch_åì_gë_queue_cou¡
(
PVOID
 
¨g_q
);

148 
	#CREATE_QUEUE
(
¨g_q
, 
¨g_q_size
) \

149 
¨g_q
 = 
	`ch_åì_¸óã_queue
(
¨g_q_size
)

	)

151 
	#QUEUE
(
¨g_ñemít
) \

152 
	`ch_åì_íqueue
((*)(
¨g_ñemít
))

	)

154 
	#RESET_QUEUE
() \

155 
	`ch_åì_ª£t_queue
()

	)

157 
	#DQUEUE
(
¨g_ñemít
) \

158 
¨g_ñemít
 = (
PCH_TREE_NODE
)
	`ch_åì_dequeue
()

	)

160 
	#DEQUEUE
(
¨g_ñemít
Ë
	`DQUEUE
◊rg_ñemít)

	)

162 
	#DELETE_QUEUE
(
¨g_q
) \

163 
	`ch_åì_dñëe_queue
(
¨g_q
)

	)

165 
	#QUEUE_COUNT
(
¨g_q
) \

166 
	`ch_åì_gë_queue_cou¡
(
¨g_q
)

	)

	@lab_engine/deep_copy/tree_deep_utils.c

1 
	~"åì_dìp_c›y.h
"

4 
PCH_TREE_NODE
 
dìp_åì_roŸ
;

7 
PCH_TREE_NODE
 
dìp_˛⁄e_roŸ
;

9 
ATOMIC
 
	gch_åì_Æloc_node_˙t
;

12 
PCH_MAP
 
	gch_åì_m≠
;

13 
INT
 
	gch_åì_m≠_idx
;

14 
UINT
 
	gch_åì_m≠_size
;

17 
ULONGLONG
 *
	gch_loˇl_queue
;

18 
UINT
 
	gch_loˇl_queue_‰⁄t
;

19 
UINT
 
	gch_loˇl_queue_ª¨
;

20 
UINT
 
	gch_loˇl_queue_size
;

24 
PCH_TREE_NODE
 
	$ch_åì_Æloc_node
(
VOID
)

26 
PCH_TREE_NODE
 
node
 = 
	`kmÆloc
((
CH_TREE_NODE
), 
GFP_KERNEL
);

27 i‡(!
node
) {

28 
	`LOG
("%s","Error, UnableÅoállocate memory forÅreeÇode\n");

29  
NULL
;

31 
	`mem£t
(
node
, 0, (*
ch_åì_m≠
));

32 
	`ATOMIC_INC
(
ch_åì_Æloc_node_˙t
);

33  
node
;

34 
	}
}

37 
VOID
 
	$ch_åì_dñëe_node
(
PCH_TREE_NODE
 
node
)

39 i‡(!
node
Ë
	`BUG_ON
(1);

40 
	`k‰ì
(
node
);

41 
node
 = 
NULL
;

42 
	`ATOMIC_DEC
(
ch_åì_Æloc_node_˙t
);

44 if(
	`ATOMIC_READ
(
ch_åì_Æloc_node_˙t
) < 0) {

45 
	`LOG
("WARNING:Alloc countÇegative\n");

48 
	}
}

51 
INT
 
	$ch_åì_gë_Æloc_cou¡
(
VOID
) {

52  
	`ATOMIC_READ
(
ch_åì_Æloc_node_˙t
);

53 
	}
}

57 
PCH_MAP
 
	$ch_åì_¸óã_m≠
(
UINT
 
sz
)

59 
PCH_MAP
 
mp
 = 
	`kmÆloc
((
CH_MAP
Ë* 
sz
, 
GFP_KERNEL
);

60 i‡(
mp
) {

61 
	`LOG
("MAP Cª©ed o‡sizê%u\n", 
sz
);

63 
	`ch_åì_ª£t_m≠
(
mp
);

64  
mp
;

65 
	}
}

68 
VOID
 
	$ch_åì_dñëe_m≠
(
PCH_MAP
 
mp
)

70 
	`k‰ì
(
mp
);

71 
mp
 = 
NULL
;

72 
	}
}

75 
VOID
 
	$ch_åì_ª£t_m≠
(
PCH_MAP
 
mp
)

77 
ch_åì_m≠_idx
 = 0; ch_åì_m≠_idx < 
ch_åì_m≠_size
; ch_tree_map_idx++) {

78 
mp
[
ch_åì_m≠_idx
].
key
 = 0;

79 
mp
[
ch_åì_m≠_idx
].
vÆue
 = 
NULL
;

81 
	}
}

84 
PVOID
 
	$ch_åì_gë_m≠
(
ULONGLONG
 
key
)

86 
ch_åì_m≠_idx
 = 0; ch_åì_m≠_idx < 
ch_åì_m≠_size
; ch_tree_map_idx++) {

88 i‡(
ch_åì_m≠
[
ch_åì_m≠_idx
].
key
 == key) {

89  
ch_åì_m≠
[
ch_åì_m≠_idx
].
vÆ
;

92  
NULL
;

93 
	}
}

96 
VOID
 
	$ch_åì_£t_m≠
(
INT
 
key
, 
PVOID
 
vÆue
)

98 
PCH_MAP
 
hód_m≠
 = 
ch_åì_m≠
;

99 
ch_åì_m≠_idx
 = 0; ch_åì_m≠_idx < 
ch_åì_m≠_size
; ch_tree_map_idx++) {

102 i‡(
ch_åì_m≠
[
ch_åì_m≠_idx
].
key
 == 0) {

104 *(
hód_m≠
Ë(
CH_MAP
Ë{ .
key
 = key, .
vÆ
 = 
vÆue
 };

107 
hód_m≠
++;

109 
	}
}

111 
VOID
 
	$ch_åì_¥öt_m≠
(
VOID
)

113 
ch_åì_m≠_idx
 = 0; ch_åì_m≠_idx < 
ch_åì_m≠_size
; ch_tree_map_idx++) {

115 
	`LOG
("MAP->Pröt: Sñ‡%p, Key[%u] = %d, VÆuê%p\n", &
ch_åì_m≠
[
ch_åì_m≠_idx
], ch_tree_map_idx,

116 
ch_åì_m≠
[
ch_åì_m≠_idx
].
key
, ch_åì_m≠[ch_åì_m≠_idx].
vÆue
);

118 
	}
}

120 
ULONGLONG
* 
	$ch_åì_¸óã_queue
(
uöt
 
sz
)

122 
ch_loˇl_queue
 = 
	`kmÆloc
((
ULONGLONG
Ë* 
sz
, 
GFP_KERNEL
);

123 i‡(
ch_loˇl_queue
) {

124 
	`LOG
("QUEUE Cª©ed o‡sizê%u\n", 
sz
);

126  
ch_loˇl_queue
;

127 
	}
}

129 
VOID
 
	$ch_åì_dñëe_queue
(
PVOID
 
¨g_q
)

131 
	`k‰ì
(
¨g_q
);

132 
¨g_q
 = 
NULL
;

133 
	}
}

135 
INT
 
	$ch_åì_gë_queue_cou¡
(
PVOID
 
¨g_q
)

137  (
ch_loˇl_queue_ª¨
 - 
ch_loˇl_queue_‰⁄t
);

138 
	}
}

141 
VOID
 
	$ch_åì_ª£t_queue
(
VOID
)

143 
i
 = 0;

144 
	`mem£t
(
ch_loˇl_queue
, 0, (*ch_local_queue));

145 
ch_loˇl_queue_‰⁄t
 = 
ch_loˇl_queue_ª¨
 = 0;

146 
i
 = 0; i < 
ch_loˇl_queue_size
; i++) {

147 
ch_loˇl_queue
[
i
] = (
ULONGLONG
)
NULL
;

149 
	}
}

152 
VOID
 
	$ch_åì_íqueue
(
PVOID
 
ñemít
)

154 
ch_loˇl_queue
[
ch_loˇl_queue_ª¨
++] = (
ULONGLONG
)
ñemít
;

155 
	}
}

158 
PVOID
 
	$ch_åì_dequeue
(
VOID
)

160 i‡(
ch_loˇl_queue_‰⁄t
 =
ch_loˇl_queue_ª¨
Ë 
NULL
;

161  (
PVOID
)
ch_loˇl_queue
[
ch_loˇl_queue_‰⁄t
++];

162 
	}
}

166 
VOID
 
	$ch_åì_¥öt_node
(
PCH_TREE_NODE
 
node
, *
m¨kî
)

168 
i
 = 0;

169 
	`LOG
("%s:Node->£l‡ = %p\n", 
m¨kî
, 
node
 );

170 i‡(
node
) {

171 
	`LOG
("%s:Node->d©® = %d\n", 
m¨kî
, 
node
->
d©a
);

172 
	`LOG
("%s:Node->cy˛ê = %p\n", 
m¨kî
, 
node
->
cy˛e
);

173 i‡(
node
->
cy˛e
) {

174 
	`LOG
("%s:Node->cy˛e->d©® = %d\n", 
m¨kî
, 
node
->
cy˛e
->
d©a
);

176 
i
 = 0; i < 
CH_TREE_NODE_CHILDREN
; i++) {

177 
	`LOG
("%s:Node->chûdªn[%d] = %p\n", 
m¨kî
, 
i
, 
node
->
chûdªns
[i]);

180 
	`LOG
("%s:Tªe: No. o‡AŒoˇãd Node†%d\n",
m¨kî
, 
	`ATOMIC_READ
(
ch_åì_Æloc_node_˙t
));

181 
	}
}

185 
VOID
 
	$ch_åì_¥öt_Àvñ_‹dî_löe_by_löe
(
PCH_TREE_NODE
 
roŸ
)

187 
PCH_TREE_NODE
 
node
 = 
roŸ
;

188 
INT
 
i
 = 0;

189 
INT
 
q˙t
 = 0;

190 
INT
 
Àvñ
 = 0;

193 
	`QUEUE
(
roŸ
);

195 
åue
) {

196 
q˙t
 = 
	`QUEUE_COUNT
(
ch_loˇl_queue
);

198 
	`LOG
("q˙à%d i.e. @ Levñ = %d\n", 
q˙t
, 
Àvñ
++);

200 i‡(
q˙t
 == 0) ;

202 
q˙t
 != 0) {

203 
	`DEQUEUE
(
node
);

204 i‡(
node
->
cy˛e
) {

205 
	`LOG
("[%c Data = %d Self = %p ] [%c Cycle = %d Cycle->Self = %p ]\n",

206 
node
->
ch
,Çode->
d©a
,Çode,Çode->
cy˛e
->ch,Çode->cycle->data,Çode->cycle);

208 
	`LOG
("[%¯D©®%d Sñ‡%∞]\n",
node
->
ch
,Çode->
d©a
,Çode);

211 
i
 = 0; i < 
CH_TREE_NODE_CHILDREN
; i++) {

212 i‡(
node
->
chûdªns
[
i
]) {

213 
	`QUEUE
(
node
->
chûdªns
[
i
]);

216 
q˙t
--;

219 
	}
}

222 
VOID
 
	$ch_åì_¥öt_Àvñ_‹dî
(
PCH_TREE_NODE
 
roŸ
)

224 
PCH_TREE_NODE
 
node
 = 
roŸ
;

225 
INT
 
i
 = 0;

226 
node
) {

227 i‡(
node
->
cy˛e
) {

228 
	`LOG
("[%¯D©®%d Sñ‡%∞] [%¯ Cy˛ê%d Cy˛e->Sñ‡%∞]\n", 
node
->
ch
,Çode->
d©a
,Çode,Çode->
cy˛e
->ch,Çode->cycle->data,Çode->cycle);

230 
	`LOG
("[%c] D©®%d Sñ‡%p\n", 
node
->
ch
,Çode->
d©a
,Çode);

233 
i
 = 0; i < 
CH_TREE_NODE_CHILDREN
; i++) {

234 i‡(
node
->
chûdªns
[
i
]) {

235 
	`QUEUE
(
node
->
chûdªns
[
i
]);

238 
	`DEQUEUE
(
node
);

240 
	}
}

243 
VOID
 
	$ch_åì_de°roy
(
VOID
)

246 
	`ch_åì_dñëe
(
dìp_åì_roŸ
);

247 
dìp_åì_roŸ
 = 
NULL
;

250 
	`ch_åì_dñëe
(
dìp_˛⁄e_roŸ
);

251 
dìp_˛⁄e_roŸ
 = 
NULL
;

254 
	`DELETE_MAP
(
ch_åì_m≠
);

257 
	`DELETE_QUEUE
(
ch_loˇl_queue
);

258 
	}
}

261 
VOID
 
	$ch_åì_öô
(
VOID
)

263 
dìp_åì_roŸ
 = 
NULL
;

265 
dìp_˛⁄e_roŸ
 = 
NULL
;

268 
	`ATOMIC_SET
(
ch_åì_Æloc_node_˙t
, 0);

271 
ch_åì_m≠
 = 
NULL
;

272 
ch_åì_m≠_idx
 = 0;

273 
ch_åì_m≠_size
 = 
MAP_SIZE
;

276 
	`CREATE_MAP
();

279 
ch_loˇl_queue
 = 
NULL
;

280 
ch_loˇl_queue_‰⁄t
 = 0;

281 
ch_loˇl_queue_ª¨
 = 0;

282 
ch_loˇl_queue_size
 = 
MAP_SIZE
;

284 
	`CREATE_QUEUE
(
ch_loˇl_queue
, 
ch_loˇl_queue_size
);

288 
	`ATOMIC_SET
(
ch_åì_Æloc_node_˙t
, 0);

289 
	}
}

292 
VOID
 
	$ch_åì_dñëe
(
PCH_TREE_NODE
 
roŸ
)

294 
i
 = 0;

295 i‡(
roŸ
 =
NULL
) {

300 
i
 = 0; i < 
CH_TREE_NODE_CHILDREN
; i++) {

301 i‡(
roŸ
->
chûdªns
[
i
]) {

302 
	`ch_åì_dñëe
(
roŸ
->
chûdªns
[
i
]);

307 
	`ch_åì_dñëe_node
(
roŸ
);

308 
	}
}

311 
	$ch_åì_moduÀ_öô
()

313 
	`LOG
(" ______________________________________________________ \n");

314 
	`LOG
("| |\n");

315 
	`LOG
("| Tree DeepCopy Module Loaded |\n");

316 
	`LOG
("|______________________________________________________|\n");

319 
	`ch_åì_öô
();

322 
	`ch_åì_maö
();

324 
	}
}

326 
	$ch_åì_moduÀ_exô
()

329 
	`ch_åì_de°roy
();

330 
	`LOG
("TªêMem‹y AŒoˇti⁄ Cou¡ = %d\n", 
	`ATOMIC_READ
(
ch_åì_Æloc_node_˙t
));

333 
	`LOG
(" ______________________________________________________ \n");

334 
	`LOG
("| |\n");

335 
	`LOG
("| Tree DeepCopy Module UnLoaded |\n");

336 
	`LOG
("|______________________________________________________|\n");

337 
	}
}

339 
moduÀ_öô
(
ch_åì_moduÀ_öô
);

340 
moduÀ_exô
(
ch_åì_moduÀ_exô
);

341 
MODULE_LICENSE
(
CH_MODULE_LICENSE
);

342 
MODULE_AUTHOR
(
CH_MODULE_AUTHOR
);

	@lab_engine/lab_engine.c

9 
	~"¥ŸŸy≥s.h
"

11 
	$dz_œb_ígöe_moduÀ_öô
()

13 
	`LOGINFF
(" ______________________________________________________ \n");

14 
	`LOGINFF
("| |\n");

15 
	`LOGINFF
("| ZAIDSTOR LAB Engine Module Loaded |\n");

16 
	`LOGINFF
("|______________________________________________________|\n");

18 
RETURNS
;

19 
	}
}

21 
	$dz_œb_ígöe_moduÀ_exô
()

23 
	`LOGINFF
(" ______________________________________________________ \n");

24 
	`LOGINFF
("| |\n");

25 
	`LOGINFF
("| ZAIDSTOR LAB Engine Module UnLoaded |\n");

26 
	`LOGINFF
("|______________________________________________________|\n");

27 
	}
}

29 
moduÀ_öô
(
dz_œb_ígöe_moduÀ_öô
);

30 
moduÀ_exô
(
dz_œb_ígöe_moduÀ_exô
);

31 
MODULE_LICENSE
(
DZ_MODULE_LICENSE
);

32 
MODULE_AUTHOR
(
DZ_MODULE_AUTHOR
);

	@lab_engine/lab_engine_binary_tree.c

9 
	~"¥ŸŸy≥s.h
"

10 
	#BINARY_TREE_INSERT
(
¨g_åì_roŸ
, 
¨g_d©a
Ë\

	)

12 
	g¨g_åì_roŸ
 = 
dz_bö¨y_åì_ö£π
(
¨g_åì_roŸ
, 
¨g_d©a
); \

15 
PDZ_BINARY_NODE
 
	gåì_roŸ
 = 
NULL
;

16 
PDZ_BINARY_NODE
 
	g˛⁄e_roŸ
 = 
NULL
;

17 
PDZ_BINARY_NODE
 
	gmúr‹_roŸ
 = 
NULL
;

18 
PDZ_BINARY_NODE
 
	ghód
 = 
NULL
;

19 
PDZ_TREE_NODE
 
	gdìp_åì_roŸ
 = 
NULL
;

20 
PDZ_TREE_NODE
 
	gdìp_˛⁄e_roŸ
 = 
NULL
;

23 
ULONGLONG
 *
	gloˇl_queue
 = 
NULL
;

24 
uöt
 
	gloˇl_queue_‰⁄t
 = 0;

25 
uöt
 
	gloˇl_queue_ª¨
 = 0;

26 
uöt
 
	gloˇl_queue_size
 = 32;

29 
ULONGLONG
 *
	gloˇl_°ack
 = 
NULL
;

30 
INT
 
	gloˇl_°ack_idx
 = 0;

31 
uöt
 
	gloˇl_°ack_size
 = 32;

35 
PDZ_MAP
 
	gloˇl_m≠
 = 
NULL
;

36 
INT
 
	gloˇl_m≠_idx
 = 0;

37 
UINT
 
	gloˇl_m≠_size
 = 32;

39 
UINT
 
	g£quí˚
 = 1;

43 
	#IF_EMPTY_STACK_
(Ëi‡(
loˇl_°ack_idx
 =-1)

	)

44 
	#IF_STACK_EMPTY_
(Ëi‡(
loˇl_°ack_idx
 =-1)

	)

46 
	#CREATE_STACK
(
¨g_s
, 
¨g_s_size
Ë\

	)

47 
	g¨g_s
 = 
	$dz_bö¨y_åì_¸óã_°ack
(
¨g_s_size
)

49 
	#RESET_STACK
(Ë\

	)

50 
	$dz_bö¨y_åì_ª£t_°ack
()

52 
	#PUSH
(
¨g_ñemít
Ë\

	)

53 
	`dz_bö¨y_åì_push_°ack
((*)(
¨g_ñemít
))

55 
	#POP
(
¨g_ñemít
Ë\

	)

56 
¨g_ñemít
 = (
PDZ_BINARY_NODE
)
	$dz_bö¨y_åì_p›_°ack
()

59 
	#CREATE_QUEUE
(
¨g_q
, 
¨g_q_size
Ë\

	)

60 
¨g_q
 = 
	$dz_bö¨y_åì_¸óã_queue
(
¨g_q_size
)

62 
	#QUEUE
(
¨g_ñemít
Ë\

	)

63 
	`dz_bö¨y_åì_íqueue
((*)(
¨g_ñemít
))

65 
	#RESET_QUEUE
(Ë\

	)

66 
	$dz_bö¨y_åì_ª£t_queue
()

68 
	#DQUEUE
(
¨g_ñemít
Ë\

	)

69 
¨g_ñemít
 = (
PDZ_BINARY_NODE
)
	$dz_bö¨y_åì_dequeue
()

71 
	#DEQUEUE
(
¨g_ñemít
Ë
	`DQUEUE
◊rg_ñemít)

	)

74 
	#CREATE_MAP
(Ë\

	)

75 
loˇl_m≠
 = 
	$dz_bö¨y_åì_¸óã_m≠
(
loˇl_m≠_size
)

77 
	#SET_MAP
(
¨g_key
, 
¨g_vÆue
Ë\

	)

78 
	$dz_bö¨y_åì_£t_m≠
(
¨g_key
, 
¨g_vÆue
)

80 
	#GET_MAP
(
¨g_key
Ë\

	)

81 (
LONG
 *)
	$dz_bö¨y_åì_gë_m≠
(
¨g_key
)

83 
	#PRINT_MAP
(Ë\

	)

84 
	$dz_bö¨y_åì_¥öt_m≠
()

86 
PDZ_MAP
 
	$dz_bö¨y_åì_¸óã_m≠
(
uöt
 
sz
)

88 
loˇl_m≠
 = 
	`dz_kmÆloc
((
ULONGLONG
Ë* 
sz
, 
GFP_KERNEL
);

89 i‡(
loˇl_m≠
) {

90 
	`LOGTGT
("HASHMAP Cª©ed o‡sizê%u\n", 
sz
);

92 
	`dz_bö¨y_åì_ª£t_m≠
();

93  
loˇl_m≠
;

94 
	}
}

96 
VOID
 
	$dz_bö¨y_åì_ª£t_m≠
(
VOID
)

98 
	`MEMSET
(
loˇl_m≠
);

99 
loˇl_m≠_idx
 = 0;

100 
loˇl_m≠_idx
 = 0;Üoˇl_m≠_idx < 
loˇl_m≠_size
;Üocal_map_idx++) {

102 
loˇl_m≠
[
loˇl_m≠_idx
].
key
 = 0;

103 
loˇl_m≠
[
loˇl_m≠_idx
].
vÆue
 = 
NULL
;

105 
	}
}

107 
PVOID
 
	$dz_bö¨y_åì_gë_m≠
(
ULONGLONG
 
key
)

109 
loˇl_m≠_idx
 = 0;Üoˇl_m≠_idx < 
loˇl_m≠_size
;Üocal_map_idx++) {

111 i‡(
loˇl_m≠
[
loˇl_m≠_idx
].
key
 == key) {

112 
	`LOGTGT
("MAP->GET: Key[%u] = %Œu, VÆuê%p\n", 
loˇl_m≠_idx
,

113 
loˇl_m≠
[
loˇl_m≠_idx
].
key
,

114 
loˇl_m≠
[
loˇl_m≠_idx
].
vÆue
);

115  
loˇl_m≠
[
loˇl_m≠_idx
].
vÆ
;

119  
NULL
;

120 
	}
}

122 
VOID
 
	$dz_bö¨y_åì_£t_m≠
(
ULONGLONG
 
key
, 
PVOID
 
vÆue
)

124 
loˇl_m≠_idx
 = 0;Üoˇl_m≠_idx < 
loˇl_m≠_size
;Üocal_map_idx++) {

127 i‡(
loˇl_m≠
[
loˇl_m≠_idx
].
key
 == 0) {

128 
loˇl_m≠
[
loˇl_m≠_idx
].
key
 = key;

129 
loˇl_m≠
[
loˇl_m≠_idx
].
vÆ
 = 
vÆue
;

131 
	`LOGTGT
("MAP->SET: Key[%u] = %Œu, VÆuê%p\n", 
loˇl_m≠_idx
,

132 
loˇl_m≠
[
loˇl_m≠_idx
].
key
,

133 
loˇl_m≠
[
loˇl_m≠_idx
].
vÆue
);

137 
	`mb
();

138 
	}
}

140 
VOID
 
	$dz_bö¨y_åì_¥öt_m≠
(
VOID
)

142 
loˇl_m≠_idx
 = 0;Üoˇl_m≠_idx < 
loˇl_m≠_size
;Üocal_map_idx++) {

144 
	`LOGTGT
("MAP->PRINT: Key[%u] = %Œu, VÆuê%p\n", 
loˇl_m≠_idx
,

145 
loˇl_m≠
[
loˇl_m≠_idx
].
key
,Üoˇl_m≠[loˇl_m≠_idx].
vÆue
);

147 
	}
}

149 
ULONGLONG
* 
	$dz_bö¨y_åì_¸óã_°ack
(
uöt
 
sz
)

151 
loˇl_°ack
 = 
	`dz_kmÆloc
((
ULONGLONG
Ë* 
sz
, 
GFP_KERNEL
);

152 i‡(
loˇl_°ack
) {

153 
	`LOGTGT
("STACK Cª©ed o‡sizê%u\n", 
sz
);

155 
	`dz_bö¨y_åì_ª£t_°ack
();

156  
loˇl_°ack
;

157 
	}
}

159 
VOID
 
	$dz_bö¨y_åì_ª£t_°ack
(
VOID
)

161 
	`MEMSET
(
loˇl_°ack
);

162 
loˇl_°ack_idx
 = -1;

163 
	}
}

166 
VOID
 
	$dz_bö¨y_åì_push_°ack
(
PVOID
 
ñemít
)

168 
loˇl_°ack_idx
++;

169 
loˇl_°ack
[
loˇl_°ack_idx
] = (
ULONGLONG
)
ñemít
;

170 
	}
}

172 
PVOID
 
	$dz_bö¨y_åì_p›_°ack
(
VOID
)

174  (
PVOID
)
loˇl_°ack
[
loˇl_°ack_idx
--];

175 
	}
}

177 
ULONGLONG
* 
	$dz_bö¨y_åì_¸óã_queue
(
uöt
 
sz
)

179 
loˇl_queue
 = 
	`dz_kmÆloc
((
ULONGLONG
Ë* 
sz
, 
GFP_KERNEL
);

180 i‡(
loˇl_queue
) {

181 
	`LOGTGT
("QUEUE Cª©ed o‡sizê%u\n", 
sz
);

183  
loˇl_queue
;

184 
	}
}

186 
VOID
 
	$dz_bö¨y_åì_ª£t_queue
(
VOID
)

188 
	`MEMSET
(
loˇl_queue
);

189 
loˇl_queue_‰⁄t
 = 
loˇl_queue_ª¨
 = 0;

190 
	}
}

192 
VOID
 
	$dz_bö¨y_åì_íqueue
(
PVOID
 
ñemít
)

194 
loˇl_queue
[
loˇl_queue_ª¨
++] = (
ULONGLONG
)
ñemít
;

195 
	}
}

197 
PVOID
 
	$dz_bö¨y_åì_dequeue
(
VOID
)

199 i‡(
loˇl_queue_‰⁄t
 =
loˇl_queue_ª¨
Ë 
NULL
;

200  (
PVOID
)
loˇl_queue
[
loˇl_queue_‰⁄t
++];

201 
	}
}

203 
RVOID
 
	$dz_bö¨y_åì_¥öt_node
(
PDZ_BINARY_NODE
 
node
)

205 
BOOL
 
Êag
 = 
TRUE
;

206 i‡(!
node
) {

207 
	`LOGTGT
("Node Print: Binary Node is NULL\n");

212 i‡(
Êag
 =
TRUE
) {

213 
	`LOGTGT
("[-----------BINARY NODE----------]\n");

214 
	`LOGTGT
("[ ]\n");

215 
	`LOGTGT
("[ NODE = %p]\n", 
node
);

216 
	`LOGTGT
("[ NODE->d©® = %ld]\n", 
node
->
d©a
);

217 
	`LOGTGT
("[ NODE->À· = %ld %p]\n", 
node
->
À·_d©a
,Çode->
À·
);

218 
	`LOGTGT
("[ NODE->righà = %ld %p]\n", 
node
->
right_d©a
,Çode->
right
);

219 #ifde‡
_LAB_ENGINE_BINARY_TREE_H_DEBUG_


220 
	`LOGTGT
("[ NODE->∑ª¡ = %ld %p]\n", 
node
->
∑ª¡_d©a
,Çode->
∑ª¡
);

221 
	`LOGTGT
("[ NODE->roŸ = %p]\n", 
node
->
roŸ
);

222 
	`LOGTGT
("[ NODE->£quí˚ = %u]\n", 
node
->
£quí˚
);

223 
	`LOGTGT
("[ QUEUE->qª¨ = %u]\n", 
loˇl_queue_ª¨
);

224 
	`LOGTGT
("[ QUEUE->q‰⁄à = %u]\n", 
loˇl_queue_‰⁄t
);

226 
	`LOGTGT
("[----------------------------------]\n");

228 
	}
}

230 
PDZ_BINARY_NODE
 
	$dz_bö¨y_åì_Æloc_node
(
VOID
)

232 
PDZ_BINARY_NODE
 
node
 = 
	`DZ_BINARY_ALLOC_NODE
();

233 i‡(!
node
) {

234 
	`LOGTGTE
("%s","Error, UnableÅoállocate memory for intervalÅreeÇode\n");

235 
RETURNN
;

237 
	`MEMSET
(
node
);

238  
node
;

239 
	}
}

241 
PDZ_TREE_NODE
 
	$dz_åì_Æloc_node
(
VOID
)

243 
PDZ_TREE_NODE
 
node
 = 
	`dz_kmÆloc
((
DZ_TREE_NODE
), 
GFP_KERNEL
);

244 i‡(!
node
) {

245 
	`LOGTGTE
("%s","Error, UnableÅoállocate memory for intervalÅreeÇode\n");

246 
RETURNN
;

248 
	`MEMSET
(
node
);

249  
node
;

250 
	}
}

252 
RVOID
 
	$dz_bö¨y_åì_po°‹dî
(
PDZ_BINARY_NODE
 
node
)

254 i‡(
node
->
À·
) {

255 
	`dz_bö¨y_åì_po°‹dî
(
node
->
À·
);

257 i‡(
node
->
right
) {

258 
	`dz_bö¨y_åì_po°‹dî
(
node
->
right
);

260 
	`LOGTGT
("Po°Ordî Recursi⁄ D©®%ld\n", 
node
->
d©a
);

262 
	}
}

264 
RVOID
 
	$dz_bö¨y_åì_¥e‹dî
(
PDZ_BINARY_NODE
 
node
)

267 
	`LOGTGT
("PªOrdî Recursi⁄ D©®%ld\n", 
node
->
d©a
);

268 i‡(
node
->
À·
) {

269 
	`dz_bö¨y_åì_¥e‹dî
(
node
->
À·
);

271 i‡(
node
->
right
) {

272 
	`dz_bö¨y_åì_¥e‹dî
(
node
->
right
);

274 
	}
}

276 
RVOID
 
	$dz_bö¨y_åì_ö‹dî
(
PDZ_BINARY_NODE
 
node
)

278 i‡(
node
->
À·
) {

279 
	`dz_bö¨y_åì_ö‹dî
(
node
->
À·
);

281 
	`LOGTGT
("InOrdî Recursi⁄ D©®%ld\n", 
node
->
d©a
);

283 i‡(
node
->
right
) {

284 
	`dz_bö¨y_åì_ö‹dî
(
node
->
right
);

286 
	}
}

288 
UINT
 
	$dz_bö¨y_åì_height
(
PDZ_BINARY_NODE
 
roŸ
)

290 
UINT
 
lheight
 = 0;

291 
UINT
 
rheight
 = 0;

293 i‡(
roŸ
 =
NULL
) {

299 
lheight
 = 
	`dz_bö¨y_åì_height
(
roŸ
->
À·
);

300 
rheight
 = 
	`dz_bö¨y_åì_height
(
roŸ
->
right
);

302 i‡(
lheight
 > 
rheight
) {

303  
lheight
+1;

305  
rheight
+1;

308 
	}
}

309 
RVOID
 
	$dz_bö¨y_åì_¥e‹dî_ôî©ive
(
PDZ_BINARY_NODE
 
roŸ
)

311 
PDZ_BINARY_NODE
 
node
 = 
roŸ
;

313 
	`PUSH
(
roŸ
);

315 
node
) {

317 
	`POP
(
node
);

318 i‡(
node
) {

320 
	`LOGTGT
("PªOrdî IãøtivêD©®%ld\n", 
node
->
d©a
);

322 i‡(
node
->
right
) {

323 
	`PUSH
(
node
->
right
);

326 i‡(
node
->
À·
) {

327 
	`PUSH
(
node
->
À·
);

330 
	`IF_STACK_EMPTY_
() ;

334 
	}
}

336 
RVOID
 
	$dz_bö¨y_åì_Àvñ_‹dî
(
PDZ_BINARY_NODE
 
roŸ
)

338 
PDZ_BINARY_NODE
 
node
 = 
roŸ
;

340 
node
) {

341 
	`LOGTGT
("D©®%ld\n", 
node
->
d©a
);

342 i‡(
node
->
À·
) {

343 
	`QUEUE
(
node
->
À·
);

346 i‡(
node
->
right
) {

347 
	`QUEUE
(
node
->
right
);

350 
	`DEQUEUE
(
node
);

355 
	}
}

359 
BOOL
 
	$dz_bö¨y_åì_check_múr‹
(
PDZ_BINARY_NODE
 
roŸ
, PDZ_BINARY_NODE 
múr‹roŸ
)

363 i‡(
roŸ
 =
NULL
 && 
múr‹roŸ
 == NULL) {

364  
åue
;

368 i‡((
roŸ
 =
NULL
 && 
múr‹roŸ
 != NULL) || (root != NULL && mirrorroot == NULL)) {

369  
Ál£
;

372 
	`LOGTGT
("CheckögÑoŸ->d©®%ld, múr‹->d©®%ld\n", 
roŸ
->
d©a
, 
múr‹roŸ
->data);

375 i‡(
roŸ
->
d©a
 =
múr‹roŸ
->data) {

379 if((
	`dz_bö¨y_åì_check_múr‹
(
roŸ
->
À·
, 
múr‹roŸ
->
right
) &&

380 
	`dz_bö¨y_åì_check_múr‹
(
roŸ
->
right
, 
múr‹roŸ
->
À·
)Ë=
åue
) {

381  
åue
;

383  
Ál£
;

387  
Ál£
;

391 
RETURNT
;

393 
	}
}

398 
PDZ_BINARY_NODE
 
	$dz_bö¨y_åì_múr‹
(
PDZ_BINARY_NODE
 
roŸ
)

400 
PDZ_BINARY_NODE
 
múr‹roŸ
 = 
NULL
;

402 i‡(
roŸ
) {

403 
múr‹roŸ
 = 
	`dz_bö¨y_åì_Æloc_node
();

404 
	`MEMSET
(
múr‹roŸ
);

405 
múr‹roŸ
->
d©a
 = 
roŸ
->data;

406 
múr‹roŸ
->
£quí˚
 = 
roŸ
->sequence;

407 
	`LOGTGT
("Múr‹ Cª©ed %ld\n", 
múr‹roŸ
->
d©a
);

410 
múr‹roŸ
->
right
 = 
	`dz_bö¨y_åì_múr‹
(
roŸ
->
À·
);

411 i‡(
múr‹roŸ
->
right
) {

413 
múr‹roŸ
->
right
->
∑ª¡
 = mirrorroot;

414 
múr‹roŸ
->
right
->
∑ª¡_d©a
 = múr‹roŸ->
d©a
;

415 
múr‹roŸ
->
right_d©a
 = múr‹roŸ->
right
->
d©a
;

416 
	`LOGTGT
("Múr‹ÑoŸ->À·->d©®%ld, múr‹->right->d©®%ld\n", 
roŸ
->
À·
->
d©a
, 
múr‹roŸ
->
right
->data);

419 
múr‹roŸ
->
À·
 = 
	`dz_bö¨y_åì_múr‹
(
roŸ
->
right
);

420 i‡(
múr‹roŸ
->
À·
) {

421 
múr‹roŸ
->
À·
->
∑ª¡
 = mirrorroot;

422 
múr‹roŸ
->
À·
->
∑ª¡_d©a
 = múr‹roŸ->
d©a
;

423 
múr‹roŸ
->
À·_d©a
 = múr‹roŸ->
À·
->
d©a
;

424 
	`LOGTGT
("Múr‹ÑoŸ->right->d©®%ld, múr‹->À·->d©®%ld\n", 
roŸ
->
right
->
d©a
, 
múr‹roŸ
->
À·
->data);

428  
múr‹roŸ
;

430 
	}
}

437 
PDZ_BINARY_NODE
 
	$dz_bö¨y_åì_˛⁄e_ôî©ive
(
PDZ_BINARY_NODE
 
roŸ
)

439 
PDZ_BINARY_NODE
 
˛⁄e_roŸ
 = 
NULL
;

442 
	`RESET_QUEUE
();

444 
roŸ
) {

446 
˛⁄e_roŸ
 = 
	`dz_bö¨y_åì_ö£π
(˛⁄e_roŸ, 
roŸ
->
d©a
);

448 i‡(
roŸ
->
À·
) {

449 
	`QUEUE
(
roŸ
->
À·
);

451 i‡(
roŸ
->
right
) {

452 
	`QUEUE
(
roŸ
->
right
);

455 
	`DEQUEUE
(
roŸ
);

458  
˛⁄e_roŸ
;

459 
	}
}

461 
VOID
 
	$dz_bö¨y_åì_dìp_c›y_cy˛e
(
PDZ_TREE_NODE
 
roŸ
, PDZ_TREE_NODE 
˛⁄e
)

463 
i
 = 0;

465 i‡(
roŸ
->
cy˛e
) {

466 
˛⁄e
->
cy˛e
 = (
PDZ_TREE_NODE
)
	`GET_MAP
(
roŸ
->cy˛e->
d©a
);

469 
i
 = 0; i < 
DZ_TREE_NODE_CHILDREN
; i++) {

470 i‡(
roŸ
->
chûdªns
[
i
]) {

471 
	`dz_bö¨y_åì_dìp_c›y_cy˛e
(
roŸ
->
chûdªns
[
i
], 
˛⁄e
->childrens[i]);

476 
	}
}

477 
PDZ_TREE_NODE
 
	$dz_bö¨y_åì_dìp_c›y_c‹e
(
PDZ_TREE_NODE
 
roŸ
)

479 
PDZ_TREE_NODE
 
˛⁄e_roŸ
 = 
NULL
;

480 
i
 = 0;

482 i‡(
roŸ
) {

483 
˛⁄e_roŸ
 = 
	`dz_åì_Æloc_node
();

484 
˛⁄e_roŸ
->
d©a
 = 
roŸ
->data;

487 
	`SET_MAP
(
˛⁄e_roŸ
->
d©a
, 
roŸ
);

489 
i
 = 0; i < 
DZ_TREE_NODE_CHILDREN
; i++) {

490 i‡(
roŸ
->
chûdªns
[
i
]) {

491 
˛⁄e_roŸ
->
chûdªns
[
i
] = 
	`dz_bö¨y_åì_dìp_c›y_c‹e
(
roŸ
->childrens[i]);

497  
˛⁄e_roŸ
;

498 
	}
}

500 
PDZ_TREE_NODE
 
	$dz_bö¨y_åì_dìp_c›y
(
PDZ_TREE_NODE
 
roŸ
)

502 
PDZ_TREE_NODE
 
≤ode
 = 
roŸ
;

503 
PDZ_TREE_NODE
 
˛⁄e
;

504 i‡(
≤ode
 =
NULL
) {

505 
≤ode
 = 
	`dz_åì_Æloc_node
();

506 
roŸ
 = 
≤ode
;

510 
roŸ
->
d©a
 = 101;

511 
roŸ
->
cy˛e
 = 
NULL
;

513 
roŸ
->
chûdªns
[0] = 
	`dz_åì_Æloc_node
();

514 
roŸ
->
chûdªns
[0]->
d©a
 = 101000;

516 
roŸ
->
chûdªns
[1] = 
	`dz_åì_Æloc_node
();

517 
roŸ
->
chûdªns
[1]->
d©a
 = 101100;

518 
roŸ
->
chûdªns
[1]->chûdªns[0] = 
NULL
;

519 
roŸ
->
chûdªns
[1]->chûdªns[1] = 
NULL
;

520 
roŸ
->
chûdªns
[1]->chûdªns[2] = 
NULL
;

522 
roŸ
->
chûdªns
[2] = 
	`dz_åì_Æloc_node
();

523 
roŸ
->
chûdªns
[2]->
d©a
 = 101200;

524 
roŸ
->
chûdªns
[2]->chûdªns[0] = 
NULL
;

525 
roŸ
->
chûdªns
[2]->chûdªns[1] = 
NULL
;

526 
roŸ
->
chûdªns
[2]->chûdªns[2] = 
NULL
;

529 
≤ode
 = 
roŸ
->
chûdªns
[0];

530 
≤ode
->
chûdªns
[0] = 
	`dz_åì_Æloc_node
();

531 
≤ode
->
chûdªns
[0]->
d©a
 = 201000;

532 
≤ode
->
chûdªns
[0]->chûdªns[0] = 
NULL
;

533 
≤ode
->
chûdªns
[0]->chûdªns[1] = 
NULL
;

534 
≤ode
->
chûdªns
[0]->chûdªns[2] = 
NULL
;

538 
≤ode
->
chûdªns
[1] = 
	`dz_åì_Æloc_node
();

539 
≤ode
->
chûdªns
[1]->
d©a
 = 201100;

540 
≤ode
->
chûdªns
[1]->chûdªns[0] = 
NULL
;

541 
≤ode
->
chûdªns
[1]->chûdªns[1] = 
NULL
;

542 
≤ode
->
chûdªns
[1]->chûdªns[2] = 
NULL
;

545 
≤ode
->
chûdªns
[2] = 
	`dz_åì_Æloc_node
();

546 
≤ode
->
chûdªns
[2]->
d©a
 = 201200;

547 
≤ode
->
chûdªns
[2]->chûdªns[0] = 
NULL
;

548 
≤ode
->
chûdªns
[2]->chûdªns[1] = 
NULL
;

549 
≤ode
->
chûdªns
[2]->chûdªns[2] = 
NULL
;

552 
≤ode
 = 
roŸ
->
chûdªns
[0];

553 
≤ode
->
cy˛e
 = 
roŸ
;

554 
roŸ
->
cy˛e
 = 
≤ode
;

556 
	`LOGTGT
("≤ode->cy˛e->d©®%d\n", 
≤ode
->
cy˛e
->
d©a
);

557 
	`LOGTGT
("roŸ->cy˛e->d©®%d\n", 
roŸ
->
cy˛e
->
d©a
);

559 
	`LOGTGT
("Calling copy_core\n");

560 
˛⁄e
 = 
	`dz_bö¨y_åì_dìp_c›y_c‹e
(
roŸ
);

561 
	`dz_bö¨y_åì_¥öt_m≠
();

562 
	`LOGTGT
("Calling copy_cycle\n");

563 
	`dz_bö¨y_åì_dìp_c›y_cy˛e
(
roŸ
, 
˛⁄e
);

564 
	`LOGTGT
("˛⁄ê%p\n", 
˛⁄e
);

565 
	`LOGTGT
("˛⁄e->cy˛ê%p\n", 
˛⁄e
->
cy˛e
);

566 
	`LOGTGT
("˛⁄e->cy˛e->d©®%d\n", 
˛⁄e
->
cy˛e
->
d©a
);

567 
≤ode
 = 
˛⁄e
->
chûdªns
[0];

568 
	`LOGTGT
("˛⁄ê%p\n", 
≤ode
);

569 
	`LOGTGT
("˛⁄e->cy˛ê%p\n", 
≤ode
->
cy˛e
);

570 
	`LOGTGT
("˛⁄e->cy˛e->d©®%d\n", 
≤ode
->
cy˛e
->
d©a
);

571  
˛⁄e
;

572 
	}
}

578 
PDZ_BINARY_NODE
 
	$dz_bö¨y_åì_˛⁄e
(
PDZ_BINARY_NODE
 
roŸ
)

580 
PDZ_BINARY_NODE
 
˛⁄e_roŸ
 = 
NULL
;

581 i‡(
roŸ
 !
NULL
) {

582 
˛⁄e_roŸ
 = 
	`dz_bö¨y_åì_Æloc_node
();

583 
	`MEMSET
(
˛⁄e_roŸ
);

584 
˛⁄e_roŸ
->
d©a
 = 
roŸ
->data;

585 
˛⁄e_roŸ
->
£quí˚
 = 
roŸ
->sequence;

586 
˛⁄e_roŸ
->
∑ª¡_d©a
 = 
roŸ
->parent_data;

587 
˛⁄e_roŸ
->
À·_d©a
 = 
roŸ
->left_data;

588 
˛⁄e_roŸ
->
right_d©a
 = 
roŸ
->right_data;

589 
˛⁄e_roŸ
->
À·
 = cl⁄e_roŸ->
right
 = 
NULL
;

590 
	`LOGTGT
("Cª©ed %ld\n", 
˛⁄e_roŸ
->
d©a
);

594 
˛⁄e_roŸ
->
À·
 = 
	`dz_bö¨y_åì_˛⁄e
(
roŸ
->left);

595 i‡(
˛⁄e_roŸ
->
À·
) {

596 
˛⁄e_roŸ
->
À·_d©a
 = cl⁄e_roŸ->
À·
->
d©a
;

597 
˛⁄e_roŸ
->
À·
->
∑ª¡
 = clone_root;

600 
˛⁄e_roŸ
->
right
 = 
	`dz_bö¨y_åì_˛⁄e
(
roŸ
->right);

601 i‡(
˛⁄e_roŸ
->
right
) {

602 
˛⁄e_roŸ
->
right_d©a
 = cl⁄e_roŸ->
right
->
d©a
;

603 
˛⁄e_roŸ
->
right
->
∑ª¡
 = clone_root;

607  
˛⁄e_roŸ
;

608 
	}
}

621 
PDZ_BINARY_NODE
 
	$dz_bö¨y_åì_föd_ö‹dî_¥ede˚ss‹
(
PDZ_BINARY_NODE
 
roŸ
, 
INT
 
d©a
)

624 
PDZ_BINARY_NODE
 
≤ode
 = 
roŸ
;

625 
PDZ_BINARY_NODE
 
œ°_right_tu∫
 = 
NULL
;

627 
≤ode
) {

629 i‡(
d©a
 < 
≤ode
->data) {

630 
≤ode
 =Önode->
À·
;

631 } i‡(
d©a
 =
≤ode
->data) {

632 i‡(
≤ode
->
À·
) {

633 
≤ode
 =Önode->
À·
;

634 
≤ode
->
right
 !
NULL
) {

635 
≤ode
 =Önode->
right
;

638 
	`LOGTGT
("Pªde˚ss‹ Nodêo‡%d i†%ld\n", 
d©a
, 
≤ode
->data);

641 i‡(!
œ°_right_tu∫
) {

642 
	`LOGTGT
("NO P¨íàPªde˚ss‹ Nodêo‡%d Found\n", 
d©a
);

645 
	`LOGTGT
("La° RighàPªde˚ss‹ Nodêo‡%d i†%ld\n", 
d©a
, 
œ°_right_tu∫
->data);

652 
œ°_right_tu∫
 = 
≤ode
;

653 
≤ode
 =Önode->
right
;

658  
≤ode
;

660 
	}
}

671 
PDZ_BINARY_NODE
 
	$dz_bö¨y_åì_föd_ö‹dî_suc˚ss‹
(
PDZ_BINARY_NODE
 
roŸ
, 
INT
 
d©a
)

674 
PDZ_BINARY_NODE
 
≤ode
 = 
roŸ
;

675 
PDZ_BINARY_NODE
 
œ°_À·_tu∫
 = 
NULL
;

677 
≤ode
) {

679 i‡(
d©a
 < 
≤ode
->data) {

680 
œ°_À·_tu∫
 = 
≤ode
;

681 
≤ode
 =Önode->
À·
;

682 } i‡(
d©a
 =
≤ode
->data) {

685 i‡(
≤ode
->
right
) {

686 
≤ode
 =Önode->
right
;

687 
≤ode
->
À·
 !
NULL
) {

688 
≤ode
 =Önode->
À·
;

691 
	`LOGTGT
("Suc˚ss‹ Nodêo‡%d i†%ld\n", 
d©a
, 
≤ode
->data);

694 i‡(!
œ°_À·_tu∫
) {

695 
	`LOGTGT
("NO Le· Suc˚ss‹ Nodêo‡%d Found\n", 
d©a
);

698 
	`LOGTGT
("La° Le· Suc˚ss‹ Nodêo‡%d i†%ld\n", 
d©a
, 
œ°_À·_tu∫
->data);

705 
≤ode
 =Önode->
right
;

710  
≤ode
;

711 
	}
}

714 
PDZ_BINARY_NODE
 
	$dz_bö¨y_åì_ö£π
(
PDZ_BINARY_NODE
 
roŸ
, 
INT
 
d©a
)

716 i‡(
roŸ
 =
NULL
) {

717 
roŸ
 = 
	`dz_bö¨y_åì_Æloc_node
();

718 
	`MEMSET
(
roŸ
);

719 
roŸ
->
d©a
 = data;

720 
roŸ
->
£quí˚
 = sequence++;

721  
roŸ
;

724 i‡(
d©a
 < 
roŸ
->data) {

725 
roŸ
->
À·
 = 
	`dz_bö¨y_åì_ö£π
‘oŸ->À·, 
d©a
);

726 
roŸ
->
À·_d©a
 =ÑoŸ->
À·
->
d©a
;

727 
roŸ
->
À·
->
∑ª¡
 =Ñoot;

728 
roŸ
->
À·
->
∑ª¡_d©a
 =ÑoŸ->
d©a
;

730 
roŸ
->
right
 = 
	`dz_bö¨y_åì_ö£π
‘oŸ->right, 
d©a
);

731 
roŸ
->
right_d©a
 =ÑoŸ->
right
->
d©a
;

732 
roŸ
->
right
->
∑ª¡
 =Ñoot;

733 
roŸ
->
right
->
∑ª¡_d©a
 =ÑoŸ->
d©a
;

736  
roŸ
;

737 
	}
}

739 
BOOL
 
	$dz_¥o˚ss_œb_ígöe_bö¨y_åì
(
LBA
 
off£t
, 
UINT
 
iosize
)

741 
UINT
 
height
 = 0;

743 
	`CREATE_QUEUE
(
loˇl_queue
, 
loˇl_queue_size
);

744 
	`CREATE_STACK
(
loˇl_°ack
, 
loˇl_°ack_size
);

746 
	`BINARY_TREE_INSERT
(
åì_roŸ
, 24);

747 
	`BINARY_TREE_INSERT
(
åì_roŸ
, 20);

748 
	`BINARY_TREE_INSERT
(
åì_roŸ
, 40);

749 
	`BINARY_TREE_INSERT
(
åì_roŸ
, 10);

750 
	`BINARY_TREE_INSERT
(
åì_roŸ
, 22);

751 
	`BINARY_TREE_INSERT
(
åì_roŸ
, 30);

752 
	`BINARY_TREE_INSERT
(
åì_roŸ
, 50);

753 
	`LOGTGT
("###################################################################################\n");

754 
	`LOGTGT
(" Inorder Order\n");

755 
	`LOGTGT
("###################################################################################\n");

756 
	`dz_bö¨y_åì_ö‹dî
(
åì_roŸ
);

757 
	`LOGTGT
("###################################################################################\n");

758 
	`LOGTGT
(" LeveL Order\n");

759 
	`LOGTGT
("###################################################################################\n");

760 
	`dz_bö¨y_åì_Àvñ_‹dî
(
åì_roŸ
);

761 
	`LOGTGT
("###################################################################################\n");

762 
	`LOGTGT
(" Cloning\n");

763 
	`LOGTGT
("###################################################################################\n");

764 
˛⁄e_roŸ
 = 
	`dz_bö¨y_åì_˛⁄e
(
åì_roŸ
);

765 
	`dz_bö¨y_åì_ö‹dî
(
˛⁄e_roŸ
);

766 
	`LOGTGT
("###################################################################################\n");

767 
	`LOGTGT
(" LeveL Order Cloning\n");

768 
	`LOGTGT
("###################################################################################\n");

769 
	`RESET_QUEUE
();

770 
	`dz_bö¨y_åì_Àvñ_‹dî
(
˛⁄e_roŸ
);

771 
	`LOGTGT
("###################################################################################\n");

772 
	`LOGTGT
(" Mirroring\n");

773 
	`LOGTGT
("###################################################################################\n");

774 
múr‹_roŸ
 = 
	`dz_bö¨y_åì_múr‹
(
åì_roŸ
);

775 
	`LOGTGT
("###################################################################################\n");

776 
	`LOGTGT
(" LeveL Order Mirror\n");

777 
	`LOGTGT
("###################################################################################\n");

778 
	`RESET_QUEUE
();

779 
	`dz_bö¨y_åì_Àvñ_‹dî
(
múr‹_roŸ
);

780 
	`dz_bö¨y_åì_ö‹dî
(
múr‹_roŸ
);

781 
	`LOGTGT
("###################################################################################\n");

782 
	`LOGTGT
(" Check Mirroring\n");

783 
	`LOGTGT
("###################################################################################\n");

784 i‡(
	`dz_bö¨y_åì_check_múr‹
(
åì_roŸ
, 
múr‹_roŸ
)) {

785 
	`LOGTGT
("BothÅhe Treesáre mirror images ofÉach other\n");

787 
	`LOGTGT
("###################################################################################\n");

788 
	`LOGTGT
(" Inorder Successor \n");

789 
	`LOGTGT
("###################################################################################\n");

790 
	`dz_bö¨y_åì_föd_ö‹dî_suc˚ss‹
(
åì_roŸ
, 20);

791 
	`dz_bö¨y_åì_föd_ö‹dî_suc˚ss‹
(
åì_roŸ
, 22);

792 
	`dz_bö¨y_åì_föd_ö‹dî_suc˚ss‹
(
åì_roŸ
, 30);

793 
	`dz_bö¨y_åì_föd_ö‹dî_suc˚ss‹
(
åì_roŸ
, 50);

794 
	`dz_bö¨y_åì_föd_ö‹dî_suc˚ss‹
(
åì_roŸ
, 10);

795 
	`LOGTGT
("###################################################################################\n");

796 
	`LOGTGT
(" Inorder Predecessor \n");

797 
	`LOGTGT
("###################################################################################\n");

798 
	`dz_bö¨y_åì_föd_ö‹dî_¥ede˚ss‹
(
åì_roŸ
, 20);

799 
	`dz_bö¨y_åì_föd_ö‹dî_¥ede˚ss‹
(
åì_roŸ
, 22);

800 
	`dz_bö¨y_åì_föd_ö‹dî_¥ede˚ss‹
(
åì_roŸ
, 30);

801 
	`dz_bö¨y_åì_föd_ö‹dî_¥ede˚ss‹
(
åì_roŸ
, 50);

802 
	`dz_bö¨y_åì_föd_ö‹dî_¥ede˚ss‹
(
åì_roŸ
, 10);

803 
	`LOGTGT
("###################################################################################\n");

804 
	`LOGTGT
(" Cloning Iteratively\n");

805 
	`LOGTGT
("###################################################################################\n");

806 
˛⁄e_roŸ
 = 
	`dz_bö¨y_åì_˛⁄e_ôî©ive
(
åì_roŸ
);

807 
	`dz_bö¨y_åì_ö‹dî
(
˛⁄e_roŸ
);

808 
	`LOGTGT
("###################################################################################\n");

809 
	`LOGTGT
(" LeveL Order Cloning Iteratively \n");

810 
	`LOGTGT
("###################################################################################\n");

811 
	`RESET_QUEUE
();

812 
	`dz_bö¨y_åì_Àvñ_‹dî
(
˛⁄e_roŸ
);

814 
	`LOGTGT
("###################################################################################\n");

815 
	`LOGTGT
(" PreOrder Iteratively \n");

816 
	`LOGTGT
("###################################################################################\n");

817 
	`dz_bö¨y_åì_¥e‹dî
(
åì_roŸ
);

818 
	`dz_bö¨y_åì_¥e‹dî_ôî©ive
(
åì_roŸ
);

821 
	`LOGTGT
("###################################################################################\n");

822 
	`LOGTGT
(" Tree Height\n");

823 
	`LOGTGT
("###################################################################################\n");

824 
height
 = 
	`dz_bö¨y_åì_height
(
åì_roŸ
);

825 
	`LOGTGT
("Heighào‡thêåì i†%u\n", 
height
);

826 
	`LOGTGT
("###################################################################################\n");

827 
	`LOGTGT
(" DeepCopy With Cycle/Random Pointer \n");

828 
	`LOGTGT
("###################################################################################\n");

829 
	`CREATE_MAP
();

830 
	`PRINT_MAP
();

831 
dìp_˛⁄e_roŸ
 = 
	`dz_bö¨y_åì_dìp_c›y
(
dìp_åì_roŸ
);

833 
RETURNT
;

834 
	}
}

836 
EXPORT_SYMBOL
(
dz_¥o˚ss_œb_ígöe_bö¨y_åì
);

	@lab_engine/lab_engine_bplus_tree.c

9 
	~"¥ŸŸy≥s.h
"

12 
PPAGE
 
	gBPTREE_ROOT
 = 
NULL
;

14 
RVOID
 
	$dz_b∂us_åì_¥öt_node_lôe
(
PDZ_BPLUS_TREE_NODE
 
node
)

16 i‡(!
node
) {

17 
	`LOGTGT
("Node Print: BPlus Tree Node is NULL\n");

20 
	`LOGTGT
("[ NODE = %p]\n", 
node
);

21 
	`LOGTGT
("[ NODE->key = %Œu, NODE->Sñ‡%hu ]\n", 
node
->
key
,Çode->
£lf
);

22 
	}
}

24 
RVOID
 
	$dz_b∂us_åì_¥öt_node
(
PDZ_BPLUS_TREE_NODE
 
node
)

26 
BOOL
 
Êag
 = 
TRUE
;

27 i‡(!
node
) {

28 
	`LOGTGT
("Node Print: BPlus Tree Node is NULL\n");

33 i‡(
Êag
 =
TRUE
) {

34 
	`LOGTGT
("[---------BPLUS TREE NODE----------]\n");

35 
	`LOGTGT
("[ ]\n");

36 
	`LOGTGT
("[ NODE = %p]\n", 
node
);

37 
	`LOGTGT
("[ NODE->key = %Œu]\n", 
node
->
key
);

38 
	`LOGTGT
("[ NODE->£l‡ = %hu]\n", 
node
->
£lf
);

39 
	`LOGTGT
("[ NODE->∑ª¡ = %u]\n", 
node
->
∑ª¡
);

40 i‡(
node
->
À·
 =
BPNODE_NULL
) {

41 
	`LOGTGT
("[ NODE->left = NULL]\n");

43 
	`LOGTGT
("[ NODE->À· = %hi] [%p]\n", 
node
->
À·
, (node +Çode->left));

46 i‡(
node
->
right
 =
BPNODE_NULL
) {

47 
	`LOGTGT
("[ NODE->right = NULL]\n");

49 
	`LOGTGT
("[ NODE->righà = %hò] [%p]\n", 
node
->
right
, (node +Çode->right));

52 
	`IF_BPNODE_TYPE
(
node
->
ty≥
, 
BPNODE_TYPE_INTERNAL_ONLY
) {

53 
	`LOGTGT
("[ NODE->ty≥ = BPNODE_TYPE_INTERNAL_ONLY = %x]\n", (
node
->
ty≥
));

55 
	`IF_BPNODE_TYPE
(
node
->
ty≥
, 
BPNODE_TYPE_INTERNAL_FIRST
) {

56 
	`LOGTGT
("[ NODE->ty≥ = BPNODE_TYPE_INTERNAL_FIRST = %x]\n", (
node
->
ty≥
));

58 
	`IF_BPNODE_TYPE
(
node
->
ty≥
, 
BPNODE_TYPE_INTERNAL_LAST
) {

59 
	`LOGTGT
("[ NODE->ty≥ = BPNODE_TYPE_INTERNAL_LAST = %x]\n", (
node
->
ty≥
));

61 
	`IF_BPNODE_TYPE
(
node
->
ty≥
, 
BPNODE_TYPE_LEAF_ONLY
) {

62 
	`LOGTGT
("[ NODE->ty≥ = BPNODE_TYPE_LEAF_ONLY = %x]\n", (
node
->
ty≥
));

65 
	}
}

67 
PDZ_BPLUS_TREE_LEAF_NODE
 
	$dz_b∂us_åì_Æloc_Àaf_node
(
VOID
)

69 
PDZ_BPLUS_TREE_LEAF_NODE
 
node
 = 
	`DZ_BPLUS_TREE_ALLOC_LEAF_NODE
();

70 i‡(!
node
) {

71 
	`LOGTGTE
("%s","Error, UnableÅoállocate memory for intervalÅreeÇode\n");

72 
RETURNN
;

74 
	`MEMSET
(
node
);

75  
node
;

76 
	}
}

78 
RVOID
 
	$dz_b∂us_åì_¥öt_∑ge
(
PPAGE
 
roŸ
)

80 
i
 = 0;

81 
PVOID
 
∑gebuf

NULL
;

82 
PDZ_BPLUS_TREE_NODE
 
≤ode
;

83 
PDZ_BPLUS_METADATA_NODE
 
hód_md
 = 
NULL
;

84 
∑gebuf
 = 
	`km≠
(
roŸ
);

85 
hód_md
 = (
PDZ_BPLUS_METADATA_NODE
)(
∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

88 
i
 = 0; i < 
hód_md
->
Æloc_˙t
; i++) {

91 
≤ode
 = &(((
PDZ_BPLUS_TREE_NODE
)
∑gebuf
)[
i
]);

92 i‡(
Ál£
) {

93 
	`dz_b∂us_åì_¥öt_node_lôe
(
≤ode
);

95 
	`dz_b∂us_åì_¥öt_node
(
≤ode
);

98 
	`LOGTGT
("[ METADATA->Àvñ = %u\n", 
hód_md
->
Àvñ
);

99 
	`LOGTGT
("[ METADATA->Æloc_˙à = %u\n", 
hód_md
->
Æloc_˙t
);

100 
	`LOGTGT
("[ METADATA->mökey = %Œu\n", 
hód_md
->
mökey
);

101 
	`LOGTGT
("[ METADATA->maxkey = %Œu\n", 
hód_md
->
mökey
);

102 
	`LOGTGT
("[ METADATA->cuº_∑gê = %p\n", 
hód_md
->
cuº_∑ge
);

103 
	`LOGTGT
("[ METADATA->∑ª¡_∑gê%p\n", 
hód_md
->
∑ª¡_∑ge
);

104 
	`LOGTGT
("[ METADATA->√xt_∑gê = %p\n", 
hód_md
->
√xt_∑ge
);

105 
	`LOGTGT
("[ METADATA->¥ev_∑gê = %p\n", 
hód_md
->
¥ev_∑ge
);

106 
	`kunm≠
(
roŸ
);

107 
	}
}

109 
BOOL
 
	$dz_¥o˚ss_œb_ígöe_b∂us_åì
(
LBA
 
off£t
, 
UINT
 
iosize
)

112 
PDZ_BPLUS_TREE_LEAF_NODE
 
Àaf
 = 
NULL
;

114 
	`LOGTGT
("DZ_BPLUS_NODE_SIZE = %lu\n", 
DZ_BPLUS_NODE_SIZE
);

115 
	`LOGTGT
("DZ_BPLUS_TREE_ORDER = %lu\n", (
ULONG
)
DZ_BPLUS_TREE_ORDER
);

116 
	`LOGTGT
("DZ_BPLUS_TREE_MAX_KEYS = %lu\n", (
ULONG
)
DZ_BPLUS_TREE_MAX_KEYS
);

117 
	`LOGTGT
("sizeof(BPNODEË = %lu\n", (
BPNODE
));

118 
	`LOGTGT
("sizeof(BPMTDTË = %lu\n", (
BPMTDT
));

119 
	`LOGTGT
("sizeof(SPINLOCKË = %lu\n", (
SPINLOCK
));

146 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 16, 90101);

147 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 8, 90101);

149 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 4, 90101);

150 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 12, 90101);

151 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 20, 90101);

153 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 2, 90101);

154 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 6, 90101);

155 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 10, 90101);

156 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 14, 90101);

157 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 18, 90101);

158 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 22, 90101);

161 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 1, 90101);

162 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 3, 90101);

163 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 5, 90101);

164 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 7, 90101);

165 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 9, 90101);

166 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 11, 90101);

167 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 13, 90101);

168 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 15, 90101);

169 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 17, 90101);

170 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 19, 90101);

171 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 21, 90101);

179 
	`LOGTGT
("Printing Page in Sequential Order\n");

180 
	`dz_b∂us_åì_¥öt_∑ge
(
BPTREE_ROOT
);

181 
	`INSERT_KEY
(
Àaf
, 
BPTREE_ROOT
, 23, 90101);

189 
RETURNT
;

190 
	}
}

192 
EXPORT_SYMBOL
(
dz_¥o˚ss_œb_ígöe_b∂us_åì
);

	@lab_engine/lab_engine_bplus_tree_delete.c

9 
	~"¥ŸŸy≥s.h
"

11 
PPAGE
 
BPTREE_ROOT
;

13 
PPAGE
 
	$dz_b∂us_åì_dñëe
(
PPAGE
 
roŸ
, 
KEY
 
key
)

16  
roŸ
;

17 
	}
}

	@lab_engine/lab_engine_bplus_tree_get_set.c

9 
	~"¥ŸŸy≥s.h
"

10 
PPAGE
 
BPTREE_ROOT
;

13 
KEY
 
	$dz_b∂us_åì_gë_mid_key
(
PPAGE
 
roŸ_∑ge
)

15 
UINT
 
brk_˙t
 = 0;

16 
PVOID
 
roŸ_∑gebuf
 = 
NULL
;

17 
BPNODE
 *
≤ode
 = 
NULL
;

18 
BPNODE
 *
roŸ_node
;

19 
BOOL
 
d⁄e
 = 
FALSE
;

21 
USHORT
 *
°ack
 = 
NULL
;

23 
ATOMIC
 
°ack_idx
;

24 
USHORT
 
œ°_ñemít
 = 0;

27 
UINT
 
middÀ_idx
 = (
DZ_BPLUS_TREE_MAX_KEYS
/2) + 1;

28 
	`LOGTGT
("MiddÀ Index = %u\n", 
middÀ_idx
);

32 
°ack
 = 
	`dz_kmÆloc
(
middÀ_idx
, (
USHORT
));

33 
	`MEMSET
(
°ack
);

34 
	`ATOMIC_SET
(
°ack_idx
, 0);

39 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

40 
roŸ_node
 = (
PBPNODE
)
roŸ_∑gebuf
;

42 !
d⁄e
) {

44 i‡(
roŸ_node
) {

45 
	`PUSH_STACK
(
°ack
, 
°ack_idx
, 
roŸ_node
->
£lf
);

49 i‡(
roŸ_node
 && (roŸ_node->
À·
 !
BPNODE_NULL
)) {

50 i‡(
roŸ_node
->
À·
 =
BPNODE_NULL
) {

51 
roŸ_node
 = 
NULL
;

53 
roŸ_node
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[roŸ_node->
À·
]);

57 
	`IF_NOT_EMPTY_STACK
(
°ack_idx
) {

58 
brk_˙t
++;

59 
	`POP_STACK
(
°ack
, 
°ack_idx
, 
œ°_ñemít
);

62 
≤ode
 = &(((
PBPNODE
)
roŸ_∑gebuf
)[
œ°_ñemít
]);

65 i‡(
brk_˙t
 =
middÀ_idx
) {

66 
	`kunm≠
(
roŸ_∑ge
);

67  
≤ode
->
key
;

70 i‡(
≤ode
->
right
 =
BPNODE_NULL
) {

71 
roŸ_node
 = 
NULL
;

73 
roŸ_node
 = &(((
PBPNODE
)
roŸ_∑gebuf
)[
≤ode
->
right
]);

76 
d⁄e
 = 
TRUE
;

81  
BPLUS_NODE_NOT_FOUND
;

82 
	}
}

86 
KEY
 
	$dz_b∂us_åì_gë_mö_key
(
PPAGE
 
roŸ_∑ge
)

88 
PVOID
 
roŸ_∑gebuf

NULL
;

89 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

90 
KEY
 
mökey
 = 0;

92 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

95 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

96 
mökey
 = 
pmëad
->minkey;

97 
	`kunm≠
(
roŸ_∑ge
);

99  
mökey
;

100 
	}
}

103 
KEY
 
	$dz_b∂us_åì_gë_max_key
(
PPAGE
 
roŸ_∑ge
)

105 
PVOID
 
roŸ_∑gebuf

NULL
;

106 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

107 
KEY
 
maxkey
 = 0;

109 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

112 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

113 
maxkey
 = 
pmëad
->maxkey;

114 
	`kunm≠
(
roŸ_∑ge
);

116  
maxkey
;

117 
	}
}

119 
UINT
 
	$dz_b∂us_åì_gë_num_keys
(
PPAGE
 
roŸ_∑ge
)

121 
PVOID
 
roŸ_∑gebuf

NULL
;

122 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

123 
UINT
 
˙t
 = 0;

125 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

128 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

129 
˙t
 = 
pmëad
->
Æloc_˙t
;

130 
	`kunm≠
(
roŸ_∑ge
);

132  
˙t
;

134 
	}
}

138 
INT
 
	$dz_b∂us_åì_gë_∑ª¡_key
(
PPAGE
 
roŸ_∑ge
, 
KEY
 
key
, KEY *
∑ª¡_key
)

140 
PVOID
 
roŸ_∑gebuf

NULL
;

141 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

142 
KEY
 
maxkey
 = 0;

143 
KEY
 
mökey
 = 0;

144 
BPNODE
 *
roŸ_node
;

145 
BPNODE
 *
∑ª¡_node
;

147 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

150 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

151 
maxkey
 = 
pmëad
->maxkey;

152 
mökey
 = 
pmëad
->minkey;

153 i‡(
key
 < 
mökey
 || key > 
maxkey
) {

154 
	`kunm≠
(
roŸ_∑ge
);

155  
BPLUS_NODE_NOT_FOUND
;

158 
roŸ_node
 = (
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
;

160 
åue
) {

161 i‡(
key
 =
roŸ_node
->key) {

162 
∑ª¡_node
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[
roŸ_node
->
∑ª¡
]);

163 
	`kunm≠
(
roŸ_∑ge
);

164 *
∑ª¡_key
 = 
∑ª¡_node
->
key
;

165  
SUCCESS
;

167 } i‡(
key
 < 
roŸ_node
->key &&ÑoŸ_node->
À·
 !
BPLUS_NODE_NULL
) {

168 
roŸ_node
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[roŸ_node->
À·
]);

170 } i‡(
key
 > 
roŸ_node
->key &&ÑoŸ_node->
right
 !
BPLUS_NODE_NULL
) {

171 
roŸ_node
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[roŸ_node->
right
]);

173 } i‡((
roŸ_node
->
À·
 =
BPLUS_NODE_NULL
Ë&& (roŸ_node->
right
 == BPLUS_NODE_NULL)) {

174 
	`kunm≠
(
roŸ_∑ge
);

175  
BPLUS_NODE_NOT_FOUND
;

178 
	`BUG_ON
(1);

183 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

186 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

187 
key
 = 
pmëad
->
maxkey
;

188 
	`kunm≠
(
roŸ_∑ge
);

190  
maxkey
;

191 
	}
}

193 
PPAGE
 
	$dz_b∂us_åì_gë_√xt_∑ge
(
PPAGE
 
roŸ_∑ge
)

195 
PVOID
 
roŸ_∑gebuf

NULL
;

196 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

197 
PPAGE
 
∑ge
 = 
NULL
;

199 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

202 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

203 
∑ge
 = 
pmëad
->
√xt_∑ge
;

204 
	`kunm≠
(
roŸ_∑ge
);

206  
∑ge
;

207 
	}
}

210 
VOID
 
	$dz_b∂us_åì_£t_√xt_∑ge
(
PPAGE
 
roŸ_∑ge
, PPAGE 
√xt_∑ge
)

212 
PVOID
 
roŸ_∑gebuf

NULL
;

213 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

215 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

218 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

219 
pmëad
->
√xt_∑ge
 =Çext_page;

220 
	`kunm≠
(
roŸ_∑ge
);

222 
	}
}

225 
PPAGE
 
	$dz_b∂us_åì_gë_¥ev_∑ge
(
PPAGE
 
roŸ_∑ge
)

227 
PVOID
 
roŸ_∑gebuf

NULL
;

228 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

229 
PPAGE
 
∑ge
 = 
NULL
;

231 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

234 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

235 
∑ge
 = 
pmëad
->
¥ev_∑ge
;

236 
	`kunm≠
(
roŸ_∑ge
);

237  
∑ge
;

238 
	}
}

241 
VOID
 
	$dz_b∂us_åì_£t_¥ev_∑ge
(
PPAGE
 
roŸ_∑ge
, PPAGE 
¥ev_∑ge
)

243 
PVOID
 
roŸ_∑gebuf

NULL
;

244 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

246 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

249 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

250 
pmëad
->
¥ev_∑ge
 =Örev_page;

251 
	`kunm≠
(
roŸ_∑ge
);

253 
	}
}

256 
PPAGE
 
	$dz_b∂us_åì_gë_∑ª¡_∑ge
(
PPAGE
 
roŸ_∑ge
)

258 
PVOID
 
roŸ_∑gebuf

NULL
;

259 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

260 
PPAGE
 
∑ge
 = 
NULL
;

262 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

265 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

266 
∑ge
 = 
pmëad
->
∑ª¡_∑ge
;

267 
	`kunm≠
(
roŸ_∑ge
);

268  
∑ge
;

269 
	}
}

272 
VOID
 
	$dz_b∂us_åì_£t_∑ª¡_∑ge
(
PPAGE
 
roŸ_∑ge
, PPAGE 
∑ª¡_∑ge
)

274 
PVOID
 
roŸ_∑gebuf

NULL
;

275 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

277 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

280 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

281 
pmëad
->
∑ª¡_∑ge
 =Öarent_page;

282 
	`kunm≠
(
roŸ_∑ge
);

284 
	}
}

287 
UINT
 
	$dz_b∂us_åì_gë_∑ge_Àvñ
(
PPAGE
 
roŸ_∑ge
)

289 
PVOID
 
roŸ_∑gebuf

NULL
;

290 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

291 
UINT
 
Àvñ
 = 0;

293 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

296 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

297 
Àvñ
 = 
pmëad
->level;

298 
	`kunm≠
(
roŸ_∑ge
);

299  
Àvñ
;

300 
	}
}

303 
VOID
 
	$dz_b∂us_åì_£t_∑ge_Àvñ
(
PPAGE
 
roŸ_∑ge
, 
UINT
 
Àvñ
)

305 
PVOID
 
roŸ_∑gebuf

NULL
;

306 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

308 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

311 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

312 
pmëad
->
Àvñ
 =Üevel;

313 
	`kunm≠
(
roŸ_∑ge
);

315 
	}
}

318 
VOID
 
	$dz_b∂us_åì_ª£t_∑ge
(
PPAGE
 
roŸ_∑ge
)

320 
PVOID
 
roŸ_∑gebuf

NULL
;

322 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

323 
	`mem£t
(
roŸ_∑gebuf
, 0, 
BPLUS_TREE_PAGE_SIZE
);

324 
	`kunm≠
(
roŸ_∑ge
);

326 
	}
}

	@lab_engine/lab_engine_bplus_tree_insert.c

9 
	~"¥ŸŸy≥s.h
"

11 
PPAGE
 
BPTREE_ROOT
;

20 
INT
 
	$dz_b∂us_åì_•lô_node
(
PPAGE
 
roŸ_∑ge
, 
PBPSPLIT
 
p•lô
)

22 
INT
 
ªt
 = 0;

23 
UINT
 
brk_˙t
 = 0;

25 
PVOID
 
À·_∑gebuf
 = 
NULL
;

26 
PVOID
 
right_∑gebuf
 = 
NULL
;

27 
PPAGE
 
À·_∑ge
 = 
NULL
;

28 
PPAGE
 
right_∑ge
 = 
NULL
;

29 
PVOID
 
roŸ_∑gebuf
 = 
NULL
;

30 
BPNODE
 *
≤ode
 = 
NULL
;

31 
BPNODE
 *
roŸ_node
 = 
NULL
;

32 
BOOL
 
d⁄e
 = 
FALSE
;

34 
USHORT
 *
°ack
 = 
NULL
;

36 
ATOMIC
 
°ack_idx
;

37 
USHORT
 
œ°_ñemít
 = 0;

38 
KEY
 
midkey
 = 0;

39 
PBPNODE
 
midnode
 = 
NULL
;

42 
UINT
 
middÀ_idx
 = (
DZ_BPLUS_TREE_MAX_KEYS
/2) + 1;

47 
°ack
 = 
	`dz_kmÆloc
(
middÀ_idx
, (
USHORT
));

48 
	`MEMSET
(
°ack
);

49 
	`ATOMIC_SET
(
°ack_idx
, 0);

54 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

55 
roŸ_node
 = (
PBPNODE
)
roŸ_∑gebuf
;

57 !
d⁄e
) {

59 i‡(
roŸ_node
) {

60 
	`PUSH_STACK
(
°ack
, 
°ack_idx
, 
roŸ_node
->
£lf
);

66 i‡(
roŸ_node
 && (roŸ_node->
À·
 !
BPNODE_NULL
)) {

67 i‡(
roŸ_node
->
À·
 =
BPNODE_NULL
) {

68 
roŸ_node
 = 
NULL
;

70 
roŸ_node
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[roŸ_node->
À·
]);

74 
	`IF_NOT_EMPTY_STACK
(
°ack_idx
) {

75 
brk_˙t
++;

76 
	`POP_STACK
(
°ack
, 
°ack_idx
, 
œ°_ñemít
);

79 
≤ode
 = &(((
PBPNODE
)
roŸ_∑gebuf
)[
œ°_ñemít
]);

81 i‡(
brk_˙t
 =
middÀ_idx
) {

86 
d⁄e
 = 
TRUE
;

90 i‡(
≤ode
->
right
 =
BPNODE_NULL
) {

91 
roŸ_node
 = 
NULL
;

93 
roŸ_node
 = &(((
PBPNODE
)
roŸ_∑gebuf
)[
≤ode
->
right
]);

96 
d⁄e
 = 
TRUE
;

105 
roŸ_node
 = (
PBPNODE
)
roŸ_∑gebuf
;

110 
À·_∑ge
 = 
	`dz_∑ge_Æloc
();

111 
À·_∑gebuf
 = 
	`km≠
(
À·_∑ge
);

112 
	`mem£t
(
À·_∑gebuf
, 0, 
BPLUS_TREE_PAGE_SIZE
);

113 
	`kunm≠
(
À·_∑ge
);

115 
right_∑ge
 = 
	`dz_∑ge_Æloc
();

116 
right_∑gebuf
 = 
	`km≠
(
right_∑ge
);

117 
	`mem£t
(
right_∑gebuf
, 0, 
BPLUS_TREE_PAGE_SIZE
);

118 
	`kunm≠
(
right_∑ge
);

121 
œ°_ñemít
 = 0;

122 
	`MEMSET
(
°ack
);

123 
	`ATOMIC_SET
(
°ack_idx
, 0);

124 
	`PUSH_STACK
(
°ack
, 
°ack_idx
, 
roŸ_node
->
£lf
);

128 
midnode
 = 
≤ode
;

129 
midkey
 = 
midnode
->
key
;

131 
TRUE
) {

133 
	`IF_NOT_EMPTY_STACK
(
°ack_idx
) {

134 
	`POP_STACK
(
°ack
, 
°ack_idx
, 
œ°_ñemít
);

136 
≤ode
 = &(((
PBPNODE
)
roŸ_∑gebuf
)[
œ°_ñemít
]);

138 i‡(
≤ode
->
key
 < 
midkey
) {

139 
ªt
 = 
	`dz_b∂us_åì_ö£π_key_d©a
(
À·_∑ge
, 
≤ode
->
key
, 
NULL
 );

142 i‡(
≤ode
->
key
 >
midkey
) {

143 
ªt
 = 
	`dz_b∂us_åì_ö£π_key_d©a
(
right_∑ge
, 
≤ode
->
key
, 
NULL
 );

145 i‡(
≤ode
->
right
 !
BPNODE_NULL
) {

146 
roŸ_node
 = &(((
PBPNODE
)
roŸ_∑gebuf
)[
≤ode
->
right
]);

147 
	`PUSH_STACK
(
°ack
, 
°ack_idx
, 
roŸ_node
->
£lf
);

149 i‡(
≤ode
->
À·
 !
BPNODE_NULL
) {

150 
roŸ_node
 = &(((
PBPNODE
)
roŸ_∑gebuf
)[
≤ode
->
À·
]);

151 
	`PUSH_STACK
(
°ack
, 
°ack_idx
, 
roŸ_node
->
£lf
);

158 
	`kunm≠
(
roŸ_∑ge
);

160 
p•lô
->
À·_∑ge
 =Üeft_page;

161 
p•lô
->
right_∑ge
 =Ñight_page;

162 
p•lô
->
•lô_node
 = 
midnode
;

163  
SUCCESS
;

164 
	}
}

174 
INT
 
	$dz_b∂us_åì_ö£π_key_d©a
(
PPAGE
 
roŸ_∑ge
, 
KEY
 
key
, 
PDZ_BPLUS_LEAF_NODE
 
d©a
 )

176 
PDZ_BPLUS_TREE_NODE
 
≤ode
 = 
NULL
;

177 
PDZ_BPLUS_TREE_NODE
 
roŸ
 = 
NULL
;

178 
PDZ_BPLUS_TREE_NODE
 
∑ª¡
 = 
NULL
;

179 
PVOID
 
roŸ_∑gebuf
 = 
NULL
;

180 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

183 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

186 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

189 i‡(
pmëad
->
Æloc_˙t
 =
DZ_BPLUS_TREE_MAX_KEYS
) {

190 
	`kunm≠
(
roŸ_∑ge
);

192  
BPLUS_NODE_PAGE_FULL
;

196 i‡(
pmëad
->
Æloc_˙t
 == 0) {

199 
roŸ
 = (
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
;

200 
	`MEMSET
(
roŸ
);

201 
roŸ
->
key
 = key;

202 
roŸ
->
£lf
 = 0;

203 
roŸ
->
À·
 = 
BPNODE_NULL
;

204 
roŸ
->
right
 = 
BPNODE_NULL
;

205 
roŸ
->
∑ª¡
 = 0;

207 i‡(
d©a
) {

208 
roŸ
->
d©a
 = data;

209 
	`SET_BPNODE_TYPE
(
roŸ
->
ty≥
, 
BPNODE_TYPE_LEAF_ONLY
);

211 
roŸ
->
d©a
 = 
NULL
;

212 
	`SET_BPNODE_TYPE
(
roŸ
->
ty≥
, 
BPNODE_TYPE_INTERNAL_FIRST
);

216 
pmëad
->
Æloc_˙t
++;

217 
pmëad
->
mökey
 = 
key
;

218 
pmëad
->
maxkey
 = 
key
;

219 
pmëad
->
cuº_∑ge
 = 
roŸ_∑ge
;

220 
pmëad
->
Àvñ
 = 0;

221 
	`kunm≠
(
roŸ_∑ge
);

222  
SUCCESS
;

228 
roŸ
 = (
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
;

230 
≤ode
 = 
roŸ
;

232 
åue
) {

233 if(
key
 < 
≤ode
->key) {

234 
∑ª¡
 = 
≤ode
;

235 i‡(
≤ode
->
À·
 =
BPNODE_NULL
) {

238 
≤ode
 = &(
roŸ
[≤ode->
À·
]);

240 
∑ª¡
 = 
≤ode
;

241 i‡(
≤ode
->
right
 =
BPNODE_NULL
) {

244 
≤ode
 = &(
roŸ
[≤ode->
right
]);

250 
≤ode
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[
pmëad
->
Æloc_˙t
]);

254 
	`MEMSET
(
≤ode
);

255 
≤ode
->
key
 = key;

256 
≤ode
->
£lf
 = 
pmëad
->
Æloc_˙t
;

257 
≤ode
->
∑ª¡
 =Ö¨ít->
£lf
;

258 
≤ode
->
À·
 = 
BPNODE_NULL
;

259 
≤ode
->
right
 = 
BPNODE_NULL
;

261 if(
key
 < 
∑ª¡
->key) {

262 
∑ª¡
->
À·
 = 
≤ode
->
£lf
;

264 
∑ª¡
->
right
 = 
≤ode
->
£lf
;

269 
pmëad
->
Æloc_˙t
++;

270 i‡(
key
 < 
pmëad
->
mökey
) {

271 
pmëad
->
mökey
 = 
key
;

272 } i‡(
key
 > 
pmëad
->
maxkey
) {

273 
pmëad
->
maxkey
 = 
key
;

276 i‡(
d©a
) {

277 
≤ode
->
d©a
 = data;

278 
	`SET_BPNODE_TYPE
(
roŸ
->
ty≥
, 
BPNODE_TYPE_LEAF_ONLY
);

280 
≤ode
->
d©a
 = 
NULL
;

281 i‡(
pmëad
->
Æloc_˙t
 =
DZ_BPLUS_TREE_MAX_KEYS
) {

282 
	`SET_BPNODE_TYPE
(
roŸ
->
ty≥
, 
BPNODE_TYPE_INTERNAL_ONLY
);

284 
	`SET_BPNODE_TYPE
(
roŸ
->
ty≥
, 
BPNODE_TYPE_INTERNAL_LAST
);

287 
	`kunm≠
(
roŸ_∑ge
);

289  
SUCCESS
;

290 
	}
}

292 
PVOID
 
	$dz_b∂us_åì_ö£π_d©a
(
PPAGE
 
roŸ_∑ge
, 
PDZ_BPLUS_LEAF_NODE
 
d©a
 )

294 
BPSPLIT
 
•lô
;

295 
KEY
 
•lô_key
;

296 
UINT
 
Àvñ
;

297 
PPAGE
 
d©a_Àvñ_∑ge
;

298 
KEY
 
mökey
;

299 
KEY
 
maxkey
;

300 
KEY
 
key
;

301 
INT
 
ªt
 = 
SUCCESS
;

302 
PPAGE
 
tmp_roŸ_∑ge
 = 
roŸ_∑ge
;

303 
PPAGE
 
roŸ_∑ª¡
 = 
NULL
;

305 
PVOID
 
roŸ_∑gebuf
 = 
NULL
;

306 
PBPMTDT
 
pmëad
 = 
NULL
;

307 
PBPNODE
 
roŸ_node
;

308 
PBPNODE
 
cuºít_node
;

309 
PBPNODE
 
¥ev_node
;

311 
roŸ_∑ª¡
 = 
	`dz_b∂us_åì_gë_∑ª¡_∑ge
(
roŸ_∑ge
);

312 
	`PRINT_POINTER
(
roŸ_∑ª¡
);

314 
Àvñ
 = 
	`dz_b∂us_åì_gë_∑ge_Àvñ
(
roŸ_∑ge
);

317 i‡(
Àvñ
 == 0) {

318 
ªt
 = 
	`dz_b∂us_åì_ö£π_key_d©a
(
tmp_roŸ_∑ge
, 
d©a
->
key
, data );

319 i‡(
ªt
 =
BPLUS_NODE_FULL
) {

320 
ªt
 = 
	`dz_b∂us_åì_•lô_node
(
tmp_roŸ_∑ge
, &
•lô
);

321 
	`LOGTGT
("Maximum key†ícou¡îed. S∂ô Key = %Œu\n",
•lô
.
•lô_node
->
key
 );

324 
ªt
 = 
	`dz_b∂us_åì_ö£π_key_d©a
(
•lô
.
right_∑ge
, 
d©a
->
key
, data );

327 
•lô_key
 = 
•lô
.
•lô_node
->
key
;

329 
	`dz_b∂us_åì_ª£t_∑ge
(
roŸ_∑ge
);

332 
	`dz_b∂us_åì_£t_√xt_∑ge
(
roŸ_∑ge
, 
•lô
.
right_∑ge
);

333 
	`dz_b∂us_åì_£t_¥ev_∑ge
(
roŸ_∑ge
, 
•lô
.
À·_∑ge
);

336 
	`dz_b∂us_åì_£t_∑ª¡_∑ge
(
•lô
.
right_∑ge
, 
roŸ_∑ge
);

337 
	`dz_b∂us_åì_£t_∑ª¡_∑ge
(
•lô
.
À·_∑ge
, 
roŸ_∑ge
);

340 
	`dz_b∂us_åì_£t_∑ª¡_∑ge
(
roŸ_∑ge
, 
NULL
);

343 
ªt
 = 
	`dz_b∂us_åì_ö£π_key_d©a
(
roŸ_∑ge
, 
•lô_key
, 
NULL
 );

346 
	`dz_b∂us_åì_£t_∑ge_Àvñ
(
roŸ_∑ge
, 1);

348 
	`LOGTGT
("PrintingÑootáfter moving up\n");

349 
	`dz_b∂us_åì_¥öt_∑ge
(
roŸ_∑ge
);

351 
	`LOGTGT
("Prötög LEFT Subåì @Öagê%∞a·îÑoŸ moved up\n", 
•lô
.
À·_∑ge
);

352 
	`dz_b∂us_åì_åavî£_∑ge
(
•lô
.
À·_∑ge
, 
ENUM_TRAVERSAL_TYPE_PREORDER
);

354 
	`LOGTGT
("Prötög RIGHT Subåì @Öagê%∞a·îÑoŸ moved up\n", 
•lô
.
right_∑ge
);

355 
	`dz_b∂us_åì_åavî£_∑ge
(
•lô
.
right_∑ge
, 
ENUM_TRAVERSAL_TYPE_PREORDER
);

359  
roŸ_∑ge
;

372 
d©a_Àvñ_∑ge
 = 
	`dz_b∂us_åì_föd_∑ge_©_d©a_Àvñ
(
roŸ_∑ge
, 
d©a
->
key
);

373 
tmp_roŸ_∑ge
 = 
d©a_Àvñ_∑ge
;

374 
	`LOGTGT
("Sórchög fromÜevñ %u. D©®PagêFound %p\n", 
Àvñ
, 
d©a_Àvñ_∑ge
);

376 
ªt
 = 
	`dz_b∂us_åì_ö£π_key_d©a
(
tmp_roŸ_∑ge
, 
d©a
->
key
, data );

378 i‡(
ªt
 !
BPLUS_NODE_FULL
) {

381  
tmp_roŸ_∑ge
;

385 
ªt
 = 
	`dz_b∂us_åì_•lô_node
(
tmp_roŸ_∑ge
, &
•lô
);

386 
	`LOGTGT
("Maximum key†ícou¡îed. S∂ô Key = %Œu\n",
•lô
.
•lô_node
->
key
 );

390 
ªt
 = 
	`dz_b∂us_åì_ö£π_key_d©a
(
•lô
.
right_∑ge
, 
d©a
->
key
, data );

392 
roŸ_∑ª¡
 = 
	`dz_b∂us_åì_gë_∑ª¡_∑ge
(
tmp_roŸ_∑ge
);

393 
•lô_key
 = 
•lô
.
•lô_node
->
key
;

394 
Àvñ
 = 
	`dz_b∂us_åì_gë_∑ge_Àvñ
(
tmp_roŸ_∑ge
);

398 
	`dz_∑ge_‰ì
(
tmp_roŸ_∑ge
);

402 
tmp_roŸ_∑ge
 = 
roŸ_∑ª¡
;

404 
roŸ_∑gebuf
 = 
	`km≠
(
tmp_roŸ_∑ge
);

407 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

408 
mökey
 = 
pmëad
->minkey;

409 
maxkey
 = 
pmëad
->maxkey;

410 
key
 = 
•lô_key
;

414 i‡(
•lô_key
 < 
mökey
) {

415 
	`dz_b∂us_åì_£t_¥ev_∑ge
(
roŸ_∑ge
, 
•lô
.
À·_∑ge
);

416 
	`dz_b∂us_åì_£t_∑ª¡_∑ge
(
•lô
.
À·_∑ge
, 
tmp_roŸ_∑ge
);

418 
	`dz_b∂us_åì_£t_√xt_∑ge
(
roŸ_∑ge
, 
•lô
.
right_∑ge
);

419 
	`dz_b∂us_åì_£t_∑ª¡_∑ge
(
•lô
.
right_∑ge
, 
tmp_roŸ_∑ge
);

423 
roŸ_node
 = (
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
;

424 
¥ev_node
 = 
roŸ_node
;

425 
cuºít_node
 = 
roŸ_node
;

427 
åue
) {

428 i‡(
key
 < 
cuºít_node
->key && cuºít_node->
À·
 !
BPLUS_NODE_NULL
) {

429 
¥ev_node
 = 
cuºít_node
;

430 
cuºít_node
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[cuºít_node->
À·
]);

432 i‡(
key
 > 
¥ev_node
->key && key <
cuºít_node
->key) {

433  
¥ev_node
->
down
;

438 } i‡(
key
 > 
cuºít_node
->key && cuºít_node->
right
 !
BPLUS_NODE_NULL
) {

439 
¥ev_node
 = 
cuºít_node
;

440 
cuºít_node
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[cuºít_node->
right
]);

441 i‡(
key
 >
¥ev_node
->key && key < 
cuºít_node
->key) {

442  
¥ev_node
->
down
;

448 
	`BUG_ON
(1);

460 
ªt
 = 
	`dz_b∂us_åì_ö£π_key_d©a
(
roŸ_∑ge
, 
•lô_key
, 
NULL
 );

463 
Àvñ
++;

464 
	`dz_b∂us_åì_£t_∑ge_Àvñ
(
roŸ_∑ge
, 
Àvñ
);

467  
tmp_roŸ_∑ge
;

468 
	}
}

470 
PPAGE
 
	$dz_b∂us_åì_ö£π
(
PPAGE
 
roŸ_∑ge
, 
PDZ_BPLUS_LEAF_NODE
 
d©a
)

472 i‡(
roŸ_∑ge
 =
NULL
) {

473 
roŸ_∑ge
 = 
	`dz_∑ge_Æloc
();

474 
	`dz_b∂us_åì_ª£t_∑ge
(
roŸ_∑ge
);

475 
BPTREE_ROOT
 = 
roŸ_∑ge
;

478 
	`dz_b∂us_åì_ö£π_d©a
(
roŸ_∑ge
, 
d©a
);

480  
roŸ_∑ge
;

481 
	}
}

	@lab_engine/lab_engine_bplus_tree_search.c

9 
	~"¥ŸŸy≥s.h
"

10 
PPAGE
 
BPTREE_ROOT
;

17 
PBPNODE
 
	$dz_b∂us_åì_föd_•lô_node
(
PPAGE
 
roŸ_∑ge
)

19 
UINT
 
brk_˙t
 = 0;

20 
PVOID
 
roŸ_∑gebuf
 = 
NULL
;

21 
BPNODE
 *
≤ode
 = 
NULL
;

22 
BPNODE
 *
roŸ_node
;

23 
BOOL
 
d⁄e
 = 
FALSE
;

25 
USHORT
 *
°ack
 = 
NULL
;

27 
ATOMIC
 
°ack_idx
;

28 
USHORT
 
œ°_ñemít
 = 0;

31 
UINT
 
middÀ_idx
 = (
DZ_BPLUS_TREE_MAX_KEYS
/2) + 1;

32 
	`LOGTGT
("MiddÀ Index = %u\n", 
middÀ_idx
);

36 
°ack
 = 
	`dz_kmÆloc
(
middÀ_idx
, (
USHORT
));

37 
	`MEMSET
(
°ack
);

38 
	`ATOMIC_SET
(
°ack_idx
, 0);

43 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

44 
roŸ_node
 = (
PBPNODE
)
roŸ_∑gebuf
;

46 !
d⁄e
) {

48 i‡(
roŸ_node
) {

49 
	`PUSH_STACK
(
°ack
, 
°ack_idx
, 
roŸ_node
->
£lf
);

50 
	`LOGTGT
("Pushed Node Key = %llu, Stack[%d][%d], self = %hu,Üeft = %hu,Ñight = %hu \n",

51 
roŸ_node
->
key
, 
	`ATOMIC_READ
(
°ack_idx
)-1,
°ack
[ATOMIC_READ(stack_idx) -1],

52 
roŸ_node
->
£lf
,ÑoŸ_node->
À·
,ÑoŸ_node->
right
);

55 i‡(
roŸ_node
 && (roŸ_node->
À·
 !
BPNODE_NULL
)) {

56 i‡(
roŸ_node
->
À·
 =
BPNODE_NULL
) {

57 
roŸ_node
 = 
NULL
;

59 
roŸ_node
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[roŸ_node->
À·
]);

63 
	`IF_NOT_EMPTY_STACK
(
°ack_idx
) {

64 
brk_˙t
++;

65 
	`POP_STACK
(
°ack
, 
°ack_idx
, 
œ°_ñemít
);

68 
≤ode
 = &(((
PBPNODE
)
roŸ_∑gebuf
)[
œ°_ñemít
]);

70 i‡(
brk_˙t
 =
middÀ_idx
) {

71 
	`LOGTGT
("S∂ô NodêFound @ middÀ_idx = %u\n",
middÀ_idx
);

72 
	`LOGTGT
("Popped Node Key = %llu, Stack[%d][%d], self = %hu,Üeft = %hu,Ñight = %hu,Öarent = %hu, brk_cnt = %d \n",

73 
≤ode
->
key
, 
	`ATOMIC_READ
(
°ack_idx
)-1,
°ack
[ATOMIC_READ(stack_idx) -1],

74 
≤ode
->
£lf
,Önode->
À·
,Önode->
right
,Önode->
∑ª¡
, 
brk_˙t
);

75 
	`kunm≠
(
roŸ_∑ge
);

76 
d⁄e
 = 
TRUE
;

77  
≤ode
;

81 i‡(
≤ode
->
right
 =
BPNODE_NULL
) {

82 
roŸ_node
 = 
NULL
;

84 
roŸ_node
 = &(((
PBPNODE
)
roŸ_∑gebuf
)[
≤ode
->
right
]);

87 
d⁄e
 = 
TRUE
;

92  
NULL
;

93 
	}
}

101 
PPAGE
 
	$dz_b∂us_åì_föd_down_∑ge
(
PPAGE
 
roŸ_∑ge
, 
KEY
 
key
)

103 
PVOID
 
roŸ_∑gebuf

NULL
;

104 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

105 
PBPNODE
 
roŸ_node
;

106 
PBPNODE
 
cuºít_node
;

107 
PBPNODE
 
¥ev_node
;

109 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

112 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

114 
roŸ_node
 = (
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
;

115 
¥ev_node
 = 
roŸ_node
;

116 
cuºít_node
 = 
roŸ_node
;

118 
åue
) {

119 i‡(
key
 < 
cuºít_node
->key && cuºít_node->
À·
 !
BPLUS_NODE_NULL
) {

120 
¥ev_node
 = 
cuºít_node
;

121 
cuºít_node
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[cuºít_node->
À·
]);

123 i‡(
key
 > 
¥ev_node
->key && key <
cuºít_node
->key) {

124  
¥ev_node
->
down
;

129 } i‡(
key
 > 
cuºít_node
->key && cuºít_node->
right
 !
BPLUS_NODE_NULL
) {

130 
¥ev_node
 = 
cuºít_node
;

131 
cuºít_node
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[cuºít_node->
right
]);

132 i‡(
key
 >
¥ev_node
->key && key < 
cuºít_node
->key) {

133  
¥ev_node
->
down
;

139 
	`BUG_ON
(1);

142 
	}
}

147 
PPAGE
 
	$dz_b∂us_åì_föd_∑ge_©_d©a_Àvñ
(
PPAGE
 
roŸ_∑ge
, 
KEY
 
key
)

149 
PVOID
 
roŸ_∑gebuf

NULL
;

150 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

151 
KEY
 
maxkey
 = 0;

152 
KEY
 
mökey
 = 0;

153 
PPAGE
 
√xt_∑ge
 = 
NULL
;

154 
PPAGE
 
¥ev_∑ge
 = 
NULL
;

156 
UINT
 
Àvñ
 = 0;

159 
åue
) {

160 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

163 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

164 
maxkey
 = 
pmëad
->maxkey;

165 
mökey
 = 
pmëad
->minkey;

166 
	`PRINT_KEY
(
mökey
);

167 
	`PRINT_KEY
(
maxkey
);

169 i‡(
key
 < 
mökey
) {

170 
¥ev_∑ge
 = 
pmëad
->prev_page;

172 
Àvñ
 = 
pmëad
->level;

173 
	`kunm≠
(
roŸ_∑ge
);

175 i‡(
¥ev_∑ge
 =
NULL
) {

177 
	`LOGTGT
("Rëu∫ög Le· D©®Pagê%∞@Üevñ = %u\n", 
roŸ_∑ge
, 
Àvñ
);

178  
roŸ_∑ge
;

180 
roŸ_∑ge
 = 
¥ev_∑ge
;

181 
	`LOGTGT
("C⁄töuögÅÿÀ· sidê∑gê%p\n", 
roŸ_∑ge
);

186 i‡(
key
 > 
maxkey
) {

187 
√xt_∑ge
 = 
pmëad
->next_page;

189 
Àvñ
 = 
pmëad
->level;

190 
	`kunm≠
(
roŸ_∑ge
);

192 i‡(
√xt_∑ge
 =
NULL
) {

194 
	`LOGTGT
("Rëu∫ög RighàD©®Pagê%∞@Üevñ = %u\n", 
roŸ_∑ge
, 
Àvñ
);

195  
roŸ_∑ge
;

198 
roŸ_∑ge
 = 
√xt_∑ge
;

199 
	`LOGTGT
("C⁄töuögÅÿrighàsidê∑gê%p\n", 
roŸ_∑ge
);

205 i‡(
key
 >
mökey
 && key <
maxkey
) {

207 
	`kunm≠
(
roŸ_∑ge
);

209  
	`dz_b∂us_åì_föd_down_∑ge
(
roŸ_∑ge
, 
key
);

214 
	}
}

216 
INT
 
	$dz_b∂us_åì_föd_key
(
PPAGE
 
roŸ_∑ge
, 
KEY
 
key
)

218 
PVOID
 
roŸ_∑gebuf

NULL
;

219 
PDZ_BPLUS_METADATA_NODE
 
pmëad
 = 
NULL
;

220 
KEY
 
maxkey
 = 0;

221 
KEY
 
mökey
 = 0;

222 
BPNODE
 *
roŸ_node
;

224 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ_∑ge
);

227 
pmëad
 = (
PDZ_BPLUS_METADATA_NODE
)(
roŸ_∑gebuf
 + 
BPLUS_TREE_PAGE_SIZE
 - 
DZ_BPLUS_NODE_SIZE
);

228 
maxkey
 = 
pmëad
->maxkey;

229 
mökey
 = 
pmëad
->minkey;

230 i‡(
key
 < 
mökey
) {

231 
	`kunm≠
(
roŸ_∑ge
);

232  
BPLUS_NODE_KEY_IS_LESSER
;

235 i‡(
key
 > 
maxkey
) {

236 
	`kunm≠
(
roŸ_∑ge
);

237  
BPLUS_NODE_KEY_IS_GREATER
;

240 
roŸ_node
 = (
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
;

242 
åue
) {

243 i‡(
key
 =
roŸ_node
->key) {

244 
	`kunm≠
(
roŸ_∑ge
);

245  
BPLUS_NODE_KEY_FOUND
;

247 } i‡(
key
 < 
roŸ_node
->key &&ÑoŸ_node->
À·
 !
BPLUS_NODE_NULL
) {

248 
roŸ_node
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[roŸ_node->
À·
]);

250 } i‡(
key
 > 
roŸ_node
->key &&ÑoŸ_node->
right
 !
BPLUS_NODE_NULL
) {

251 
roŸ_node
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[roŸ_node->
right
]);

253 } i‡((
roŸ_node
->
À·
 =
BPLUS_NODE_NULL
Ë&& (roŸ_node->
right
 == BPLUS_NODE_NULL)) {

254 
	`kunm≠
(
roŸ_∑ge
);

255  
BPLUS_NODE_KEY_NOT_FOUND
;

258 
	`BUG_ON
(1);

261 
	}
}

263 
INT
 
	$dz_b∂us_åì_£¨ch_key
(
PPAGE
 
roŸ_∑ge
, 
KEY
 
key
)

267 
PPAGE
 
roŸ
 = 
roŸ_∑ge
;

268 
INT
 
ªt
 = 0;

270 
åue
) {

271 
ªt
 = 
	`dz_b∂us_åì_föd_key
(
roŸ
, 
key
);

273 
ªt
) {

275 
BPLUS_NODE_KEY_FOUND
: {

276  
ªt
;

279 
BPLUS_NODE_KEY_NOT_FOUND
: {

280  
ªt
;

283 
BPLUS_NODE_KEY_IS_LESSER
: {

284 
roŸ
 = 
	`dz_b∂us_åì_gë_¥ev_∑ge
(root);

285 i‡(!
roŸ
) {

286  
BPLUS_NODE_KEY_NOT_FOUND
;

292 
BPLUS_NODE_KEY_IS_GREATER
: {

293 
roŸ
 = 
	`dz_b∂us_åì_gë_√xt_∑ge
(root);

294 i‡(!
roŸ
) {

295  
BPLUS_NODE_KEY_NOT_FOUND
;

302 
	}
}

	@lab_engine/lab_engine_bplus_tree_traversal.c

9 
	~"¥ŸŸy≥s.h
"

11 
PPAGE
 
BPTREE_ROOT
;

13 
RVOID
 
	$dz_b∂us_åì_åavî£_∑ge_po°‹dî
(
PVOID
 
roŸ_∑gebuf
, 
PDZ_BPLUS_NODE
 
roŸ
)

15 
PDZ_BPLUS_TREE_NODE
 
≤ode
;

17 i‡(
roŸ
->
À·
 !
BPNODE_NULL
) {

18 
≤ode
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[
roŸ
->
À·
]);

19 
	`dz_b∂us_åì_åavî£_∑ge_po°‹dî
(
roŸ_∑gebuf
, 
≤ode
);

22 i‡(
roŸ
->
right
 !
BPNODE_NULL
) {

23 
≤ode
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[
roŸ
->
right
]);

24 
	`dz_b∂us_åì_åavî£_∑ge_po°‹dî
(
roŸ_∑gebuf
, 
≤ode
);

28 
	`PRINT_KEYS
(
roŸ
->
key
,"PostOrder: ");

29 
	}
}

31 
RVOID
 
	$dz_b∂us_åì_åavî£_∑ge_¥e‹dî
(
PVOID
 
roŸ_∑gebuf
, 
PDZ_BPLUS_NODE
 
roŸ
)

33 
PDZ_BPLUS_TREE_NODE
 
≤ode
;

37 
	`PRINT_KEY_RAWS
(
roŸ
->
key
,"BPNode->key");

39 i‡(
roŸ
->
À·
 !
BPNODE_NULL
) {

40 
≤ode
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[
roŸ
->
À·
]);

41 
	`dz_b∂us_åì_åavî£_∑ge_¥e‹dî
(
roŸ_∑gebuf
, 
≤ode
);

44 i‡(
roŸ
->
right
 !
BPNODE_NULL
) {

45 
≤ode
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[
roŸ
->
right
]);

46 
	`dz_b∂us_åì_åavî£_∑ge_¥e‹dî
(
roŸ_∑gebuf
, 
≤ode
);

48 
	}
}

54 
RVOID
 
	$dz_b∂us_åì_åavî£_∑ge_ö‹dî
(
PVOID
 
roŸ_∑gebuf
, 
PDZ_BPLUS_NODE
 
roŸ
)

56 
PDZ_BPLUS_TREE_NODE
 
≤ode
;

58 i‡(
roŸ
->
À·
 !
BPNODE_NULL
) {

59 
≤ode
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[
roŸ
->
À·
]);

61 
	`dz_b∂us_åì_åavî£_∑ge_ö‹dî
(
roŸ_∑gebuf
, 
≤ode
);

63 
	`PRINT_KEYS
(
roŸ
->
key
,"Inorder: ");

67 i‡(
roŸ
->
right
 !
BPNODE_NULL
) {

68 
≤ode
 = &(((
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
)[
roŸ
->
right
]);

70 
	`dz_b∂us_åì_åavî£_∑ge_ö‹dî
(
roŸ_∑gebuf
, 
≤ode
);

72 
	}
}

74 
RVOID
 
	$dz_b∂us_åì_åavî£_∑ge
(
PPAGE
 
roŸ
, 
INT
 
ty≥
)

76 
PVOID
 
roŸ_∑gebuf

NULL
;

77 
PDZ_BPLUS_TREE_NODE
 
roŸ_node
;

78 
roŸ_∑gebuf
 = 
	`km≠
(
roŸ
);

81 
roŸ_node
 = (
PDZ_BPLUS_TREE_NODE
)
roŸ_∑gebuf
;

83 
ty≥
) {

84 
ENUM_TRAVERSAL_TYPE_INORDER
:

85 
	`dz_b∂us_åì_åavî£_∑ge_ö‹dî
(
roŸ_∑gebuf
, 
roŸ_node
);

88 
ENUM_TRAVERSAL_TYPE_PREORDER
:

89 
	`dz_b∂us_åì_åavî£_∑ge_¥e‹dî
(
roŸ_∑gebuf
, 
roŸ_node
);

92 
ENUM_TRAVERSAL_TYPE_POSTORDER
:

93 
	`dz_b∂us_åì_åavî£_∑ge_po°‹dî
(
roŸ_∑gebuf
, 
roŸ_node
);

95 
ENUM_TRAVERSAL_TYPE_LEVELORDER
:

96 
	`LOGTGT
("Not Yet Implemented\n");

100 
	`kunm≠
(
roŸ
);

101 
	}
}

	@lab_engine/lab_engine_heap.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#DZ_HEAP_ALLOC_NODE
(Ë
	`DZ_ALLOC_NODE
((
DZ_HEAP_NODE
))

	)

13 
PDZ_HEAP_NODE
 
	ghóp_roŸ
 = 
NULL
;

14 
PDZ_HEAP_NODE
 
	ghóp_hód
 = 
NULL
;

16 
RVOID
 
	$dz_hóp_¥öt_node
(
PDZ_HEAP_NODE
 
node
)

18 
BOOL
 
Êag
 = 
TRUE
;

19 i‡(!
node
) {

20 
	`LOGTGT
("Node Print: Heap Node is NULL\n");

25 i‡(
Êag
 =
TRUE
) {

26 
	`LOGTGT
("[-----------HEAP NODE----------]\n");

27 
	`LOGTGT
("[ ]\n");

28 
	`LOGTGT
("[ NODE = %p]\n", 
node
);

29 
	`LOGTGT
("[ NODE->d©® = %ld]\n", 
node
->
d©a
);

30 
	`LOGTGT
("[ NODE->À· = %p]\n", 
node
->
À·
);

31 
	`LOGTGT
("[ NODE->righà = %p]\n", 
node
->
right
);

32 
	`LOGTGT
("[ NODE->∑ª¡ = %p]\n", 
node
->
∑ª¡
);

33 
	`LOGTGT
("[ NODE->roŸ = %p]\n", 
node
->
roŸ
);

34 
	`LOGTGT
("[----------------------------------]\n");

37 
	}
}

39 
PDZ_HEAP_NODE
 
	$dz_hóp_Æloc_node
(
VOID
)

41 
PDZ_HEAP_NODE
 
node
 = 
	`DZ_HEAP_ALLOC_NODE
();

42 i‡(!
node
) {

43 
	`LOGTGTE
("%s","Error, UnableÅoállocate memory for heapÇode\n");

44 
RETURNN
;

46 
	`MEMSET
(
node
);

47  
node
;

48 
	}
}

50 
RVOID
 
	$dz_hóp_po°‹dî
(
PDZ_HEAP_NODE
 
node
)

53 
	`dz_hóp_¥öt_node
(
node
);

55 i‡(
node
->
À·
) {

59 i‡(
node
->
right
) {

62 
	}
}

64 
RVOID
 
	$dz_hóp_¥e‹dî
(
PDZ_HEAP_NODE
 
node
)

66 
	`dz_hóp_¥öt_node
(
node
);

68 i‡(
node
->
À·
) {

72 i‡(
node
->
right
) {

75 
	}
}

77 
RVOID
 
	$dz_hóp_ö‹dî
(
PDZ_HEAP_NODE
 
node
)

79 i‡(
node
->
À·
) {

82 
	`dz_hóp_¥öt_node
(
node
);

84 i‡(
node
->
right
) {

87 
	}
}

89 
UINT
 
	$dz_hóp_height
(
PDZ_HEAP_NODE
 
roŸ
)

91 
UINT
 
lheight
 = 0;

92 
UINT
 
rheight
 = 0;

94 i‡(
roŸ
) {

98 i‡(
lheight
 > 
rheight
) {

99  (
lheight
 + 1);

101  (
rheight
 + 1);

106 
	}
}

108 
PDZ_HEAP_NODE
 
	$dz_hóp_max_ö£π
(
PDZ_HEAP_NODE
 
roŸ
, 
INT
 
d©a
)

110 i‡(
roŸ
 =
NULL
) {

111 
roŸ
 = 
	`dz_hóp_Æloc_node
();

112 
roŸ
->
d©a
 = data;

113  
roŸ
;

116 i‡(
d©a
 < 
roŸ
->data) {

117 
roŸ
->
À·
 = 
	`dz_hóp_max_ö£π
‘oŸ->À·, 
d©a
);

119 
roŸ
->
right
 = 
	`dz_hóp_max_ö£π
‘oŸ->right, 
d©a
);

122 
d©a
 = 
roŸ
->data;

123 
roŸ
->
d©a
 =ÑoŸ->
right
->data;

124 
roŸ
->
right
->
d©a
 = data;

128  
roŸ
;

129 
	}
}

132 
BOOL
 
	$dz_¥o˚ss_œb_ígöe_hóp
(
LBA
 
off£t
, 
UINT
 
iosize
)

134 
RETURNT
;

135 
	}
}

137 
EXPORT_SYMBOL
(
dz_¥o˚ss_œb_ígöe_hóp
);

	@lab_engine/lab_engine_interval.c

9 
	~"¥ŸŸy≥s.h
"

11 
PDZ_INTERVAL_NODE
 
	gINTERVAL_TREE_ROOT
 = 
NULL
;

12 
PDZ_INTERVAL_NODE
 
	gINTERVAL_TREE_HEAD
 = 
NULL
;

13 
PDZ_INTERVAL_NODE
 
	gOVERLAP_NODE
 = 
NULL
;

14 
BOOL
 
	gINTERVAL_OVERLAP_FOUND
 = 
FALSE
;

19 
PDZ_INTERVAL_NODE
 
dz_Æloc_öãrvÆ_node
(
VOID
);

20 
RVOID
 
dz_‰ì_öãrvÆ_node
(
PDZ_INTERVAL_NODE
);

21 
RVOID
 
dz_¥öt_öãrvÆ_åì_node
(
PDZ_INTERVAL_NODE
 
node
, 
BOOL
);

22 
RVOID
 
dz_¥öt_öãrvÆ
(
PDZ_INTERVAL
 
öãrvÆ
);

23 
RVOID
 
dz_¥öt_öãrvÆ_åì_Àvñ
(
PDZ_INTERVAL_NODE
 
roŸ
, 
INT
 
des
, INT 
cuº
);

24 
PDZ_INTERVAL_NODE
 
dz_föd_möimum_öãrvÆ
(PDZ_INTERVAL_NODE 
roŸ
);

25 
PDZ_INTERVAL_NODE
 
dz_dñëe_öãrvÆ
(PDZ_INTERVAL_NODE 
roŸ
, 
PDZ_INTERVAL
 
öãrvÆ
);

30 
RVOID
 
dz_po°‹dî_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
node
);

31 
RVOID
 
dz_¥e‹dî_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
node
);

32 
RVOID
 
dz_ö‹dî_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
node
);

33 
BOOL
 
dz_check_ovîœp
(
PDZ_INTERVAL
 
öãrvÆ
, PDZ_INTERVAL 
öãrvÆ2
);

34 
PDZ_INTERVAL_NODE
 
dz_ö£π_öãrvÆ
(PDZ_INTERVAL_NODE 
roŸ
, 
PDZ_INTERVAL
 
öãrvÆ
);

41 
RVOID
 
	$dz_¥öt_öãrvÆ_åì_node
(
PDZ_INTERVAL_NODE
 
node
, 
BOOL
 
Êag
)

43 i‡(!
node
) {

44 
	`LOGTGT
("Node Print: Interval Node is NULL\n");

49 i‡(
Êag
 =
TRUE
) {

50 
	`LOGTGT
("[-----------INTERVAL NODE----------]\n");

51 
	`LOGTGT
("[ ]\n");

52 
	`LOGTGT
("[ NODE = %p]\n", 
node
);

53 
	`LOGTGT
("[ NODE->öãrvÆ = [%Œò- %Œi]]\n", 
node
->
öãrvÆ
.
low
,Çode->öãrvÆ.
high
);

54 
	`LOGTGT
("[ NODE->max = %Œi]\n", 
node
->
max
);

55 
	`LOGTGT
("[ NODE->À· = %p]\n", 
node
->
À·
);

56 
	`LOGTGT
("[ NODE->righà = %p]\n", 
node
->
right
);

57 
	`LOGTGT
("[ NODE->∑ª¡ = %p]\n", 
node
->
∑ª¡
);

58 
	`LOGTGT
("[----------------------------------]\n");

62 
	`LOGTGT
("[-----------INTERVAL------------]\n");

63 
	`LOGTGT
("[ NODE->öãrvÆ = [%Œò- %Œi]]\n", 
node
->
öãrvÆ
.
low
,Çode->öãrvÆ.
high
);

64 
	`LOGTGT
("[-------------------------------]\n");

68 
	}
}

70 
RVOID
 
	$dz_¥öt_öãrvÆ
(
PDZ_INTERVAL
 
öãrvÆ
)

72 
	`LOGTGT
("INTERVAL : [%Œò- %Œi]", 
öãrvÆ
->
low
, i¡îvÆ->
high
);

73 
	}
}

75 
PDZ_INTERVAL_NODE
 
	$dz_Æloc_öãrvÆ_node
(
VOID
)

77 
PDZ_INTERVAL_NODE
 
node
 = 
	`dz_kmÆloc
((
DZ_INTERVAL_NODE
), 
GFP_KERNEL
);

78 i‡(!
node
) {

79 
	`LOGTGTE
("%s","Error, UnableÅoállocate memory for intervalÅreeÇode\n");

80 
RETURNN
;

82 
	`MEMSET
(
node
);

83  
node
;

84 
	}
}

86 
RVOID
 
	$dz_‰ì_öãrvÆ_node
(
PDZ_INTERVAL_NODE
 
node
)

88 i‡(!
node
) {

89 
	`LOGTGTE
("%s","Error, Freeingánálready freedup intervalÇode\n");

92 
	`dz_k‰ì
(
node
, (
DZ_INTERVAL_NODE
));

94 
	}
}

99 
RVOID
 
	$dz_po°‹dî_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
node
)

104 i‡(
node
->
À·
) {

105 
	`dz_po°‹dî_öãrvÆ_åì
(
node
->
À·
);

108 i‡(
node
->
right
) {

109 
	`dz_po°‹dî_öãrvÆ_åì
(
node
->
right
);

111 
	}
}

113 
RVOID
 
	$dz_¥e‹dî_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
node
)

117 i‡(
node
->
À·
) {

118 
	`dz_¥e‹dî_öãrvÆ_åì
(
node
->
À·
);

121 i‡(
node
->
right
) {

122 
	`dz_¥e‹dî_öãrvÆ_åì
(
node
->
right
);

124 
	}
}

126 
RVOID
 
	$dz_ö‹dî_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
node
)

128 i‡(
node
->
À·
) {

129 
	`dz_ö‹dî_öãrvÆ_åì
(
node
->
À·
);

131 
	`dz_¥öt_öãrvÆ_åì_node
(
node
, 
TRUE
);

133 i‡(
node
->
right
) {

134 
	`dz_ö‹dî_öãrvÆ_åì
(
node
->
right
);

136 
	}
}

138 
BOOL
 
	$dz_check_ovîœp
(
PDZ_INTERVAL
 
öãrvÆ1
, PDZ_INTERVAL 
öãrvÆ2
)

140 i‡(
öãrvÆ1
->
low
 <
öãrvÆ2
->
high
 && interval2->low <= interval1->high) {

141 
	`LOGTGT
("OVERLAP FOUND: [%lli %lli] [%lli %lli]\n",

142 
öãrvÆ1
->
low
, i¡îvÆ1->
high
,

143 
öãrvÆ2
->
low
, i¡îvÆ2->
high
);

145 
INTERVAL_OVERLAP_FOUND
 = 
TRUE
;

146 
OVERLAP_NODE
 = (
PDZ_INTERVAL_NODE
)
öãrvÆ1
;

147 
	`dz_¥öt_öãrvÆ_åì_node
(
OVERLAP_NODE
, 
TRUE
);

148  
TRUE
;

150  
FALSE
;

152 
	}
}

154 
PDZ_INTERVAL_NODE
 
	$dz_föd_möimum_öãrvÆ
(
PDZ_INTERVAL_NODE
 
roŸ
)

157 
roŸ
->
À·
 !
NULL
)

158 
roŸ
 =ÑoŸ->
À·
;

160  
roŸ
;

161 
	}
}

163 
UINT
 
	$dz_height_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
roŸ
)

165 
UINT
 
lheight
 = 0;

166 
UINT
 
rheight
 = 0;

168 i‡(
roŸ
) {

169 
lheight
 = 
	`dz_height_öãrvÆ_åì
(
roŸ
->
À·
);

170 
rheight
 = 
	`dz_height_öãrvÆ_åì
(
roŸ
->
right
);

172 i‡(
lheight
 > 
rheight
) {

173  (
lheight
 + 1);

175  (
rheight
 + 1);

180 
	}
}

182 
RVOID
 
	$dz_¥öt_öãrvÆ_åì_Àvñ
(
PDZ_INTERVAL_NODE
 
roŸ
, 
INT
 
des
, INT 
cuº
)

185 i‡(
roŸ
) {

186 i‡(
des
 =
cuº
) {

187 
	`dz_¥öt_öãrvÆ
((
PDZ_INTERVAL
)
roŸ
);

190 
	`dz_¥öt_öãrvÆ_åì_Àvñ
(
roŸ
->
À·
, 
des
, 
cuº
 + 1);

191 
	`dz_¥öt_öãrvÆ_åì_Àvñ
(
roŸ
->
right
, 
des
, 
cuº
 + 1);

197 
des
 = 
cuº
;

199 
	}
}

201 
RVOID
 
	$dz_¥öt_öãrvÆ_åì
(
PDZ_INTERVAL_NODE
 
roŸ
)

203 
h
, 
i
;

204 
h
 = 
	`dz_height_öãrvÆ_åì
(
roŸ
);

205 
	`LOGTGT
("HEIGHT : %d\n", 
h
);

206 
i
 = 0; i < 
h
; i++) {

207 
	`LOGTGT
("LEVEL %d :", 
i
);

208 
	`dz_¥öt_öãrvÆ_åì_Àvñ
(
roŸ
, 
i
, 0);

209 
	`LOGTGT
("\n");

211 
	}
}

219 
RVOID
 
	$dz_dñëe_cuºít_öãrvÆ_node
(
PDZ_INTERVAL_NODE
 
node
)

222 
PDZ_INTERVAL_NODE
 
ãmp
 = 
NULL
;

223 
PDZ_INTERVAL_NODE
 
∑ª¡
 = 
NULL
;

224 i‡(!
node
) {

225 
	`LOGTGT
 ("Node is NULL\n");

228 i‡(!
node
->
∑ª¡
) {

229 
	`LOGTGT
 ("Node Parent is NULL\n");

233 
∑ª¡
 = 
node
->parent;

237 i‡(
∑ª¡
->
À·
 =
node
) {

238 i‡(
node
->
À·
 =
NULL
 &&Çode->
right
 != NULL) {

239 
ãmp
 = 
node
->
right
;

240 
	`dz_‰ì_öãrvÆ_node
(
node
);

241 
∑ª¡
->
À·
 = 
ãmp
;

242 
ãmp
->
∑ª¡
 =Öarent;

243 } i‡(
node
->
right
 =
NULL
 &&Çode->
À·
 != NULL) {

244 
ãmp
 = 
node
->
À·
;

245 
	`dz_‰ì_öãrvÆ_node
(
node
);

246 
∑ª¡
->
À·
 = 
ãmp
;

247 
ãmp
->
∑ª¡
 =Öarent;

250 
ãmp
 = 
	`dz_föd_möimum_öãrvÆ
(
node
->
right
);

251 
node
->
öãrvÆ
 = 
ãmp
->interval;

252 
node
->
right
 = 
	`dz_dñëe_öãrvÆ
“ode->right, &(
ãmp
->
öãrvÆ
));

258 i‡(
∑ª¡
->
right
 =
node
) {

259 i‡(
node
->
À·
 =
NULL
 &&Çode->
right
 != NULL) {

260 
ãmp
 = 
node
->
right
;

261 
	`dz_‰ì_öãrvÆ_node
(
node
);

262 
∑ª¡
->
right
 = 
ãmp
;

263 
ãmp
->
∑ª¡
 =Öarent;

264 } i‡(
node
->
right
 =
NULL
 &&Çode->
À·
 != NULL) {

265 
ãmp
 = 
node
->
À·
;

266 
	`dz_‰ì_öãrvÆ_node
(
node
);

267 
∑ª¡
->
right
 = 
ãmp
;

268 
ãmp
->
∑ª¡
 =Öarent;

271 
ãmp
 = 
	`dz_föd_möimum_öãrvÆ
(
node
->
right
);

272 
node
->
öãrvÆ
 = 
ãmp
->interval;

273 
node
->
right
 = 
	`dz_dñëe_öãrvÆ
“ode->right, &(
ãmp
->
öãrvÆ
));

278 
	}
}

280 
PDZ_INTERVAL_NODE
 
	$dz_dñëe_öãrvÆ
(
PDZ_INTERVAL_NODE
 
roŸ
, 
PDZ_INTERVAL
 
öãrvÆ
)

282 i‡(
roŸ
 =
NULL
) {

283  
NULL
;

286 i‡(
öãrvÆ
->
low
 < ((
PDZ_INTERVAL
)
roŸ
)->low) {

287 
roŸ
->
À·
 = 
	`dz_dñëe_öãrvÆ
‘oŸ->À·, 
öãrvÆ
);

289 } i‡(
öãrvÆ
->
low
 > ((
PDZ_INTERVAL
)
roŸ
)->low) {

290 
roŸ
->
right
 = 
	`dz_dñëe_öãrvÆ
‘oŸ->right, 
öãrvÆ
);

292 } i‡((
öãrvÆ
->
low
 =((
PDZ_INTERVAL
)
roŸ
)->lowË&& (öãrvÆ->
high
 == ((PDZ_INTERVAL)root)->high)) {

293 
PDZ_INTERVAL_NODE
 
ãmp
 = 
NULL
;

294 i‡(
roŸ
->
À·
 =
NULL
 &&ÑoŸ->
right
 == NULL) {

295 
	`dz_‰ì_öãrvÆ_node
(
roŸ
);

296 
roŸ
 = 
NULL
;

298 } i‡(
roŸ
->
À·
 =
NULL
) {

299 
ãmp
 = 
roŸ
->
right
;

300 
ãmp
->
∑ª¡
 = 
roŸ
->parent;

301 
	`dz_‰ì_öãrvÆ_node
(
roŸ
);

302  
ãmp
;

304 } i‡(
roŸ
->
right
 =
NULL
) {

305 
ãmp
 = 
roŸ
->
À·
;

306 
ãmp
->
∑ª¡
 = 
roŸ
->parent;

307 
	`dz_‰ì_öãrvÆ_node
(
roŸ
);

308  
ãmp
;

315 
ãmp
 = 
	`dz_föd_möimum_öãrvÆ
(
roŸ
->
right
);

316 
ãmp
->
∑ª¡
 = 
roŸ
->parent;

317 
roŸ
->
öãrvÆ
 = 
ãmp
->interval;

318 
roŸ
->
right
 = 
	`dz_dñëe_öãrvÆ
‘oŸ->right, &(
ãmp
->
öãrvÆ
));

322 
roŸ
->
right
 = 
	`dz_dñëe_öãrvÆ
‘oŸ->right, 
öãrvÆ
);

325  
roŸ
;

326 
	}
}

330 
PDZ_INTERVAL_NODE
 
	$dz_ö£π_öãrvÆ
(
PDZ_INTERVAL_NODE
 
roŸ
, 
PDZ_INTERVAL
 
öãrvÆ
)

332 i‡(
INTERVAL_OVERLAP_FOUND
 =
TRUE
) {

333  
roŸ
;

336 i‡(
roŸ
 =
NULL
) {

337  (
PDZ_INTERVAL_NODE
)
öãrvÆ
;

340 
	`dz_check_ovîœp
((
PDZ_INTERVAL
)
roŸ
, 
öãrvÆ
);

342 i‡(
öãrvÆ
->
low
 < ((
PDZ_INTERVAL
)
roŸ
)->low) {

343 
roŸ
->
À·
 = 
	`dz_ö£π_öãrvÆ
‘oŸ->À·, 
öãrvÆ
);

344 i‡(
roŸ
->
À·
) {

345 
roŸ
->
À·
->
∑ª¡
 =Ñoot;

348 
roŸ
->
right
 = 
	`dz_ö£π_öãrvÆ
‘oŸ->right, 
öãrvÆ
);

349 i‡(
roŸ
->
right
) {

350 
roŸ
->
right
->
∑ª¡
 =Ñoot;

355 i‡(
roŸ
->
max
 < 
öãrvÆ
->
high
) {

356 
roŸ
->
max
 = 
öãrvÆ
->
high
;

359  
roŸ
;

360 
	}
}

362 
LBA
 
	$dz_födmax_öãrvÆ_åì
(
LBA
 
a
, LBA 
b
, LBA 
c
)

365  
a
>
b
?◊>
c
?a:c):(b>c?b:c);

367 
RETURNS
;

368 
	}
}

370 
BOOL
 
	$dz_¥o˚ss_œb_ígöe_öãrvÆ
(
LBA
 
off£t
, 
UINT
 
iosize
)

372 
PDZ_INTERVAL_NODE
 
node
 = 
	`dz_Æloc_öãrvÆ_node
();

373 
	`LOGTGT
("HERE\n");

375 i‡(
INTERVAL_TREE_ROOT
 =
NULL
 ) {

376 
INTERVAL_TREE_ROOT
 = 
node
;

377 
node
->
öãrvÆ
.
low
 = 
off£t
;

378 
node
->
öãrvÆ
.
high
 =Çode->öãrvÆ.
low
 + 
iosize
 - 1;

379 
node
->
max
 =Çode->
öãrvÆ
.
high
;

380 
	`dz_¥öt_öãrvÆ
((
PDZ_INTERVAL
)
node
);

381 
	`LOGTGT
("\n");

382 
RETURNT
;

384 
node
->
öãrvÆ
.
low
 = 
off£t
;

385 
node
->
öãrvÆ
.
high
 =Çode->öãrvÆ.
low
 + 
iosize
 - 1;

386 
node
->
max
 =Çode->
öãrvÆ
.
high
;

390 
	`dz_¥öt_öãrvÆ
((
PDZ_INTERVAL
)
node
);

391 
	`LOGTGT
("\n");

393 
INTERVAL_TREE_ROOT
 = 
	`dz_ö£π_öãrvÆ
(INTERVAL_TREE_ROOT, (
PDZ_INTERVAL
)
node
);

395 i‡(!
INTERVAL_TREE_ROOT
) {

396 
RETURNFA
;

399 i‡(
INTERVAL_OVERLAP_FOUND
) {

400 
	`dz_‰ì_öãrvÆ_node
(
node
);

403 
	`LOGTGT
("INTERVAL TREE -> IN-ORDER TRAVERSAL\n");

404 
	`dz_ö‹dî_öãrvÆ_åì
(
INTERVAL_TREE_ROOT
);

406 
	`LOGTGT
("TREE ROOT\n");

407 
	`dz_¥öt_öãrvÆ_åì_node
(
INTERVAL_TREE_ROOT
, 
TRUE
);

409 
	`LOGTGT
("INTERVAL TREE -> PRE-ORDER TRAVERSAL\n");

410 
	`dz_¥e‹dî_öãrvÆ_åì
(
INTERVAL_TREE_ROOT
);

412 
	`LOGTGT
("INTERVAL TREE -> POST-ORDER TRAVERSAL\n");

413 
	`dz_po°‹dî_öãrvÆ_åì
(
INTERVAL_TREE_ROOT
);

415 
	`LOGTGT
("INTERVAL TREE -> LEVEL-ORDER TRAVERSAL\n");

416 
	`dz_¥öt_öãrvÆ_åì
(
INTERVAL_TREE_ROOT
);

418 i‡(
INTERVAL_OVERLAP_FOUND
) {

419 
	`LOGTGT
("DELETING OVERLAP NODE\n");

420 
	`dz_dñëe_cuºít_öãrvÆ_node
(
OVERLAP_NODE
);

421 
	`dz_¥öt_öãrvÆ_åì
(
INTERVAL_TREE_ROOT
);

422 
	`dz_ö‹dî_öãrvÆ_åì
(
INTERVAL_TREE_ROOT
);

424 
RETURNT
;

425 
	}
}

427 
EXPORT_SYMBOL
(
dz_¥o˚ss_œb_ígöe_öãrvÆ
);

	@lab_engine/lab_engine_linked_list.c

9 
	~"¥ŸŸy≥s.h
"

11 
PDZ_LIST_NODE
 
	gli°_roŸ
 = 
NULL
;

12 
PDZ_LIST_NODE
 
	gli°_hód
 = 
NULL
;

14 
RVOID
 
	$dz_li°_¥öt_node
(
PDZ_LIST_NODE
 
node
)

16 
BOOL
 
Êag
 = 
TRUE
;

17 i‡(!
node
) {

18 
	`LOGTGT
("Node Print: List Node is NULL\n");

23 i‡(
Êag
 =
TRUE
) {

24 
	`LOGTGT
("[-------------LIST NODE----------]\n");

25 
	`LOGTGT
("[ ]\n");

26 
	`LOGTGT
("[ NODE = %p]\n", 
node
);

27 
	`LOGTGT
("[ NODE->d©® = %ld]\n", 
node
->
d©a
);

28 
	`LOGTGT
("[ NODE->√xà = %p]\n", 
node
->
√xt
);

29 
	`LOGTGT
("[ NODE->¥ev = %p]\n", 
node
->
¥ev
);

30 
	`LOGTGT
("[----------------------------------]\n");

33 
	}
}

35 
PDZ_LIST_NODE
 
	$dz_li°_Æloc_node
(
VOID
)

37 
PDZ_LIST_NODE
 
node
 = 
	`DZ_LIST_ALLOC_NODE
();

38 i‡(!
node
) {

39 
	`LOGTGTE
("%s","Error, UnableÅoállocate memory for intervalÅreeÇode\n");

40 
RETURNN
;

42 
	`MEMSET
(
node
);

43  
node
;

44 
	}
}

46 
UINT
 
	$dz_li°_Àngth
(
PDZ_LIST_NODE
 
node
)

48 
UINT
 
Àn
 = 0;

49 
node
) {

50 
node
 =Çode->
√xt
;

51 
Àn
++;

53  
Àn
;

54 
	}
}

56 
RVOID
 
	$dz_li°_åavî£
(
PDZ_LIST_NODE
 
node
)

58 
node
) {

59 
	`dz_li°_¥öt_node
(
node
);

60 
node
 =Çode->
√xt
;

62 
	}
}

64 
RVOID
 
	$dz_li°_åavî£_‰om_íd
(
PDZ_LIST_NODE
 
node
)

66 
node
) {

67 
	`dz_li°_¥öt_node
(
node
);

68 
node
 =Çode->
¥ev
;

70 
	}
}

72 
PDZ_LIST_NODE
 
	$dz_li°_föd_lo›
(
PDZ_LIST_NODE
 
roŸ
)

75 
PDZ_LIST_NODE
 
¶ow
 = 
roŸ
;

76 
PDZ_LIST_NODE
 
Á°
 = 
roŸ
->
√xt
;

77 
UINT
 
≥rimëî
 = 0;

78 
UINT
 
i
 = 0;

80 
¶ow
) {

82 i‡(
¶ow
 =
Á°
) {

87 
Á°
) {

88 
Á°
 = fa°->
√xt
;

89 i‡(
Á°
 =
¶ow
) {

92 
≥rimëî
++;

94 
	`LOGTGT
 ("Lo› Encou¡îed. Lo› Pîimã∏%u\n", 
≥rimëî
);

97 
¶ow
 = slow->
√xt
;

98 
Á°
 = fa°->
√xt
->next;

120 
¶ow
 = 
roŸ
;

123 
¶ow
) {

124 
i
 = 0;

125 
Á°
 = 
¶ow
->
√xt
;

126 
i
 < 
≥rimëî
) {

128 
Á°
 = fa°->
√xt
;

129 
i
++;

132 i‡(
¶ow
 =
Á°
) {

133 
	`LOGTGT
 ("Loop Node Found\n");

134 
	`dz_li°_¥öt_node
(
¶ow
);

138 
¶ow
 = slow->
√xt
;

141  
¶ow
;

142 
	}
}

144 
PDZ_LIST_NODE
 
	$dz_li°_push
(
PDZ_LIST_NODE
 
roŸ
, 
LONG
 
d©a
)

146 
PDZ_LIST_NODE
 
hód
 = 
roŸ
;

147 i‡(!
roŸ
) {

148 
roŸ
 = 
	`dz_li°_Æloc_node
();

149 
roŸ
->
d©a
 = data;

150  
roŸ
;

154 
roŸ
->
√xt
) {

155 
roŸ
 =ÑoŸ->
√xt
;

157 
roŸ
->
√xt
 = 
	`dz_li°_Æloc_node
();

158 
roŸ
->
√xt
->
d©a
 = data;

159 
roŸ
->
√xt
->
¥ev
 =Ñoot;

160  
hód
;

162 
	}
}

164 
PDZ_LIST_RETURN_NODE
 
	$dz_li°_push_wôh_ªtu∫_node
(
PDZ_LIST_NODE
 
roŸ
, 
LONG
 
d©a
)

166 
PDZ_LIST_NODE
 
hód
 = 
roŸ
;

167 
PDZ_LIST_RETURN_NODE
 
∫ode
 = 
	`DZ_ALLOC_NODE
((
DZ_LIST_RETURN_NODE
));

168 i‡(!
roŸ
) {

169 
roŸ
 = 
	`dz_li°_Æloc_node
();

170 
roŸ
->
d©a
 = data;

171 
∫ode
->
hód
 = 
roŸ
;

172 
∫ode
->
èû
 = 
NULL
;

173  
∫ode
;

177 
roŸ
->
√xt
) {

178 
roŸ
 =ÑoŸ->
√xt
;

180 
roŸ
->
√xt
 = 
	`dz_li°_Æloc_node
();

181 
roŸ
->
√xt
->
d©a
 = data;

182 
roŸ
->
√xt
->
¥ev
 =Ñoot;

184 
∫ode
->
hód
 = head;

185 
∫ode
->
èû
 = 
roŸ
->
√xt
;

186  
∫ode
;

188 
	}
}

197 
RVOID
 
	$dz_lo›_dëe˘i⁄
(
VOID
)

199 
PDZ_LIST_RETURN_NODE
 
lo›_node
 = 
NULL
;

200 
PDZ_LIST_RETURN_NODE
 
lo›_node2
 = 
NULL
;

202 
li°_roŸ
 = 
	`dz_li°_push
(list_root, 20);

203 
li°_roŸ
 = 
	`dz_li°_push
(list_root, 45);

204 
lo›_node
 = 
	`dz_li°_push_wôh_ªtu∫_node
(
li°_roŸ
, 35);

205 
li°_roŸ
 = 
	`dz_li°_push
(list_root, 80);

206 
li°_roŸ
 = 
	`dz_li°_push
(list_root, 90);

207 
li°_roŸ
 = 
	`dz_li°_push
(list_root, 60);

208 
lo›_node2
 = 
	`dz_li°_push_wôh_ªtu∫_node
(
li°_roŸ
, 110);

209 
	`dz_li°_åavî£
(
li°_roŸ
);

223 
lo›_node2
->
cuºít_node
->
√xt
 = 
lo›_node
->current_node;

225 
	`dz_li°_föd_lo›
(
li°_roŸ
);

228 
	}
}

241 
BOOL
 
	$dz_föd_two_li°s_mîgög
(
VOID
)

243 
PDZ_LIST_RETURN_NODE
 
comm⁄_node
 = 
NULL
;

244 
PDZ_LIST_RETURN_NODE
 
∫ode
 = 
NULL
;

245 
PDZ_LIST_NODE
 
li°1
 = 
NULL
;

246 
PDZ_LIST_NODE
 
li°2
 = 
NULL
;

247 
UINT
 
li°1_Àn
 = 0;

248 
UINT
 
li°2_Àn
 = 0;

251 
li°1
 = 
	`dz_li°_push
(list1, 10);

252 
li°1
 = 
	`dz_li°_push
(list1, 39);

253 
li°1
 = 
	`dz_li°_push
(list1, 80);

254 
comm⁄_node
 = 
	`dz_li°_push_wôh_ªtu∫_node
(
li°1
, 25);

255 
li°1
 = 
	`dz_li°_push
(list1, 78);

256 
li°1
 = 
	`dz_li°_push
(list1, 54);

257 
li°1
 = 
	`dz_li°_push
(list1, 90);

258 
li°1
 = 
	`dz_li°_push
(list1, 17);

259 
	`LOGTGT
("Printing Original List-1\n");

260 
	`dz_li°_åavî£
(
li°1
);

266 
li°2
 = 
	`dz_li°_push
(list2, 7);

267 
∫ode
 = 
	`dz_li°_push_wôh_ªtu∫_node
(
li°2
, 2);

268 
	`LOGTGT
("Printing Original List-2\n");

269 
	`dz_li°_åavî£
(
li°2
);

273 
∫ode
->
cuºít_node
->
√xt
 = 
comm⁄_node
->current_node;

276 
	`LOGTGT
("Printing List-2áfter merging with L1\n");

277 
	`dz_li°_åavî£
(
li°2
);

279 
li°1_Àn
 = 
	`dz_li°_Àngth
(
li°1
);

280 
li°2_Àn
 = 
	`dz_li°_Àngth
(
li°2
);

281 
	`LOGTGT
("Lígth o‡Li°-1 = %u, Lígth o‡Li°-2 = %u\n", 
li°1_Àn
, 
li°2_Àn
);

284 i‡(
li°1_Àn
 > 
li°2_Àn
) {

285 
li°1_Àn
 > 
li°2_Àn
) {

286 
li°1
 =Üi°1->
√xt
;

287 
li°1_Àn
--;

289 } i‡(
li°1_Àn
 < 
li°2_Àn
) {

290 
li°2_Àn
 > 
li°1_Àn
) {

291 
li°2
 =Üi°2->
√xt
;

292 
li°2_Àn
--;

295 
li°1
 =Üist1;

296 
li°2
 =Üist2;

301 i‡(
li°1
->
d©a
 =
li°2
->data) {

302 
	`LOGTGT
("Merged Node Found\n");

303 
	`dz_li°_¥öt_node
(
li°1
);

306 
li°1
 =Üi°1->
√xt
;

307 
li°2
 =Üi°2->
√xt
;

310 
RETURNT
;

312 
	}
}

314 
PDZ_LIST_NODE
 
	$dz_mîge_two_li°s
(
DZ_LIST_NODE
 *
li°1
, DZ_LIST_NODE *
li°2
)

316 
PDZ_LIST_NODE
 
hód
 = 
NULL
;

317 i‡(
li°1
 =
NULL
) {

318  
li°2
;

320 i‡(
li°2
 =
NULL
) {

321  
li°1
;

324 i‡(
li°1
->
d©a
 <
li°2
->data) {

326 
hód
 = 
li°1
;

327 
hód
->
√xt
 = 
	`dz_mîge_two_li°s
(
li°1
->√xt, 
li°2
);

329 
hód
 = 
li°2
;

330 
hód
->
√xt
 = 
	`dz_mîge_two_li°s
(
li°1
, 
li°2
->next);

333  
hód
;

334 
	}
}

344 
BOOL
 
	$dz_mîge_li°s
(
VOID
)

347 
PDZ_LIST_NODE
 
li°1
 = 
NULL
;

348 
PDZ_LIST_NODE
 
li°2
 = 
NULL
;

349 
UINT
 
li°1_Àn
 = 0;

350 
UINT
 
li°2_Àn
 = 0;

351 
li°1
 = 
	`dz_li°_push
(list1, 10);

352 
li°1
 = 
	`dz_li°_push
(list1, 39);

353 
li°1
 = 
	`dz_li°_push
(list1, 55);

354 
li°1
 = 
	`dz_li°_push
(list1, 75);

355 
li°1
 = 
	`dz_li°_push
(list1, 80);

356 
li°1
 = 
	`dz_li°_push
(list1, 96);

358 
li°2
 = 
	`dz_li°_push
(list2, 1);

359 
li°2
 = 
	`dz_li°_push
(list2, 14);

360 
li°2
 = 
	`dz_li°_push
(list2, 44);

361 
li°2
 = 
	`dz_li°_push
(list2, 89);

363 
li°1_Àn
 = 
	`dz_li°_Àngth
(
li°1
);

364 
li°2_Àn
 = 
	`dz_li°_Àngth
(
li°2
);

365 
	`LOGTGT
("Lígth o‡Li°-1 = %u, Lígth o‡Li°-2 = %u\n", 
li°1_Àn
, 
li°2_Àn
);

366 
li°1
 = 
	`dz_mîge_two_li°s
÷i°1, 
li°2
);

367 
	`dz_li°_åavî£
(
li°1
);

368 
li°1_Àn
 = 
	`dz_li°_Àngth
(
li°1
);

369 
li°2_Àn
 = 
	`dz_li°_Àngth
(
li°2
);

370 
	`LOGTGT
("A·î Mîgög Lígth o‡Li°-1 = %u, Lígth o‡Li°-2 = %u\n", 
li°1_Àn
, 
li°2_Àn
);

371 
RETURNT
;

372 
	}
}

374 
BOOL
 
	$dz_¥o˚ss_œb_ígöe_löked_li°
(
LBA
 
off£t
, 
UINT
 
iosize
)

376 
	`LOGTGT
("LAB Engine Linked List\n");

381 
	`dz_mîge_li°s
();

382 
RETURNT
;

383 
	}
}

385 
EXPORT_SYMBOL
(
dz_¥o˚ss_œb_ígöe_löked_li°
);

	@lab_engine/lab_engine_locks.c

9 
	~"¥ŸŸy≥s.h
"

11 
•ölock_t
 
	gdz_•ölock
;

12 
rwlock_t
 
	gdz_rwlock
;

13 
rw_£m≠h‹e
 
	gdz_rw£m≠h‹e
;

14 
£m≠h‹e
 
	gdz_£m≠h‹e
;

25 
VOID
 
	$dz_rw£m≠h‹e_öô
(
PDZ_RWSEMAPHORE
 
dzrw£ma
)

27 
	`ATOMIC64_SET
(
dzrw£ma
->
waô_lock
->
lock_©omic
, 0);

28 
dzrw£ma
->
cou¡
 = 0;

29 
	}
}

31 #ifde‡
DZ_KERNEL_VERSION_4


33 
VOID
 
	$dz_rw£m≠h‹e_acquúe_wrôe
(
PDZ_RWSEMAPHORE
 
dzrw£ma
)

35 
rw£m_waôî
 
waôî
;

38 
ªt
 = 
	`cmpxchg
(&
dzrw£ma
->
cou¡
, 
RWSEM_UNLOCKED_VALUE
, 
RWSEM_ACTIVE_WRITE_BIAS
);

40 i‡(
ªt
 =
RWSEM_UNLOCKED_VALUE
) {

45 
waôî
.
èsk
 = 
cuºít
;

46 
waôî
.
ty≥
 = 
RWSEM_WAITING_FOR_WRITE
;

47 
	`li°_add_èû
(&
waôî
.
li°
, &
dzrw£ma
->
waô_li°
);

53 i‡(
dzrw£ma
->
cou¡
 =
RWSEM_UNLOCKED_VALUE
) {

57 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

58 
	`scheduÀ
();

60 
	}
}

63 
VOID
 
	$dz_rw£m≠h‹e_acquúe_wrôe
(
PDZ_RWSEMAPHORE
 
dzrw£ma
)

65 
rw£m_waôî
 
waôî
;

66 
èsk_°ru˘
 *
tsk
;

69 
ªt
 = 
	`cmpxchg
(&
dzrw£ma
->
cou¡
, 
RWSEM_UNLOCKED_VALUE
, 
RWSEM_ACTIVE_WRITE_BIAS
);

71 i‡(
ªt
 =
RWSEM_UNLOCKED_VALUE
) {

76 
tsk
 = 
cuºít
;

77 
waôî
.
èsk
 = 
tsk
;

78 
waôî
.
ty≥
 = 
RWSEM_WAITING_FOR_WRITE
;

79 
	`li°_add_èû
(&
waôî
.
li°
, &
dzrw£ma
->
waô_li°
);

85 i‡(
dzrw£ma
->
cou¡
 =
RWSEM_UNLOCKED_VALUE
) {

89 
	`£t_èsk_°©e
(
tsk
, 
TASK_UNINTERRUPTIBLE
);

90 
	`scheduÀ
();

92 
	}
}

96 
VOID
 
	$dz_rw£m≠h‹e_ªÀa£_wrôe
(
PDZ_RWSEMAPHORE
 
dzrw£ma
)

99 
	}
}

102 
VOID
 
	$dz_rw•ölock_öô_©omic
(
PDZ_RWSPINLOCK
 
dzlock
)

104 
	`ATOMIC64_SET
(
dzlock
->
lock_©omic
, 
DZ_RWSPINLOCK_INIT
);

105 
	}
}

108 
VOID
 
	$dz_rw•ölock_acquúe_©omic_ªad
(
PDZ_RWSPINLOCK
 
dzlock
)

110 
INT
 
ªt
 = 0;

112 
	`¥ìm±_dißbÀ
();

113 
ªt
 = 
	`©omic64_dec_ªtu∫
(&
dzlock
->
lock_©omic
);

115 i‡(
ªt
 >=0) {

118 
	`©omic64_öc_ªtu∫
(&
dzlock
->
lock_©omic
);

119 
	`¥ìm±_íabÀ
();

123 i‡(
	`ATOMIC64_READ
(
dzlock
->
lock_©omic
) == 0) {

124 
	`˝u_ªœx
();

130 
	}
}

133 
VOID
 
	$dz_rw•ölock_ªÀa£_©omic_ªad
(
PDZ_RWSPINLOCK
 
dzlock
)

135 
	`©omic64_öc_ªtu∫
(&
dzlock
->
lock_©omic
);

136 
	`¥ìm±_íabÀ
();

137 
	}
}

140 
VOID
 
	$dz_rw•ölock_acquúe_©omic_wrôe
(
PDZ_RWSPINLOCK
 
dzlock
)

142 
LONG
 
ªt
 = 0;

144 
	`¥ìm±_dißbÀ
();

145 
ªt
 = 
	`©omic64_sub_ªtu∫
(
DZ_RWSPINLOCK_INIT
, &
dzlock
->
lock_©omic
);

147 i‡(
ªt
 == 0) {

150 
	`©omic64_add_ªtu∫
(
DZ_RWSPINLOCK_INIT
, &
dzlock
->
lock_©omic
);

151 
	`¥ìm±_íabÀ
();

155 i‡(
	`ATOMIC64_READ
(
dzlock
->
lock_©omic
Ë!
DZ_RWSPINLOCK_INIT
 ) {

156 
	`˝u_ªœx
();

162 
	}
}

164 
VOID
 
	$dz_rw•ölock_ªÀa£_©omic_wrôe
(
PDZ_RWSPINLOCK
 
dzlock
)

166 
	`ATOMIC64_SET
(
dzlock
->
lock_©omic
, 
DZ_RWSPINLOCK_INIT
);

167 
	`¥ìm±_íabÀ
();

168 
	}
}

170 
VOID
 
	$dz_•ölock_öô_©omic
(
PDZ_SPINLOCK
 
dzlock
)

172 
	`ATOMIC64_SET
(
dzlock
->
lock_©omic
, 0);

173 
	}
}

175 
VOID
 
	$dz_•ölock_öô_bô
(
PDZ_SPINLOCK
 
dzlock
)

177 
dzlock
->
lock_bô
 = 0;

178 
	}
}

180 
VOID
 
	$dz_•ölock_acquúe_©omic
(
PDZ_SPINLOCK
 
dzlock
)

183 
	`¥ìm±_dißbÀ
();

184 i‡(
	`ã°_™d_£t_bô
(0, &
dzlock
->
lock_bô
)) {

186 
	`PRINT_ATOMIC64
(
dzlock
->
lock_©omic
);

189 
	`¥ìm±_íabÀ
();

193 i‡(
	`ATOMIC64_READ
(
dzlock
->
lock_©omic
) != 0) {

194 
	`˝u_ªœx
();

200 
	}
}

203 
VOID
 
	$dz_•ölock_acquúe_bô
(
PDZ_SPINLOCK
 
dzlock
)

206 
	`¥ìm±_dißbÀ
();

207 i‡(
	`ã°_™d_£t_bô
(0, &
dzlock
->
lock_bô
)) {

209 
	`PRINT_LONG
(
dzlock
->
lock_bô
);

212 
	`¥ìm±_íabÀ
();

216 i‡(
	`ã°_bô
(0, &
dzlock
->
lock_bô
) != 0) {

217 
	`˝u_ªœx
();

223 
	}
}

225 
VOID
 
	$dz_•ölock_ªÀa£_©omic
(
PDZ_SPINLOCK
 
dzlock
)

227 
	`ATOMIC64_SET
(
dzlock
->
lock_©omic
, 0);

228 
	`¥ìm±_íabÀ
();

229 
	}
}

231 
VOID
 
	$dz_•ölock_ªÀa£_bô
(
PDZ_SPINLOCK
 
dzlock
)

233 
	`˛ór_bô
(0, &
dzlock
->
lock_bô
);

234 
	`¥ìm±_íabÀ
();

235 
	}
}

238 
VOID
 
	$dz_£m≠h‹e_ã°
(
VOID
)

240 
	`£ma_öô
(&
dz_£m≠h‹e
, 1);

244 
	`LOG
("Inôü»Sem≠h‹ê cou¡ = %u, cou¡ = 0x%x\n", 
dz_£m≠h‹e
.
cou¡
, dz_semaphore.count);

245 
	`down
(&
dz_£m≠h‹e
);

246 
	`LOG
("A·î down(ËSem≠h‹ê cou¡ = %u, cou¡ = 0x%x\n", 
dz_£m≠h‹e
.
cou¡
, dz_semaphore.count);

247 
	`up
(&
dz_£m≠h‹e
);

248 
	`LOG
("A·î up(ËSem≠h‹ê cou¡ = %u, cou¡ = 0x%x\n", 
dz_£m≠h‹e
.
cou¡
, dz_semaphore.count);

249 
	}
}

251 
VOID
 
	$dz_•ö_lock_ã°
(
VOID
)

253 
	`•ö_lock_öô
(&
dz_•ölock
);

254 #ifde‡
DZ_KERNEL_VERSION_4


255 
	`LOG
("SPINLOCK =%u, = 0x%x\n", (
UINT
)
dz_•ölock
.
æock
.
øw_lock
.
locked
, (UINT)dz_spinlock.rlock.raw_lock.locked);

257 
	`LOG
("SPINLOCK =%u, = 0x%x\n", (
UINT
)
dz_•ölock
.
æock
.
øw_lock
.
hód_èû
, (UINT)dz_spinlock.rlock.raw_lock.head_tail);

259 
	}
}

261 
VOID
 
	$dz_ªad_wrôe_•ö_lock_ã°
(
VOID
)

263 
	`rwlock_öô
(&
dz_rwlock
);

265 #ifde‡
DZ_KERNEL_VERSION_4


272 
	`LOG
("Inôü»RWÑaw_lock.lock = %Œd,Ñaw_lock.lock = 0x%Œx\n", 
dz_rwlock
.
øw_lock
.
lock
, dz_rwlock.raw_lock.lock);

273 
	`LOG
("Inôü»RWÑaw_lock.ªad = %u,Ñaw_lock.ªad = 0x%x\n", 
dz_rwlock
.
øw_lock
.
ªad
, dz_rwlock.raw_lock.read);

274 
	`LOG
("Inôü»RWÑaw_lock.wrôê = %d,Ñaw_lock.wrôê = 0x%x\n", 
dz_rwlock
.
øw_lock
.
wrôe
, dz_rwlock.raw_lock.write);

277 
	`ªad_lock
(&
dz_rwlock
);

279 #ifde‡
DZ_KERNEL_VERSION_4


286 
	`LOG
("A·î READ_LOCK RWÑaw_lock.lock = %Œd,Ñaw_lock.lock = 0x%Œx\n", 
dz_rwlock
.
øw_lock
.
lock
, dz_rwlock.raw_lock.lock);

287 
	`LOG
("A·î READ_LOCK RWÑaw_lock.ªad = %u,Ñaw_lock.ªad = 0x%x\n", 
dz_rwlock
.
øw_lock
.
ªad
, dz_rwlock.raw_lock.read);

288 
	`LOG
("A·î READ_LOCK RWÑaw_lock.wrôê = %d,Ñaw_lock.wrôê = 0x%x\n", 
dz_rwlock
.
øw_lock
.
wrôe
, dz_rwlock.raw_lock.write);

291 
	`ªad_u∆ock
(&
dz_rwlock
);

293 #ifde‡
DZ_KERNEL_VERSION_4


300 
	`LOG
("A·î READ_UNLOCK RWÑaw_lock.lock = %Œd,Ñaw_lock.lock = 0x%Œx\n", 
dz_rwlock
.
øw_lock
.
lock
, dz_rwlock.raw_lock.lock);

301 
	`LOG
("A·î READ_UNLOCK RWÑaw_lock.ªad = %u,Ñaw_lock.ªad = 0x%x\n", 
dz_rwlock
.
øw_lock
.
ªad
, dz_rwlock.raw_lock.read);

302 
	`LOG
("A·î READ_UNLOCK RWÑaw_lock.wrôê = %d,Ñaw_lock.wrôê = 0x%x\n", 
dz_rwlock
.
øw_lock
.
wrôe
, dz_rwlock.raw_lock.write);

305 
	`wrôe_lock
(&
dz_rwlock
);

307 #ifde‡
DZ_KERNEL_VERSION_4


314 
	`LOG
("A·î WRITE_LOCK RWÑaw_lock.lock = %Œd,Ñaw_lock.lock = 0x%Œx\n", 
dz_rwlock
.
øw_lock
.
lock
, dz_rwlock.raw_lock.lock);

315 
	`LOG
("A·î WRITE_LOCK RWÑaw_lock.ªad = %u,Ñaw_lock.ªad = 0x%x\n", 
dz_rwlock
.
øw_lock
.
ªad
, dz_rwlock.raw_lock.read);

316 
	`LOG
("A·î WRITE_LOCK RWÑaw_lock.wrôê = %d,Ñaw_lock.wrôê = 0x%x\n", 
dz_rwlock
.
øw_lock
.
wrôe
, dz_rwlock.raw_lock.write);

319 
	`wrôe_u∆ock
(&
dz_rwlock
);

321 #ifde‡
DZ_KERNEL_VERSION_4


328 
	`LOG
("A·î WRITE_UNLOCK RWÑaw_lock.lock = %Œd,Ñaw_lock.lock = 0x%Œx\n", 
dz_rwlock
.
øw_lock
.
lock
, dz_rwlock.raw_lock.lock);

329 
	`LOG
("A·î WRITE_UNLOCK RWÑaw_lock.ªad = %u,Ñaw_lock.ªad = 0x%x\n", 
dz_rwlock
.
øw_lock
.
ªad
, dz_rwlock.raw_lock.read);

330 
	`LOG
("A·î WRITE_UNLOCK RWÑaw_lock.wrôê%d,Ñaw_lock.wrôê = 0x%x\n", 
dz_rwlock
.
øw_lock
.
wrôe
, dz_rwlock.raw_lock.write);

332 
	}
}

334 
VOID
 
	$dz_ªad_wrôe_£m≠h‹e_ã°
(
VOID
)

336 
	`öô_rw£m
(&
dz_rw£m≠h‹e
);

337 
	`LOG
("RWSEM_WAITING_BIAS = %ld, 0x%lx\n",
RWSEM_WAITING_BIAS
,RWSEM_WAITING_BIAS);

338 
	`LOG
("RWSEM_ACTIVE_READ_BIAS = %ld, 0x%lx\n",
RWSEM_ACTIVE_READ_BIAS
,RWSEM_ACTIVE_READ_BIAS);

339 
	`LOG
("RWSEM_ACTIVE_WRITE_BIAS = %ld, 0x%lx\n",
RWSEM_ACTIVE_WRITE_BIAS
,RWSEM_ACTIVE_WRITE_BIAS);

340 #ifde‡
DZ_KERNEL_VERSION_4


343 
	`LOG
("Inôü»RWSem≠h‹ê cou¡ = %ld, cou¡ = 0x%lx\n", 
dz_rw£m≠h‹e
.
cou¡
, dz_rwsemaphore.count);

346 
	`down_ªad
(&
dz_rw£m≠h‹e
);

348 #ifde‡
DZ_KERNEL_VERSION_4


351 
	`LOG
("A·î down_ªad RWSem≠h‹ê cou¡ = %ld, cou¡ = 0x%lx\n", 
dz_rw£m≠h‹e
.
cou¡
, dz_rwsemaphore.count);

354 
	`up_ªad
(&
dz_rw£m≠h‹e
);

356 #ifde‡
DZ_KERNEL_VERSION_4


359 
	`LOG
("A·î up_ªad RWSem≠h‹ê cou¡ = %ld, cou¡ = 0x%lx\n", 
dz_rw£m≠h‹e
.
cou¡
, dz_rwsemaphore.count);

362 
	`down_wrôe
(&
dz_rw£m≠h‹e
);

364 #ifde‡
DZ_KERNEL_VERSION_4


367 
	`LOG
("A·î down_wrôêRWSem≠h‹ê cou¡ = %ld, cou¡ = 0x%lx\n", 
dz_rw£m≠h‹e
.
cou¡
, dz_rwsemaphore.count);

370 
	`up_wrôe
(&
dz_rw£m≠h‹e
);

372 #ifde‡
DZ_KERNEL_VERSION_4


375 
	`LOG
("A·î up_wrôê RWSem≠h‹ê cou¡ = %ld, cou¡ = 0x%lx\n", 
dz_rw£m≠h‹e
.
cou¡
, dz_rwsemaphore.count);

378 
	}
}

381 
VOID
 
	$dz_lock_ã°
(
VOID
)

398 
	`LOG
("CONFIG_NR_CPUS = %d, 0x%x\n", 
CONFIG_NR_CPUS
, CONFIG_NR_CPUS);

399 
	`dz_•ö_lock_ã°
();

404 
	}
}

406 
VOID
 
	$dz_•ölock_dev
(
VOID
)

408 
INT
 
ªt
 = 0;

409 
DZ_SPINLOCK
 
loˇl_lock
;

410 
	`dz_•ölock_öô_bô
(&
loˇl_lock
);

412 
	`PRINT_LONG
(
loˇl_lock
.
lock_bô
);

413 
ªt
 = 
	`ã°_™d_£t_bô
(0, &
loˇl_lock
.
lock_bô
);

414 
	`PRINT_INT
(
ªt
);

415 
	`PRINT_LONG
(
loˇl_lock
.
lock_bô
);

417 
	`LOG
("After Setting");

418 
ªt
 = 0;

419 
ªt
 = 
	`ã°_™d_£t_bô
(0, &
loˇl_lock
.
lock_bô
);

420 
	`PRINT_INT
(
ªt
);

421 
	`PRINT_LONG
(
loˇl_lock
.
lock_bô
);

422 i‡(
	`ã°_™d_£t_bô
(0, &
loˇl_lock
.
lock_bô
)) {

423 
	`LOG
("It should be Failed\n");

425 
	`LOG
("Should NOt come here\n");

427 
	`˛ór_bô
(0, &
loˇl_lock
.
lock_bô
);

428 i‡(
	`ã°_™d_£t_bô
(0, &
loˇl_lock
.
lock_bô
)) {

429 
	`LOG
("Should Not come here\n");

431 
	`LOG
("It should beÖassed\n");

434 
	}
}

436 
BOOL
 
	$dz_¥o˚ss_œb_ígöe_locks
(
LBA
 
off£t
, 
UINT
 
iosize
)

438 
	`dz_lock_ã°
();

439 
	`dz_•ölock_dev
();

441 
RETURNT
;

442 
	}
}

444 
EXPORT_SYMBOL
(
dz_¥o˚ss_œb_ígöe_locks
);

	@lab_engine/lab_engine_pipe.c

9 
	~"¥ŸŸy≥s.h
"

10 
DZ_WAITQ
 
	gpùe_ªadî_waôq
;

11 
DZ_WAITQ
 
	gpùe_wrôî_waôq
;

12 
SPINLOCK
 
	gpùe_•a˚_•ölock
;

14 
£m≠h‹e
 
	gpùe_•a˚_£m≠h‹e
;

15 
£m≠h‹e
 
	gpùe_ªadî_£m≠h‹e
;

16 
£m≠h‹e
 
	gpùe_wrôî_£m≠h‹e
;

18 
INT
 
	gpùe_size
 = 
PAGE_SIZE
;

19 
INT
 
	gpùe_öcou¡
 = -1;

20 
INT
 
	gpùe_outcou¡
 = -1;

22 
	#IF_PIPE_FULL
(Ëi‡(((
pùe_öcou¡
 =(
PAGE_SIZE
 - 1)Ë&& 
pùe_outcou¡
 =-1 )|| (pùe_öcou¡ =’ùe_outcou¡ - 1)))

	)

24 
	#IF_PIPE_EMPTY
(Ëi‡((
pùe_öcou¡
 =-1 && 
pùe_outcou¡
 =-1Ë|| (pùe_öcou¡ =pùe_outcou¡ ))

	)

26 
PCHAR
 
	$dz_pùe_öô
(*
pùebuf
, *
pùíame
)

29 
pùe_size
 = 
PAGE_SIZE
;

30 
pùe_öcou¡
 = -1;

31 
pùe_outcou¡
 = -1;

32 
	`mem£t
(&
pùebuf
, 0, 
pùe_size
);

35 
	`•ö_lock_öô
(&
pùe_•a˚_•ölock
);

37 
	`•ö_lock_öô
(&
pùe_ªadî_waôq
.
waôq_lock
);

38 
	`INIT_LIST_HEAD
(&
pùe_ªadî_waôq
.
waôq_hód
);

40 
	`•ö_lock_öô
(&
pùe_wrôî_waôq
.
waôq_lock
);

41 
	`INIT_LIST_HEAD
(&
pùe_wrôî_waôq
.
waôq_hód
);

44 
	`£ma_öô
(&
pùe_•a˚_£m≠h‹e
, 1);

45 
	`£ma_öô
(&
pùe_wrôî_£m≠h‹e
, 0);

46 
	`£ma_öô
(&
pùe_ªadî_£m≠h‹e
, 0);

48  (
pùebuf
 = 
	`dz_kmÆloc
(
pùe_size
, 
GFP_KERNEL
));

49 
	}
}

51 
INT
 
	$dz_pùe_ªad_c‹e_wôh_£m≠h‹e
(*
pùebuf
, *
d©abuf
, 
INT
 
d©Æí
)

53 
INT
 
d©a_ªad
 = 0;

54 
INT
 
d©a_À·
 = 0;

55 
INT
 
d©a_ªad_°¨t
 = 0;

57 
°¨t_ªad_wôh_£m≠h‹e
:

58 
	`down
(&
pùe_•a˚_£m≠h‹e
);

60 
	`IF_PIPE_EMPTY
() {

62 
	`up
(&
pùe_•a˚_£m≠h‹e
);

65 
	`down
(&
pùe_ªadî_£m≠h‹e
);

66 
°¨t_ªad_wôh_£m≠h‹e
;

69 
d©a_ªad_°¨t
 = 
pùe_outcou¡
;

70 
d©a_ªad
 = 
d©a_ªad_°¨t
 + 
d©Æí
;

71 i‡(
d©a_ªad
 > 
pùe_size
 - 1) {

72 
d©a_À·
 = 
d©a_ªad
 - 
pùe_size
;

74 
pùe_outcou¡
 = 
d©a_ªad
;

75 
d©a_À·
 = 
d©Æí
;

78 
	`up
(&
pùe_•a˚_£m≠h‹e
);

79 
	`mem˝y
(
d©abuf
, 
pùebuf
 + 
d©a_ªad_°¨t
, 
d©a_ªad
);

82 
	`up
(&
pùe_wrôî_£m≠h‹e
);

83  
d©a_À·
;

84 
	}
}

87 
INT
 
	$dz_pùe_ªad_c‹e_wôh_•ölock
(*
pùebuf
, *
d©abuf
, 
INT
 
d©Æí
)

89 
INT
 
d©a_ªad
 = 0;

90 
INT
 
d©a_À·
 = 0;

91 
INT
 
d©a_ªad_°¨t
 = 0;

94 
DZ_WAITQ_ITEM
 *
waôî_wrôe
 = 
NULL
;

97 
DZ_WAITQ_ITEM
 *
waôî_ªad
 = 
	`dz_kmÆloc
((DZ_WAITQ_ITEM), 
GFP_KERNEL
);

99 
°¨t_ªad_wôh_•ölock
:

100 
	`•ö_lock
(&
pùe_•a˚_•ölock
);

102 
	`IF_PIPE_EMPTY
() {

104 
	`•ö_lock
(&
pùe_ªadî_waôq
.
waôq_lock
);

105 
waôî_ªad
->
waô_èsk
 = 
cuºít
;

106 
	`li°_add_èû
(&
waôî_ªad
->
waô_ôem
, &
pùe_ªadî_waôq
.
waôq_hód
);

107 
	`•ö_u∆ock
(&
pùe_ªadî_waôq
.
waôq_lock
);

109 
	`•ö_u∆ock
(&
pùe_•a˚_•ölock
);

110 
	`scheduÀ
();

111 
°¨t_ªad_wôh_•ölock
;

114 
d©a_ªad_°¨t
 = 
pùe_outcou¡
;

115 
d©a_ªad
 = 
d©a_ªad_°¨t
 + 
d©Æí
;

116 i‡(
d©a_ªad
 > 
pùe_size
 - 1) {

117 
d©a_À·
 = 
d©a_ªad
 - 
pùe_size
;

119 
pùe_outcou¡
 = 
d©a_ªad
;

120 
d©a_À·
 = 
d©Æí
;

123 
	`•ö_u∆ock
(&
pùe_•a˚_•ölock
);

124 
	`mem˝y
(
d©abuf
, 
pùebuf
 + 
d©a_ªad_°¨t
, 
d©a_ªad
);

127 
	`•ö_lock
(&
pùe_wrôî_waôq
.
waôq_lock
);

128 i‡(
	`li°_em±y
(&
pùe_wrôî_waôq
.
waôq_hód
)) {

129 
	`•ö_u∆ock
(&
pùe_wrôî_waôq
.
waôq_lock
);

130  
d©a_À·
;

133 
waôî_wrôe
 = 
	`li°_fú°_íåy
(&
pùe_wrôî_waôq
.
waôq_hód
, 
dz_waôq_ôem_s
, 
waô_ôem
);

134 i‡(
waôî_wrôe
) {

135 
	`li°_dñ
(&
waôî_wrôe
->
waô_ôem
);

136 
	`wake_up_¥o˚ss
(
waôî_wrôe
->
waô_èsk
);

137 
waôî_wrôe
 = 
NULL
;

143 
	`•ö_u∆ock
(&
pùe_wrôî_waôq
.
waôq_lock
);

145  
d©a_À·
;

146 
	}
}

148 
INT
 
	$dz_pùe_ªad
(*
pùebuf
, *
d©abuf
, 
INT
 
d©Æí
)

150 
INT
 
d©a_ªad
 = 0;

152 
åue
) {

153 
d©a_ªad
 = 
	`dz_pùe_ªad_c‹e_wôh_•ölock
(
pùebuf
, 
d©abuf
, 
d©Æí
);

154 i‡(
d©a_ªad
 =
d©Æí
) {

155  
d©a_ªad
;

157 
d©Æí
 = d©Æí - 
d©a_ªad
;

161 
	}
}

163 
INT
 
	$dz_pùe_wrôe_c‹e_wôh_£m≠h‹e
(*
pùebuf
, *
d©abuf
, 
INT
 
d©Æí
)

165 
INT
 
d©a_wrôãn
 = 0;

166 
INT
 
d©a_À·
 = 0;

167 
INT
 
d©a_wrôe_°¨t
 = 0;

169 
°¨t_wrôe_wôh_£m≠h‹e
:

170 
	`down
(&
pùe_•a˚_£m≠h‹e
);

172 
	`IF_PIPE_FULL
() {

173 
	`up
(&
pùe_•a˚_£m≠h‹e
);

174 
	`down
(&
pùe_wrôî_£m≠h‹e
);

175 
°¨t_wrôe_wôh_£m≠h‹e
;

179 
d©a_wrôe_°¨t
 = 
pùe_öcou¡
;

180 
d©a_wrôãn
 = 
pùe_öcou¡
 + 
d©Æí
;

181 i‡(
d©a_wrôãn
 > 
pùe_size
 - 1) {

182 
d©a_À·
 = 
d©a_wrôãn
 - 
pùe_size
;

184 
pùe_öcou¡
 = 
d©a_wrôãn
;

185 
d©a_À·
 = 
d©Æí
;

188 
	`up
(&
pùe_•a˚_£m≠h‹e
);

190 
	`mem˝y
(
pùebuf
 + 
d©a_wrôe_°¨t
, 
d©abuf
, 
d©a_wrôãn
);

193 
	`up
(&
pùe_ªadî_£m≠h‹e
);

194  
d©a_À·
;

195 
	}
}

197 
INT
 
	$dz_pùe_wrôe_c‹e_wôh_•ölock
(*
pùebuf
, *
d©abuf
, 
INT
 
d©Æí
)

199 
INT
 
d©a_wrôãn
 = 0;

200 
INT
 
d©a_À·
 = 0;

201 
INT
 
d©a_wrôe_°¨t
 = 0;

204 
DZ_WAITQ_ITEM
 *
waôî_ªad
 = 
NULL
;

207 
DZ_WAITQ_ITEM
 *
waôî_wrôe
 = 
	`dz_kmÆloc
((DZ_WAITQ_ITEM), 
GFP_KERNEL
);

209 
°¨t_wrôe_wôh_•ölock
:

210 
	`•ö_lock
(&
pùe_•a˚_•ölock
);

212 
	`IF_PIPE_FULL
() {

214 
	`•ö_lock
(&
pùe_wrôî_waôq
.
waôq_lock
);

215 
waôî_wrôe
->
waô_èsk
 = 
cuºít
;

216 
	`li°_add_èû
(&
waôî_wrôe
->
waô_ôem
, &
pùe_wrôî_waôq
.
waôq_hód
);

217 
	`•ö_u∆ock
(&
pùe_wrôî_waôq
.
waôq_lock
);

219 
	`•ö_u∆ock
(&
pùe_•a˚_•ölock
);

220 
	`scheduÀ
();

221 
°¨t_wrôe_wôh_•ölock
;

225 
d©a_wrôe_°¨t
 = 
pùe_öcou¡
;

226 
d©a_wrôãn
 = 
pùe_öcou¡
 + 
d©Æí
;

227 i‡(
d©a_wrôãn
 > 
pùe_size
 - 1) {

228 
d©a_À·
 = 
d©a_wrôãn
 - 
pùe_size
;

230 
pùe_öcou¡
 = 
d©a_wrôãn
;

231 
d©a_À·
 = 
d©Æí
;

234 
	`•ö_u∆ock
(&
pùe_•a˚_•ölock
);

236 
	`mem˝y
(
pùebuf
 + 
d©a_wrôe_°¨t
, 
d©abuf
, 
d©a_wrôãn
);

239 
	`•ö_lock
(&
pùe_ªadî_waôq
.
waôq_lock
);

240 i‡(
	`li°_em±y
(&
pùe_ªadî_waôq
.
waôq_hód
)) {

241 
	`•ö_u∆ock
(&
pùe_ªadî_waôq
.
waôq_lock
);

242  
d©a_À·
;

245 
waôî_ªad
 = 
	`li°_fú°_íåy
(&
pùe_ªadî_waôq
.
waôq_hód
, 
dz_waôq_ôem_s
, 
waô_ôem
);

246 i‡(
waôî_ªad
) {

247 
	`li°_dñ
(&
waôî_ªad
->
waô_ôem
);

248 
	`wake_up_¥o˚ss
(
waôî_ªad
->
waô_èsk
);

249 
waôî_ªad
 = 
NULL
;

255 
	`•ö_u∆ock
(&
pùe_ªadî_waôq
.
waôq_lock
);

257  
d©a_À·
;

258 
	}
}

260 
INT
 
	$dz_pùe_wrôe
(*
pùebuf
, *
d©abuf
, 
INT
 
d©Æí
)

262 
INT
 
d©a_wrôãn
 = 0;

264 
åue
) {

265 
d©a_wrôãn
 = 
	`dz_pùe_wrôe_c‹e_wôh_•ölock
(
pùebuf
, 
d©abuf
, 
d©Æí
);

266 i‡(
d©a_wrôãn
 =
d©Æí
) {

267  
d©a_wrôãn
;

269 
d©Æí
 = d©Æí - 
d©a_wrôãn
;

272 
	}
}

274 
BOOL
 
	$dz_¥o˚ss_œb_ígöe_pùe
(
LBA
 
off£t
, 
UINT
 
iosize
)

278  
åue
;

279 
	}
}

281 
EXPORT_SYMBOL
(
dz_¥o˚ss_œb_ígöe_pùe
);

	@log_engine/emlog.c

27 
	#¥_fmt
(
fmt
Ë"%s:%s: " fmt, 
KBUILD_MODNAME
, 
__func__


	)

29 
	#DEBUG
 1

	)

31 #ifde‡
MODVERSIONS


32 
	~<löux/modvîsi⁄s.h
>

35 
	~<löux/vîsi⁄.h
>

36 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 33)

37 
	~<löux/autoc⁄f.h
>

39 
	~<gíî©ed/autoc⁄f.h
>

41 
	~<löux/°ddef.h
>

42 
	~<löux/kî√l.h
>

43 
	~<löux/moduÀ.h
>

44 
	~<löux/cdev.h
>

45 
	~<löux/devi˚.h
>

46 
	~<löux/sched.h
>

47 
	~<löux/w‹kqueue.h
>

48 
	~<löux/waô.h
>

49 
	~<löux/dñay.h
>

50 
	~<löux/î∫o.h
>

51 
	~<löux/¶ab.h
>

52 
	~<löux/vmÆloc.h
>

53 
	~<löux/ty≥s.h
>

54 
	~<löux/fs.h
>

55 
	~<löux/pﬁl.h
>

57 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 18)

58 
	~<asm/uac˚ss.h
>

60 
	~<löux/uac˚ss.h
>

64 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 28)

65 #unde‡
¥_îr


66 #unde‡
¥_öfo


67 #unde‡
¥_debug


69 
	#¥_îr
(
fmt
, ...) \

70 
	`¥ötk
(
KERN_ERR
 
	`¥_fmt
(
fmt
), ##
__VA_ARGS__
)

	)

71 
	#¥_öfo
(
fmt
, ...) \

72 
	`¥ötk
(
KERN_INFO
 
	`¥_fmt
(
fmt
), ##
__VA_ARGS__
)

	)

73 
	#¥_debug
(
fmt
, ...) \

74 
	`¥ötk
(
KERN_DEBUG
 
	`¥_fmt
(
fmt
), ##
__VA_ARGS__
)

	)

77 
	~"emlog.h
"

78 
	~"ma¸os.h
"

80 
	#LOGEM
(
fmt
, 
¨gs
...) do { \

81 
	`¥ötk
 (
KERN_ERR
"[AISA][AVMLOG]:%d:" 
fmt
 ,
__LINE__
, ## 
¨gs
); \

82 } 0)

	)

84 
emlog_öfo
 *
	gemlog_öfo_li°
 = 
NULL
;

85 
boﬁ
 
	gemlog_auto‰ì
;

86 
boﬁ
 
	gemlog_debug
;

88 
dev_t
 
	gemlog_dev_ty≥
 = 0;

89 
	#EMLOG_MINOR_BASE
 1

	)

90 
	#EMLOG_MINOR_COUNT
 127

	)

91 
cdev
 *
	gemlog_cdev
 = 
NULL
;

92 
˛ass
 *
	gemlog_˛ass
 = 
NULL
;

93 
devi˚
 *
	gemlog_dev_ªg
;

95 
moduÀ_∑øm
(
emlog_auto‰ì
, 
boﬁ
, 0644);

96 
moduÀ_∑øm
(
emlog_debug
, 
boﬁ
, 0644);

100 
emlog_öfo
 *
	$gë_eöfo
(c⁄° 
öode
 *inode)

102 
emlog_öfo
 *
eöfo
;

104 i‡(
öode
 =
NULL
)

105  
NULL
;

107 
eöfo
 = 
emlog_öfo_li°
;Éöfÿ!
NULL
;Éöfÿeöfo->
√xt
)

108 i‡(
eöfo
->
i_öo
 =
öode
->i_öÿ&&Éöfo->
i_rdev
 == inode->i_rdev)

109  
eöfo
;

111  
NULL
;

112 
	}
}

117 
	$¸óã_eöfo
(c⁄° 
öode
 *öode, 
mö‹
,

118 
emlog_öfo
 **
≥öfo
)

120 
emlog_öfo
 *
eöfo
;

123 i‡(
mö‹
 < 1 || mö‹ > 
EMLOG_MAX_SIZE
)

124  -
EINVAL
;

127 i‡((
eöfo
 = 
	`kzÆloc
((
emlog_öfo
), 
GFP_KERNEL
)Ë=
NULL
)

128 
°ru˘_mÆloc_Áûed
;

130 
eöfo
->
i_öo
 = 
öode
->i_ino;

131 
eöfo
->
i_rdev
 = 
öode
->i_rdev;

133 
	`öô_waôqueue_hód
(
	`EMLOG_READQ
(
eöfo
));

137 
eöfo
->
size
 = 
KB
 * 
EMLOG_MAX_SIZE
;

139 
	`LOGEM
("Log FûêCª©ed o‡sizê%zu KB \n", (
eöfo
->
size
)/
KB
);

140 i‡((
eöfo
->
d©a
 = 
	`vmÆloc
((Ë*Éöfo->
size
)Ë=
NULL
)

141 
d©a_mÆloc_Áûed
;

144 
eöfo
->
√xt
 = 
emlog_öfo_li°
;

145 
emlog_öfo_li°
 = 
eöfo
;

147 i‡(
emlog_debug
)

148 
	`¥_debug
("ÆloˇtögÑesour˚†assocüãd wôh inodê%ld.\n", 
eöfo
->
i_öo
);

151 *
≥öfo
 = 
eöfo
;

155 
Ÿhî_Áûuª
:

157 
	`v‰ì
(
eöfo
->
d©a
);

158 
d©a_mÆloc_Áûed
:

159 
	`k‰ì
(
eöfo
);

160 
°ru˘_mÆloc_Áûed
:

161  -
ENOMEM
;

162 
	}
}

167 
	$‰ì_eöfo
(
emlog_öfo
 *
eöfo
)

169 
emlog_öfo
 **
±r
;

171 i‡(
eöfo
 =
NULL
) {

172 
	`¥_îr
("nullÖassedÅo free_einfo.\n");

176 i‡(
emlog_debug
)

177 
	`¥_debug
("‰ìögÑesour˚†assocüãd wôh inodê%ld.\n", 
eöfo
->
i_öo
);

179 
	`v‰ì
(
eöfo
->
d©a
);

184 
±r
 = &
emlog_öfo_li°
;

185 *
±r
 !
eöfo
) {

186 i‡(!*
±r
) {

187 
	`¥_îr
("corruptÉinfoÜist.\n");

190 
±r
 = &((**±r).
√xt
);

193 *
±r
 = 
eöfo
->
√xt
;

195 
	}
}

199 
	$emlog_›í
(
öode
 *öode, 
fûe
 *file)

201 
mö‹
 = 
	`MINOR
(
öode
->
i_rdev
);

203 
emlog_öfo
 *
eöfo
 = 
NULL
;

204 
ªtvÆ
;

206 i‡((
eöfo
 = 
	`gë_eöfo
(
öode
)Ë=
NULL
) {

208 i‡((
ªtvÆ
 = 
	`¸óã_eöfo
(
öode
, 
mö‹
, &
eöfo
)) < 0)

209  
ªtvÆ
;

212 i‡(
eöfo
 =
NULL
) {

213 
	`¥_îr
("ˇ¿nŸ fëchÉöfÿf‹ inodê%ld.\n", 
öode
->
i_öo
);

214  -
EIO
;

217 
eöfo
->
ªfcou¡
++;

218 i‡(!
	`åy_moduÀ_gë
(
THIS_MODULE
)) {

219 
	`¥_îr
("cannot get module\n");

220 
eöfo
->
ªfcou¡
--;

221  -
ENODEV
;

224 
	}
}

227 
	$emlog_ªÀa£
(
öode
 *öode, 
fûe
 *file)

229 
emlog_öfo
 *
eöfo
;

230 
ªtvÆ
 = 0;

233 i‡((
eöfo
 = 
	`gë_eöfo
(
öode
)Ë=
NULL
) {

234 
	`¥_îr
("ˇ¿nŸ fëchÉöfÿf‹ inodê%ld.\n", 
öode
->
i_öo
);

235 
ªtvÆ
 = 
EIO
; 
out
;

241 
eöfo
->
ªfcou¡
--;

243 i‡(
eöfo
->
ªfcou¡
 =0 && (
emlog_auto‰ì
 || 
	`EMLOG_QLEN
(einfo) == 0))

244 
	`‰ì_eöfo
(
eöfo
);

246 
out
:

247 
	`moduÀ_put
(
THIS_MODULE
);

248  
ªtvÆ
;

249 
	}
}

256 * 
	$ªad_‰om_emlog
(
emlog_öfo
 * 
eöfo
, 
size_t
 * 
Àngth
,

257 
loff_t
 * 
off£t
)

259 *
ªtvÆ
;

260 
byãs_c›õd
 = 0, 
n
, 
°¨t_poöt
;

261 
size_t
 
ªmaöög
;

264 i‡(*
off£t
 < 
eöfo
->offset)

265 *
off£t
 = 
eöfo
->offset;

268 i‡(*
off£t
 >
	`EMLOG_FIRST_EMPTY_BYTE
(
eöfo
))

269  
NULL
;

273 *
Àngth
 = 
	`mö_t
(
size_t
, *Àngth, 
	`EMLOG_FIRST_EMPTY_BYTE
(
eöfo
Ë- *
off£t
);

274 
ªmaöög
 = *
Àngth
;

277 
°¨t_poöt
 = 
eöfo
->
ªad_poöt
 + (*
off£t
 -Éinfo->offset);

278 
°¨t_poöt
 = sèπ_poöà% 
eöfo
->
size
;

281 i‡((
ªtvÆ
 = 
	`kmÆloc
((Ë* 
ªmaöög
, 
GFP_KERNEL
)Ë=
NULL
)

282  
NULL
;

285 
ªmaöög
) {

286 
n
 = 
	`mö
(
ªmaöög
, 
eöfo
->
size
 - 
°¨t_poöt
);

287 
	`mem˝y
(
ªtvÆ
 + 
byãs_c›õd
, 
eöfo
->
d©a
 + 
°¨t_poöt
, 
n
);

288 
byãs_c›õd
 +
n
;

289 
ªmaöög
 -
n
;

290 
°¨t_poöt
 = (°¨t_poöà+ 
n
Ë% 
eöfo
->
size
;

294 *
off£t
 +*
Àngth
;

295  
ªtvÆ
;

296 
	}
}

298 
ssize_t
 
	$emlog_ªad
(
fûe
 *fûe, 
__u£r
 *
buf„r
,

299 
size_t
 
Àngth
,

300 
loff_t
 * 
off£t
)

302 
ªtvÆ
;

303 *
d©a_to_ªtu∫
;

304 
emlog_öfo
 *
eöfo
;

307 i‡((
eöfo
 = 
	`gë_eöfo
(
fûe
->
f_∑th
.
díåy
->
d_öode
)Ë=
NULL
) {

308 
	`¥_îr
("ˇ¿nŸ fëchÉöfÿf‹ inodê%ld.\n", ()(
fûe
->
f_∑th
.
díåy
->
d_öode
->
i_öo
));

309  -
EIO
;

313 i‡(
fûe
->
f_Êags
 & 
O_NONBLOCK


314 && *
off£t
 >
	`EMLOG_FIRST_EMPTY_BYTE
(
eöfo
))

315  -
EAGAIN
;

317 
	`waô_evít_öãºu±ibÀ
((
eöfo
)->
ªad_q
,

318 *
off£t
 <

319 (
eöfo
)->
off£t
 + 
	`EMLOG_QLEN
(einfo));

322 i‡(
	`sig«l_≥ndög
(
cuºít
))

323  -
ERESTARTSYS
;

325 i‡((
d©a_to_ªtu∫
 = 
	`ªad_‰om_emlog
(
eöfo
, &
Àngth
, 
off£t
)Ë=
NULL
)

328 i‡(
	`c›y_to_u£r
(
buf„r
, 
d©a_to_ªtu∫
, 
Àngth
) > 0)

329 
ªtvÆ
 = -
EFAULT
;

331 
ªtvÆ
 = 
Àngth
;

332 
	`k‰ì
(
d©a_to_ªtu∫
);

333  
ªtvÆ
;

334 
	}
}

338 
	$wrôe_to_emlog
(
emlog_öfo
 *
eöfo
, *
buf
, 
size_t
 
Àngth
)

340 
byãs_c›õd
 = 0;

341 
ovîÊow
 = 0;

342 
n
;

344 i‡(
Àngth
 + 
	`EMLOG_QLEN
(
eöfo
Ë>”öfo->
size
 - 1)) {

345 
ovîÊow
 = 1;

353 
eöfo
->
off£t
 =Éöfo->off£à+ 
	`EMLOG_QLEN
”öfoË+ 
Àngth


354 - 
eöfo
->
size
 + 1;

357 
Àngth
) {

360 
n
 = 
	`mö
(
Àngth
, 
eöfo
->
size
 -Éöfo->
wrôe_poöt
);

361 
	`mem˝y
(
eöfo
->
d©a
 +Éöfo->
wrôe_poöt
, 
buf
 + 
byãs_c›õd
, 
n
);

362 
byãs_c›õd
 +
n
;

363 
Àngth
 -
n
;

364 
eöfo
->
wrôe_poöt
 = (eöfo->wrôe_poöà+ 
n
Ë%Éöfo->
size
;

370 i‡(
ovîÊow
)

371 
eöfo
->
ªad_poöt
 = (eöfo->
wrôe_poöt
 + 1Ë%Éöfo->
size
;

372 
	}
}

374 
ssize_t
 
	$emlog_wrôe
(
fûe
 *file,

375 c⁄° 
__u£r
 *
buf„r
,

376 
size_t
 
Àngth
, 
loff_t
 * 
off£t
)

378 *
mesßge
 = 
NULL
;

379 
size_t
 
n
;

380 
emlog_öfo
 *
eöfo
;

383 i‡((
eöfo
 = 
	`gë_eöfo
(
fûe
->
f_∑th
.
díåy
->
d_öode
)Ë=
NULL
)

384  -
EIO
;

389 
n
 = 
	`mö
(
Àngth
, 
eöfo
->
size
 - 1);

392 i‡((
mesßge
 = 
	`kmÆloc
(
n
, 
GFP_KERNEL
)Ë=
NULL
)

393  -
ENOMEM
;

396 i‡(
	`c›y_‰om_u£r
(
mesßge
, 
buf„r
, 
n
) > 0) {

397 
	`k‰ì
(
mesßge
);

398  -
EFAULT
;

402 
	`wrôe_to_emlog
(
eöfo
, 
mesßge
, 
n
);

403 
	`k‰ì
(
mesßge
);

408 
	`wake_up_öãºu±ibÀ
(
	`EMLOG_READQ
(
eöfo
));

410  
n
;

411 
	}
}

413 
	$emlog_pﬁl
(
fûe
 *fûe, 
pﬁl_èbÀ_°ru˘
 * 
waô
)

415 
emlog_öfo
 *
eöfo
;

418 i‡((
eöfo
 = 
	`gë_eöfo
(
fûe
->
f_∑th
.
díåy
->
d_öode
)Ë=
NULL
)

419  -
EIO
;

421 
	`pﬁl_waô
(
fûe
, 
	`EMLOG_READQ
(
eöfo
), 
waô
);

423 i‡(
fûe
->
f_pos
 < 
	`EMLOG_FIRST_EMPTY_BYTE
(
eöfo
))

424  
POLLIN
 | 
POLLRDNORM
;

427 
	}
}

429 c⁄° 
fûe_›î©i⁄s
 
	gemlog_f›s
 = {

430 .
ªad
 = 
emlog_ªad
,

431 .
	gwrôe
 = 
emlog_wrôe
,

432 .
	g›í
 = 
emlog_›í
,

433 .
	gªÀa£
 = 
emlog_ªÀa£
,

434 .
	gpﬁl
 = 
emlog_pﬁl
,

435 .
	gŒ£ek
 = 
no_Œ£ek
,

436 .
	gow√r
 = 
THIS_MODULE
,

439 
__öô
 
	$dz_emlog_ígöe_öô
()

441 
ªt_vÆ
;

443 
ªt_vÆ
 = 
	`Æloc_chrdev_ªgi⁄
(&
emlog_dev_ty≥
, 
EMLOG_MINOR_BASE
, 
EMLOG_MINOR_COUNT
, 
DEVICE_NAME
);

444 i‡(
ªt_vÆ
 < 0) {

445 
	`¥_îr
("C™ÇŸáŒoc_chrdev_ªgi⁄,Éº‹ codê%d.\n", 
ªt_vÆ
);

449 
emlog_cdev
 = 
	`cdev_Æloc
();

450 i‡(
emlog_cdev
 =
NULL
) {

451 
	`¥_îr
("CanÇot cdev_alloc.\n");

452 
ªt_vÆ
 = -2; 
emlog_öô_îr‹
;

455 
emlog_cdev
->
›s
 = &
emlog_f›s
;

456 
emlog_cdev
->
ow√r
 = 
THIS_MODULE
;

458 
ªt_vÆ
 = 
	`cdev_add
(
emlog_cdev
, 
emlog_dev_ty≥
, 
EMLOG_MINOR_COUNT
);

459 i‡(
ªt_vÆ
 < 0) {

460 
	`¥_îr
("C™ÇŸ cdev_add,Éº‹ codê%d.\n", 
ªt_vÆ
);

461 
ªt_vÆ
 = -3; 
emlog_öô_îr‹
;

464 
	`¥_öfo
("vîsi⁄ %†ru¬ög, maj‹ i†%u, MINOR i†%u.\n", 
EMLOG_VERSION
, ()
	`MAJOR
(
emlog_dev_ty≥
), ()
	`MINOR
(emlog_dev_type));

466 
emlog_˛ass
 = 
	`˛ass_¸óã
(
THIS_MODULE
, 
DEVICE_NAME
);

467 i‡(
emlog_˛ass
 =
NULL
) {

468 
	`¥_îr
("CanÇot class_create.\n");

469 
ªt_vÆ
 = -4; 
emlog_öô_îr‹
;

472 
emlog_dev_ªg
 = 
	`devi˚_¸óã
(
emlog_˛ass
, 
NULL
, 
emlog_dev_ty≥
, NULL, 
DEVICE_NAME
);

473 i‡(
emlog_dev_ªg
 =
NULL
) {

474 
	`¥_îr
("CanÇot device_create.\n");

475 
ªt_vÆ
 = -5; 
emlog_öô_îr‹
;

478 
emlog_öô_okay
;

479 
emlog_öô_îr‹
:

480 i‡(
emlog_dev_ªg
Ë
	`devi˚_de°roy
(
emlog_˛ass
, 
emlog_dev_ty≥
);

481 i‡(
emlog_˛ass
Ë
	`˛ass_de°roy
(emlog_class);

482 i‡(
emlog_cdev
Ë
	`cdev_dñ
(emlog_cdev);

483 i‡(
emlog_dev_ty≥
Ë
	`uƒegi°î_chrdev_ªgi⁄
”mlog_dev_ty≥, 
EMLOG_MINOR_COUNT
);

484 
emlog_öô_okay
:

486 
	`LOGEM
(" ______________________________________________________ \n");

487 
	`LOGEM
("| |\n");

488 
	`LOGEM
("| ZAIDSTOR EMLog Engine Module Loaded |\n");

489 
	`LOGEM
("|______________________________________________________|\n");

491  
ªt_vÆ
;

492 
	}
}

494 
__exô
 
	$dz_emlog_ígöe_exô
()

497 
emlog_öfo_li°
 !
NULL
)

498 
	`‰ì_eöfo
(
emlog_öfo_li°
);

500 
	`devi˚_de°roy
(
emlog_˛ass
, 
emlog_dev_ty≥
);

501 
	`˛ass_de°roy
(
emlog_˛ass
);

502 
	`cdev_dñ
(
emlog_cdev
);

503 
	`uƒegi°î_chrdev_ªgi⁄
(
emlog_dev_ty≥
, 
EMLOG_MINOR_COUNT
);

508 
	`LOGEM
(" ______________________________________________________ \n");

509 
	`LOGEM
("| |\n");

510 
	`LOGEM
("| ZAIDSTOR EMLog Engine Module UnLoaded |\n");

511 
	`LOGEM
("|______________________________________________________|\n");

512 
	}
}

514 
moduÀ_öô
(
dz_emlog_ígöe_öô
);

515 
moduÀ_exô
(
dz_emlog_ígöe_exô
);

517 
MODULE_LICENSE
("GPL v2");

	@log_engine/mkemlog.c

14 
	~<°dio.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

17 
	~<uni°d.h
>

18 
	~<f˙é.h
>

19 
	~<°dlib.h
>

20 
	~<îr‹.h
>

21 
	~<î∫o.h
>

23 
	#EMLOG_DEVICE
 "/dev/emlog"

	)

24 
	#USAGE
 "ußge: mkemlog <logdev«me> [size_ö_kûobyãs] [mode]"

	)

26 
	$maö
(
¨gc
, ** 
¨gv
) {

27 
rc
;

28 
mode_t
 
mode
 = 0660;

29 
°©
 
emlog_°©
;

30 
size_of_buf„r
 = 8;

31 * 
fûe
;

32 * 
numbî
;

33 * 
íd_of_numbî
;

34 i‡(
¨gc
 < 2 ||árgc > 4) {

35 
	`îr‹
(1 ,0, 
USAGE
);

37 
fûe
 = 
¨gv
[1];

38 i‡(
¨gc
 > 2 ) {

39 
î∫o
 = 0;

40 
numbî
 = 
¨gv
[2];

41 
size_of_buf„r
 = 
	`°πﬁ
(
numbî
, &
íd_of_numbî
, 10);

42 i‡(
î∫o
) {

43 
	`îr‹
(1, 
î∫o
, "InvÆid sizê¥ovided\n" 
USAGE
);

45 i‡(
íd_of_numbî
 =
numbî
) {

46 
	`îr‹
(1, 0, "InvÆid sizê¥ovided\n" 
USAGE
);

48 i‡(
size_of_buf„r
 < 1 || size_of_buffer > 128 ) {

49 
	`îr‹
(1, 0, "InvÆid sizê¥ovided mu° bê®vÆuêbëwì¿1ánd 128\n" 
USAGE
);

52 i‡(
¨gc
 > 3 ) {

53 
î∫o
 = 0;

54 
numbî
 = 
¨gv
[3];

55 
mode
 = 
	`°πﬁ
(
numbî
, &
íd_of_numbî
, 8);

56 i‡(
î∫o
) {

57 
	`îr‹
(1, 
î∫o
, "InvÆid modê¥ovided\n" 
USAGE
);

59 i‡(
íd_of_numbî
 =
numbî
 || 
S_IFMT
 & 
mode
) {

60 
	`îr‹
(1, 0, "InvÆid modê¥ovided\n" 
USAGE
);

63 
rc
 = 
	`°©
(
EMLOG_DEVICE
, &
emlog_°©
);

64 i‡(
rc
 == -1) {

65 
	`îr‹
(1, 
î∫o
, "°©: " 
EMLOG_DEVICE
);

67 i‡(!
	`S_ISCHR
(
emlog_°©
.
°_mode
)) {

68 
	`îr‹
(1, 0, 
EMLOG_DEVICE
 " isÇotá validÉmlog device\n");

70 
rc
 = 
	`mknod
(
fûe
, 
mode
 | 
S_IFCHR
, 
	`makedev
(
	`maj‹
(
emlog_°©
.
°_rdev
),
size_of_buf„r
));

71 i‡(
rc
 == -1) {

72 
	`îr‹
(1, 
î∫o
, "mknod: %s", 
fûe
);

74 
	`¥ötf
("Log devi˚ %†¸óãd wôh buf„∏sizêo‡%d KiB\n", 
fûe
, 
size_of_buf„r
);

76 
	}
}

	@log_engine/nbcat.c

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<uni°d.h
>

30 
	~<f˙é.h
>

31 
	~<î∫o.h
>

33 
	$maö
(
¨gc
, *
¨gv
[])

35 
fd
, 
ªtvÆ
;

36 
buf
[4096];

38 i‡(
¨gc
 != 2) {

39 
	`Ârötf
(
°dîr
, "ußge: %†<fûíame>\n", 
¨gv
[0]);

40 
	`exô
(1);

43 i‡((
fd
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
 | 
O_NONBLOCK
)) < 0) {

44 
	`≥º‹
(
¨gv
[1]);

45 
	`exô
(1);

48 (
ªtvÆ
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0) {

49 i‡(
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
ªtvÆ
) < 0) {

50 
	`≥º‹
("writingÅo stdout");

55 i‡(
ªtvÆ
 < 0 && 
î∫o
 !
EAGAIN
) {

56 
	`≥º‹
(
¨gv
[1]);

57 
	`exô
(1);

61 
	}
}

	@metadata_engine/datumsoft_zaidstor_avm_5_B_metadata_engine_module.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

6 
MODULE_INFO
(
«me
, 
KBUILD_MODNAME
);

8 
__visibÀ
 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
KBUILD_MODNAME
,

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

15 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

18 #ifde‡
CONFIG_RETPOLINE


19 
MODULE_INFO
(
ªçﬁöe
, "Y");

22 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

23 
__u£d


24 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

25 { 0xe783361, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

26 { 0x822e„db, 
__VMLINUX_SYMBOL_STR
(
avm_mëad©a_bdev
) },

27 { 0xf9a482f9, 
__VMLINUX_SYMBOL_STR
(
m¶ìp
) },

28 { 0x83f9155b, 
__VMLINUX_SYMBOL_STR
(
num_mëad©a_Êush_thªads
) },

29 { 0x672edad8, 
__VMLINUX_SYMBOL_STR
(
pv_lock_›s
) },

30 { 0xe198d8af, 
__VMLINUX_SYMBOL_STR
(
dz_avm_log_fûe_wrôe
) },

31 { 0xdc7a74c9, 
__VMLINUX_SYMBOL_STR
(
mëad©a_Êush_thªad_poﬁ
) },

32 { 0x749d81a6, 
__VMLINUX_SYMBOL_STR
(
¥öt_mëad©a_block
) },

33 { 0x9edbbbØ, 
__VMLINUX_SYMBOL_STR
(
ªdu˚_mem‹y_ußge
) },

34 { 0x44ba2a60, 
__VMLINUX_SYMBOL_STR
(
dz_thªad_exô
) },

35 { 0xef6832„, 
__VMLINUX_SYMBOL_STR
(
lba_èbÀ_size
) },

36 { 0xc4407181, 
__VMLINUX_SYMBOL_STR
(
mëad©a_Êush_timî_°›
) },

37 { 0x43e9f918, 
__VMLINUX_SYMBOL_STR
(
METADATA_DISK_DEVICE
) },

38 { 0x75afd1db, 
__VMLINUX_SYMBOL_STR
(
log_mem‹y_ußge
) },

39 { 0xc3d2c1fd, 
__VMLINUX_SYMBOL_STR
(
dz_mem‹y_ªdu˘i⁄
) },

40 { 0x˚935a56, 
__VMLINUX_SYMBOL_STR
(
dz_k‰ì
) },

41 { 0xc57904d4, 
__VMLINUX_SYMBOL_STR
(
dz_swôch_dedu≥_ígöe
) },

42 { 0xˇ1c25a1, 
__VMLINUX_SYMBOL_STR
(
METADATA_FLUSH_THREAD_POOL_NAME
) },

43 { 0x999e8297, 
__VMLINUX_SYMBOL_STR
(
v‰ì
) },

44 { 0x7a2af7b4, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

45 { 0xb175e60d, 
__VMLINUX_SYMBOL_STR
(
dz_wrôe_∑ge_Æloc
) },

46 { 0x97651e6c, 
__VMLINUX_SYMBOL_STR
(
vmemm≠_ba£
) },

47 { 0x7beb76ˇ, 
__VMLINUX_SYMBOL_STR
(
pdz_basic_cou¡îs
) },

48 { 0xc4b19d63, 
__VMLINUX_SYMBOL_STR
(
kthªad_¸óã_⁄_node
) },

49 { 0xfb578fc5, 
__VMLINUX_SYMBOL_STR
(
mem£t
) },

50 { 0x9ba0175, 
__VMLINUX_SYMBOL_STR
(
mëad©a_lba_lock_èbÀ
) },

51 { 0x9b98c6c5, 
__VMLINUX_SYMBOL_STR
(
aiß_devi˚_obje˘
) },

52 { 0xf2a2c67d, 
__VMLINUX_SYMBOL_STR
(
dz_de°roy_thªad_poﬁ
) },

53 { 0x71a448f6, 
__VMLINUX_SYMBOL_STR
(
mëad©a_Êush_öãrvÆ
) },

54 { 0x4ff67Áb, 
__VMLINUX_SYMBOL_STR
(
cuºít_èsk
) },

55 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

56 { 0xb5275728, 
__VMLINUX_SYMBOL_STR
(
kthªad_°›
) },

57 { 0x5c3c34b4, 
__VMLINUX_SYMBOL_STR
(
mëad©a_lba_èbÀ_size
) },

58 { 0xa1c76e0a, 
__VMLINUX_SYMBOL_STR
(
_c⁄d_ªsched
) },

59 { 0xìff0455, 
__VMLINUX_SYMBOL_STR
(
pba_èbÀ_size
) },

60 { 0xc7bb8865, 
__VMLINUX_SYMBOL_STR
(
mëad©a_lba_lock_èbÀ_size
) },

61 { 0x7378847c, 
__VMLINUX_SYMBOL_STR
(
dz_swôch_∑s°hrough_mode
) },

62 { 0x887e554f, 
__VMLINUX_SYMBOL_STR
(
su≥rblock
) },

63 { 0xc21d98ì, 
__VMLINUX_SYMBOL_STR
(
METADATA_FLUSH_THREAD_POOL_SHORT_NAME
) },

64 { 0x7cd8d75e, 
__VMLINUX_SYMBOL_STR
(
∑ge_off£t_ba£
) },

65 { 0xd24da7de, 
__VMLINUX_SYMBOL_STR
(
dz_gë_mem‹y_ußge
) },

66 { 0x1d1dc„e, 
__VMLINUX_SYMBOL_STR
(
dz_mem‹y_c⁄sum±i⁄
) },

67 { 0x4a9865a8, 
__VMLINUX_SYMBOL_STR
(
dz_¸óã_thªad_poﬁ
) },

68 { 0xf4f37145, 
__VMLINUX_SYMBOL_STR
(
dz_ªad_∑ge_‰ì
) },

69 { 0x5635a60a, 
__VMLINUX_SYMBOL_STR
(
vmÆloc_u£r
) },

70 { 0x8ddd8Ød, 
__VMLINUX_SYMBOL_STR
(
scheduÀ_timeout
) },

71 { 0x6b2dc060, 
__VMLINUX_SYMBOL_STR
(
dump_°ack
) },

72 { 0x74da9d82, 
__VMLINUX_SYMBOL_STR
(
dz_wrôe_∑ge_‰ì
) },

73 { 0x13bb1b43, 
__VMLINUX_SYMBOL_STR
(
wake_up_¥o˚ss
) },

74 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

75 { 0x9697ba7d, 
__VMLINUX_SYMBOL_STR
(
dz_ªad_∑ge_‰om_øw_disk_sync
) },

76 { 0x56321´2, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock
) },

77 { 0x3a8c9940, 
__VMLINUX_SYMBOL_STR
(
dz_wrôe_∑ge_to_øw_disk_sync
) },

78 { 0x6dØ3cdf, 
__VMLINUX_SYMBOL_STR
(
mëad©a_lba_èbÀ
) },

79 { 0x8f5136ef, 
__VMLINUX_SYMBOL_STR
(
hash_èbÀ_size
) },

80 { 0xb3f7646e, 
__VMLINUX_SYMBOL_STR
(
kthªad_should_°›
) },

81 { 0x69acdf38, 
__VMLINUX_SYMBOL_STR
(
mem˝y
) },

82 { 0xÁd4d81c, 
__VMLINUX_SYMBOL_STR
(
MurmurHash3_x64_128
) },

83 { 0x2ac56908, 
__VMLINUX_SYMBOL_STR
(
DATA_DISK_DEVICE
) },

84 { 0x2787„9d, 
__VMLINUX_SYMBOL_STR
(
mëad©a_Êush_timî_thªad
) },

85 { 0x7f02188f, 
__VMLINUX_SYMBOL_STR
(
__m£cs_to_jiffõs
) },

86 { 0x´bd92d, 
__VMLINUX_SYMBOL_STR
(
dz_kmÆloc
) },

89 c⁄° 
	g__moduÀ_dïíds
[]

90 
__u£d


91 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

95 
MODULE_INFO
(
§cvîsi⁄
, "CBE5E4B63C4EB5B0B772E46");

	@metadata_engine/metadata_engine.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#dz_md_ígöe_öô
 
dz_mëad©a_ígöe_öô


	)

12 
PBLOCK_DEVICE
 
METADATA_DISK_DEVICE
;

13 
PBLOCK_DEVICE
 
DATA_DISK_DEVICE
;

14 
U64
 
lba_èbÀ_size
;

15 
PSUPERBLOCK
 
su≥rblock
;

16 
INT
 
dz_swôch_∑s°hrough_mode
;

17 
USHORT
 
num_mëad©a_Êush_thªads
;

18 
THREAD
 *
mëad©a_Êush_timî_thªad
;

20 
INT
 
dz_swôch_dedu≥_ígöe
;

25 
U64
 
mëad©a_lba_èbÀ_size
;

26 
PMDD_BLOCK
 
mëad©a_lba_èbÀ
;

28 
U64
 
mëad©a_lba_lock_èbÀ_size
;

29 
PMD_LOCK
 
mëad©a_lba_lock_èbÀ
;

31 
INLINE
 
PMD_BLOCK
 
	$GET_MDB_ENTRY
(
U64
 
lba
)

33  (&
mëad©a_lba_èbÀ
[
lba
]);

34 
	}
}

35 
EXPORT_SYMBOL
(
GET_MDB_ENTRY
);

37 
VOID
 
	$dz_gíî©e_hash
(
VOID
 *
d©a
, 
SIZE
 
size
, 
PVOID
 
ouçut_hash
)

39 
U32
 
£ed
 = 0;

42 
	`MurmurHash3_x64_128
 (
d©a
, 
size
, 
£ed
, 
ouçut_hash
);

43 
	}
}

44 
EXPORT_SYMBOL
(
dz_gíî©e_hash
);

46 
VOID
 
	$dz_md_öô_cou¡îs
(
VOID
)

48 
	`BASE_COUNTER_U64_SET
(
md_ígöe_mem‹y_ußge
, 0);

49 
	}
}

51 
RINT
 
	$dz_mëad©a_block_öô
(
VOID
)

58 i‡(
dz_swôch_dedu≥_ígöe
 =
DZ_DISABLED
) {

59 
	`LOGMETF
("Dedupe Engine is Disabled. MetaData Block Initialization Disabled \n");

60 
RETURNS
;

63 
mëad©a_lba_èbÀ_size
 = 
lba_èbÀ_size
;

65 i‡(!(
mëad©a_lba_èbÀ
 = 
	`dz_¸óã_mëad©a_èbÀ
(
mëad©a_lba_èbÀ_size
))) {

66 
	`LOGMETE
("AISA-Error: UnableÅo create metadataÅable\n");

67  -
ENOMEM
;

71 
su≥rblock
->
mëad©a_lba_èbÀ_size
 = metadata_lba_table_size;

72 
su≥rblock
->
mëad©a_lba_block_size
 = 
METADATA_BLOCK_SIZE
;

79 
mëad©a_lba_lock_èbÀ_size
 = 
mëad©a_lba_èbÀ_size
 / (
SECTOR_SIZE
 / 
METADATA_BLOCK_SIZE
);

80 
mëad©a_lba_lock_èbÀ
 = 
	`dz_¸óã_mëad©a_lock_èbÀ
(
mëad©a_lba_lock_èbÀ_size
);

81 i‡(!
mëad©a_lba_lock_èbÀ
) {

82 
	`LOGMETE
("AISA-Error: UnableÅo create metadataÜockárray \n");

83  -
ENOMEM
;

85 
su≥rblock
->
mëad©a_lba_lock_èbÀ_size
 = metadata_lba_lock_table_size;

86 
su≥rblock
->
mëad©a_lba_lock_block_size
 = 
SECTOR_SIZE
;

87 
RETURNS
;

88 
	}
}

90 
VOID
 
	$dz_mëad©a_block_exô
(
VOID
)

92 i‡(
dz_swôch_dedu≥_ígöe
 =
DZ_DISABLED
) {

93 
	`LOGMETF
("Dedupe Engine is Disabled. MetaData Block Initialization Disabled \n");

96 
	`dz_de°roy_mëad©a_lock_èbÀ
();

97 
	`dz_de°roy_mëad©a_èbÀ
();

98 
	}
}

100 
RINT
 
	$dz_mëad©a_ígöe_öô
(
VOID
)

102 
INT
 
ªt
 = 
SUCCESS
;

103 
	`MARK_MEMORY_USAGE
();

104 
	`LOGMETF
(" ______________________________________________________ \n");

105 
	`LOGMETF
("| |\n");

106 
	`LOGMETF
("| Metadata (MD) Engine Initialization Begin |\n");

107 
	`LOGMETF
("|______________________________________________________|\n");

109 
ªt
 = 
	`dz_mëad©a_¸óã_Êush_thªad_poﬁ
(
num_mëad©a_Êush_thªads
);

114 
	`SLEEP_MILLI_SECONDS
(300);

115 
mëad©a_Êush_timî_thªad
 = 
	`kthªad_run
 (
dz_mëad©a_Êush_timî
, 
NULL
, "flush_timer_thread");

116 i‡(
	`IS_ERR
(
mëad©a_Êush_timî_thªad
)) {

117 
	`LOGMETE
("UnableÅo create flushÅimerÅhread\n");

118 
exô_Áûuª
;

122 
ªt
 = 
	`dz_su≥rblock_öô
();

123 i‡(
ªt
) {

124 
ªt
 = -
EIO
;

125 
exô_Áûuª
;

127 
	`LOGMETF
("Superblock Initialized. Printing Superblock\n");

128 
	`¥öt_su≥rblock
(
su≥rblock
);

129 
ªt
 = 
	`dz_mëad©a_block_öô
();

130 i‡(
ªt
) {

131 
exô_Áûuª
;

133 
	`LOGMETF
("Metadata Block Initialized.\n");

135 
	`PRINT_MEMORY_USAGE
(
	`BASE_COUNTER_U64_GET
(
md_ígöe_mem‹y_ußge
), "MD Engine");

136 
	`LOGMETF
(" ______________________________________________________ \n");

137 
	`LOGMETF
("| |\n");

138 
	`LOGMETF
("| Metadata (MD) Engine Initialization End |\n");

139 
	`LOGMETF
("|______________________________________________________|\n");

141 
RETURNS
;

143 
exô_Áûuª
:

144 
	`dz_mëad©a_ígöe_exô
();

145 
	`LOGMETF
(" ______________________________________________________ \n");

146 
	`LOGMETF
("| |\n");

147 
	`LOGMETF
("| Metadata (MD) Engine Initialization Failed |\n");

148 
	`LOGMETF
("|______________________________________________________|\n");

149 
RETURN
;

150 
	}
}

151 
EXPORT_SYMBOL
(
dz_mëad©a_ígöe_öô
);

153 
VOID
 
	$dz_mëad©a_ígöe_exô
(
VOID
)

155 
	`MARK_MEMORY_USAGE
();

156 
	`LOGMETF
(" ______________________________________________________ \n");

157 
	`LOGMETF
("| |\n");

158 
	`LOGMETF
("| Metadata (MD) Engine Exit Begin |\n");

159 
	`LOGMETF
("|______________________________________________________|\n");

161 
	`dz_mëad©a_Êush_timî_°›
();

162 
	`dz_de°roy_Êush_thªad_poﬁ
();

163 
	`dz_su≥rblock_exô
();

164 
	`dz_mëad©a_block_exô
();

166 
	`PRINT_MEMORY_FREED
(
	`BASE_COUNTER_U64_GET
(
md_ígöe_mem‹y_ußge
), "MD Engine");

167 
	`LOGMETF
(" ______________________________________________________ \n");

168 
	`LOGMETF
("| |\n");

169 
	`LOGMETF
("| Metadata (MD) Engine Exit End |\n");

170 
	`LOGMETF
("|______________________________________________________|\n");

173 
	}
}

174 
EXPORT_SYMBOL
(
dz_mëad©a_ígöe_exô
);

178 
	$dz_mëad©a_ígöe_moduÀ_öô
()

180 
	`LOGMETF
(" ______________________________________________________ \n");

181 
	`LOGMETF
("| |\n");

182 
	`LOGMETF
("| ZAIDSTOR Metadata Engine Module Loaded |\n");

183 
	`LOGMETF
("|______________________________________________________|\n");

185 
RETURNS
;

186 
	}
}

188 
	$dz_mëad©a_ígöe_moduÀ_exô
()

190 
	`LOGMETF
(" ______________________________________________________ \n");

191 
	`LOGMETF
("| |\n");

192 
	`LOGMETF
("| ZAIDSTOR Metadata Engine Module Unloaded |\n");

193 
	`LOGMETF
("|______________________________________________________|\n");

194 
	}
}

196 
moduÀ_öô
(
dz_mëad©a_ígöe_moduÀ_öô
);

197 
moduÀ_exô
(
dz_mëad©a_ígöe_moduÀ_exô
);

198 
MODULE_LICENSE
(
DZ_MODULE_LICENSE
);

199 
MODULE_AUTHOR
(
DZ_MODULE_AUTHOR
);

	@metadata_engine/metadata_engine_sysfs_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

18 
INT
 
dz_swôch_„c_ígöe
;

19 
INT
 
dz_swôch_bec_ígöe
;

20 
INT
 
dz_swôch_dedu≥_ígöe
;

21 
INT
 
dz_swôch_Æignmít_ígöe
;

25 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

26 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

31 
SIZE
 
TARGET_DEVICE_SIZE
;

33 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

34 
NAME
 
DATA_DISK_DEVICE_NAME
;

35 
OBJECT_LIST
 
globÆ_obje˘_li°
;

36 
U64
 
lba_èbÀ_size
;

37 
U64
 
pba_èbÀ_size
;

38 
U64
 
hash_èbÀ_size
;

39 
U32
 
numbî_of_l⁄gs_f‹_pba
;

40 
U32
 
numbî_of_l⁄gs_f‹_lba
;

41 
U32
 
numbî_of_l⁄gs_f‹_gpba
;

42 
ULONG
 
mëad©a_Êush_öãrvÆ
;

43 
U64
 
mëad©a_lba_èbÀ_size
;

44 
U64
 
mëad©a_lba_lock_èbÀ_size
;

45 
U64
 
avm_sysfs_íåy_‰ì_∑ge_cou¡
;

46 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes
[
DZ_SYSFS_PAGE_SIZE
];

47 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
[
DZ_SYSFS_PAGE_SIZE
];

48 
PPBA_BLOCK
 
pba_èbÀ
;

49 
PHASH_BLOCK
 
hash_èbÀ
;

50 
PLBA_BLOCK
 
lba_èbÀ
;

52 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

53 
ATOMIC64
 
bec_ˇche_hô
;

54 
ATOMIC64
 
bec_ˇche_miss
;

55 
ATOMIC64
 
bec_ˇche_dñëe
;

56 
ULONG
 
bec_size
;

57 
INT
 
bec_cutoff_nodes
;

58 
INT
 
bec_cutoff_≥r˚¡
;

59 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

60 
U64
 
time_Êush_¥ï¨e_°¨t
;

61 
U64
 
time_Êush_°¨t
;

62 
U64
 
time_Êush_íd
;

63 
U64
 
time_„c_wrôe_°¨t
;

64 
U64
 
time_„c_wrôe_swôch
;

65 
PFEC_TABLE
 
„c_èbÀs_Êush
;

66 
ATOMIC64
 
„c_a˘ive_cou¡_£quí˚
;

67 
ATOMIC64
 
„c_‰ì_cou¡_£quí˚
;

68 
ATOMIC64
 
„c_cur_Êush_cou¡
;

69 
ATOMIC64
 
„c_Êush_›s_cou¡
;

70 
ATOMIC64
 
„c_cur_Êush_›s_cou¡
;

71 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

72 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

73 
U64
 
„c_a˘ive_cou¡
;

74 
ATOMIC64
 
dedu≥_disk_ªads
;

75 
ATOMIC64
 
dedu≥_disk_wrôes
;

76 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

77 
ATOMIC64
 
dedu≥_ˇche_hôs
;

78 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

79 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

80 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

81 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

82 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

83 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

84 
USHORT
 
dedu≥_num_thªads
;

85 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

86 
PDZ_THREAD_POOL
 
rdedu≥_thªad_poﬁ
;

87 
PDZ_THREAD_POOL
 
wdedu≥_thªad_poﬁ
;

88 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

89 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

90 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

91 
PDZ_THREAD_POOL
 
Æign_wrôe_thªad_poﬁ
;

92 
PDZ_THREAD_POOL
 
Êush_thªad_poﬁ
;

93 
PDZ_THREAD_POOL
 
mëad©a_Êush_thªad_poﬁ
;

94 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡
;

95 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads
;

96 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
;

97 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
;

98 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
;

99 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

100 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

101 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

102 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

103 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

104 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

105 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

107 
ATOMIC64
 
Æign_iocou¡_disk_ªad
;

108 
ATOMIC64
 
Æign_iocou¡_disk_ªad_öã∫Æ
;

109 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

110 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

111 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

112 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

113 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

114 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

115 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

117 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes
;

118 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
;

119 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
;

120 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
;

121 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

122 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

123 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

124 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

125 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

126 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

127 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

129 
ATOMIC64
 
Æign_iocou¡_disk_wrôe
;

130 
ATOMIC64
 
Æign_iocou¡_disk_wrôe_öã∫Æ
;

131 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

132 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

133 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

134 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

135 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

136 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

137 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

139 
PSUPERBLOCK
 
su≥rblock
;

141 
CHAR
 
avm_sysfs_íåy_gë_su≥rblock
[
DZ_SYSFS_PAGE_SIZE
];

142 
INT
 
	$avm_gë_su≥rblock
(
CHAR
 *
buf
)

144 
INT
 
cou¡
 = 0;

145 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_su≥rblock
;

146 
	`mem£t
(
avm_sysfs_íåy_gë_su≥rblock
, 0, 
DZ_SYSFS_PAGE_SIZE
);

147 
	`mem˝y
(
±r
, "\n", 1);

148 
±r
 += 1;

149 
±r
 +
	`•rötf
(ptr, "===================================================================\n");

150 
±r
 +
	`•rötf
(ptr, "SUPERBLOCK STRUCTURE\n");

151 
±r
 +
	`•rötf
(ptr, "===================================================================\n");

153 i‡(!
su≥rblock
) {

154 
±r
 +
	`•rötf
(ptr, "Superblock is NULL\n");

158 
cou¡
 = 
	`•rötf
(
±r
,

176 
su≥rblock
->
vîsi⁄
,

177 
su≥rblock
->
mëad©a_dev_magi˙o
,

178 
su≥rblock
->
mëad©a_dev_«me
,

179 
su≥rblock
->
mëad©a_dev_uuid
,

180 
su≥rblock
->
mëad©a_off£t
,

181 
su≥rblock
->
d©a_dev_magi˙o
,

182 
su≥rblock
->
d©a_dev_«me
,

183 
su≥rblock
->
d©a_dev_uuid
,

184 
su≥rblock
->
lba_èbÀ_size
,

185 
su≥rblock
->
lba_block_size
,

186 
su≥rblock
->
mëad©a_lba_èbÀ_size
,

187 
su≥rblock
->
mëad©a_lba_block_size
,

188 
su≥rblock
->
mëad©a_lba_lock_èbÀ_size
,

189 
su≥rblock
->
mëad©a_lba_lock_block_size
,

190 
su≥rblock
->
pba_èbÀ_size
,

191 
su≥rblock
->
pba_block_size
,

192 
su≥rblock
->
hash_èbÀ_size


196 
	}
}

198 
CHAR
 
avm_sysfs_íåy_gë_mëad©a_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
];

199 
INT
 
	$avm_gë_mëad©a_cou¡îs
(
CHAR
 *
buf
)

201 
INT
 
cou¡
 = 0;

202 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_mëad©a_cou¡îs
;

203 
	`mem£t
(
avm_sysfs_íåy_gë_mëad©a_cou¡îs
, 0, 
DZ_SYSFS_PAGE_SIZE
);

204 
	`mem˝y
(
±r
, "\n", 1);

205 
±r
 += 1;

206 
±r
 +
	`•rötf
(ptr, "===================================\n");

207 
±r
 +
	`•rötf
(ptr, "METADATA ENGINE (MDE) COUNTERS\n");

208 
±r
 +
	`•rötf
(ptr, "===================================\n");

211 i‡(!
su≥rblock
) {

212 
±r
 +
	`•rötf
(ptr, "Superblock is NULL");

217 
cou¡
 = 
	`•rötf
(
±r
,

221 
mëad©a_Êush_thªad_poﬁ
->
num_thªads
,

222 
mëad©a_Êush_thªad_poﬁ
->
«me
,

223 (
ULONG
)
mëad©a_Êush_öãrvÆ


226 
±r
 +
cou¡
;

227 
±r
 +
	`•rötf
’å, "MDE LBA TabÀ Size................%Œu ", 
mëad©a_lba_èbÀ_size
);

228 
±r
 +
	`•rötf
’å, "%Œu GB ", (
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
/
GB
));

229 
±r
 +
	`•rötf
’å, "%Œu MB ", (
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
/
MB
));

230 
±r
 +
	`•rötf
’å, "%Œu KB ", (
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
/
KB
));

231 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
);

233 
±r
 +
	`•rötf
’å, "MDE LBA Lock TabÀ Size...........%Œu ", 
mëad©a_lba_lock_èbÀ_size
);

234 
±r
 +
	`•rötf
’å, "%Œu GB ", (
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
)/
GB
));

235 
±r
 +
	`•rötf
’å, "%Œu MB ", (
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
)/
MB
));

236 
±r
 +
	`•rötf
’å, "%Œu KB ", (
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
)/
KB
));

237 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
));

241 
	`LOGD
("Buf„∏Byã†u£d = %d\n", 
cou¡
);

244 
	}
}

	@metadata_engine/metadata_flush.c

9 
	~"¥ŸŸy≥s.h
"

10 
PDZ_THREAD_POOL
 
mëad©a_Êush_thªad_poﬁ
;

13 
BOOL
 
mëad©a_Êush_timî_°›
;

14 
ULONG
 
mëad©a_Êush_öãrvÆ
;

15 
THREAD
 *
mëad©a_Êush_timî_thªad
;

17 
U64
 
time_Êush_¥ï¨e_°¨t
;

18 
U64
 
time_Êush_°¨t
;

19 
U64
 
time_Êush_íd
 ;

21 
PCHAR
 
METADATA_FLUSH_THREAD_POOL_NAME
;

22 
PCHAR
 
METADATA_FLUSH_THREAD_POOL_SHORT_NAME
;

26 
RVOID
 
	$dz_mëad©a_Êush_°¨t_‰om_timî_c⁄ãxt
(
VOID
)

29 
	}
}

33 
RINT
 
	$dz_mëad©a_Êush_timî
(
PVOID
 
d©a
)

35 
scheduÀd_time
 = 0;

36 
	`LOGMETF
("Metadata Flush Timer Started\n");

38 !
	`kthªad_should_°›
(Ë&& !
mëad©a_Êush_timî_°›
) {

40 
scheduÀd_time
 = 
	`m£cs_to_jiffõs
(
mëad©a_Êush_öãrvÆ
 * 1000);

41 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

42 
	`scheduÀ_timeout
(
scheduÀd_time
);

43 i‡(
	`kthªad_should_°›
()) {

47 i‡(
mëad©a_Êush_timî_°›
) {

48 
	`LOGMET
("Metadata Flush Timer Thread gettingÉxited\n");

49 
	`dz_thªad_exô
();

55 
	`LOGMETF
("Metadata Flush Timer Stopped\n");

56 
RETURNS
;

57 
	}
}

59 
RVOID
 
	$dz_mëad©a_Êush_timî_°›
(
VOID
)

61 i‡(
mëad©a_Êush_timî_thªad
) {

62 
mëad©a_Êush_timî_°›
 = 
TRUE
;

63 
	`kthªad_°›
(
mëad©a_Êush_timî_thªad
);

65 
	}
}

69 
RINT
 
	$dz_mëad©a_¸óã_Êush_thªad_poﬁ
(
INT
 
num_thªads
)

71 
PDZ_THREAD_POOL
 
ç
 = 
NULL
;

72 
ç
 = 
	`dz_¸óã_thªad_poﬁ
(

73 
METADATA_FLUSH_THREAD_POOL_NAME
, 
METADATA_FLUSH_THREAD_POOL_SHORT_NAME
,

74 
num_thªads
, 
NULL
, NULL, 
dz_mëad©a_Êush_io
);

75 i‡(
ç
) {

76 
	`LOGMETF
("%s created successfully for %dÅhreads \n",

77 
METADATA_FLUSH_THREAD_POOL_NAME
, 
num_thªads
);

78 
mëad©a_Êush_thªad_poﬁ
 = 
ç
;

79 
RETURNS
;

81 
	`LOGMETE
("%†¸óti⁄ faûed \n", 
METADATA_FLUSH_THREAD_POOL_NAME
);

82 
RETURNF
;

84  
SUCCESS
;

85 
	}
}

87 
RVOID
 
	$dz_de°roy_Êush_thªad_poﬁ
(
VOID
)

89 
	`dz_de°roy_thªad_poﬁ
(
mëad©a_Êush_thªad_poﬁ
);

90 
	}
}

92 
RVOID
 
	$dz_mëad©a_Êush_io
(
PIOREQUEST
 
∑ª¡_i‹eque°
)

95 
	}
}

	@metadata_engine/metadata_superblock.c

9 
	~"¥ŸŸy≥s.h
"

11 
INT
 
dz_swôch_∑s°hrough_mode
;

12 
PBLOCK_DEVICE
 
METADATA_DISK_DEVICE
;

13 
PBLOCK_DEVICE
 
DATA_DISK_DEVICE
;

14 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

15 
U64
 
lba_èbÀ_size
;

16 
U64
 
pba_èbÀ_size
;

17 
U64
 
hash_èbÀ_size
;

19 
PSUPERBLOCK
 
su≥rblock
;

24 
U64
 
mëad©a_lba_èbÀ_size
;

25 
PMDD_BLOCK
 
mëad©a_lba_èbÀ
;

27 
U64
 
mëad©a_lba_lock_èbÀ_size
;

28 
PMD_LOCK
 
mëad©a_lba_lock_èbÀ
;

30 
PSUPERBLOCK
 
	$dz_su≥rblock_Æloc
(
VOID
)

32 
PVOID
 
∑gebuf
;

33 
PPAGE
 
∑ge
 = 
NULL
;

40 
∑ge
 = 
	`dz_wrôe_∑ge_Æloc
();

41 i‡(
∑ge
) {

42 
∑gebuf
 = 
	`km≠
(
∑ge
);

43 
	`mem£t
(
∑gebuf
, 0, 
PAGE_SIZE
);

44 
	`kunm≠
(
∑ge
);

46 
su≥rblock
 = 
	`dz_kmÆloc
((
SUPERBLOCK
), 
GFP_KERNEL
);

47 i‡(!
su≥rblock
) {

48 
	`BUG_ON
(1);

50 
	`MEMSET
(
su≥rblock
);

51 
su≥rblock
->
∑ge
 =Öage;

52  
su≥rblock
;

54 
	`LOGE
("UnableÅoállocate superblock\n");

55 
	`BUG_ON
(1);

56  
NULL
;

58 
	}
}

60 
RVOID
 
	$dz_su≥rblock_‰ì
(
PSUPERBLOCK
 
±r
)

62 i‡(
±r
) {

63 
	`dz_wrôe_∑ge_‰ì
(
±r
->
∑ge
);

64 
	`dz_k‰ì
(
±r
, (
SUPERBLOCK
));

66 
	}
}

68 
RVOID
 
	$¥öt_su≥rblock
(
PSUPERBLOCK
 
sb
)

70 
	`LOGMET
("Printing Superblock Information\n");

71 
	`LOGMET
(" vîsi⁄ = %s\n", 
sb
->
vîsi⁄
);

72 
	`LOGMET
("mëad©a_dev_magi˙ÿ%s\n", 
sb
->
mëad©a_dev_magi˙o
);

73 
	`LOGMET
(" mëad©a_dev_«mê%s\n", 
sb
->
mëad©a_dev_«me
);

74 
	`LOGMET
(" mëad©a_dev_uuid = %s\n", 
sb
->
mëad©a_dev_uuid
);

75 
	`LOGMET
(" mëad©a_off£à = %Œu\n", 
sb
->
mëad©a_off£t
);

77 
	`LOGMET
(" d©a_dev_magi˙ÿ%s\n", 
sb
->
d©a_dev_magi˙o
);

78 
	`LOGMET
(" d©a_dev_«mê%s\n", 
sb
->
d©a_dev_«me
);

79 
	`LOGMET
(" d©a_dev_uuid = %s\n", 
sb
->
d©a_dev_uuid
);

81 
	`LOGMET
("Üba_èbÀ_sizê%Œu\n", 
sb
->
lba_èbÀ_size
);

82 
	`LOGMET
("Öba_èbÀ_sizê%Œu\n", 
sb
->
pba_èbÀ_size
);

83 
	`LOGMET
(" hash_èbÀ_sizê%Œu\n", 
sb
->
hash_èbÀ_size
);

84 
	}
}

86 
RINT
 
	$dz_su≥rblock_ªad
(
VOID
)

88 
PSUPERBLOCK
 
su≥rblock
 = 
NULL
;

89 
SECTOR
 
su≥rblk_£˘‹
 = 0;

90 
SECTOR
 
su≥rblk_size
 = 
PAGE_SIZE
;

91 
PPAGE
 
ªad_∑ge
 = 
NULL
;

92 
PVOID
 
∑gebuf
;

93 
PVOID
 
∑gebuf2
;

94 
ªad_∑ge
 = 
	`dz_ªad_∑ge_‰om_øw_disk_sync
(
METADATA_DISK_DEVICE
, 
su≥rblk_£˘‹
, 
su≥rblk_size
);

96 i‡(
ªad_∑ge
) {

97 
∑gebuf
 = 
	`km≠
(
ªad_∑ge
);

98 
∑gebuf2
 = 
	`km≠
(
su≥rblock
->
∑ge
);

99 
	`mem˝y
(
su≥rblock
, 
∑gebuf
, (
SUPERBLOCK
));

100 
	`mem˝y
(
∑gebuf2
, 
∑gebuf
, 
PAGE_SIZE
);

101 
	`kunm≠
(
su≥rblock
->
∑ge
);

102 
	`kunm≠
(
ªad_∑ge
);

103 
RETURNS
;

105 
RETURNF
;

107 
	}
}

113 
RINT
 
	$dz_su≥rblock_wrôe
(
PSUPERBLOCK
 
su≥rblock
)

115 
SECTOR
 
£˘‹
 = 
SUPERBLOCK_SECTOR
;

118 if(
	`dz_wrôe_∑ge_to_øw_disk_sync
(
DATA_DISK_DEVICE
, 
£˘‹
, 
SUPERBLOCK_SIZE
, 
su≥rblock
->
∑ge
)) {

119 
	`LOGMETE
("Error in writing superblock informationÅo metadata disk\n");

120 
RETURNF
;

122 
	`LOGMET
("Su≥rblock wrôã¿tÿmëad©®devi˚ %†© se˘‹ %Œu\n", 
su≥rblock
->
mëad©a_dev_«me
, (
U64
)
£˘‹
);

123 
RETURNS
;

125 
	}
}

131 
RINT
 
	$dz_su≥rblock_öô
(
VOID
)

133 
PVOID
 
∑gebuf
 = 
NULL
;

134 
U32
 *
hash_¨øy
 = 
NULL
;

135 
INT
 
ªt
 = 
SUCCESS
;

136 
su≥rblock
 = 
	`dz_su≥rblock_Æloc
();

138 
	`mem˝y
(
su≥rblock
->
mëad©a_dev_magi˙o
,

139 
aiß_devi˚_obje˘
->
mëad©a_dev_magi˙o
, 
MAGICNO_LENGTH
);

140 
	`mem˝y
(
su≥rblock
->
mëad©a_dev_«me
,

141 
aiß_devi˚_obje˘
->
mëad©a_dev_«me
, 
NAME_LENGTH
);

142 
	`mem˝y
(
su≥rblock
->
mëad©a_dev_uuid
,

143 
aiß_devi˚_obje˘
->
mëad©a_dev_uuid
, 
UUID_LENGTH
);

145 
	`mem˝y
(
su≥rblock
->
d©a_dev_magi˙o
,

146 
aiß_devi˚_obje˘
->
d©a_dev_magi˙o
, 
MAGICNO_LENGTH
);

147 
	`mem˝y
(
su≥rblock
->
d©a_dev_«me
,

148 
aiß_devi˚_obje˘
->
d©a_dev_«me
, 
NAME_LENGTH
);

149 
	`mem˝y
(
su≥rblock
->
d©a_dev_uuid
,

150 
aiß_devi˚_obje˘
->
d©a_dev_uuid
, 
UUID_LENGTH
);

152 
su≥rblock
->
lba_èbÀ_size
 =Üba_table_size;

153 
su≥rblock
->
lba_block_size
 = 
LBA_BLOCK_SIZE
;

154 
su≥rblock
->
pba_èbÀ_size
 =Öba_table_size;

155 
su≥rblock
->
pba_block_size
 = 
PBA_BLOCK_SIZE
;

156 
su≥rblock
->
hash_èbÀ_size
 = hash_table_size;

157 
su≥rblock
->
hash_size
 = (
HASH
);

158 
su≥rblock
->
mëad©a_off£t
 = (
SUPERBLOCK_RESERVED_SECTORS
 * 
SECTOR_SIZE
);

160 
	`°r˝y
(
su≥rblock
->
vîsi⁄
, 
DZ_VERSION
);

161 
hash_¨øy
 = (
U32
 *)&
su≥rblock
->
checksum
;

162 
	`dz_gíî©e_hash
(
su≥rblock
, (
SUPERBLOCK
), 
hash_¨øy
);

163 
	`mem˝y
((
PVOID
)&(
su≥rblock
->
checksum
), 
hash_¨øy
, (
HASH
));

165 
∑gebuf
 = 
	`km≠
(
su≥rblock
->
∑ge
);

166 
	`mem˝y
(
∑gebuf
, 
su≥rblock
, (
SUPERBLOCK
));

167 
	`kunm≠
(
su≥rblock
->
∑ge
);

169 i‡(
dz_swôch_∑s°hrough_mode
) {

171 
	`LOGMET
("AISA-Info: Passthrough mode isÉnabled. Superblock WILLÇot be written\n");

172 
RETURNS
;

174 
	`dz_md_öô_cou¡îs
();

177 
ªt
 = 
	`dz_su≥rblock_wrôe
(
su≥rblock
);

178 
RETURN
;

179 
	}
}

181 
VOID
 
	$dz_su≥rblock_exô
(
VOID
)

183 
	`dz_su≥rblock_‰ì
(
su≥rblock
);

184 
	}
}

	@metadata_engine/metadata_tables.c

9 
	~"¥ŸŸy≥s.h
"

11 
U64
 
mëad©a_lba_èbÀ_size
;

12 
PMDD_BLOCK
 
mëad©a_lba_èbÀ
;

14 
U64
 
mëad©a_lba_lock_èbÀ_size
;

15 
PMD_LOCK
 
mëad©a_lba_lock_èbÀ
;

17 
RPVOID
 
	$dz_¸óã_mëad©a_lock_èbÀ
(
SIZE
 
èbÀ_size
)

19 
INT
 
i
 = 0;

20 
PVOID
 
±r
 = 
	`vmÆloc_u£r
(
èbÀ_size
 * (
MD_LOCK
));

21 
mëad©a_lba_lock_èbÀ
 = 
NULL
;

22 i‡(!
±r
) {

23 
	`LOGE
("UnableÅoállocate memory for md_lock Table\n");

24  
NULL
;

26 
	`LOG
("md_lock Table created ofÉntries %zu, size %zu bytes\n",

27 
èbÀ_size
,ÅabÀ_sizê* (
MD_LOCK
));

30 
	`log_mem‹y_ußge
(
èbÀ_size
 * (
MD_LOCK
));

31 
mëad©a_lba_lock_èbÀ
 = (
PMD_LOCK
Ë
±r
;

33 
i
=0; i < 
èbÀ_size
; i++) {

34 
	`•ö_lock_öô
(&
mëad©a_lba_lock_èbÀ
[
i
].
md_lock
);

36  
±r
;

37 
	}
}

38 
EXPORT_SYMBOL
(
dz_¸óã_mëad©a_lock_èbÀ
);

40 
RVOID
 
	$dz_de°roy_mëad©a_lock_èbÀ
(
VOID
)

42 i‡(
mëad©a_lba_lock_èbÀ
) {

43 
	`v‰ì
(
mëad©a_lba_lock_èbÀ
);

44 
mëad©a_lba_lock_èbÀ
 = 
NULL
;

45 
	`ªdu˚_mem‹y_ußge
(
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
));

46 
	`LOG
("MD Lock Table destroyed\n");

48 
	}
}

49 
EXPORT_SYMBOL
(
dz_de°roy_mëad©a_lock_èbÀ
);

51 
RPVOID
 
	$dz_¸óã_mëad©a_èbÀ
(
SIZE
 
èbÀ_size
)

54 
PVOID
 
±r
 = 
	`vmÆloc_u£r
(
èbÀ_size
 * (
MDD_BLOCK
));

55 i‡(!
±r
) {

56 
	`LOGE
("UnableÅoállocate memory for MetaData Table\n");

57  
NULL
;

59 
	`LOG
("MetaData Table created ofÉntries %zu, size %zu bytes\n",

60 
èbÀ_size
,ÅabÀ_sizê* (
MDD_BLOCK
));

62 
	`mem£t
(
±r
, 0, 
èbÀ_size
 * (
MDD_BLOCK
));

63 
	`log_mem‹y_ußge
(
èbÀ_size
 * (
MDD_BLOCK
));

65  
±r
;

66 
	}
}

67 
EXPORT_SYMBOL
(
dz_¸óã_mëad©a_èbÀ
);

69 
RVOID
 
	$dz_de°roy_mëad©a_èbÀ
(
VOID
)

71 i‡(
mëad©a_lba_èbÀ
) {

72 
	`v‰ì
(
mëad©a_lba_èbÀ
);

73 
mëad©a_lba_èbÀ
 = 
NULL
;

74 
	`ªdu˚_mem‹y_ußge
(
mëad©a_lba_èbÀ_size
 * (
MDD_BLOCK
));

75 
	`LOG
("MetaData Block Table destroyed\n");

77 
	}
}

78 
EXPORT_SYMBOL
(
dz_de°roy_mëad©a_èbÀ
);

	@metadata_engine/metadata_write.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#dz_md_ígöe_öô
 
dz_mëad©a_ígöe_öô


	)

12 
dz_swôch_∑s°hrough_mode
;

14 
PBLOCK_DEVICE
 
avm_mëad©a_bdev
;

19 
U64
 
mëad©a_lba_èbÀ_size
;

20 
PMDD_BLOCK
 
mëad©a_lba_èbÀ
;

22 
U64
 
mëad©a_lba_lock_èbÀ_size
;

23 
PMD_LOCK
 
mëad©a_lba_lock_èbÀ
;

27 
RVOID
 
	$dz_ªad_™d_¥öt_mëad©a_block
(
UINT
 
off£t
, 
U64
 
£˘‹
, 
BOOL
 
Æl
)

29 
PVOID
 
∑gebuf
;

30 
INT
 
i
 = 0;

31 
PMDD_BLOCK
 
pmdd
 = 
NULL
;

32 
PPAGE
 
ªad_∑ge
 = 
NULL
;

34 i‡(!(
ªad_∑ge
 = 
	`dz_ªad_∑ge_‰om_øw_disk_sync
(
avm_mëad©a_bdev
, 
£˘‹
, 
SECTOR_SIZE
)) ) {

35 
	`LOGE
("Read Page Failed\n");

38 i‡(
Æl
) all;

40 
	`LOG
("Prötög sögÀ MD Blockáàoff£à%u\n", 
off£t
);

41 
∑gebuf
 = 
	`km≠
(
ªad_∑ge
);

42 
∑gebuf
 +
off£t
;

43 
	`kunm≠
(
ªad_∑ge
);

45 
	`¥öt_mëad©a_block
(
∑gebuf
);

46 
	`dz_ªad_∑ge_‰ì
(
ªad_∑ge
);

49 
Æl
:

50 
	`LOG
("Printing All MD Blocks\n");

51 
∑gebuf
 = 
	`km≠
(
ªad_∑ge
);

52 
pmdd
 = 
∑gebuf
;

53 
i
=0; i < 
SECTOR_SIZE
; i = i + 
METADATA_BLOCK_SIZE
) {

54 
	`LOG
("MD Blockáàoff£à%u\n", 
i
);

55 
	`¥öt_mëad©a_block
(
∑gebuf
);

56 
∑gebuf
 =Öagebu‡+ 
METADATA_BLOCK_SIZE
;

58 
	`kunm≠
(
ªad_∑ge
);

59 
	`dz_ªad_∑ge_‰ì
(
ªad_∑ge
);

63 
	}
}

117 
RINT
 
	$dz_mëad©a_upd©e
(
PIOREQUEST
 
i‹eque°
, 
U64
 
pba_ödex
, 
SECTOR
 
dd_£˘‹
)

119 
U64
 
lba_ödex
 = 
i‹eque°
->
i‹_lba
;

120 
PMDD_BLOCK
 
pmdd
 = 
	`GET_MDB_ENTRY
(
lba_ödex
);

122 
pmdd
->
mdd_lba
 = 
lba_ödex
;

123 
pmdd
->
mdd_pba_ödex
 = 
pba_ödex
;

124 
pmdd
->
mdd_hash_ödex
 = 
i‹eque°
->
i‹_ddöfo
->
√w_hash_ödex
;

125 
pmdd
->
mdd_dd_£˘‹
 = 
dd_£˘‹
;

126 
pmdd
->
mdd_hash_cﬁlisi⁄_èg
 = 
i‹eque°
->
i‹_ddöfo
->
lba_íåy
->
hash_cﬁlisi⁄_èg
;

127 
	`mem˝y
((
PVOID
)&
pmdd
->
mdd_hash
, 
i‹eque°
->
i‹_ddöfo
->
hash
, (
HASH
));

129 
RETURNS
;

130 
	}
}

131 
EXPORT_SYMBOL
(
dz_mëad©a_upd©e
);

133 
RINT
 
	$dz_mëad©a_wrôe
(
PIOREQUEST
 
i‹eque°
, 
U64
 
pba_ödex
, 
SECTOR
 
dd_£˘‹
)

136 
INT
 
ªt
 = 
SUCCESS
;

137 
UINT
 
io_size
 = 
SECTOR_SIZE
;

138 
U64
 
£˘‹
 = 0;

139 
U64
 
lba_ödex
 = 
i‹eque°
->
i‹_lba
;

140 
U64
 
mdb_byãs
 = 
lba_ödex
 * 
METADATA_BLOCK_SIZE
;

141 
UINT
 
off£t
 = 0;

142 
PPAGE
 
ªad_∑ge
 = 
NULL
;

143 
PVOID
 
∑gebuf
;

144 
PMDD_BLOCK
 
pmdd
 = 
	`GET_MDB_ENTRY
(
lba_ödex
);

146 
U64
 
mdb_to_£˘‹
 = 
mdb_byãs
 / 
SECTOR_SIZE
;

153 i‡(
mdb_to_£˘‹
 == 0) {

154 
off£t
 = 
mdb_byãs
;

155 
£˘‹
 = 0;

157 
off£t
 = 
mdb_byãs
 - (
mdb_to_£˘‹
 * 
SECTOR_SIZE
);

158 
£˘‹
 = 
mdb_to_£˘‹
;

173 
	`LOG
("Mëad©®°¨t†© se˘‹ %Œi\n", 
£˘‹
);

174 
	`PRINT_SIZE
((
MDD_BLOCK
));

175 
	`MEMSET
(
pmdd
);

176 
	`PRINT_UINT
(
off£t
);

178 
pmdd
->
mdd_lba
 = 
lba_ödex
;

179 
pmdd
->
mdd_pba_ödex
 = 
pba_ödex
;

180 
pmdd
->
mdd_hash_ödex
 = 
i‹eque°
->
i‹_ddöfo
->
√w_hash_ödex
;

181 
pmdd
->
mdd_dd_£˘‹
 = 
dd_£˘‹
;

182 
pmdd
->
mdd_hash_cﬁlisi⁄_èg
 = 
i‹eque°
->
i‹_ddöfo
->
lba_íåy
->
hash_cﬁlisi⁄_èg
;

183 
	`mem˝y
((
PVOID
)&
pmdd
->
mdd_hash
, 
i‹eque°
->
i‹_ddöfo
->
hash
, (
HASH
));

191 
	`•ö_lock
(&
mëad©a_lba_lock_èbÀ
[
£˘‹
].
md_lock
);

195 
ªad_∑ge
 = 
	`dz_ªad_∑ge_‰om_øw_disk_sync
(
avm_mëad©a_bdev
, 
£˘‹
, 
io_size
);

196 i‡(!
ªad_∑ge
) {

198 
	`•ö_u∆ock
(&
mëad©a_lba_lock_èbÀ
[
£˘‹
].
md_lock
);

199 
	`LOG
("Mëad©®upd©i⁄ Ród faûed f‹Üb®%Œò© off£à%u\n", 
lba_ödex
, 
off£t
);

200 
RETURNF
;

202 
∑gebuf
 = 
	`km≠
(
ªad_∑ge
);

203 
∑gebuf
 +
off£t
;

204 
	`mem˝y
(
∑gebuf
, 
pmdd
, 
METADATA_BLOCK_SIZE
);

205 
	`kunm≠
(
ªad_∑ge
);

208 
ªt
 = 
	`dz_wrôe_∑ge_to_øw_disk_sync
(
avm_mëad©a_bdev
, 
£˘‹
, 
io_size
, 
ªad_∑ge
);

209 i‡(
ªt
 !
SUCCESS
) {

211 
	`•ö_u∆ock
(&
mëad©a_lba_lock_èbÀ
[
£˘‹
].
md_lock
);

212 
	`LOG
("Mëad©®upd©i⁄ WrôêÁûed f‹Üb®%Œò© off£à%u\n", 
lba_ödex
, 
off£t
);

213 
	`BUG_ON
(1);

214 
RETURNF
;

217 
	`•ö_u∆ock
(&
mëad©a_lba_lock_èbÀ
[
£˘‹
].
md_lock
);

218 
	`LOG
("Mëad©®upd©ed Wrôêsuc˚ssfuŒy f‹Üb®%Œò© off£à%u\n", 
lba_ödex
, 
off£t
);

222 
	`dz_ªad_∑ge_‰ì
(
ªad_∑ge
);

224 
	`dz_ªad_™d_¥öt_mëad©a_block
(
off£t
, 
£˘‹
 , 
Ál£
);

227 
RETURNS
;

228 
	}
}

229 
EXPORT_SYMBOL
(
dz_mëad©a_wrôe
);

	@misc/man_pages/bio.h

20 #i‚de‡
__LINUX_BIO_H


21 
	#__LINUX_BIO_H


	)

23 
	~<löux/highmem.h
>

24 
	~<löux/mempoﬁ.h
>

25 
	~<löux/i›rio.h
>

26 
	~<löux/bug.h
>

28 #ifde‡
CONFIG_BLOCK


30 
	~<asm/io.h
>

33 
	~<löux/blk_ty≥s.h
>

35 
	#BIO_DEBUG


	)

37 #ifde‡
BIO_DEBUG


38 
	#BIO_BUG_ON
 
BUG_ON


	)

40 
	#BIO_BUG_ON


	)

43 
	#BIO_MAX_PAGES
 256

	)

44 
	#BIO_MAX_SIZE
 (
BIO_MAX_PAGES
 << 
PAGE_CACHE_SHIFT
)

	)

45 
	#BIO_MAX_SECTORS
 (
BIO_MAX_SIZE
 >> 9)

	)

50 
	#BIO_PRIO_SHIFT
 (8 * (Ë- 
IOPRIO_BITS
)

	)

51 
	#bio_¥io
(
bio
Ë((bio)->
bi_rw
 >> 
BIO_PRIO_SHIFT
)

	)

52 
	#bio_¥io_vÆid
(
bio
Ë
	`i›rio_vÆid
(
	`bio_¥io
(bio))

	)

54 
	#bio_£t_¥io
(
bio
, 
¥io
) do { \

55 
	`WARN_ON
(
¥io
 >(1 << 
IOPRIO_BITS
)); \

56 (
bio
)->
bi_rw
 &((1UL << 
BIO_PRIO_SHIFT
) - 1); \

57 (
bio
)->
bi_rw
 |((Ë(
¥io
Ë<< 
BIO_PRIO_SHIFT
); \

58 } 0)

	)

64 
	#bio_iovec_idx
(
bio
, 
idx
Ë(&((bio)->
bi_io_vec
[(idx)]))

	)

65 
	#bio_iovec
(
bio
Ë
	`bio_iovec_idx
((bio), (bio)->
bi_idx
)

	)

66 
	#bio_∑ge
(
bio
Ë
	`bio_iovec
((bio))->
bv_∑ge


	)

67 
	#bio_off£t
(
bio
Ë
	`bio_iovec
((bio))->
bv_off£t


	)

68 
	#bio_£gmíts
(
bio
Ë((bio)->
bi_v˙t
 - (bio)->
bi_idx
)

	)

69 
	#bio_£˘‹s
(
bio
Ë((bio)->
bi_size
 >> 9)

	)

70 
	#bio_íd_£˘‹
(
bio
Ë((bio)->
bi_£˘‹
 + 
	`bio_£˘‹s
((bio)))

	)

72 
ölöe
 
	$bio_cur_byãs
(
bio
 *bio)

74 i‡(
bio
->
bi_v˙t
)

75  
	`bio_iovec
(
bio
)->
bv_Àn
;

77  
bio
->
bi_size
;

78 
	}
}

80 
ölöe
 *
	$bio_d©a
(
bio
 *bio)

82 i‡(
bio
->
bi_v˙t
)

83  
	`∑ge_addªss
(
	`bio_∑ge
(
bio
)Ë+ 
	`bio_off£t
(bio);

85  
NULL
;

86 
	}
}

91 
	#bio_to_phys
(
bio
Ë(
	`∑ge_to_phys
(
	`bio_∑ge
((bio))Ë+ (Ë
	`bio_off£t
((bio)))

	)

92 
	#bvec_to_phys
(
bv
Ë(
	`∑ge_to_phys
((bv)->
bv_∑ge
Ë+ (Ë(bv)->
bv_off£t
)

	)

100 
	#__bio_km≠_©omic
(
bio
, 
idx
, 
kmty≥
) \

101 (
	`km≠_©omic
(
	`bio_iovec_idx
((
bio
), (
idx
))->
bv_∑ge
) + \

102 
	`bio_iovec_idx
((
bio
), (
idx
))->
bv_off£t
)

	)

104 
	#__bio_kunm≠_©omic
(
addr
, 
kmty≥
Ë
	`kunm≠_©omic
◊ddr)

	)

110 
	#__BVEC_END
(
bio
Ë
	`bio_iovec_idx
((bio), (bio)->
bi_v˙t
 - 1)

	)

111 
	#__BVEC_START
(
bio
Ë
	`bio_iovec_idx
((bio), (bio)->
bi_idx
)

	)

114 
	#__BIOVEC_PHYS_MERGEABLE
(
vec1
, 
vec2
) \

115 ((
	`bvec_to_phys
((
vec1
)Ë+ (vec1)->
bv_Àn
Ë=bvec_to_phys((
vec2
)))

	)

120 #i‚de‡
BIOVEC_PHYS_MERGEABLE


121 
	#BIOVEC_PHYS_MERGEABLE
(
vec1
, 
vec2
) \

122 
	`__BIOVEC_PHYS_MERGEABLE
(
vec1
, 
vec2
)

	)

125 
	#__BIO_SEG_BOUNDARY
(
addr1
, 
addr2
, 
mask
) \

126 (((
addr1
Ë| (
mask
)Ë=(((
addr2
Ë- 1Ë| (mask)))

	)

127 
	#BIOVEC_SEG_BOUNDARY
(
q
, 
b1
, 
b2
) \

128 
	`__BIO_SEG_BOUNDARY
(
	`bvec_to_phys
((
b1
)), bvec_to_phys((
b2
)Ë+ (b2)->
bv_Àn
, 
	`queue_£gmít_bound¨y
((
q
)))

	)

129 
	#BIO_SEG_BOUNDARY
(
q
, 
b1
, 
b2
) \

130 
	`BIOVEC_SEG_BOUNDARY
((
q
), 
	`__BVEC_END
((
b1
)), 
	`__BVEC_START
((
b2
)))

	)

132 
	#bio_io_îr‹
(
bio
Ë
	`bio_ídio
((bio), -
EIO
)

	)

138 
	#__bio_f‹_óch_£gmít
(
bvl
, 
bio
, 
i
, 
°¨t_idx
) \

139 
bvl
 = 
	`bio_iovec_idx
((
bio
), (
°¨t_idx
)), 
i
 = (start_idx); \

140 
i
 < (
bio
)->
bi_v˙t
; \

141 
bvl
++, 
i
++)

	)

147 
	#bio_f‹_óch_£gmít_Æl
(
bvl
, 
bio
, 
i
) \

148 
i
 = 0; \

149 
bvl
 = 
	`bio_iovec_idx
((
bio
), (
i
)), i < (bio)->
bi_v˙t
; \

150 
i
++)

	)

152 
	#bio_f‹_óch_£gmít
(
bvl
, 
bio
, 
i
) \

153 
i
 = (
bio
)->
bi_idx
; \

154 
bvl
 = 
	`bio_iovec_idx
((
bio
), (
i
)), i < (bio)->
bi_v˙t
; \

155 
i
++)

	)

171 
	#bio_gë
(
bio
Ë
	`©omic_öc
(&(bio)->
bi_˙t
)

	)

173 #i‡
deföed
(
CONFIG_BLK_DEV_INTEGRITY
)

177 
	sbio_öãgrôy_∑ylﬂd
 {

178 
bio
 *
	mbù_bio
;

180 
£˘‹_t
 
	mbù_£˘‹
;

182 *
	mbù_buf
;

183 
bio_íd_io_t
 *
	mbù_íd_io
;

185 
	mbù_size
;

187 
	mbù_¶ab
;

188 
	mbù_v˙t
;

189 
	mbù_idx
;

190 
	mbù_owns_buf
:1;

192 
w‹k_°ru˘
 
	mbù_w‹k
;

194 
bio_vec
 *
	mbù_vec
;

195 
bio_vec
 
	mbù_ölöe_vecs
[0];

209 
	sbio_∑ú
 {

210 
bio
 
	mbio1
, 
	mbio2
;

211 
bio_vec
 
	mbv1
, 
	mbv2
;

212 #i‡
deföed
(
CONFIG_BLK_DEV_INTEGRITY
)

213 
bio_öãgrôy_∑ylﬂd
 
	mbù1
, 
	mbù2
;

214 
bio_vec
 
	miv1
, 
	miv2
;

216 
©omic_t
 
	m˙t
;

217 
	mîr‹
;

219 
bio_∑ú
 *
bio_•lô
(
bio
 *
bi
, 
fú°_£˘‹s
);

220 
bio_∑ú_ªÀa£
(
bio_∑ú
 *
dbio
);

222 
bio_£t
 *
bio£t_¸óã
(, );

223 
bio£t_‰ì
(
bio_£t
 *);

224 
mempoﬁ_t
 *
biovec_¸óã_poﬁ
(
bio_£t
 *
bs
, 
poﬁ_íåõs
);

226 
bio
 *
bio_Æloc_bio£t
(
gÂ_t
, , 
bio_£t
 *);

227 
bio_put
(
bio
 *);

229 
__bio_˛⁄e
(
bio
 *, bio *);

230 
bio
 *
bio_˛⁄e_bio£t
(biÿ*, 
gÂ_t
, 
bio_£t
 *
bs
);

232 
bio_£t
 *
fs_bio_£t
;

234 
ölöe
 
bio
 *
	$bio_Æloc
(
gÂ_t
 
gÂ_mask
, 
ƒ_iovecs
)

236  
	`bio_Æloc_bio£t
(
gÂ_mask
, 
ƒ_iovecs
, 
fs_bio_£t
);

237 
	}
}

239 
ölöe
 
bio
 *
	$bio_˛⁄e
(
bio
 *bio, 
gÂ_t
 
gÂ_mask
)

241  
	`bio_˛⁄e_bio£t
(
bio
, 
gÂ_mask
, 
fs_bio_£t
);

242 
	}
}

244 
ölöe
 
bio
 *
	$bio_kmÆloc
(
gÂ_t
 
gÂ_mask
, 
ƒ_iovecs
)

246  
	`bio_Æloc_bio£t
(
gÂ_mask
, 
ƒ_iovecs
, 
NULL
);

247 
	}
}

249 
ölöe
 
bio
 *
	$bio_˛⁄e_kmÆloc
(
bio
 *bio, 
gÂ_t
 
gÂ_mask
)

251  
	`bio_˛⁄e_bio£t
(
bio
, 
gÂ_mask
, 
NULL
);

253 
	}
}

255 
bio_ídio
(
bio
 *, );

256 
	gªque°_queue
;

257 
bio_phys_£gmíts
(
ªque°_queue
 *, 
bio
 *);

259 
submô_bio_waô
(
rw
, 
bio
 *bio);

260 
bio_adv™˚
(
bio
 *, );

262 
bio_öô
(
bio
 *);

263 
bio_ª£t
(
bio
 *);

265 
bio_add_∑ge
(
bio
 *, 
∑ge
 *, ,);

266 
bio_add_pc_∑ge
(
ªque°_queue
 *, 
bio
 *, 
∑ge
 *,

268 
bio_gë_ƒ_vecs
(
block_devi˚
 *);

269 
£˘‹_t
 
bio_£˘‹_off£t
(
bio
 *, , );

270 
bio
 *
bio_m≠_u£r
(
ªque°_queue
 *, 
block_devi˚
 *,

271 , , , 
gÂ_t
);

272 
	gsg_iovec
;

273 
	grq_m≠_d©a
;

274 
bio
 *
bio_m≠_u£r_iov
(
ªque°_queue
 *,

275 
block_devi˚
 *,

276 
sg_iovec
 *, , , 
gÂ_t
);

277 
bio_unm≠_u£r
(
bio
 *);

278 
bio
 *
bio_m≠_kîn
(
ªque°_queue
 *, *, ,

279 
gÂ_t
);

280 
bio
 *
bio_c›y_kîn
(
ªque°_queue
 *, *, ,

281 
gÂ_t
, );

282 
bio_£t_∑ges_dúty
(
bio
 *bio);

283 
bio_check_∑ges_dúty
(
bio
 *bio);

285 #i‚de‡
ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE


288 #i‡
ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE


289 
bio_Êush_dˇche_∑ges
(
bio
 *
bi
);

291 
ölöe
 
	$bio_Êush_dˇche_∑ges
(
bio
 *
bi
)

293 
	}
}

296 
bio_c›y_d©a
(
bio
 *
d°
, biÿ*
§c
);

297 
bio_Æloc_∑ges
(
bio
 *bio, 
gÂ_t
 
gÂ
);

299 
bio
 *
bio_c›y_u£r
(
ªque°_queue
 *, 
rq_m≠_d©a
 *,

300 , , , 
gÂ_t
);

301 
bio
 *
bio_c›y_u£r_iov
(
ªque°_queue
 *,

302 
rq_m≠_d©a
 *, 
sg_iovec
 *,

303 , , 
gÂ_t
);

304 
bio_unc›y_u£r
(
bio
 *);

305 
zîo_fûl_bio
(
bio
 *bio);

306 
bio_vec
 *
bvec_Æloc
(
gÂ_t
, , *, 
mempoﬁ_t
 *);

307 
bvec_‰ì
(
mempoﬁ_t
 *, 
bio_vec
 *, );

308 
bvec_ƒ_vecs
(
idx
);

310 #ifde‡
CONFIG_BLK_CGROUP


311 
bio_assocüã_cuºít
(
bio
 *bio);

312 
bio_dißssocüã_èsk
(
bio
 *bio);

314 
ölöe
 
	$bio_assocüã_cuºít
(
bio
 *bioË{  -
ENOENT
; 
	}
}

315 
ölöe
 
	$bio_dißssocüã_èsk
(
bio
 *bioË{ 
	}
}

318 #ifde‡
CONFIG_HIGHMEM


323 
ölöe
 *
	$bvec_km≠_úq
(
bio_vec
 *
bvec
, *
Êags
)

325 
addr
;

331 
	`loˇl_úq_ßve
(*
Êags
);

332 
addr
 = (Ë
	`km≠_©omic
(
bvec
->
bv_∑ge
);

334 
	`BUG_ON
(
addr
 & ~
PAGE_MASK
);

336  (*Ë
addr
 + 
bvec
->
bv_off£t
;

337 
	}
}

339 
ölöe
 
	$bvec_kunm≠_úq
(*
buf„r
, *
Êags
)

341 
±r
 = (Ë
buf„r
 & 
PAGE_MASK
;

343 
	`kunm≠_©omic
((*Ë
±r
);

344 
	`loˇl_úq_ª°‹e
(*
Êags
);

345 
	}
}

348 
ölöe
 *
	$bvec_km≠_úq
(
bio_vec
 *
bvec
, *
Êags
)

350  
	`∑ge_addªss
(
bvec
->
bv_∑ge
Ë+ bvec->
bv_off£t
;

351 
	}
}

353 
ölöe
 
	$bvec_kunm≠_úq
(*
buf„r
, *
Êags
)

355 *
Êags
 = 0;

356 
	}
}

359 
ölöe
 *
	$__bio_km≠_úq
(
bio
 *bio, 
idx
,

360 *
Êags
)

362  
	`bvec_km≠_úq
(
	`bio_iovec_idx
(
bio
, 
idx
), 
Êags
);

363 
	}
}

364 
	#__bio_kunm≠_úq
(
buf
, 
Êags
Ë
	`bvec_kunm≠_úq
(buf, fœgs)

	)

366 
	#bio_km≠_úq
(
bio
, 
Êags
) \

367 
	`__bio_km≠_úq
((
bio
), (bio)->
bi_idx
, (
Êags
))

	)

368 
	#bio_kunm≠_úq
(
buf
,
Êags
Ë
	`__bio_kunm≠_úq
(buf, fœgs)

	)

373 
ölöe
 
boﬁ
 
	$bio_has_d©a
(
bio
 *bio)

375 i‡(
bio
 && bio->
bi_v˙t
)

376  
åue
;

378  
Ál£
;

379 
	}
}

381 
ölöe
 
boﬁ
 
	$bio_is_rw
(
bio
 *bio)

383 i‡(!
	`bio_has_d©a
(
bio
))

384  
Ál£
;

386 i‡(
bio
->
bi_rw
 & 
REQ_WRITE_SAME
)

387  
Ál£
;

389  
åue
;

390 
	}
}

392 
ölöe
 
boﬁ
 
	$bio_mîgóbÀ
(
bio
 *bio)

394 i‡(
bio
->
bi_rw
 & 
REQ_NOMERGE_FLAGS
)

395  
Ál£
;

397  
åue
;

398 
	}
}

407 
	sbio_li°
 {

408 
bio
 *
	mhód
;

409 
bio
 *
	mèû
;

412 
ölöe
 
	$bio_li°_em±y
(c⁄° 
bio_li°
 *
bl
)

414  
bl
->
hód
 =
NULL
;

415 
	}
}

417 
ölöe
 
	$bio_li°_öô
(
bio_li°
 *
bl
)

419 
bl
->
hód
 = bl->
èû
 = 
NULL
;

420 
	}
}

422 
	#BIO_EMPTY_LIST
 { 
NULL
, NULL }

	)

424 
	#bio_li°_f‹_óch
(
bio
, 
bl
) \

425 
bio
 = (
bl
)->
hód
; bio; biÿbio->
bi_√xt
)

	)

427 
ölöe
 
	$bio_li°_size
(c⁄° 
bio_li°
 *
bl
)

429 
sz
 = 0;

430 
bio
 *bio;

432 
	`bio_li°_f‹_óch
(
bio
, 
bl
)

433 
sz
++;

435  
sz
;

436 
	}
}

438 
ölöe
 
	$bio_li°_add
(
bio_li°
 *
bl
, 
bio
 *bio)

440 
bio
->
bi_√xt
 = 
NULL
;

442 i‡(
bl
->
èû
)

443 
bl
->
èû
->
bi_√xt
 = 
bio
;

445 
bl
->
hód
 = 
bio
;

447 
bl
->
èû
 = 
bio
;

448 
	}
}

450 
ölöe
 
	$bio_li°_add_hód
(
bio_li°
 *
bl
, 
bio
 *bio)

452 
bio
->
bi_√xt
 = 
bl
->
hód
;

454 
bl
->
hód
 = 
bio
;

456 i‡(!
bl
->
èû
)

457 
bl
->
èû
 = 
bio
;

458 
	}
}

460 
ölöe
 
	$bio_li°_mîge
(
bio_li°
 *
bl
, bio_li° *
bl2
)

462 i‡(!
bl2
->
hód
)

465 i‡(
bl
->
èû
)

466 
bl
->
èû
->
bi_√xt
 = 
bl2
->
hód
;

468 
bl
->
hód
 = 
bl2
->head;

470 
bl
->
èû
 = 
bl2
->tail;

471 
	}
}

473 
ölöe
 
	$bio_li°_mîge_hód
(
bio_li°
 *
bl
,

474 
bio_li°
 *
bl2
)

476 i‡(!
bl2
->
hód
)

479 i‡(
bl
->
hód
)

480 
bl2
->
èû
->
bi_√xt
 = 
bl
->
hód
;

482 
bl
->
èû
 = 
bl2
->tail;

484 
bl
->
hód
 = 
bl2
->head;

485 
	}
}

487 
ölöe
 
bio
 *
	$bio_li°_≥ek
(
bio_li°
 *
bl
)

489  
bl
->
hód
;

490 
	}
}

492 
ölöe
 
bio
 *
	$bio_li°_p›
(
bio_li°
 *
bl
)

494 
bio
 *biÿ
bl
->
hód
;

496 i‡(
bio
) {

497 
bl
->
hód
 = bl->hód->
bi_√xt
;

498 i‡(!
bl
->
hód
)

499 
bl
->
èû
 = 
NULL
;

501 
bio
->
bi_√xt
 = 
NULL
;

504  
bio
;

505 
	}
}

507 
ölöe
 
bio
 *
	$bio_li°_gë
(
bio_li°
 *
bl
)

509 
bio
 *biÿ
bl
->
hód
;

511 
bl
->
hód
 = bl->
èû
 = 
NULL
;

513  
bio
;

514 
	}
}

522 
	#BIO_POOL_SIZE
 2

	)

523 
	#BIOVEC_NR_POOLS
 6

	)

524 
	#BIOVEC_MAX_IDX
 (
BIOVEC_NR_POOLS
 - 1)

	)

526 
	sbio_£t
 {

527 
kmem_ˇche
 *
	mbio_¶ab
;

528 
	m‰⁄t_∑d
;

530 
mempoﬁ_t
 *
	mbio_poﬁ
;

531 
mempoﬁ_t
 *
	mbvec_poﬁ
;

532 #i‡
deföed
(
CONFIG_BLK_DEV_INTEGRITY
)

533 
mempoﬁ_t
 *
	mbio_öãgrôy_poﬁ
;

534 
mempoﬁ_t
 *
	mbvec_öãgrôy_poﬁ
;

541 
•ölock_t
 
	mªscue_lock
;

542 
bio_li°
 
	mªscue_li°
;

543 
w‹k_°ru˘
 
	mªscue_w‹k
;

544 
w‹kqueue_°ru˘
 *
	mªscue_w‹kqueue
;

547 
	sbiovec_¶ab
 {

548 
	mƒ_vecs
;

549 *
	m«me
;

550 
kmem_ˇche
 *
	m¶ab
;

557 
	#BIO_SPLIT_ENTRIES
 2

	)

559 #i‡
deföed
(
CONFIG_BLK_DEV_INTEGRITY
)

561 
	#bù_vec_idx
(
bù
, 
idx
Ë(&(bù->
bù_vec
[(idx)]))

	)

562 
	#bù_vec
(
bù
Ë
	`bù_vec_idx
(bù, 0)

	)

564 
	#__bù_f‹_óch_vec
(
bvl
, 
bù
, 
i
, 
°¨t_idx
) \

565 
bvl
 = 
	`bù_vec_idx
((
bù
), (
°¨t_idx
)), 
i
 = (start_idx); \

566 
i
 < (
bù
)->
bù_v˙t
; \

567 
bvl
++, 
i
++)

	)

569 
	#bù_f‹_óch_vec
(
bvl
, 
bù
, 
i
) \

570 
	`__bù_f‹_óch_vec
(
bvl
, 
bù
, 
i
, (bù)->
bù_idx
)

	)

572 
	#bio_f‹_óch_öãgrôy_vec
(
_bvl
, 
_bio
, 
_ôî
) \

573 
	`f‹_óch_bio
(
_bio
) \

574 
	`bù_f‹_óch_vec
(
_bvl
, 
_bio
->
bi_öãgrôy
, 
_ôî
)

	)

576 
	#bio_öãgrôy
(
bio
Ë(bio->
bi_öãgrôy
 !
NULL
)

	)

578 
bio_öãgrôy_∑ylﬂd
 *
bio_öãgrôy_Æloc
(
bio
 *, 
gÂ_t
, );

579 
bio_öãgrôy_‰ì
(
bio
 *);

580 
bio_öãgrôy_add_∑ge
(
bio
 *, 
∑ge
 *, , );

581 
bio_öãgrôy_íabÀd
(
bio
 *bio);

582 
bio_öãgrôy_£t_èg
(
bio
 *, *, );

583 
bio_öãgrôy_gë_èg
(
bio
 *, *, );

584 
bio_öãgrôy_¥ï
(
bio
 *);

585 
bio_öãgrôy_ídio
(
bio
 *, );

586 
bio_öãgrôy_adv™˚
(
bio
 *, );

587 
bio_öãgrôy_åim
(
bio
 *, , );

588 
bio_öãgrôy_•lô
(
bio
 *, 
bio_∑ú
 *, );

589 
bio_öãgrôy_˛⁄e
(
bio
 *, biÿ*, 
gÂ_t
);

590 
bio£t_öãgrôy_¸óã
(
bio_£t
 *, );

591 
bio£t_öãgrôy_‰ì
(
bio_£t
 *);

592 
bio_öãgrôy_öô
();

596 
ölöe
 
	$bio_öãgrôy
(
bio
 *bio)

599 
	}
}

601 
ölöe
 
	$bio_öãgrôy_íabÀd
(
bio
 *bio)

604 
	}
}

606 
ölöe
 
	$bio£t_öãgrôy_¸óã
(
bio_£t
 *
bs
, 
poﬁ_size
)

609 
	}
}

611 
ölöe
 
	$bio£t_öãgrôy_‰ì
 (
bio_£t
 *
bs
)

614 
	}
}

616 
ölöe
 
	$bio_öãgrôy_¥ï
(
bio
 *bio)

619 
	}
}

621 
ölöe
 
	$bio_öãgrôy_‰ì
(
bio
 *bio)

624 
	}
}

626 
ölöe
 
	$bio_öãgrôy_˛⁄e
(
bio
 *bio, biÿ*
bio_§c
,

627 
gÂ_t
 
gÂ_mask
)

630 
	}
}

632 
ölöe
 
	$bio_öãgrôy_•lô
(
bio
 *bio, 
bio_∑ú
 *
bp
,

633 
£˘‹s
)

636 
	}
}

638 
ölöe
 
	$bio_öãgrôy_adv™˚
(
bio
 *bio,

639 
byãs_d⁄e
)

642 
	}
}

644 
ölöe
 
	$bio_öãgrôy_åim
(
bio
 *bio, 
off£t
,

645 
£˘‹s
)

648 
	}
}

650 
ölöe
 
	$bio_öãgrôy_öô
()

653 
	}
}

	@misc/man_pages/blk_types.h

5 #i‚de‡
__LINUX_BLK_TYPES_H


6 
	#__LINUX_BLK_TYPES_H


	)

8 #ifde‡
CONFIG_BLOCK


10 
	~<löux/ty≥s.h
>

12 
	gbio_£t
;

13 
	gbio
;

14 
	gbio_öãgrôy_∑ylﬂd
;

15 
	g∑ge
;

16 
	gblock_devi˚
;

17 
	gio_c⁄ãxt
;

18 
	gcgroup_subsys_°©e
;

19 (
	tbio_íd_io_t
Ë(
	tbio
 *, );

20 (
	tbio_de°ru˘‹_t
Ë(
	tbio
 *);

25 
	sbio_vec
 {

26 
∑ge
 *
bv_∑ge
;

27 
bv_Àn
;

28 
bv_off£t
;

35 
	sbio
 {

36 
£˘‹_t
 
bi_£˘‹
;

38 
bio
 *
bi_√xt
;

39 
block_devi˚
 *
bi_bdev
;

40 
bi_Êags
;

41 
bi_rw
;

45 
bi_v˙t
;

46 
bi_idx
;

51 
bi_phys_£gmíts
;

53 
bi_size
;

59 
bi_£g_‰⁄t_size
;

60 
bi_£g_back_size
;

62 
bio_íd_io_t
 *
bi_íd_io
;

64 *
bi_¥iv©e
;

65 #ifde‡
CONFIG_BLK_CGROUP


70 
io_c⁄ãxt
 *
bi_ioc
;

71 
cgroup_subsys_°©e
 *
bi_css
;

73 #i‡
	`deföed
(
CONFIG_BLK_DEV_INTEGRITY
)

74 
bio_öãgrôy_∑ylﬂd
 *
bi_öãgrôy
;

81 
bi_max_vecs
;

83 
©omic_t
 
bi_˙t
;

85 
bio_vec
 *
bi_io_vec
;

87 
bio_£t
 *
bi_poﬁ
;

94 *
rh_ª£rved1
;

101 
bio_vec
 
bi_ölöe_vecs
[0];

104 
	#BIO_RESET_BYTES
 
	`off£tof
(
bio
, 
bi_max_vecs
)

	)

109 
	#BIO_UPTODATE
 0

	)

110 
	#BIO_RW_BLOCK
 1

	)

111 
	#BIO_EOF
 2

	)

112 
	#BIO_SEG_VALID
 3

	)

113 
	#BIO_CLONED
 4

	)

114 
	#BIO_BOUNCED
 5

	)

115 
	#BIO_USER_MAPPED
 6

	)

116 
	#BIO_EOPNOTSUPP
 7

	)

117 
	#BIO_NULL_MAPPED
 8

	)

118 
	#BIO_FS_INTEGRITY
 9

	)

119 
	#BIO_QUIET
 10

	)

120 
	#BIO_MAPPED_INTEGRITY
 11

	)

121 
	#BIO_SNAP_STABLE
 12

	)

127 
	#BIO_RESET_BITS
 13

	)

128 
	#BIO_OWNS_VEC
 13

	)

130 
	#bio_Êagged
(
bio
, 
Êag
Ë((bio)->
bi_Êags
 & (1 << (Êag)))

	)

135 
	#BIO_POOL_BITS
 (4)

	)

136 
	#BIO_POOL_NONE
 ((1UL << 
BIO_POOL_BITS
Ë- 1)

	)

137 
	#BIO_POOL_OFFSET
 (
BITS_PER_LONG
 - 
BIO_POOL_BITS
)

	)

138 
	#BIO_POOL_MASK
 (1UL << 
BIO_POOL_OFFSET
)

	)

139 
	#BIO_POOL_IDX
(
bio
Ë((bio)->
bi_Êags
 >> 
BIO_POOL_OFFSET
)

	)

147 
	erq_Êag_bôs
 {

149 
__REQ_WRITE
,

150 
__REQ_FAILFAST_DEV
,

151 
__REQ_FAILFAST_TRANSPORT
,

152 
__REQ_FAILFAST_DRIVER
,

154 
__REQ_SYNC
,

155 
__REQ_META
,

156 
__REQ_PRIO
,

157 
__REQ_DISCARD
,

158 
__REQ_SECURE
,

159 
__REQ_WRITE_SAME
,

161 
__REQ_NOIDLE
,

162 
__REQ_FUA
,

163 
__REQ_FLUSH
,

166 
__REQ_RAHEAD
,

167 
__REQ_THROTTLED
,

171 
__REQ_SORTED
,

172 
__REQ_SOFTBARRIER
,

173 
__REQ_NOMERGE
,

174 
__REQ_STARTED
,

175 
__REQ_DONTPREP
,

176 
__REQ_QUEUED
,

177 
__REQ_ELVPRIV
,

178 
__REQ_FAILED
,

179 
__REQ_QUIET
,

180 
__REQ_PREEMPT
,

181 
__REQ_ALLOCED
,

182 
__REQ_COPY_USER
,

183 
__REQ_FLUSH_SEQ
,

184 
__REQ_IO_STAT
,

185 
__REQ_MIXED_MERGE
,

186 
__REQ_KERNEL
,

187 
__REQ_PM
,

188 
__REQ_END
,

189 
__REQ_NR_BITS
,

192 
	#REQ_WRITE
 (1ULL << 
__REQ_WRITE
)

	)

193 
	#REQ_FAILFAST_DEV
 (1ULL << 
__REQ_FAILFAST_DEV
)

	)

194 
	#REQ_FAILFAST_TRANSPORT
 (1ULL << 
__REQ_FAILFAST_TRANSPORT
)

	)

195 
	#REQ_FAILFAST_DRIVER
 (1ULL << 
__REQ_FAILFAST_DRIVER
)

	)

196 
	#REQ_SYNC
 (1ULL << 
__REQ_SYNC
)

	)

197 
	#REQ_META
 (1ULL << 
__REQ_META
)

	)

198 
	#REQ_PRIO
 (1ULL << 
__REQ_PRIO
)

	)

199 
	#REQ_DISCARD
 (1ULL << 
__REQ_DISCARD
)

	)

200 
	#REQ_WRITE_SAME
 (1ULL << 
__REQ_WRITE_SAME
)

	)

201 
	#REQ_NOIDLE
 (1ULL << 
__REQ_NOIDLE
)

	)

203 
	#REQ_FAILFAST_MASK
 \

204 (
REQ_FAILFAST_DEV
 | 
REQ_FAILFAST_TRANSPORT
 | 
REQ_FAILFAST_DRIVER
)

	)

205 
	#REQ_COMMON_MASK
 \

206 (
REQ_WRITE
 | 
REQ_FAILFAST_MASK
 | 
REQ_SYNC
 | 
REQ_META
 | 
REQ_PRIO
 | \

207 
REQ_DISCARD
 | 
REQ_WRITE_SAME
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
 | 
REQ_FUA
 | \

208 
REQ_SECURE
)

	)

209 
	#REQ_CLONE_MASK
 
REQ_COMMON_MASK


	)

211 
	#BIO_NO_ADVANCE_ITER_MASK
 (
REQ_DISCARD
|
REQ_WRITE_SAME
)

	)

214 
	#REQ_NOMERGE_FLAGS
 \

215 (
REQ_NOMERGE
 | 
REQ_STARTED
 | 
REQ_SOFTBARRIER
 | 
REQ_FLUSH
 | 
REQ_FUA
)

	)

217 
	#REQ_RAHEAD
 (1ULL << 
__REQ_RAHEAD
)

	)

218 
	#REQ_THROTTLED
 (1ULL << 
__REQ_THROTTLED
)

	)

220 
	#REQ_SORTED
 (1ULL << 
__REQ_SORTED
)

	)

221 
	#REQ_SOFTBARRIER
 (1ULL << 
__REQ_SOFTBARRIER
)

	)

222 
	#REQ_FUA
 (1ULL << 
__REQ_FUA
)

	)

223 
	#REQ_NOMERGE
 (1ULL << 
__REQ_NOMERGE
)

	)

224 
	#REQ_STARTED
 (1ULL << 
__REQ_STARTED
)

	)

225 
	#REQ_DONTPREP
 (1ULL << 
__REQ_DONTPREP
)

	)

226 
	#REQ_QUEUED
 (1ULL << 
__REQ_QUEUED
)

	)

227 
	#REQ_ELVPRIV
 (1ULL << 
__REQ_ELVPRIV
)

	)

228 
	#REQ_FAILED
 (1ULL << 
__REQ_FAILED
)

	)

229 
	#REQ_QUIET
 (1ULL << 
__REQ_QUIET
)

	)

230 
	#REQ_PREEMPT
 (1ULL << 
__REQ_PREEMPT
)

	)

231 
	#REQ_ALLOCED
 (1ULL << 
__REQ_ALLOCED
)

	)

232 
	#REQ_COPY_USER
 (1ULL << 
__REQ_COPY_USER
)

	)

233 
	#REQ_FLUSH
 (1ULL << 
__REQ_FLUSH
)

	)

234 
	#REQ_FLUSH_SEQ
 (1ULL << 
__REQ_FLUSH_SEQ
)

	)

235 
	#REQ_IO_STAT
 (1ULL << 
__REQ_IO_STAT
)

	)

236 
	#REQ_MIXED_MERGE
 (1ULL << 
__REQ_MIXED_MERGE
)

	)

237 
	#REQ_SECURE
 (1ULL << 
__REQ_SECURE
)

	)

238 
	#REQ_KERNEL
 (1ULL << 
__REQ_KERNEL
)

	)

239 
	#REQ_PM
 (1ULL << 
__REQ_PM
)

	)

240 
	#REQ_END
 (1ULL << 
__REQ_END
)

	)

	@misc/man_pages/blkdev.h

1 #i‚de‡
_LINUX_BLKDEV_H


2 
	#_LINUX_BLKDEV_H


	)

4 
	~<löux/sched.h
>

6 #ifde‡
CONFIG_BLOCK


8 
	~<löux/maj‹.h
>

9 
	~<löux/gíhd.h
>

10 
	~<löux/li°.h
>

11 
	~<löux/Œi°.h
>

12 
	~<löux/timî.h
>

13 
	~<löux/w‹kqueue.h
>

14 
	~<löux/∑gem≠.h
>

15 
	~<löux/backög-dev.h
>

16 
	~<löux/waô.h
>

17 
	~<löux/mempoﬁ.h
>

18 
	~<löux/bio.h
>

19 
	~<löux/°rögify.h
>

20 
	~<löux/gÂ.h
>

21 
	~<löux/bsg.h
>

22 
	~<löux/smp.h
>

23 
	~<löux/rcupd©e.h
>

25 
	~<asm/sˇâîli°.h
>

27 
	gmoduÀ
;

28 
	gscsi_io˘l_comm™d
;

30 
	gªque°_queue
;

31 
	gñev©‹_queue
;

32 
	gªque°_pm_°©e
;

33 
	gblk_åa˚
;

34 
	gªque°
;

35 
	gsg_io_hdr
;

36 
	gbsg_job
;

37 
	gblkcg_gq
;

39 
	#BLKDEV_MIN_RQ
 4

	)

40 
	#BLKDEV_MAX_RQ
 128

	)

46 
	#BLKCG_MAX_POLS
 2

	)

48 
	gªque°
;

49 (
	trq_íd_io_‚
)(
	tªque°
 *, );

51 
	#BLK_RL_SYNCFULL
 (1U << 0)

	)

52 
	#BLK_RL_ASYNCFULL
 (1U << 1)

	)

54 
	sªque°_li°
 {

55 
ªque°_queue
 *
q
;

56 #ifde‡
CONFIG_BLK_CGROUP


57 
blkcg_gq
 *
blkg
;

63 
cou¡
[2];

64 
°¨ved
[2];

65 
mempoﬁ_t
 *
rq_poﬁ
;

66 
waô_queue_hód_t
 
waô
[2];

67 
Êags
;

73 
	erq_cmd_ty≥_bôs
 {

74 
REQ_TYPE_FS
 = 1,

75 
REQ_TYPE_BLOCK_PC
,

76 
REQ_TYPE_SENSE
,

77 
REQ_TYPE_PM_SUSPEND
,

78 
REQ_TYPE_PM_RESUME
,

79 
REQ_TYPE_PM_SHUTDOWN
,

80 
REQ_TYPE_SPECIAL
,

86 
REQ_TYPE_ATA_TASKFILE
,

87 
REQ_TYPE_ATA_PC
,

90 
	#BLK_MAX_CDB
 16

	)

97 
	sªque°
 {

99 
li°_hód
 
queuñi°
;

100 
Œi°_node
 
Œ_li°
;

103 
ˇŒ_sögÀ_d©a
 
csd
;

104 
w‹k_°ru˘
 
mq_Êush_w‹k
;

107 
ªque°_queue
 *
q
;

108 
blk_mq_˘x
 *
mq_˘x
;

110 
u64
 
cmd_Êags
;

111 
rq_cmd_ty≥_bôs
 
cmd_ty≥
;

112 
©omic_Êags
;

114 
˝u
;

117 
__d©a_Àn
;

118 
£˘‹_t
 
__£˘‹
;

120 
bio
 *bio;

121 
bio
 *
biŸaû
;

123 
hli°_node
 
hash
;

130 
rb_node
Ñb_node;

131 *
com∂ëi⁄_d©a
;

142 
io_cq
 *
icq
;

143 *
¥iv
[2];

144 } 
ñv
;

147 
£q
;

148 
li°_hód
 
li°
;

149 
rq_íd_io_‚
 *
ßved_íd_io
;

150 } 
Êush
;

153 
gídisk
 *
rq_disk
;

154 
hd_°ru˘
 *
∑π
;

155 
°¨t_time
;

156 #ifde‡
CONFIG_BLK_CGROUP


157 
ªque°_li°
 *
æ
;

158 
°¨t_time_ns
;

159 
io_°¨t_time_ns
;

164 
ƒ_phys_£gmíts
;

165 #i‡
	`deföed
(
CONFIG_BLK_DEV_INTEGRITY
)

166 
ƒ_öãgrôy_£gmíts
;

169 
i›rio
;

171 *
•ecül
;

172 *
buf„r
;

174 
èg
;

175 
îr‹s
;

180 
__cmd
[
BLK_MAX_CDB
];

181 *
cmd
;

182 
cmd_Àn
;

184 
exåa_Àn
;

185 
£n£_Àn
;

186 
ªsid_Àn
;

187 *
£n£
;

189 
dódlöe
;

190 
li°_hód
 
timeout_li°
;

191 
timeout
;

192 
ªåõs
;

197 
rq_íd_io_‚
 *
íd_io
;

198 *
íd_io_d©a
;

201 
ªque°
 *
√xt_rq
;

204 
ölöe
 
	$ªq_gë_i›rio
(
ªque°
 *
ªq
)

206  
ªq
->
i›rio
;

207 
	}
}

213 
	sªque°_pm_°©e


216 
	mpm_°ï
;

218 
u32
 
	mpm_°©e
;

219 * 
	md©a
;

222 
	~<löux/ñev©‹.h
>

224 
	gblk_queue_˘x
;

226 (
	tªque°_‚_¥oc
Ë(
	tªque°_queue
 *
	tq
);

227 (
	tmake_ªque°_‚
Ë(
	tªque°_queue
 *
	tq
, 
	tbio
 *bio);

228 (
	t¥ï_rq_‚
Ë(
	tªque°_queue
 *, 
	tªque°
 *);

230 
bio_vec
;

231 
	sbvec_mîge_d©a
 {

232 
block_devi˚
 *
bi_bdev
;

233 
£˘‹_t
 
bi_£˘‹
;

234 
bi_size
;

235 
bi_rw
;

237 (
	tmîge_bvec_‚
Ë(
	tªque°_queue
 *, 
	tbvec_mîge_d©a
 *,

238 
	tbio_vec
 *);

239 (
	tso·úq_d⁄e_‚
)(
	tªque°
 *);

240 (
	tdma_døö_√eded_‚
)(
	tªque°
 *);

241 (
	tŒd_busy_‚
Ë(
	tªque°_queue
 *
	tq
);

242 (
	tbsg_job_‚
Ë(
	tbsg_job
 *);

244 
	eblk_eh_timî_ªtu∫
 {

245 
BLK_EH_NOT_HANDLED
,

246 
BLK_EH_HANDLED
,

247 
BLK_EH_RESET_TIMER
,

250 
	$blk_eh_timî_ªtu∫
 (
	trq_timed_out_‚
)(
	tªque°
 *);

252 
	eblk_queue_°©e
 {

253 
Queue_down
,

254 
Queue_up
,

257 
	sblk_queue_èg
 {

258 
ªque°
 **
èg_ödex
;

259 *
èg_m≠
;

260 
busy
;

261 
max_dïth
;

262 
ªÆ_max_dïth
;

263 
©omic_t
 
ªf˙t
;

266 
	#BLK_SCSI_MAX_CMDS
 (256)

	)

267 
	#BLK_SCSI_CMD_PER_LONG
 (
BLK_SCSI_MAX_CMDS
 / ((Ë* 8))

	)

269 
	squeue_limôs
 {

270 
boun˚_p‚
;

271 
£g_bound¨y_mask
;

273 
max_hw_£˘‹s
;

274 
max_£˘‹s
;

275 
max_£gmít_size
;

276 
physiˇl_block_size
;

277 
Æignmít_off£t
;

278 
io_mö
;

279 
io_›t
;

280 
max_disˇrd_£˘‹s
;

281 
max_wrôe_ßme_£˘‹s
;

282 
disˇrd_gønuœrôy
;

283 
disˇrd_Æignmít
;

285 
logiˇl_block_size
;

286 
max_£gmíts
;

287 
max_öãgrôy_£gmíts
;

289 
mißlig√d
;

290 
disˇrd_mißlig√d
;

291 
˛u°î
;

292 
disˇrd_zî€s_d©a
;

299 
xc›y_ª£rved
;

301 
rh_ª£rved1
;

302 
rh_ª£rved2
;

303 
rh_ª£rved3
;

306 
	sªque°_queue
 {

310 
li°_hód
 
queue_hód
;

311 
ªque°
 *
œ°_mîge
;

312 
ñev©‹_queue
 *
ñev©‹
;

313 
ƒ_rqs
[2];

314 
ƒ_rqs_ñv¥iv
;

322 
ªque°_li°
 
roŸ_æ
;

324 
ªque°_‚_¥oc
 *
ªque°_‚
;

325 
make_ªque°_‚
 *make_request_fn;

326 
¥ï_rq_‚
 *prep_rq_fn;

327 
mîge_bvec_‚
 *merge_bvec_fn;

328 
so·úq_d⁄e_‚
 *softirq_done_fn;

329 
rq_timed_out_‚
 *rq_timed_out_fn;

330 
dma_døö_√eded_‚
 *
dma_døö_√eded
;

331 
Œd_busy_‚
 *lld_busy_fn;

333 
blk_mq_›s
 *
mq_›s
;

335 *
mq_m≠
;

338 
blk_mq_˘x
 *
queue_˘x
;

339 
ƒ_queues
;

342 
blk_mq_hw_˘x
 **
queue_hw_˘x
;

343 
ƒ_hw_queues
;

348 
£˘‹_t
 
íd_£˘‹
;

349 
ªque°
 *
bound¨y_rq
;

354 
dñayed_w‹k
 
dñay_w‹k
;

356 
backög_dev_öfo
 backing_dev_info;

362 *
queued©a
;

367 
queue_Êags
;

373 
id
;

378 
gÂ_t
 
boun˚_gÂ
;

385 
•ölock_t
 
__queue_lock
;

386 
•ölock_t
 *
queue_lock
;

391 
kobje˘
 
kobj
;

396 
kobje˘
 
mq_kobj
;

398 #ifde‡
CONFIG_PM_RUNTIME


399 
devi˚
 *
dev
;

400 
Ωm_°©us
;

401 
ƒ_≥ndög
;

407 
ƒ_ªque°s
;

408 
ƒ_c⁄ge°i⁄_⁄
;

409 
ƒ_c⁄ge°i⁄_off
;

410 
ƒ_b©chög
;

412 
dma_døö_size
;

413 *
dma_døö_buf„r
;

414 
dma_∑d_mask
;

415 
dma_Æignmít
;

417 
blk_queue_èg
 *
queue_ègs
;

418 
li°_hód
 
èg_busy_li°
;

420 
ƒ_s‹ãd
;

421 
ö_Êight
[2];

427 
ªque°_‚_a˘ive
;

429 
rq_timeout
;

430 
timî_li°
 
timeout
;

431 
li°_hód
 
timeout_li°
;

433 
li°_hód
 
icq_li°
;

434 #ifde‡
CONFIG_BLK_CGROUP


435 
	`DECLARE_BITMAP
 (
blkcg_pﬁs
, 
BLKCG_MAX_POLS
);

436 
blkcg_gq
 *
roŸ_blkg
;

437 
li°_hód
 
blkg_li°
;

440 
queue_limôs
 
limôs
;

445 
sg_timeout
;

446 
sg_ª£rved_size
;

447 
node
;

448 #ifde‡
CONFIG_BLK_DEV_IO_TRACE


449 
blk_åa˚
 *blk_trace;

454 
Êush_Êags
;

455 
Êush_nŸ_queuóbÀ
:1;

456 
Êush_queue_dñayed
:1;

457 
Êush_≥ndög_idx
:1;

458 
Êush_ru¬ög_idx
:1;

459 
Êush_≥ndög_sö˚
;

460 
li°_hód
 
Êush_queue
[2];

461 
li°_hód
 
Êush_d©a_ö_Êight
;

462 
ªque°
 *
Êush_rq
;

463 
•ölock_t
 
mq_Êush_lock
;

465 
muãx
 
sysfs_lock
;

467 
by∑ss_dïth
;

469 #i‡
	`deföed
(
CONFIG_BLK_DEV_BSG
)

470 
bsg_job_‚
 *bsg_job_fn;

471 
bsg_job_size
;

472 
bsg_˛ass_devi˚
 
bsg_dev
;

475 #ifde‡
CONFIG_BLK_DEV_THROTTLING


477 
thrŸl_d©a
 *
td
;

479 
rcu_hód
Ñcu_head;

480 
waô_queue_hód_t
 
mq_‰ìze_wq
;

481 
≥r˝u_cou¡î
 
mq_ußge_cou¡î
;

482 
li°_hód
 
Æl_q_node
;

485 
	#QUEUE_FLAG_QUEUED
 1

	)

486 
	#QUEUE_FLAG_STOPPED
 2

	)

487 
	#QUEUE_FLAG_SYNCFULL
 3

	)

488 
	#QUEUE_FLAG_ASYNCFULL
 4

	)

489 
	#QUEUE_FLAG_DYING
 5

	)

490 
	#QUEUE_FLAG_BYPASS
 6

	)

491 
	#QUEUE_FLAG_BIDI
 7

	)

492 
	#QUEUE_FLAG_NOMERGES
 8

	)

493 
	#QUEUE_FLAG_SAME_COMP
 9

	)

494 
	#QUEUE_FLAG_FAIL_IO
 10

	)

495 
	#QUEUE_FLAG_STACKABLE
 11

	)

496 
	#QUEUE_FLAG_NONROT
 12

	)

497 
	#QUEUE_FLAG_VIRT
 
QUEUE_FLAG_NONROT


	)

498 
	#QUEUE_FLAG_IO_STAT
 13

	)

499 
	#QUEUE_FLAG_DISCARD
 14

	)

500 
	#QUEUE_FLAG_NOXMERGES
 15

	)

501 
	#QUEUE_FLAG_ADD_RANDOM
 16

	)

502 
	#QUEUE_FLAG_SECDISCARD
 17

	)

503 
	#QUEUE_FLAG_SAME_FORCE
 18

	)

504 
	#QUEUE_FLAG_DEAD
 19

	)

505 
	#QUEUE_FLAG_INIT_DONE
 20

	)

506 
	#QUEUE_FLAG_UNPRIV_SGIO
 21

	)

508 
	#QUEUE_FLAG_DEFAULT
 ((1 << 
QUEUE_FLAG_IO_STAT
) | \

509 (1 << 
QUEUE_FLAG_STACKABLE
) | \

510 (1 << 
QUEUE_FLAG_SAME_COMP
) | \

511 (1 << 
QUEUE_FLAG_ADD_RANDOM
))

	)

513 
	#QUEUE_FLAG_MQ_DEFAULT
 ((1 << 
QUEUE_FLAG_IO_STAT
) | \

514 (1 << 
QUEUE_FLAG_SAME_COMP
))

	)

516 
ölöe
 
	$queue_lockdï_as£π_hñd
(
ªque°_queue
 *
q
)

518 i‡(
q
->
queue_lock
)

519 
	`lockdï_as£π_hñd
(
q
->
queue_lock
);

520 
	}
}

522 
ölöe
 
	$queue_Êag_£t_u∆ocked
(
Êag
,

523 
ªque°_queue
 *
q
)

525 
	`__£t_bô
(
Êag
, &
q
->
queue_Êags
);

526 
	}
}

528 
ölöe
 
	$queue_Êag_ã°_™d_˛ór
(
Êag
,

529 
ªque°_queue
 *
q
)

531 
	`queue_lockdï_as£π_hñd
(
q
);

533 i‡(
	`ã°_bô
(
Êag
, &
q
->
queue_Êags
)) {

534 
	`__˛ór_bô
(
Êag
, &
q
->
queue_Êags
);

539 
	}
}

541 
ölöe
 
	$queue_Êag_ã°_™d_£t
(
Êag
,

542 
ªque°_queue
 *
q
)

544 
	`queue_lockdï_as£π_hñd
(
q
);

546 i‡(!
	`ã°_bô
(
Êag
, &
q
->
queue_Êags
)) {

547 
	`__£t_bô
(
Êag
, &
q
->
queue_Êags
);

552 
	}
}

554 
ölöe
 
	$queue_Êag_£t
(
Êag
, 
ªque°_queue
 *
q
)

556 
	`queue_lockdï_as£π_hñd
(
q
);

557 
	`__£t_bô
(
Êag
, &
q
->
queue_Êags
);

558 
	}
}

560 
ölöe
 
	$queue_Êag_˛ór_u∆ocked
(
Êag
,

561 
ªque°_queue
 *
q
)

563 
	`__˛ór_bô
(
Êag
, &
q
->
queue_Êags
);

564 
	}
}

566 
ölöe
 
	$queue_ö_Êight
(
ªque°_queue
 *
q
)

568  
q
->
ö_Êight
[0] + q->in_flight[1];

569 
	}
}

571 
ölöe
 
	$queue_Êag_˛ór
(
Êag
, 
ªque°_queue
 *
q
)

573 
	`queue_lockdï_as£π_hñd
(
q
);

574 
	`__˛ór_bô
(
Êag
, &
q
->
queue_Êags
);

575 
	}
}

577 
	#blk_queue_ègged
(
q
Ë
	`ã°_bô
(
QUEUE_FLAG_QUEUED
, &(q)->
queue_Êags
)

	)

578 
	#blk_queue_°›≥d
(
q
Ë
	`ã°_bô
(
QUEUE_FLAG_STOPPED
, &(q)->
queue_Êags
)

	)

579 
	#blk_queue_dyög
(
q
Ë
	`ã°_bô
(
QUEUE_FLAG_DYING
, &(q)->
queue_Êags
)

	)

580 
	#blk_queue_dód
(
q
Ë
	`ã°_bô
(
QUEUE_FLAG_DEAD
, &(q)->
queue_Êags
)

	)

581 
	#blk_queue_by∑ss
(
q
Ë
	`ã°_bô
(
QUEUE_FLAG_BYPASS
, &(q)->
queue_Êags
)

	)

582 
	#blk_queue_öô_d⁄e
(
q
Ë
	`ã°_bô
(
QUEUE_FLAG_INIT_DONE
, &(q)->
queue_Êags
)

	)

583 
	#blk_queue_nomîges
(
q
Ë
	`ã°_bô
(
QUEUE_FLAG_NOMERGES
, &(q)->
queue_Êags
)

	)

584 
	#blk_queue_noxmîges
(
q
) \

585 
	`ã°_bô
(
QUEUE_FLAG_NOXMERGES
, &(
q
)->
queue_Êags
)

	)

586 
	#blk_queue_u≈riv_sgio
(
q
) \

587 
	`ã°_bô
(
QUEUE_FLAG_UNPRIV_SGIO
, &(
q
)->
queue_Êags
)

	)

588 
	#blk_queue_n⁄rŸ
(
q
Ë
	`ã°_bô
(
QUEUE_FLAG_NONROT
, &(q)->
queue_Êags
)

	)

589 
	#blk_queue_io_°©
(
q
Ë
	`ã°_bô
(
QUEUE_FLAG_IO_STAT
, &(q)->
queue_Êags
)

	)

590 
	#blk_queue_add_øndom
(
q
Ë
	`ã°_bô
(
QUEUE_FLAG_ADD_RANDOM
, &(q)->
queue_Êags
)

	)

591 
	#blk_queue_°ackabÀ
(
q
) \

592 
	`ã°_bô
(
QUEUE_FLAG_STACKABLE
, &(
q
)->
queue_Êags
)

	)

593 
	#blk_queue_disˇrd
(
q
Ë
	`ã°_bô
(
QUEUE_FLAG_DISCARD
, &(q)->
queue_Êags
)

	)

594 
	#blk_queue_£cdisˇrd
(
q
Ë(
	`blk_queue_disˇrd
(q) && \

595 
	`ã°_bô
(
QUEUE_FLAG_SECDISCARD
, &(
q
)->
queue_Êags
))

	)

597 
	#blk_n‹ëry_ªque°
(
rq
) \

598 ((
rq
)->
cmd_Êags
 & (
REQ_FAILFAST_DEV
|
REQ_FAILFAST_TRANSPORT
| \

599 
REQ_FAILFAST_DRIVER
))

	)

601 
	#blk_accou¡_rq
(
rq
) \

602 (((
rq
)->
cmd_Êags
 & 
REQ_STARTED
) && \

603 ((
rq
)->
cmd_ty≥
 =
REQ_TYPE_FS
))

	)

605 
	#blk_pm_ªque°
(
rq
) \

606 ((
rq
)->
cmd_ty≥
 =
REQ_TYPE_PM_SUSPEND
 || \

607 (
rq
)->
cmd_ty≥
 =
REQ_TYPE_PM_RESUME
)

	)

609 
	#blk_rq_˝u_vÆid
(
rq
Ë(‘q)->
˝u
 !-1)

	)

610 
	#blk_bidi_rq
(
rq
Ë(‘q)->
√xt_rq
 !
NULL
)

	)

612 
	#blk_queued_rq
(
rq
Ë(!
	`li°_em±y
(&‘q)->
queuñi°
))

	)

614 
	#li°_íåy_rq
(
±r
Ë
	`li°_íåy
(’å), 
ªque°
, 
queuñi°
)

	)

616 
	#rq_d©a_dú
(
rq
Ë((‘q)->
cmd_Êags
 & 1Ë!0)

	)

618 
ölöe
 
	$blk_queue_˛u°î
(
ªque°_queue
 *
q
)

620  
q
->
limôs
.
˛u°î
;

621 
	}
}

626 
ölöe
 
boﬁ
 
	$rw_is_sync
(
rw_Êags
)

628  !(
rw_Êags
 & 
REQ_WRITE
Ë|| (rw_Êag†& 
REQ_SYNC
);

629 
	}
}

631 
ölöe
 
boﬁ
 
	$rq_is_sync
(
ªque°
 *
rq
)

633  
	`rw_is_sync
(
rq
->
cmd_Êags
);

634 
	}
}

636 
ölöe
 
boﬁ
 
	$blk_æ_fuŒ
(
ªque°_li°
 *
æ
, 
boﬁ
 
sync
)

638 
Êag
 = 
sync
 ? 
BLK_RL_SYNCFULL
 : 
BLK_RL_ASYNCFULL
;

640  
æ
->
Êags
 & 
Êag
;

641 
	}
}

643 
ölöe
 
	$blk_£t_æ_fuŒ
(
ªque°_li°
 *
æ
, 
boﬁ
 
sync
)

645 
Êag
 = 
sync
 ? 
BLK_RL_SYNCFULL
 : 
BLK_RL_ASYNCFULL
;

647 
æ
->
Êags
 |
Êag
;

648 
	}
}

650 
ölöe
 
	$blk_˛ór_æ_fuŒ
(
ªque°_li°
 *
æ
, 
boﬁ
 
sync
)

652 
Êag
 = 
sync
 ? 
BLK_RL_SYNCFULL
 : 
BLK_RL_ASYNCFULL
;

654 
æ
->
Êags
 &~
Êag
;

655 
	}
}

657 
ölöe
 
boﬁ
 
	$rq_mîgóbÀ
(
ªque°
 *
rq
)

659 i‡(
rq
->
cmd_ty≥
 !
REQ_TYPE_FS
)

660  
Ál£
;

662 i‡(
rq
->
cmd_Êags
 & 
REQ_NOMERGE_FLAGS
)

663  
Ál£
;

665  
åue
;

666 
	}
}

668 
ölöe
 
boﬁ
 
	$blk_check_mîge_Êags
(
Êags1
,

669 
Êags2
)

671 i‡((
Êags1
 & 
REQ_DISCARD
Ë!(
Êags2
 & REQ_DISCARD))

672  
Ál£
;

674 i‡((
Êags1
 & 
REQ_SECURE
Ë!(
Êags2
 & REQ_SECURE))

675  
Ál£
;

677 i‡((
Êags1
 & 
REQ_WRITE_SAME
Ë!(
Êags2
 & REQ_WRITE_SAME))

678  
Ál£
;

680  
åue
;

681 
	}
}

683 
ölöe
 
boﬁ
 
	$blk_wrôe_ßme_mîgóbÀ
(
bio
 *
a
, biÿ*
b
)

685 i‡(
	`bio_d©a
(
a
Ë=bio_d©a(
b
))

686  
åue
;

688  
Ál£
;

689 
	}
}

694 
	#BLKPREP_OK
 0

	)

695 
	#BLKPREP_KILL
 1

	)

696 
	#BLKPREP_DEFER
 2

	)

698 
blk_max_low_p‚
, 
blk_max_p‚
;

708 #i‡
BITS_PER_LONG
 == 32

709 
	#BLK_BOUNCE_HIGH
 ((
u64
)
blk_max_low_p‚
 << 
PAGE_SHIFT
)

	)

711 
	#BLK_BOUNCE_HIGH
 -1ULL

	)

713 
	#BLK_BOUNCE_ANY
 (-1ULL)

	)

714 
	#BLK_BOUNCE_ISA
 (
	`DMA_BIT_MASK
(24))

	)

719 
	#BLK_DEFAULT_SG_TIMEOUT
 (60 * 
HZ
)

	)

720 
	#BLK_MIN_SG_TIMEOUT
 (7 * 
HZ
)

	)

722 #ifde‡
CONFIG_BOUNCE


723 
öô_emîgícy_iß_poﬁ
();

724 
blk_queue_boun˚
(
ªque°_queue
 *
q
, 
bio
 **bio);

726 
ölöe
 
	$öô_emîgícy_iß_poﬁ
()

729 
	}
}

730 
ölöe
 
	$blk_queue_boun˚
(
ªque°_queue
 *
q
, 
bio
 **bio)

732 
	}
}

735 
	srq_m≠_d©a
 {

736 
∑ge
 **
	m∑ges
;

737 
	m∑ge_‹dî
;

738 
	mƒ_íåõs
;

739 
	moff£t
;

740 
	mnuŒ_m≠≥d
;

741 
	m‰om_u£r
;

744 
	sªq_ôî©‹
 {

745 
	mi
;

746 
bio
 *
	mbio
;

750 
	#f‹_óch_bio
(
_bio
) \

751 ; 
_bio
; _biÿ_bio->
bi_√xt
)

	)

752 
	#__rq_f‹_óch_bio
(
_bio
, 
rq
) \

753 i‡((
rq
->
bio
)) \

754 
_bio
 = (
rq
)->
bio
; _bio; _biÿ_bio->
bi_√xt
)

	)

756 
	#rq_f‹_óch_£gmít
(
bvl
, 
_rq
, 
_ôî
) \

757 
	`__rq_f‹_óch_bio
(
_ôî
.
bio
, 
_rq
) \

758 
	`bio_f‹_óch_£gmít
(
bvl
, 
_ôî
.
bio
, _ôî.
i
)

	)

760 
	#rq_ôî_œ°
(
rq
, 
_ôî
) \

761 (
_ôî
.
bio
->
bi_√xt
 =
NULL
 && _ôî.
i
 =_ôî.bio->
bi_v˙t
-1)

	)

763 #i‚de‡
ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE


766 #i‡
ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE


767 
rq_Êush_dˇche_∑ges
(
ªque°
 *
rq
);

769 
ölöe
 
	$rq_Êush_dˇche_∑ges
(
ªque°
 *
rq
)

771 
	}
}

774 
blk_ªgi°î_queue
(
gídisk
 *
disk
);

775 
blk_uƒegi°î_queue
(
gídisk
 *
disk
);

776 
gíîic_make_ªque°
(
bio
 *bio);

777 
blk_rq_öô
(
ªque°_queue
 *
q
, 
ªque°
 *
rq
);

778 
blk_put_ªque°
(
ªque°
 *);

779 
__blk_put_ªque°
(
ªque°_queue
 *, 
ªque°
 *);

780 
ªque°
 *
blk_gë_ªque°
(
ªque°_queue
 *, , 
gÂ_t
);

781 
ªque°
 *
blk_make_ªque°
(
ªque°_queue
 *, 
bio
 *,

782 
gÂ_t
);

783 
blk_ªqueue_ªque°
(
ªque°_queue
 *, 
ªque°
 *);

784 
blk_add_ªque°_∑ylﬂd
(
ªque°
 *
rq
, 
∑ge
 *page,

785 
Àn
);

786 
blk_rq_check_limôs
(
ªque°_queue
 *
q
, 
ªque°
 *
rq
);

787 
blk_Œd_busy
(
ªque°_queue
 *
q
);

788 
blk_rq_¥ï_˛⁄e
(
ªque°
 *
rq
, ªque° *
rq_§c
,

789 
bio_£t
 *
bs
, 
gÂ_t
 
gÂ_mask
,

790 (*
bio_˘r
)(
bio
 *, bio *, *),

791 *
d©a
);

792 
	`blk_rq_u≈ªp_˛⁄e
(
ªque°
 *
rq
);

793 
	`blk_ö£π_˛⁄ed_ªque°
(
ªque°_queue
 *
q
,

794 
ªque°
 *
rq
);

795 
	`blk_dñay_queue
(
ªque°_queue
 *, );

796 
	`blk_ªcou¡_£gmíts
(
ªque°_queue
 *, 
bio
 *);

797 
	`scsi_vîify_blk_io˘l
(
block_devi˚
 *, );

798 
	`scsi_cmd_blk_io˘l
(
block_devi˚
 *, 
fmode_t
,

799 , 
__u£r
 *);

800 
	`scsi_cmd_io˘l
(
ªque°_queue
 *, 
gídisk
 *, 
fmode_t
,

801 , 
__u£r
 *);

802 
	`sg_scsi_io˘l
(
ªque°_queue
 *, 
gídisk
 *, 
fmode_t
,

803 
scsi_io˘l_comm™d
 
__u£r
 *);

805 
	`blk_queue_bio
(
ªque°_queue
 *
q
, 
bio
 *bio);

812 
ölöe
 
	$blk_˛ór_queue_c⁄ge°ed
(
ªque°_queue
 *
q
, 
sync
)

814 
	`˛ór_bdi_c⁄ge°ed
(&
q
->
backög_dev_öfo
, 
sync
);

815 
	}
}

821 
ölöe
 
	$blk_£t_queue_c⁄ge°ed
(
ªque°_queue
 *
q
, 
sync
)

823 
	`£t_bdi_c⁄ge°ed
(&
q
->
backög_dev_öfo
, 
sync
);

824 
	}
}

826 
blk_°¨t_queue
(
ªque°_queue
 *
q
);

827 
blk_°›_queue
(
ªque°_queue
 *
q
);

828 
blk_sync_queue
(
ªque°_queue
 *
q
);

829 
__blk_°›_queue
(
ªque°_queue
 *
q
);

830 
__blk_run_queue
(
ªque°_queue
 *
q
);

831 
blk_run_queue
(
ªque°_queue
 *);

832 
blk_run_queue_async
(
ªque°_queue
 *
q
);

833 
blk_rq_m≠_u£r
(
ªque°_queue
 *, 
ªque°
 *,

834 
rq_m≠_d©a
 *, 
__u£r
 *, ,

835 
gÂ_t
);

836 
blk_rq_unm≠_u£r
(
bio
 *);

837 
blk_rq_m≠_kîn
(
ªque°_queue
 *, 
ªque°
 *, *, , 
gÂ_t
);

838 
blk_rq_m≠_u£r_iov
(
ªque°_queue
 *, 
ªque°
 *,

839 
rq_m≠_d©a
 *, 
sg_iovec
 *, ,

840 , 
gÂ_t
);

841 
blk_execuã_rq
(
ªque°_queue
 *, 
gídisk
 *,

842 
ªque°
 *, );

843 
blk_execuã_rq_nowaô
(
ªque°_queue
 *, 
gídisk
 *,

844 
ªque°
 *, , 
rq_íd_io_‚
 *);

846 
ölöe
 
ªque°_queue
 *
	$bdev_gë_queue
(
block_devi˚
 *
bdev
)

848  
bdev
->
bd_disk
->
queue
;

849 
	}
}

859 
ölöe
 
£˘‹_t
 
	$blk_rq_pos
(c⁄° 
ªque°
 *
rq
)

861  
rq
->
__£˘‹
;

862 
	}
}

864 
ölöe
 
	$blk_rq_byãs
(c⁄° 
ªque°
 *
rq
)

866  
rq
->
__d©a_Àn
;

867 
	}
}

869 
ölöe
 
	$blk_rq_cur_byãs
(c⁄° 
ªque°
 *
rq
)

871  
rq
->
bio
 ? 
	`bio_cur_byãs
(rq->bio) : 0;

872 
	}
}

874 
blk_rq_îr_byãs
(c⁄° 
ªque°
 *
rq
);

876 
ölöe
 
	$blk_rq_£˘‹s
(c⁄° 
ªque°
 *
rq
)

878  
	`blk_rq_byãs
(
rq
) >> 9;

879 
	}
}

881 
ölöe
 
	$blk_rq_cur_£˘‹s
(c⁄° 
ªque°
 *
rq
)

883  
	`blk_rq_cur_byãs
(
rq
) >> 9;

884 
	}
}

886 
ölöe
 
	$blk_queue_gë_max_£˘‹s
(
ªque°_queue
 *
q
,

887 
cmd_Êags
)

889 i‡(
	`u∆ikñy
(
cmd_Êags
 & 
REQ_DISCARD
))

890  
	`mö
(
q
->
limôs
.
max_disˇrd_£˘‹s
, 
UINT_MAX
 >> 9);

892 i‡(
	`u∆ikñy
(
cmd_Êags
 & 
REQ_WRITE_SAME
))

893  
q
->
limôs
.
max_wrôe_ßme_£˘‹s
;

895  
q
->
limôs
.
max_£˘‹s
;

896 
	}
}

898 
ölöe
 
	$blk_rq_gë_max_£˘‹s
(
ªque°
 *
rq
)

900 
ªque°_queue
 *
q
 = 
rq
->q;

902 i‡(
	`u∆ikñy
(
rq
->
cmd_ty≥
 =
REQ_TYPE_BLOCK_PC
))

903  
q
->
limôs
.
max_hw_£˘‹s
;

905  
	`blk_queue_gë_max_£˘‹s
(
q
, 
rq
->
cmd_Êags
);

906 
	}
}

908 
ölöe
 
	$blk_rq_cou¡_bios
(
ªque°
 *
rq
)

910 
ƒ_bios
 = 0;

911 
bio
 *bio;

913 
	`__rq_f‹_óch_bio
(
bio
, 
rq
)

914 
ƒ_bios
++;

916  
ƒ_bios
;

917 
	}
}

922 
ªque°
 *
blk_≥ek_ªque°
(
ªque°_queue
 *
q
);

923 
blk_°¨t_ªque°
(
ªque°
 *
rq
);

924 
ªque°
 *
blk_„tch_ªque°
(
ªque°_queue
 *
q
);

939 
boﬁ
 
blk_upd©e_ªque°
(
ªque°
 *
rq
, 
îr‹
,

940 
ƒ_byãs
);

941 
boﬁ
 
blk_íd_ªque°
(
ªque°
 *
rq
, 
îr‹
,

942 
ƒ_byãs
);

943 
blk_íd_ªque°_Æl
(
ªque°
 *
rq
, 
îr‹
);

944 
boﬁ
 
blk_íd_ªque°_cur
(
ªque°
 *
rq
, 
îr‹
);

945 
boﬁ
 
blk_íd_ªque°_îr
(
ªque°
 *
rq
, 
îr‹
);

946 
boﬁ
 
__blk_íd_ªque°
(
ªque°
 *
rq
, 
îr‹
,

947 
ƒ_byãs
);

948 
__blk_íd_ªque°_Æl
(
ªque°
 *
rq
, 
îr‹
);

949 
boﬁ
 
__blk_íd_ªque°_cur
(
ªque°
 *
rq
, 
îr‹
);

950 
boﬁ
 
__blk_íd_ªque°_îr
(
ªque°
 *
rq
, 
îr‹
);

952 
blk_com∂ëe_ªque°
(
ªque°
 *);

953 
__blk_com∂ëe_ªque°
(
ªque°
 *);

954 
blk_ab‹t_ªque°
(
ªque°
 *);

955 
blk_u≈ªp_ªque°
(
ªque°
 *);

960 
ªque°_queue
 *
blk_öô_queue_node
(
ªque°_‚_¥oc
 *
r‚
,

961 
•ölock_t
 *
lock
, 
node_id
);

962 
ªque°_queue
 *
blk_öô_queue
(
ªque°_‚_¥oc
 *, 
•ölock_t
 *);

963 
ªque°_queue
 *
blk_öô_Æloˇãd_queue
(request_queue *,

964 
ªque°_‚_¥oc
 *, 
•ölock_t
 *);

965 
blk_˛ónup_queue
(
ªque°_queue
 *);

966 
blk_queue_make_ªque°
(
ªque°_queue
 *, 
make_ªque°_‚
 *);

967 
blk_queue_boun˚_limô
(
ªque°_queue
 *, 
u64
);

968 
blk_limôs_max_hw_£˘‹s
(
queue_limôs
 *, );

969 
blk_queue_max_hw_£˘‹s
(
ªque°_queue
 *, );

970 
blk_queue_max_£gmíts
(
ªque°_queue
 *, );

971 
blk_queue_max_£gmít_size
(
ªque°_queue
 *, );

972 
blk_queue_max_disˇrd_£˘‹s
(
ªque°_queue
 *
q
,

973 
max_disˇrd_£˘‹s
);

974 
blk_queue_max_wrôe_ßme_£˘‹s
(
ªque°_queue
 *
q
,

975 
max_wrôe_ßme_£˘‹s
);

976 
blk_queue_logiˇl_block_size
(
ªque°_queue
 *, );

977 
blk_queue_physiˇl_block_size
(
ªque°_queue
 *, );

978 
blk_queue_Æignmít_off£t
(
ªque°_queue
 *
q
,

979 
Æignmít
);

980 
blk_limôs_io_mö
(
queue_limôs
 *
limôs
, 
mö
);

981 
blk_queue_io_mö
(
ªque°_queue
 *
q
, 
mö
);

982 
blk_limôs_io_›t
(
queue_limôs
 *
limôs
, 
›t
);

983 
blk_queue_io_›t
(
ªque°_queue
 *
q
, 
›t
);

984 
blk_£t_deÁu…_limôs
(
queue_limôs
 *
lim
);

985 
blk_£t_°ackög_limôs
(
queue_limôs
 *
lim
);

986 
blk_°ack_limôs
(
queue_limôs
 *
t
, queue_limô†*
b
,

987 
£˘‹_t
 
off£t
);

988 
bdev_°ack_limôs
(
queue_limôs
 *
t
, 
block_devi˚
 *
bdev
,

989 
£˘‹_t
 
off£t
);

990 
disk_°ack_limôs
(
gídisk
 *
disk
, 
block_devi˚
 *
bdev
,

991 
£˘‹_t
 
off£t
);

992 
blk_queue_°ack_limôs
(
ªque°_queue
 *
t
, ªque°_queuê*
b
);

993 
blk_queue_dma_∑d
(
ªque°_queue
 *, );

994 
blk_queue_upd©e_dma_∑d
(
ªque°_queue
 *, );

995 
blk_queue_dma_døö
(
ªque°_queue
 *
q
,

996 
dma_døö_√eded_‚
 *
dma_døö_√eded
,

997 *
buf
, 
size
);

998 
blk_queue_Œd_busy
(
ªque°_queue
 *
q
, 
Œd_busy_‚
 *
‚
);

999 
blk_queue_£gmít_bound¨y
(
ªque°_queue
 *, );

1000 
blk_queue_¥ï_rq
(
ªque°_queue
 *, 
¥ï_rq_‚
 *
p‚
);

1001 
blk_queue_mîge_bvec
(
ªque°_queue
 *, 
mîge_bvec_‚
 *);

1002 
blk_queue_dma_Æignmít
(
ªque°_queue
 *, );

1003 
blk_queue_upd©e_dma_Æignmít
(
ªque°_queue
 *, );

1004 
blk_queue_so·úq_d⁄e
(
ªque°_queue
 *, 
so·úq_d⁄e_‚
 *);

1005 
blk_queue_rq_timed_out
(
ªque°_queue
 *, 
rq_timed_out_‚
 *);

1006 
blk_queue_rq_timeout
(
ªque°_queue
 *, );

1007 
blk_queue_Êush
(
ªque°_queue
 *
q
, 
Êush
);

1008 
blk_queue_Êush_queuóbÀ
(
ªque°_queue
 *
q
, 
boﬁ
 
queuóbÀ
);

1009 
backög_dev_öfo
 *
blk_gë_backög_dev_öfo
(
block_devi˚
 *
bdev
);

1011 
blk_rq_m≠_sg
(
ªque°_queue
 *, 
ªque°
 *, 
sˇâîli°
 *);

1012 
blk_bio_m≠_sg
(
ªque°_queue
 *
q
, 
bio
 *bio,

1013 
sˇâîli°
 *
sgli°
);

1014 
blk_dump_rq_Êags
(
ªque°
 *, *);

1015 
ƒ_blockdev_∑ges
();

1017 
boﬁ
 
__mu°_check
 
blk_gë_queue
(
ªque°_queue
 *);

1018 
ªque°_queue
 *
blk_Æloc_queue
(
gÂ_t
);

1019 
ªque°_queue
 *
blk_Æloc_queue_node
(
gÂ_t
, );

1020 
blk_put_queue
(
ªque°_queue
 *);

1025 #ifde‡
CONFIG_PM_RUNTIME


1026 
blk_pm_ru¡ime_öô
(
ªque°_queue
 *
q
, 
devi˚
 *
dev
);

1027 
blk_¥e_ru¡ime_su•íd
(
ªque°_queue
 *
q
);

1028 
blk_po°_ru¡ime_su•íd
(
ªque°_queue
 *
q
, 
îr
);

1029 
blk_¥e_ru¡ime_ªsume
(
ªque°_queue
 *
q
);

1030 
blk_po°_ru¡ime_ªsume
(
ªque°_queue
 *
q
, 
îr
);

1032 
ölöe
 
	$blk_pm_ru¡ime_öô
(
ªque°_queue
 *
q
,

1033 
devi˚
 *
dev
Ë{
	}
}

1034 
ölöe
 
	$blk_¥e_ru¡ime_su•íd
(
ªque°_queue
 *
q
)

1036  -
ENOSYS
;

1037 
	}
}

1038 
ölöe
 
	$blk_po°_ru¡ime_su•íd
(
ªque°_queue
 *
q
, 
îr
Ë{
	}
}

1039 
ölöe
 
	$blk_¥e_ru¡ime_ªsume
(
ªque°_queue
 *
q
Ë{
	}
}

1040 
ölöe
 
	$blk_po°_ru¡ime_ªsume
(
ªque°_queue
 *
q
, 
îr
Ë{
	}
}

1055 
	sblk_∂ug
 {

1056 
	mmagic
;

1057 
li°_hód
 
	mli°
;

1058 
li°_hód
 
	mmq_li°
;

1059 
li°_hód
 
	mcb_li°
;

1061 
	#BLK_MAX_REQUEST_COUNT
 16

	)

1063 
	gblk_∂ug_cb
;

1064 (*
	tblk_∂ug_cb_‚
)(
	tblk_∂ug_cb
 *, 
	tboﬁ
);

1065 
	sblk_∂ug_cb
 {

1066 
li°_hód
 
li°
;

1067 
blk_∂ug_cb_‚
 
ˇŒback
;

1068 *
d©a
;

1070 
blk_∂ug_cb
 *
	`blk_check_∂ugged
(
blk_∂ug_cb_‚
 
u≈lug
,

1071 *
d©a
, 
size
);

1072 
	`blk_°¨t_∂ug
(
blk_∂ug
 *);

1073 
	`blk_föish_∂ug
(
blk_∂ug
 *);

1074 
	`blk_Êush_∂ug_li°
(
blk_∂ug
 *, 
boﬁ
);

1076 
ölöe
 
	$blk_Êush_∂ug
(
èsk_°ru˘
 *
tsk
)

1078 
blk_∂ug
 *
∂ug
 = 
tsk
->plug;

1080 i‡(
∂ug
)

1081 
	`blk_Êush_∂ug_li°
(
∂ug
, 
Ál£
);

1082 
	}
}

1084 
ölöe
 
	$blk_scheduÀ_Êush_∂ug
(
èsk_°ru˘
 *
tsk
)

1086 
blk_∂ug
 *
∂ug
 = 
tsk
->plug;

1088 i‡(
∂ug
)

1089 
	`blk_Êush_∂ug_li°
(
∂ug
, 
åue
);

1090 
	}
}

1092 
ölöe
 
boﬁ
 
	$blk_√eds_Êush_∂ug
(
èsk_°ru˘
 *
tsk
)

1094 
blk_∂ug
 *
∂ug
 = 
tsk
->plug;

1096  
∂ug
 &&

1097 (!
	`li°_em±y
(&
∂ug
->
li°
) ||

1098 !
	`li°_em±y
(&
∂ug
->
mq_li°
) ||

1099 !
	`li°_em±y
(&
∂ug
->
cb_li°
));

1100 
	}
}

1105 
	#blk_rq_ègged
(
rq
Ë(‘q)->
cmd_Êags
 & 
REQ_QUEUED
)

	)

1106 
blk_queue_°¨t_èg
(
ªque°_queue
 *, 
ªque°
 *);

1107 
ªque°
 *
blk_queue_föd_èg
(
ªque°_queue
 *, );

1108 
blk_queue_íd_èg
(
ªque°_queue
 *, 
ªque°
 *);

1109 
blk_queue_öô_ègs
(
ªque°_queue
 *, , 
blk_queue_èg
 *);

1110 
blk_queue_‰ì_ègs
(
ªque°_queue
 *);

1111 
blk_queue_ªsize_ègs
(
ªque°_queue
 *, );

1112 
blk_queue_övÆid©e_ègs
(
ªque°_queue
 *);

1113 
blk_queue_èg
 *
blk_öô_ègs
();

1114 
blk_‰ì_ègs
(
blk_queue_èg
 *);

1116 
ölöe
 
ªque°
 *
	$blk_m≠_queue_föd_èg
(
blk_queue_èg
 *
bqt
,

1117 
èg
)

1119 i‡(
	`u∆ikñy
(
bqt
 =
NULL
 || 
èg
 >bqt->
ªÆ_max_dïth
))

1120  
NULL
;

1121  
bqt
->
èg_ödex
[
èg
];

1122 
	}
}

1124 
	#BLKDEV_DISCARD_SECURE
 0x01

	)

1126 
blkdev_issue_Êush
(
block_devi˚
 *, 
gÂ_t
, 
£˘‹_t
 *);

1127 
blkdev_issue_disˇrd
(
block_devi˚
 *
bdev
, 
£˘‹_t
 
£˘‹
,

1128 
£˘‹_t
 
ƒ_£˘s
, 
gÂ_t
 
gÂ_mask
, 
Êags
);

1129 
blkdev_issue_wrôe_ßme
(
block_devi˚
 *
bdev
, 
£˘‹_t
 
£˘‹
,

1130 
£˘‹_t
 
ƒ_£˘s
, 
gÂ_t
 
gÂ_mask
, 
∑ge
 *page);

1131 
blkdev_issue_zîoout
(
block_devi˚
 *
bdev
, 
£˘‹_t
 
£˘‹
,

1132 
£˘‹_t
 
ƒ_£˘s
, 
gÂ_t
 
gÂ_mask
);

1133 
ölöe
 
	$sb_issue_disˇrd
(
su≥r_block
 *
sb
, 
£˘‹_t
 
block
,

1134 
£˘‹_t
 
ƒ_blocks
, 
gÂ_t
 
gÂ_mask
, 
Êags
)

1136  
	`blkdev_issue_disˇrd
(
sb
->
s_bdev
, 
block
 << (sb->
s_blocksize_bôs
 - 9),

1137 
ƒ_blocks
 << (
sb
->
s_blocksize_bôs
 - 9),

1138 
gÂ_mask
, 
Êags
);

1139 
	}
}

1140 
ölöe
 
	$sb_issue_zîoout
(
su≥r_block
 *
sb
, 
£˘‹_t
 
block
,

1141 
£˘‹_t
 
ƒ_blocks
, 
gÂ_t
 
gÂ_mask
)

1143  
	`blkdev_issue_zîoout
(
sb
->
s_bdev
,

1144 
block
 << (
sb
->
s_blocksize_bôs
 - 9),

1145 
ƒ_blocks
 << (
sb
->
s_blocksize_bôs
 - 9),

1146 
gÂ_mask
);

1147 
	}
}

1149 
blk_vîify_comm™d
(
ªque°_queue
 *
q
,

1150 *
cmd
, 
fmode_t
 
has_wrôe_≥rm
);

1152 
	eblk_deÁu…_limôs
 {

1153 
	mBLK_MAX_SEGMENTS
 = 128,

1154 
	mBLK_SAFE_MAX_SECTORS
 = 255,

1155 
	mBLK_DEF_MAX_SECTORS
 = 1024,

1156 
	mBLK_MAX_SEGMENT_SIZE
 = 65536,

1157 
	mBLK_SEG_BOUNDARY_MASK
 = 0xFFFFFFFFUL,

1160 
	#blkdev_íåy_to_ªque°
(
íåy
Ë
	`li°_íåy
(”¡ry), 
ªque°
, 
queuñi°
)

	)

1162 
ölöe
 
	$queue_boun˚_p‚
(
ªque°_queue
 *
q
)

1164  
q
->
limôs
.
boun˚_p‚
;

1165 
	}
}

1167 
ölöe
 
	$queue_£gmít_bound¨y
(
ªque°_queue
 *
q
)

1169  
q
->
limôs
.
£g_bound¨y_mask
;

1170 
	}
}

1172 
ölöe
 
	$queue_max_£˘‹s
(
ªque°_queue
 *
q
)

1174  
q
->
limôs
.
max_£˘‹s
;

1175 
	}
}

1177 
ölöe
 
	$queue_max_hw_£˘‹s
(
ªque°_queue
 *
q
)

1179  
q
->
limôs
.
max_hw_£˘‹s
;

1180 
	}
}

1182 
ölöe
 
	$queue_max_£gmíts
(
ªque°_queue
 *
q
)

1184  
q
->
limôs
.
max_£gmíts
;

1185 
	}
}

1187 
ölöe
 
	$queue_max_£gmít_size
(
ªque°_queue
 *
q
)

1189  
q
->
limôs
.
max_£gmít_size
;

1190 
	}
}

1192 
ölöe
 
	$queue_logiˇl_block_size
(
ªque°_queue
 *
q
)

1194 
ªtvÆ
 = 512;

1196 i‡(
q
 && q->
limôs
.
logiˇl_block_size
)

1197 
ªtvÆ
 = 
q
->
limôs
.
logiˇl_block_size
;

1199  
ªtvÆ
;

1200 
	}
}

1202 
ölöe
 
	$bdev_logiˇl_block_size
(
block_devi˚
 *
bdev
)

1204  
	`queue_logiˇl_block_size
(
	`bdev_gë_queue
(
bdev
));

1205 
	}
}

1207 
ölöe
 
	$queue_physiˇl_block_size
(
ªque°_queue
 *
q
)

1209  
q
->
limôs
.
physiˇl_block_size
;

1210 
	}
}

1212 
ölöe
 
	$bdev_physiˇl_block_size
(
block_devi˚
 *
bdev
)

1214  
	`queue_physiˇl_block_size
(
	`bdev_gë_queue
(
bdev
));

1215 
	}
}

1217 
ölöe
 
	$queue_io_mö
(
ªque°_queue
 *
q
)

1219  
q
->
limôs
.
io_mö
;

1220 
	}
}

1222 
ölöe
 
	$bdev_io_mö
(
block_devi˚
 *
bdev
)

1224  
	`queue_io_mö
(
	`bdev_gë_queue
(
bdev
));

1225 
	}
}

1227 
ölöe
 
	$queue_io_›t
(
ªque°_queue
 *
q
)

1229  
q
->
limôs
.
io_›t
;

1230 
	}
}

1232 
ölöe
 
	$bdev_io_›t
(
block_devi˚
 *
bdev
)

1234  
	`queue_io_›t
(
	`bdev_gë_queue
(
bdev
));

1235 
	}
}

1237 
ölöe
 
	$queue_Æignmít_off£t
(
ªque°_queue
 *
q
)

1239 i‡(
q
->
limôs
.
mißlig√d
)

1242  
q
->
limôs
.
Æignmít_off£t
;

1243 
	}
}

1245 
ölöe
 
	$queue_limô_Æignmít_off£t
(
queue_limôs
 *
lim
, 
£˘‹_t
 
£˘‹
)

1247 
gønuœrôy
 = 
	`max
(
lim
->
physiˇl_block_size
,Üim->
io_mö
);

1248 
Æignmít
 = (
£˘‹
 << 9Ë& (
gønuœrôy
 - 1);

1250  (
gønuœrôy
 + 
lim
->
Æignmít_off£t
 - 
Æignmít
)

1251 & (
gønuœrôy
 - 1);

1252 
	}
}

1254 
ölöe
 
	$bdev_Æignmít_off£t
(
block_devi˚
 *
bdev
)

1256 
ªque°_queue
 *
q
 = 
	`bdev_gë_queue
(
bdev
);

1258 i‡(
q
->
limôs
.
mißlig√d
)

1261 i‡(
bdev
 !bdev->
bd_c⁄èös
)

1262  
bdev
->
bd_∑π
->
Æignmít_off£t
;

1264  
q
->
limôs
.
Æignmít_off£t
;

1265 
	}
}

1267 
ölöe
 
	$queue_disˇrd_Æignmít
(
ªque°_queue
 *
q
)

1269 i‡(
q
->
limôs
.
disˇrd_mißlig√d
)

1272  
q
->
limôs
.
disˇrd_Æignmít
;

1273 
	}
}

1275 
ölöe
 
	$queue_limô_disˇrd_Æignmít
(
queue_limôs
 *
lim
, 
£˘‹_t
 
£˘‹
)

1277 
Æignmít
, 
gønuœrôy
, 
off£t
;

1279 i‡(!
lim
->
max_disˇrd_£˘‹s
)

1283 
Æignmít
 = 
lim
->
disˇrd_Æignmít
 >> 9;

1284 
gønuœrôy
 = 
lim
->
disˇrd_gønuœrôy
 >> 9;

1285 i‡(!
gønuœrôy
)

1289 
off£t
 = 
	`£˘‹_div
(
£˘‹
, 
gønuœrôy
);

1292 
off£t
 = (
gønuœrôy
 + 
Æignmít
 - offset) % granularity;

1295  
off£t
 << 9;

1296 
	}
}

1298 
ölöe
 
	$bdev_disˇrd_Æignmít
(
block_devi˚
 *
bdev
)

1300 
ªque°_queue
 *
q
 = 
	`bdev_gë_queue
(
bdev
);

1302 i‡(
bdev
 !bdev->
bd_c⁄èös
)

1303  
bdev
->
bd_∑π
->
disˇrd_Æignmít
;

1305  
q
->
limôs
.
disˇrd_Æignmít
;

1306 
	}
}

1308 
ölöe
 
	$queue_disˇrd_zî€s_d©a
(
ªque°_queue
 *
q
)

1310 i‡(
q
->
limôs
.
max_disˇrd_£˘‹s
 && q->limôs.
disˇrd_zî€s_d©a
 == 1)

1314 
	}
}

1316 
ölöe
 
	$bdev_disˇrd_zî€s_d©a
(
block_devi˚
 *
bdev
)

1318  
	`queue_disˇrd_zî€s_d©a
(
	`bdev_gë_queue
(
bdev
));

1319 
	}
}

1321 
ölöe
 
	$bdev_wrôe_ßme
(
block_devi˚
 *
bdev
)

1323 
ªque°_queue
 *
q
 = 
	`bdev_gë_queue
(
bdev
);

1325 i‡(
q
)

1326  
q
->
limôs
.
max_wrôe_ßme_£˘‹s
;

1329 
	}
}

1331 
ölöe
 
	$queue_dma_Æignmít
(
ªque°_queue
 *
q
)

1333  
q
 ? q->
dma_Æignmít
 : 511;

1334 
	}
}

1336 
ölöe
 
	$blk_rq_Æig√d
(
ªque°_queue
 *
q
, 
addr
,

1337 
Àn
)

1339 
Æignmít
 = 
	`queue_dma_Æignmít
(
q
Ë| q->
dma_∑d_mask
;

1340  !(
addr
 & 
Æignmít
Ë&& !(
Àn
 &álignment);

1341 
	}
}

1344 
ölöe
 
	$blksize_bôs
(
size
)

1346 
bôs
 = 8;

1348 
bôs
++;

1349 
size
 >>= 1;

1350 } 
size
 > 256);

1351  
bôs
;

1352 
	}
}

1354 
ölöe
 
	$block_size
(
block_devi˚
 *
bdev
)

1356  
bdev
->
bd_block_size
;

1357 
	}
}

1359 
ölöe
 
boﬁ
 
	$queue_Êush_queuóbÀ
(
ªque°_queue
 *
q
)

1361  !
q
->
Êush_nŸ_queuóbÀ
;

1362 
	}
}

1364 °ru˘ {
∑ge
 *
	mv
;} 
	tSe˘‹
;

1366 *
ªad_dev_£˘‹
(
block_devi˚
 *, 
£˘‹_t
, 
Se˘‹
 *);

1368 
ölöe
 
	$put_dev_£˘‹
(
Se˘‹
 
p
)

1370 
	`∑ge_ˇche_ªÀa£
(
p
.
v
);

1371 
	}
}

1373 
	gw‹k_°ru˘
;

1374 
kblockd_scheduÀ_w‹k
(
ªque°_queue
 *
q
, 
w‹k_°ru˘
 *
w‹k
);

1375 
kblockd_scheduÀ_dñayed_w‹k
(
ªque°_queue
 *
q
, 
dñayed_w‹k
 *
dw‹k
, 
dñay
);

1377 #ifde‡
CONFIG_BLK_CGROUP


1383 
ölöe
 
	$£t_°¨t_time_ns
(
ªque°
 *
ªq
)

1385 
	`¥ìm±_dißbÀ
();

1386 
ªq
->
°¨t_time_ns
 = 
	`sched_˛ock
();

1387 
	`¥ìm±_íabÀ
();

1388 
	}
}

1390 
ölöe
 
	$£t_io_°¨t_time_ns
(
ªque°
 *
ªq
)

1392 
	`¥ìm±_dißbÀ
();

1393 
ªq
->
io_°¨t_time_ns
 = 
	`sched_˛ock
();

1394 
	`¥ìm±_íabÀ
();

1395 
	}
}

1397 
ölöe
 
uöt64_t
 
	$rq_°¨t_time_ns
(
ªque°
 *
ªq
)

1399  
ªq
->
°¨t_time_ns
;

1400 
	}
}

1402 
ölöe
 
uöt64_t
 
	$rq_io_°¨t_time_ns
(
ªque°
 *
ªq
)

1404  
ªq
->
io_°¨t_time_ns
;

1405 
	}
}

1407 
ölöe
 
	$£t_°¨t_time_ns
(
ªque°
 *
ªq
Ë{
	}
}

1408 
ölöe
 
	$£t_io_°¨t_time_ns
(
ªque°
 *
ªq
Ë{
	}
}

1409 
ölöe
 
uöt64_t
 
	$rq_°¨t_time_ns
(
ªque°
 *
ªq
)

1412 
	}
}

1413 
ölöe
 
uöt64_t
 
	$rq_io_°¨t_time_ns
(
ªque°
 *
ªq
)

1416 
	}
}

1419 
	#MODULE_ALIAS_BLOCKDEV
(
maj‹
,
mö‹
) \

1420 
	`MODULE_ALIAS
("block-maj‹-" 
	`__°rögify
(
maj‹
Ë"-" __°rögify(
mö‹
))

	)

1421 
	#MODULE_ALIAS_BLOCKDEV_MAJOR
(
maj‹
) \

1422 
	`MODULE_ALIAS
("block-maj‹-" 
	`__°rögify
(
maj‹
Ë"-*")

	)

1424 #i‡
deföed
(
CONFIG_BLK_DEV_INTEGRITY
)

1426 
	#INTEGRITY_FLAG_READ
 2

	)

1427 
	#INTEGRITY_FLAG_WRITE
 4

	)

1429 
	sblk_öãgrôy_exchg
 {

1430 *
	m¥Ÿ_buf
;

1431 *
	md©a_buf
;

1432 
£˘‹_t
 
	m£˘‹
;

1433 
	md©a_size
;

1434 
	m£˘‹_size
;

1435 c⁄° *
	mdisk_«me
;

1438 (
	töãgrôy_gí_‚
Ë(
	tblk_öãgrôy_exchg
 *);

1439 (
	töãgrôy_vrfy_‚
Ë(
	tblk_öãgrôy_exchg
 *);

1440 (
	töãgrôy_£t_èg_‚
) (*, *, );

1441 (
	töãgrôy_gë_èg_‚
) (*, *, );

1443 
	sblk_öãgrôy
 {

1444 
öãgrôy_gí_‚
 *
gíî©e_‚
;

1445 
öãgrôy_vrfy_‚
 *
vîify_‚
;

1446 
öãgrôy_£t_èg_‚
 *
£t_èg_‚
;

1447 
öãgrôy_gë_èg_‚
 *
gë_èg_‚
;

1449 
Êags
;

1450 
tu∂e_size
;

1451 
£˘‹_size
;

1452 
èg_size
;

1454 c⁄° *
«me
;

1456 
kobje˘
 
kobj
;

1459 
boﬁ
 
	`blk_öãgrôy_is_öôülized
(
gídisk
 *);

1460 
	`blk_öãgrôy_ªgi°î
(
gídisk
 *, 
blk_öãgrôy
 *);

1461 
	`blk_öãgrôy_uƒegi°î
(
gídisk
 *);

1462 
	`blk_öãgrôy_com∑ª
(
gídisk
 *, gendisk *);

1463 
	`blk_rq_m≠_öãgrôy_sg
(
ªque°_queue
 *, 
bio
 *,

1464 
sˇâîli°
 *);

1465 
	`blk_rq_cou¡_öãgrôy_sg
(
ªque°_queue
 *, 
bio
 *);

1466 
	`blk_öãgrôy_mîge_rq
(
ªque°_queue
 *, 
ªque°
 *,

1467 
ªque°
 *);

1468 
	`blk_öãgrôy_mîge_bio
(
ªque°_queue
 *, 
ªque°
 *,

1469 
bio
 *);

1471 
ölöe


1472 
blk_öãgrôy
 *
	$bdev_gë_öãgrôy
(
block_devi˚
 *
bdev
)

1474  
bdev
->
bd_disk
->
öãgrôy
;

1475 
	}
}

1477 
ölöe
 
blk_öãgrôy
 *
	$blk_gë_öãgrôy
(
gídisk
 *
disk
)

1479  
disk
->
öãgrôy
;

1480 
	}
}

1482 
ölöe
 
	$blk_öãgrôy_rq
(
ªque°
 *
rq
)

1484 i‡(
rq
->
bio
 =
NULL
)

1487  
	`bio_öãgrôy
(
rq
->
bio
);

1488 
	}
}

1490 
ölöe
 
	$blk_queue_max_öãgrôy_£gmíts
(
ªque°_queue
 *
q
,

1491 
£gs
)

1493 
q
->
limôs
.
max_öãgrôy_£gmíts
 = 
£gs
;

1494 
	}
}

1496 
ölöe
 

1497 
	$queue_max_öãgrôy_£gmíts
(
ªque°_queue
 *
q
)

1499  
q
->
limôs
.
max_öãgrôy_£gmíts
;

1500 
	}
}

1504 
	gbio
;

1505 
	gblock_devi˚
;

1506 
	ggídisk
;

1507 
	gblk_öãgrôy
;

1509 
ölöe
 
	$blk_öãgrôy_rq
(
ªque°
 *
rq
)

1512 
	}
}

1513 
ölöe
 
	$blk_rq_cou¡_öãgrôy_sg
(
ªque°_queue
 *
q
,

1514 
bio
 *
b
)

1517 
	}
}

1518 
ölöe
 
	$blk_rq_m≠_öãgrôy_sg
(
ªque°_queue
 *
q
,

1519 
bio
 *
b
,

1520 
sˇâîli°
 *
s
)

1523 
	}
}

1524 
ölöe
 
blk_öãgrôy
 *
	$bdev_gë_öãgrôy
(
block_devi˚
 *
b
)

1527 
	}
}

1528 
ölöe
 
blk_öãgrôy
 *
	$blk_gë_öãgrôy
(
gídisk
 *
disk
)

1530  
NULL
;

1531 
	}
}

1532 
ölöe
 
	$blk_öãgrôy_com∑ª
(
gídisk
 *
a
, gídisk *
b
)

1535 
	}
}

1536 
ölöe
 
	$blk_öãgrôy_ªgi°î
(
gídisk
 *
d
,

1537 
blk_öãgrôy
 *
b
)

1540 
	}
}

1541 
ölöe
 
	$blk_öãgrôy_uƒegi°î
(
gídisk
 *
d
)

1543 
	}
}

1544 
ölöe
 
	$blk_queue_max_öãgrôy_£gmíts
(
ªque°_queue
 *
q
,

1545 
£gs
)

1547 
	}
}

1548 
ölöe
 
	$queue_max_öãgrôy_£gmíts
(
ªque°_queue
 *
q
)

1551 
	}
}

1552 
ölöe
 
	$blk_öãgrôy_mîge_rq
(
ªque°_queue
 *
rq
,

1553 
ªque°
 *
r1
,

1554 
ªque°
 *
r2
)

1557 
	}
}

1558 
ölöe
 
	$blk_öãgrôy_mîge_bio
(
ªque°_queue
 *
rq
,

1559 
ªque°
 *
r
,

1560 
bio
 *
b
)

1563 
	}
}

1564 
ölöe
 
boﬁ
 
	$blk_öãgrôy_is_öôülized
(
gídisk
 *
g
)

1567 
	}
}

1571 
	sblock_devi˚_›î©i⁄s
 {

1572 (*
	m›í
Ë(
	mblock_devi˚
 *, 
	mfmode_t
);

1573 (*
	mªÀa£
Ë(
	mgídisk
 *, 
	mfmode_t
);

1574 (*
	mio˘l
Ë(
	mblock_devi˚
 *, 
	mfmode_t
, , );

1575 (*
	mcom∑t_io˘l
Ë(
	mblock_devi˚
 *, 
	mfmode_t
, , );

1576 (*
	mdúe˘_ac˚ss
Ë(
	mblock_devi˚
 *, 
	m£˘‹_t
,

1578 (*
	mcheck_evíts
Ë(
gídisk
 *
	mdisk
,

1579 
	m˛órög
);

1581 (*
	mmedü_ch™ged
Ë(
	mgídisk
 *);

1582 (*
	mu∆ock_«tive_ˇ∑côy
Ë(
	mgídisk
 *);

1583 (*
	mªvÆid©e_disk
Ë(
	mgídisk
 *);

1584 (*
	mgëgeo
)(
	mblock_devi˚
 *, 
	mhd_geomëry
 *);

1586 (*
	msw≠_¶Ÿ_‰ì_nŸify
Ë(
	mblock_devi˚
 *, );

1589 *
	mrh_ª£rved_±rs1
;

1590 *
	mrh_ª£rved_±rs2
;

1591 *
	mrh_ª£rved_±rs3
;

1592 *
	mrh_ª£rved_±rs4
;

1593 *
	mrh_ª£rved_±rs5
;

1595 
moduÀ
 *
	mow√r
;

1598 
__blkdev_drivî_io˘l
(
block_devi˚
 *, 
fmode_t
, ,

1604 
	#buf„r_hóds_ovî_limô
 0

	)

1606 
ölöe
 
	$ƒ_blockdev_∑ges
()

1609 
	}
}

1611 
	sblk_∂ug
 {

1614 
ölöe
 
	$blk_°¨t_∂ug
(
blk_∂ug
 *
∂ug
)

1616 
	}
}

1618 
ölöe
 
	$blk_föish_∂ug
(
blk_∂ug
 *
∂ug
)

1620 
	}
}

1622 
ölöe
 
	$blk_Êush_∂ug
(
èsk_°ru˘
 *
èsk
)

1624 
	}
}

1626 
ölöe
 
	$blk_scheduÀ_Êush_∂ug
(
èsk_°ru˘
 *
èsk
)

1628 
	}
}

1631 
ölöe
 
boﬁ
 
	$blk_√eds_Êush_∂ug
(
èsk_°ru˘
 *
tsk
)

1633  
Ál£
;

1634 
	}
}

	@sysfs_engine/alignment_engine_sysfs_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

17 
USHORT
 
num_Æign_ªad_thªads
;

18 
USHORT
 
num_Æign_wrôe_thªads
;

20 
INT
 
dz_swôch_„c_ígöe
;

21 
INT
 
dz_swôch_bec_ígöe
;

22 
INT
 
dz_swôch_dedu≥_ígöe
;

23 
INT
 
dz_swôch_Æignmít_ígöe
;

24 
INT
 
dz_swôch_Æignmít_ígöe_mu…i_block_ªad
;

25 
INT
 
dz_swôch_Æignmít_ígöe_mu…i_block_wrôe
;

26 
INT
 
dz_swôch_Æignmít_ígöe_∑πül_block_ªad
;

27 
INT
 
dz_swôch_Æignmít_ígöe_∑πül_block_wrôe
;

32 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

33 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

38 
SIZE
 
TARGET_DEVICE_SIZE
;

40 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

41 
NAME
 
DATA_DISK_DEVICE_NAME
;

42 
OBJECT_LIST
 
globÆ_obje˘_li°
;

43 
U64
 
lba_èbÀ_size
;

44 
U64
 
pba_èbÀ_size
;

45 
U64
 
hash_èbÀ_size
;

46 
U32
 
numbî_of_l⁄gs_f‹_pba
;

47 
U32
 
numbî_of_l⁄gs_f‹_lba
;

48 
U32
 
numbî_of_l⁄gs_f‹_gpba
;

49 
ULONG
 
mëad©a_Êush_öãrvÆ
;

50 
U64
 
mëad©a_lba_èbÀ_size
;

51 
U64
 
mëad©a_lba_lock_èbÀ_size
;

52 
U64
 
avm_sysfs_íåy_‰ì_∑ge_cou¡
;

53 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes
[
DZ_SYSFS_PAGE_SIZE
];

54 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
[
DZ_SYSFS_PAGE_SIZE
];

55 
PPBA_BLOCK
 
pba_èbÀ
;

56 
PHASH_BLOCK
 
hash_èbÀ
;

57 
PLBA_BLOCK
 
lba_èbÀ
;

59 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

60 
ATOMIC64
 
bec_ˇche_hô
;

61 
ATOMIC64
 
bec_ˇche_miss
;

62 
ATOMIC64
 
bec_ˇche_dñëe
;

63 
ULONG
 
bec_size
;

64 
INT
 
bec_cutoff_nodes
;

65 
INT
 
bec_cutoff_≥r˚¡
;

66 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

67 
U64
 
time_Êush_¥ï¨e_°¨t
;

68 
U64
 
time_Êush_°¨t
;

69 
U64
 
time_Êush_íd
;

70 
U64
 
time_„c_wrôe_°¨t
;

71 
U64
 
time_„c_wrôe_swôch
;

72 
PFEC_TABLE
 
„c_èbÀs_Êush
;

73 
ATOMIC64
 
„c_a˘ive_cou¡_£quí˚
;

74 
ATOMIC64
 
„c_‰ì_cou¡_£quí˚
;

75 
ATOMIC64
 
„c_cur_Êush_cou¡
;

76 
ATOMIC64
 
„c_Êush_›s_cou¡
;

77 
ATOMIC64
 
„c_cur_Êush_›s_cou¡
;

78 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

79 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

80 
U64
 
„c_a˘ive_cou¡
;

81 
ATOMIC64
 
dedu≥_disk_ªads
;

82 
ATOMIC64
 
dedu≥_disk_wrôes
;

83 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

84 
ATOMIC64
 
dedu≥_ˇche_hôs
;

85 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

86 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

87 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

88 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

89 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

90 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

91 
USHORT
 
dedu≥_num_thªads
;

92 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

93 
PDZ_THREAD_POOL
 
rdedu≥_thªad_poﬁ
;

94 
PDZ_THREAD_POOL
 
wdedu≥_thªad_poﬁ
;

95 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

96 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

97 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

98 
PDZ_THREAD_POOL
 
Æign_wrôe_thªad_poﬁ
;

99 
PDZ_THREAD_POOL
 
Êush_thªad_poﬁ
;

100 
PDZ_THREAD_POOL
 
mëad©a_Êush_thªad_poﬁ
;

101 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡
;

102 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads
;

103 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
;

104 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
;

105 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
;

106 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

107 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

108 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

109 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

110 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

111 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

112 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

114 
ATOMIC64
 
Æign_iocou¡_disk_ªad
;

115 
ATOMIC64
 
Æign_iocou¡_disk_ªad_öã∫Æ
;

116 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

117 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

118 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

119 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

120 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

121 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

122 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

124 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes
;

125 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
;

126 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
;

127 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
;

128 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

129 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

130 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

131 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

132 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

133 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

134 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

136 
ATOMIC64
 
Æign_iocou¡_disk_wrôe
;

137 
ATOMIC64
 
Æign_iocou¡_disk_wrôe_öã∫Æ
;

138 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

139 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

140 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

141 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

142 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

143 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

144 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

146 
PSUPERBLOCK
 
su≥rblock
;

148 
CHAR
 
avm_sysfs_íåy_gë_Æign_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
];

149 
INT
 
	$avm_gë_Æign_cou¡îs
(
CHAR
 *
buf
)

151 
INT
 
cou¡
 = 0;

152 
UINT
 
Ωídög_i‹eque°s
;

153 
UINT
 
Ωídög_thªads
;

154 
UINT
 
Ωídög_jobs
;

156 
UINT
 
w≥ndög_i‹eque°s
;

157 
UINT
 
w≥ndög_thªads
;

158 
UINT
 
w≥ndög_jobs
;

160 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_Æign_cou¡îs
;

161 
	`mem£t
(
avm_sysfs_íåy_gë_Æign_cou¡îs
, 0, 
DZ_SYSFS_PAGE_SIZE
);

162 
	`mem˝y
(
±r
, "\n", 1);

163 
±r
 += 1;

164 
±r
 +
	`•rötf
(ptr, "==============================================\n");

165 
±r
 +
	`•rötf
(ptr, "ALIGNMENT ENGINE COUNTERS\n");

166 
±r
 +
	`•rötf
(ptr, "==============================================\n");

167 i‡(!
su≥rblock
) {

168 
±r
 +
	`•rötf
(ptr, "Superblock is NULL");

172 i‡(
dz_swôch_Æignmít_ígöe
 =
DZ_DISABLED
) {

173 
±r
 +
	`•rötf
(ptr, "ALIGNMENT ENGINE DISABLED");

177 
Ωídög_i‹eque°s
 = 
	`©omic_ªad
(&
Æign_ªad_thªad_poﬁ
->
ioq_num_ios
);

178 
Ωídög_thªads
 = 
	`©omic_ªad
(&
Æign_ªad_thªad_poﬁ
->
num_a˘ive_thªads
);

179 
Ωídög_jobs
 = 
	`©omic_ªad
(&
Æign_ªad_thªad_poﬁ
->
num_jobs
);

181 
w≥ndög_i‹eque°s
 = 
	`©omic_ªad
(&
Æign_wrôe_thªad_poﬁ
->
ioq_num_ios
);

182 
w≥ndög_thªads
 = 
	`©omic_ªad
(&
Æign_wrôe_thªad_poﬁ
->
num_a˘ive_thªads
);

183 
w≥ndög_jobs
 = 
	`©omic_ªad
(&
Æign_wrôe_thªad_poﬁ
->
num_jobs
);

186 
cou¡
 = 
	`•rötf
(
±r
,

232 
Æign_ªad_thªad_poﬁ
->
«me
,

233 
Æign_ªad_thªad_poﬁ
->
num_thªads
,

234 
Ωídög_i‹eque°s
,

235 
Ωídög_thªads
,

236 
Ωídög_jobs
,

237 
Æign_ªad_thªad_poﬁ
->
quõs˚
,

238 
Æign_ªad_thªad_poﬁ
->
ioq_›í
,

240 
wrôe_thªad_poﬁ
->
«me
,

241 
wrôe_thªad_poﬁ
->
num_thªads
,

242 
w≥ndög_i‹eque°s
,

243 
w≥ndög_thªads
,

244 
w≥ndög_jobs
,

245 
Æign_wrôe_thªad_poﬁ
->
quõs˚
,

246 
Æign_wrôe_thªad_poﬁ
->
ioq_›í
,

248 (
U64
)
	`GET_CURRENT_TIME
(),

249 (
U64
)(
	`GET_TIME_DIFF_IN_SECONDS
(
time_Êush_°¨t
, 
	`GET_CURRENT_TIME
())/1000),

250 (
U64
)((
	`GET_TIME_DIFF_IN_SECONDS
(
time_Êush_°¨t
, 
time_Êush_íd
))/1000),

251 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡
),

252 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads
),

253 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
),

254 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
),

255 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
),

256 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes
),

257 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
),

258 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
),

259 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
),

260 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_ªads_∑πül_∑ge
),

261 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_ªads_sögÀ_∑ge
),

262 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
),

263 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
),

264 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_ªads_mu…i_∑ge
),

265 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
),

266 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
),

267 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_disk_ªad
),

268 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_disk_ªad_öã∫Æ
),

269 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_wrôes_∑πül_∑ge
),

270 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_wrôes_sögÀ_∑ge
),

271 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
),

272 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
),

273 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_wrôes_mu…i_∑ge
),

274 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
),

275 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
),

276 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_disk_wrôe
),

277 (
U64
)
	`READ_COUNTER
(
Æign_iocou¡_disk_wrôe_öã∫Æ
)

287 
	`LOGD
("Buf„∏Byã†u£d = %d\n", 
cou¡
);

291 
	}
}

293 
U64
 
avm_sysfs_íåy_gë_£t_swôch_d´
;

294 
INT
 
	$avm_gë_swôch_d´
(
CHAR
 *
buf
)

296 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_d´
, 
dz_swôch_Æignmít_ígöe
);

297 
	}
}

299 
INT
 
	$avm_£t_swôch_d´
(
U64
 
buf
)

301 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_Æignmít_ígöe
, 
buf
);

302 
	}
}

304 
U64
 
avm_sysfs_íåy_gë_£t_swôch_d´_mbr
;

305 
INT
 
	$avm_gë_swôch_d´_mbr
(
CHAR
 *
buf
)

307 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_d´_mbr
, 
dz_swôch_Æignmít_ígöe_mu…i_block_ªad
);

308 
	}
}

310 
INT
 
	$avm_£t_swôch_d´_mbr
(
U64
 
buf
)

312 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_Æignmít_ígöe_mu…i_block_ªad
, 
buf
);

313 
	}
}

315 
U64
 
avm_sysfs_íåy_gë_£t_swôch_d´_mbw
;

316 
INT
 
	$avm_gë_swôch_d´_mbw
(
CHAR
 *
buf
)

318 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_d´_mbw
, 
dz_swôch_Æignmít_ígöe_mu…i_block_wrôe
);

319 
	}
}

321 
INT
 
	$avm_£t_swôch_d´_mbw
(
U64
 
buf
)

323 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_Æignmít_ígöe_mu…i_block_wrôe
, 
buf
);

324 
	}
}

326 
U64
 
avm_sysfs_íåy_gë_£t_swôch_d´_pbr
;

327 
INT
 
	$avm_gë_swôch_d´_pbr
(
CHAR
 *
buf
)

329 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_d´_pbr
, 
dz_swôch_Æignmít_ígöe_∑πül_block_ªad
);

330 
	}
}

332 
INT
 
	$avm_£t_swôch_d´_pbr
(
U64
 
buf
)

334 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_Æignmít_ígöe_∑πül_block_ªad
, 
buf
);

335 
	}
}

337 
U64
 
avm_sysfs_íåy_gë_£t_swôch_d´_pbw
;

338 
INT
 
	$avm_gë_swôch_d´_pbw
(
CHAR
 *
buf
)

340 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_d´_pbw
, 
dz_swôch_Æignmít_ígöe_∑πül_block_wrôe
);

341 
	}
}

343 
INT
 
	$avm_£t_swôch_d´_pbw
(
U64
 
buf
)

345 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_Æignmít_ígöe_∑πül_block_wrôe
, 
buf
);

346 
	}
}

348 
U64
 
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads
;

349 
INT
 
	$avm_gë_tu«bÀ_d´_ªad_thªads
(
CHAR
 *
buf
)

351 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads
, 
num_Æign_ªad_thªads
);

353 
	}
}

355 
INT
 
	$avm_£t_tu«bÀ_d´_ªad_thªads
(
U64
 
buf
)

357 
	`DZ_SYS_SET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads
, 
buf
);

358 
	}
}

360 
U64
 
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads
;

361 
INT
 
	$avm_gë_tu«bÀ_d´_wrôe_thªads
(
CHAR
 *
buf
)

363 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads
, 
num_Æign_wrôe_thªads
);

365 
	}
}

367 
INT
 
	$avm_£t_tu«bÀ_d´_wrôe_thªads
(
U64
 
buf
)

369 
	`DZ_SYS_SET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads
, 
buf
);

370 
	}
}

	@sysfs_engine/bec_engine_sysfs_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

18 
INT
 
dz_swôch_„c_ígöe
;

19 
INT
 
dz_swôch_bec_ígöe
;

20 
INT
 
dz_swôch_dedu≥_ígöe
;

21 
INT
 
dz_swôch_Æignmít_ígöe
;

23 
USHORT
 
num_bec_thªads
;

24 
ULONG
 
bec_size
;

25 
INT
 
bec_cutoff_≥r˚¡
;

29 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

30 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

35 
SIZE
 
TARGET_DEVICE_SIZE
;

37 
NAME
 
DATA_DISK_DEVICE_NAME
;

39 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

40 
ATOMIC64
 
bec_ˇche_hô
;

41 
ATOMIC64
 
bec_ˇche_miss
;

42 
ATOMIC64
 
bec_ˇche_dñëe
;

43 
ULONG
 
bec_size
;

44 
INT
 
bec_cutoff_nodes
;

45 
INT
 
bec_cutoff_≥r˚¡
;

46 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

48 
PSUPERBLOCK
 
su≥rblock
;

50 
CHAR
 
avm_sysfs_íåy_gë_bec_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
];

51 
INT
 
	$avm_gë_bec_cou¡îs
(
CHAR
 *
buf
)

53 
INT
 
cou¡
 = 0;

54 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_bec_cou¡îs
;

55 
	`mem£t
(
avm_sysfs_íåy_gë_bec_cou¡îs
, 0, 
DZ_SYSFS_PAGE_SIZE
);

56 
	`mem˝y
(
±r
, "\n", 1);

57 
±r
 += 1;

58 
±r
 +
	`•rötf
(ptr, "=================================\n");

59 
±r
 +
	`•rötf
(ptr, "BEC ENGINE COUNTERS\n");

60 
±r
 +
	`•rötf
(ptr, "=================================\n");

61 i‡(!
su≥rblock
) {

62 
±r
 +
	`•rötf
(ptr, "Superblock is NULL");

66 i‡(
dz_swôch_bec_ígöe
 =
DZ_DISABLED
) {

67 
±r
 +
	`•rötf
(ptr, "BEC ENGINE DISABLED");

72 
cou¡
 = 
	`•rötf
(
±r
,

81 (
U64
)
	`READ_COUNTER
(
bec_pba_∑ge_cou¡
),

82 (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_hô
),

83 (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_miss
),

84 (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_dñëe
),

85 (
U64
)
bec_size
,

86 (
U64
)
bec_cutoff_nodes
,

87 (
U64
)
bec_cutoff_≥r˚¡
,

88 (
U64
)
dz_bec_node_mempoﬁ_cou¡
);

93 
	`LOGD
("Buf„∏Byã†u£d = %d\n", 
cou¡
);

96 
	}
}

99 
U64
 
avm_sysfs_íåy_gë_£t_swôch_bec
;

100 
INT
 
	$avm_gë_swôch_bec
(
CHAR
 *
buf
)

102 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_bec
, 
dz_swôch_bec_ígöe
);

103 
	}
}

104 
INT
 
	$avm_£t_swôch_bec
(
U64
 
buf
)

106 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_bec_ígöe
, 
buf
);

107 
	}
}

109 
U64
 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size
;

110 
INT
 
	$avm_gë_tu«bÀ_bec_size
(
CHAR
 *
buf
)

112 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size
, 
dz_swôch_bec_ígöe
);

113 
	}
}

115 
INT
 
	$avm_£t_tu«bÀ_bec_size
(
U64
 
buf
)

117 
	`DZ_SYS_SET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size
, 
buf
);

118 
	}
}

120 
U64
 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads
;

121 
INT
 
	$avm_gë_tu«bÀ_bec_thªads
(
CHAR
 *
buf
)

123 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads
, 
num_bec_thªads
);

124 
	}
}

126 
INT
 
	$avm_£t_tu«bÀ_bec_thªads
(
U64
 
buf
)

128 
	`DZ_SYS_SET_SWITCH
(
num_bec_thªads
, 
buf
);

129 
	}
}

131 
U64
 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï
;

132 
INT
 
	$avm_gë_tu«bÀ_bec_ï
(
CHAR
 *
buf
)

134 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï
, 
bec_cutoff_≥r˚¡
);

135 
	}
}

137 
INT
 
	$avm_£t_tu«bÀ_bec_ï
(
U64
 
buf
)

139 
	`DZ_SYS_SET_SWITCH
(
bec_cutoff_≥r˚¡
, 
buf
);

140 
	}
}

	@sysfs_engine/dedupe_engine_sysfs_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

18 
INT
 
dz_swôch_„c_ígöe
;

19 
INT
 
dz_swôch_bec_ígöe
;

20 
INT
 
dz_swôch_dedu≥_ígöe
;

21 
INT
 
dz_swôch_Æignmít_ígöe
;

25 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

26 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

31 
SIZE
 
TARGET_DEVICE_SIZE
;

33 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

34 
NAME
 
DATA_DISK_DEVICE_NAME
;

35 
OBJECT_LIST
 
globÆ_obje˘_li°
;

36 
U64
 
lba_èbÀ_size
;

37 
U64
 
pba_èbÀ_size
;

38 
U64
 
hash_èbÀ_size
;

39 
U32
 
numbî_of_l⁄gs_f‹_pba
;

40 
U32
 
numbî_of_l⁄gs_f‹_lba
;

41 
U32
 
numbî_of_l⁄gs_f‹_gpba
;

42 
ULONG
 
mëad©a_Êush_öãrvÆ
;

43 
U64
 
mëad©a_lba_èbÀ_size
;

44 
U64
 
mëad©a_lba_lock_èbÀ_size
;

45 
U64
 
avm_sysfs_íåy_‰ì_∑ge_cou¡
;

46 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes
[
DZ_SYSFS_PAGE_SIZE
];

47 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
[
DZ_SYSFS_PAGE_SIZE
];

48 
PPBA_BLOCK
 
pba_èbÀ
;

49 
PHASH_BLOCK
 
hash_èbÀ
;

50 
PLBA_BLOCK
 
lba_èbÀ
;

52 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

53 
ATOMIC64
 
bec_ˇche_hô
;

54 
ATOMIC64
 
bec_ˇche_miss
;

55 
ATOMIC64
 
bec_ˇche_dñëe
;

56 
ULONG
 
bec_size
;

57 
INT
 
bec_cutoff_nodes
;

58 
INT
 
bec_cutoff_≥r˚¡
;

59 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

60 
U64
 
time_Êush_¥ï¨e_°¨t
;

61 
U64
 
time_Êush_°¨t
;

62 
U64
 
time_Êush_íd
;

63 
U64
 
time_„c_wrôe_°¨t
;

64 
U64
 
time_„c_wrôe_swôch
;

65 
PFEC_TABLE
 
„c_èbÀs_Êush
;

66 
ATOMIC64
 
„c_a˘ive_cou¡_£quí˚
;

67 
ATOMIC64
 
„c_‰ì_cou¡_£quí˚
;

68 
ATOMIC64
 
„c_cur_Êush_cou¡
;

69 
ATOMIC64
 
„c_Êush_›s_cou¡
;

70 
ATOMIC64
 
„c_cur_Êush_›s_cou¡
;

71 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

72 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

73 
U64
 
„c_a˘ive_cou¡
;

74 
ATOMIC64
 
dedu≥_disk_ªads
;

75 
ATOMIC64
 
dedu≥_disk_wrôes
;

76 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

77 
ATOMIC64
 
dedu≥_ˇche_hôs
;

78 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

79 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

80 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

81 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

82 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

83 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

84 
USHORT
 
dedu≥_num_thªads
;

85 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

86 
PDZ_THREAD_POOL
 
rdedu≥_thªad_poﬁ
;

87 
PDZ_THREAD_POOL
 
wdedu≥_thªad_poﬁ
;

88 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

89 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

90 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

91 
PDZ_THREAD_POOL
 
Æign_wrôe_thªad_poﬁ
;

92 
PDZ_THREAD_POOL
 
Êush_thªad_poﬁ
;

93 
PDZ_THREAD_POOL
 
mëad©a_Êush_thªad_poﬁ
;

94 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡
;

95 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads
;

96 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
;

97 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
;

98 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
;

99 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

100 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

101 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

102 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

103 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

104 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

105 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

107 
ATOMIC64
 
Æign_iocou¡_disk_ªad
;

108 
ATOMIC64
 
Æign_iocou¡_disk_ªad_öã∫Æ
;

109 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

110 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

111 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

112 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

113 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

114 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

115 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

117 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes
;

118 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
;

119 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
;

120 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
;

121 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

122 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

123 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

124 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

125 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

126 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

127 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

129 
ATOMIC64
 
Æign_iocou¡_disk_wrôe
;

130 
ATOMIC64
 
Æign_iocou¡_disk_wrôe_öã∫Æ
;

131 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

132 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

133 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

134 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

135 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

136 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

137 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

139 
PSUPERBLOCK
 
su≥rblock
;

141 
CHAR
 
avm_sysfs_íåy_gë_dedu≥_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
];

142 
INT
 
	$avm_gë_dedu≥_cou¡îs
(
CHAR
 *
buf
)

144 
INT
 
cou¡
 = 0;

145 
UINT
 
≥ndög_i‹eque°s
;

146 
UINT
 
≥ndög_thªads
;

147 
UINT
 
≥ndög_jobs
;

149 
UINT
 
≥ndög_ri‹eque°s
;

150 
UINT
 
≥ndög_πhªads
;

151 
UINT
 
≥ndög_rjobs
;

153 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_dedu≥_cou¡îs
;

154 
	`mem£t
(
avm_sysfs_íåy_gë_dedu≥_cou¡îs
, 0, 
DZ_SYSFS_PAGE_SIZE
);

155 
	`mem˝y
(
±r
, "\n", 1);

156 
±r
 += 1;

157 
±r
 +
	`•rötf
(ptr, "==============================================\n");

158 
±r
 +
	`•rötf
(ptr, "DEDUPE ENGINE COUNTERS\n");

159 
±r
 +
	`•rötf
(ptr, "==============================================\n");

160 i‡(!
su≥rblock
) {

161 
±r
 +
	`•rötf
(ptr, "Superblock is NULL");

165 i‡(
dz_swôch_dedu≥_ígöe
 =
DZ_DISABLED
) {

166 
±r
 +
	`•rötf
(ptr, "DEDUPE ENGINE DISABLED");

170 
≥ndög_i‹eque°s
 = 
	`©omic_ªad
(&
wdedu≥_thªad_poﬁ
->
ioq_num_ios
);

171 
≥ndög_thªads
 = 
	`©omic_ªad
(&
wdedu≥_thªad_poﬁ
->
num_a˘ive_thªads
);

172 
≥ndög_jobs
 = 
	`©omic_ªad
(&
wdedu≥_thªad_poﬁ
->
num_jobs
);

174 
≥ndög_ri‹eque°s
 = 
	`©omic_ªad
(&
rdedu≥_thªad_poﬁ
->
ioq_num_ios
);

175 
≥ndög_πhªads
 = 
	`©omic_ªad
(&
rdedu≥_thªad_poﬁ
->
num_a˘ive_thªads
);

176 
≥ndög_rjobs
 = 
	`©omic_ªad
(&
rdedu≥_thªad_poﬁ
->
num_jobs
);

179 
cou¡
 = 
	`•rötf
(
±r
,

203 (
U64
)
dedu≥_tŸ_logiˇl_•a˚
,

204 (
U64
)
dedu≥_tŸ_physiˇl_•a˚
,

205 (
U64
)
	`READ_COUNTER
(
dedu≥_cur_logiˇl_•a˚
),

206 (
U64
)
	`READ_COUNTER
(
dedu≥_cur_physiˇl_•a˚
),

207 (
U64
)
	`READ_COUNTER
(
dedu≥_cur_du∂iˇã_•a˚
),

208 (
U64
)
	`READ_COUNTER
(
dedu≥_dñëed_íåõs
),

209 (
U64
)
	`READ_COUNTER
(
dedu≥_ˇche_hôs
),

210 (
U64
)
	`READ_COUNTER
(
dedu≥_disk_ªads
),

211 (
U64
)
	`READ_COUNTER
(
dedu≥_disk_wrôes
),

212 (
U64
)
	`READ_COUNTER
(
dedu≥_zî€d_out_∑ge_ªads
),

213 
rdedu≥_thªad_poﬁ
->
num_thªads
,

214 
rdedu≥_thªad_poﬁ
->
«me
,

215 
wdedu≥_thªad_poﬁ
->
num_thªads
,

216 
wdedu≥_thªad_poﬁ
->
«me
,

217 
≥ndög_ri‹eque°s
,

218 
≥ndög_πhªads
,

219 
≥ndög_rjobs
,

220 
≥ndög_i‹eque°s
,

221 
≥ndög_thªads
,

222 
≥ndög_jobs
,

223 
wdedu≥_thªad_poﬁ
->
quõs˚
,

224 
wdedu≥_thªad_poﬁ
->
ioq_›í
,

225 (
U64
)(
	`GET_CURRENT_TIME
()));

227 
±r
 +
cou¡
;

228 
±r
 +
	`•rötf
’å, "DEDUPE LBA TabÀ Size........................%Œu (4K sizêblocksË", 
lba_èbÀ_size
);

229 
±r
 +
	`•rötf
’å, "%Œu GB ", (
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
/
GB
));

230 
±r
 +
	`•rötf
’å, "%Œu MB ", (
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
/
MB
));

231 
±r
 +
	`•rötf
’å, "%Œu KB ", (
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
/
KB
));

232 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
);

234 
±r
 +
	`•rötf
’å, "LBA Bôm≠:Üba_èbÀ_size...................%Œi\n", 
lba_èbÀ_size
);

235 
±r
 +
	`•rötf
’å, "LBA Bôm≠:Çumbî_of_l⁄gs_f‹_lba..........%u\n", 
numbî_of_l⁄gs_f‹_lba
);

236 
±r
 +
	`•rötf
’å, "LBA Bôm≠: Bôm≠ Size......................%lu\n", 
numbî_of_l⁄gs_f‹_lba
 * ());

239 
±r
 +
	`•rötf
’å, "DEDUPE HASH TabÀ Size.......................%Œu (4K sizêblocksË", 
hash_èbÀ_size
);

240 
±r
 +
	`•rötf
’å, "%Œu GB ", (
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
/
GB
));

241 
±r
 +
	`•rötf
’å, "%Œu MB ", (
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
/
MB
));

242 
±r
 +
	`•rötf
’å, "%Œu KB ", (
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
/
KB
));

243 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
);

245 
±r
 +
	`•rötf
’å, "DEDUPE PBA TabÀ Size........................%Œu (4K sizêblocksË", 
pba_èbÀ_size
);

246 
±r
 +
	`•rötf
’å, "%Œu GB ", (
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
/
GB
));

247 
±r
 +
	`•rötf
’å, "%Œu MB ", (
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
/
MB
));

248 
±r
 +
	`•rötf
’å, "%Œu KB ", (
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
/
KB
));

249 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
);

250 
±r
 +
	`•rötf
’å, "PBA Bôm≠:Öba_èbÀ_size...................%Œi\n", 
pba_èbÀ_size
);

251 
±r
 +
	`•rötf
’å, "PBA Bôm≠:Çumbî_of_l⁄gs_f‹_pba..........%u\n", 
numbî_of_l⁄gs_f‹_pba
);

252 
±r
 +
	`•rötf
’å, "PBA Bôm≠: Bôm≠ Size......................%lu\n", 
numbî_of_l⁄gs_f‹_pba
 * ());

253 
±r
 +
	`•rötf
’å, "G¨bagêPBA Bôm≠:Öba_èbÀ_size...........%Œi\n", 
pba_èbÀ_size
);

254 
±r
 +
	`•rötf
’å, "G¨bagêPBA Bôm≠:Çumbî_of_l⁄gs_f‹_gpba.%u\n", 
numbî_of_l⁄gs_f‹_gpba
);

255 
±r
 +
	`•rötf
’å, "G¨bagêPBA Bôm≠: Bôm≠ Size..............%lu\n", 
numbî_of_l⁄gs_f‹_gpba
 * ());

258 
	}
}

260 
U64
 
avm_sysfs_íåy_gë_pba_èbÀ_size
;

261 
INT
 
	$avm_pba_èbÀ_size_show
(
CHAR
 *
buf
)

263 
avm_sysfs_íåy_gë_pba_èbÀ_size
 = 
pba_èbÀ_size
;

265 
	}
}

267 
U64
 
avm_sysfs_íåy_gë_hash_èbÀ_size
;

268 
INT
 
	$avm_gë_hash_èbÀ_size
(
CHAR
 *
buf
)

270 
avm_sysfs_íåy_gë_hash_èbÀ_size
 = 
hash_èbÀ_size
;

272 
	}
}

274 
U64
 
avm_sysfs_íåy_gë_£t_swôch_dde
;

275 
INT
 
	$avm_gë_swôch_dde
(
CHAR
 *
buf
)

277 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_dde
, 
dz_swôch_dedu≥_ígöe
);

278 
	}
}

280 
INT
 
	$avm_£t_swôch_dde
(
U64
 
buf
)

282 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_dedu≥_ígöe
, 
buf
);

283 
	}
}

285 
PPBA_BLOCK
 
pba_èbÀ
;

286 
PHASH_BLOCK
 
hash_èbÀ
;

287 
PLBA_BLOCK
 
lba_èbÀ
;

288 
U64
 
avm_sysfs_íåy_gë_£t_lba_íåy
;

289 
U64
 
avm_sysfs_íåy_gë_£t_pba_íåy
;

290 
BITMAP
 
pba_bôm≠
;

291 
INT
 
	$avm_gë_lba_íåy
(
CHAR
 *
buf
)

293 
UINT
 
i
 = 0;

294 
PLBA_BLOCK
 
lba_íåy
 = 
NULL
;

295 
PPBA_BLOCK
 
pba_íåy
 = 
NULL
;

296 
PHASH_BLOCK
 
hash_íåy
 = 
NULL
;

297 
U64
 
tŸÆ_pba_íåõs_Æloˇãd
 = 0;

299 i‡(
avm_sysfs_íåy_gë_£t_lba_íåy
 > 
lba_èbÀ_size
) {

300 
	`LOGE
("Index is greaterÅhanÜbaÅable size\n");

304 
	`f‹_óch_£t_bô
(
i
, 
pba_bôm≠
.
bôm≠
, (pba_bôm≠.
num_of_l⁄gs
) * ()) {

305 
tŸÆ_pba_íåõs_Æloˇãd
++;

307 
	`LOG
("TŸÆ PBA E¡rõ†AŒoˇãd %Œu\n", 
tŸÆ_pba_íåõs_Æloˇãd
);

308 
	`¥ötk
(
KERN_ERR
"\n");

309 
lba_íåy
 = 
	`GET_LBA_ENTRY
(
avm_sysfs_íåy_gë_£t_lba_íåy
);

310 
	`LOG
("Üb®%Œu\n", 
avm_sysfs_íåy_gë_£t_lba_íåy
);

311 
	`LOG
("Üba_íåy->hash_ödex = %u\n", 
lba_íåy
->
hash_ödex
);

312 
	`LOG
("Üba_íåy->hash_cﬁlisi⁄_èg = %Œu\n", (
U64
)
lba_íåy
->
hash_cﬁlisi⁄_èg
);

313 
	`¥ötk
(
KERN_ERR
"\n");

315 
hash_íåy
 = 
	`GET_HASH_ENTRY
(
lba_íåy
->
hash_ödex
);

316 
	`LOG
(" hash = %Œu\n", (
U64
)
lba_íåy
->
hash_ödex
);

317 
	`LOG
(" hash_íåy->pba_ödex = %lu\n", (
ULONG
)
hash_íåy
->
pba_ödex
);

318 
	`¥ötk
(
KERN_ERR
"\n");

320 
pba_íåy
 = 
	`GET_PBA_ENTRY
(
hash_íåy
->
pba_ödex
);

321 
	`LOG
("Öba_ödex = %lu\n", (
ULONG
)
hash_íåy
->
pba_ödex
);

322 
	`LOG
("Öba_íåy->hash_cﬁlisi⁄_èg = %Œu\n", (
U64
)
pba_íåy
->
hash_cﬁlisi⁄_èg
);

323 
	`LOG
("Öba_íåy->sizê%Œu\n", (
U64
)
pba_íåy
->
size
);

324 
	`LOG
("Öba_íåy->ªf_˙à%Œu\n", (
U64
)
pba_íåy
->
ªf_˙t
);

325 
	`LOG
("pba_íåy->√xt_hash_cﬁlisi⁄_íåy = %Œu\n", (
U64
)
pba_íåy
->
√xt_íåy_ö_cﬁlisi⁄_li°
);

326 
	`¥ötk
(
KERN_ERR
"\n");

328 
	}
}

330 
CHAR
 
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex
[
DZ_SYSFS_PAGE_SIZE
];

331 
INT
 
	$avm_gë_£t_lba_èbÀ_ödex
(
CHAR
 *
buf
)

333 
ssize_t
 
ªt
;

334 
ULONG
 
lba_ödex
 = 0;

335 
UINT
 
i
 = 0;

336 
PLBA_BLOCK
 
lba_íåy
 = 
NULL
;

337 
PPBA_BLOCK
 
pba_íåy
 = 
NULL
;

338 
PHASH_BLOCK
 
hash_íåy
 = 
NULL
;

339 
PMDD_BLOCK
 
mëad©a_íåy
 = 
NULL
;

340 
U64
 
tŸÆ_pba_íåõs_Æloˇãd
 = 0;

341 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex
;

342 
ªt
 = 
	`k°πoul
(
±r
, 10, &
lba_ödex
);

343 i‡(
ªt
) {

344 
	`mem£t
(
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex
, 0, 
DZ_SYSFS_PAGE_SIZE
);

345 
	`mem˝y
(
±r
, "\n", 1);

346 
±r
 += 1;

347 
±r
 +
	`•rötf
(ptr, "=================================\n");

348 i‡(
ªt
 =-
EINVAL
) {

349 
±r
 +
	`•rötf
(ptr, "UnableÅo convertÅo index. Invalid Index\n");

351 
±r
 +
	`•rötf
’å, "U«bÀÅÿc⁄vîàtÿödex.Ñë = %zd\n", 
ªt
) ;

353 
±r
 +
	`•rötf
(ptr, "=================================\n");

354  
ªt
;

357 
	`mem£t
(
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex
, 0, 
DZ_SYSFS_PAGE_SIZE
);

358 
	`mem˝y
(
±r
, "\n", 1);

359 
±r
 += 1;

360 
±r
 +
	`•rötf
(ptr, "========================================\n");

361 
±r
 +
	`•rötf
’å, "LBA TabÀ E¡ry f‹ Index %lu\n", 
lba_ödex
);

362 
±r
 +
	`•rötf
(ptr, "========================================\n");

363 
±r
 +
	`•rötf
’å, "LBA TabÀ E¡ry f‹ Index %lu\n", 
lba_ödex
);

365 i‡(
lba_ödex
 > 
lba_èbÀ_size
) {

366 
±r
 +
	`•rötf
(ptr, "Index %lu is greaterÅhanÜbaÅable size %llu\n",

367 
lba_ödex
, 
lba_èbÀ_size
);

370 
	`f‹_óch_£t_bô
(
i
, 
pba_bôm≠
.
bôm≠
, (pba_bôm≠.
num_of_l⁄gs
) * ()) {

371 
tŸÆ_pba_íåõs_Æloˇãd
++;

373 
	`LOG
("TŸÆ PBA E¡rõ†AŒoˇãd %Œu\n", 
tŸÆ_pba_íåõs_Æloˇãd
);

374 
lba_íåy
 = 
	`GET_LBA_ENTRY
(
lba_ödex
);

375 
±r
 +
	`•rötf
’å, "Üb® = %lu\n", 
lba_ödex
);

376 
±r
 +
	`•rötf
’å, "Üba_íåy->hash_ödex = %u\n", 
lba_íåy
->
hash_ödex
);

377 
±r
 +
	`•rötf
’å, "Üba_íåy->hash_cﬁlisi⁄_èg = %Œu\n", (
U64
)
lba_íåy
->
hash_cﬁlisi⁄_èg
);

379 
±r
 +
	`•rötf
(ptr, "========================================\n");

380 
±r
 +
	`•rötf
’å, "Hash TabÀ E¡ry f‹ LBA Index %lu\n", 
lba_ödex
);

381 
±r
 +
	`•rötf
(ptr, "========================================\n");

382 
hash_íåy
 = 
	`GET_HASH_ENTRY
(
lba_íåy
->
hash_ödex
);

383 
±r
 +
	`•rötf
’å, " hash = %Œu\n", (
U64
)
lba_íåy
->
hash_ödex
);

384 
±r
 +
	`•rötf
’å, " hash_íåy->pba_ödex = %lu\n", (
ULONG
)
hash_íåy
->
pba_ödex
);

386 
±r
 +
	`•rötf
(ptr, "========================================\n");

387 
±r
 +
	`•rötf
’å, "PBA TabÀ E¡ry f‹ LBA Index %lu\n", 
lba_ödex
);

388 
±r
 +
	`•rötf
(ptr, "========================================\n");

389 
pba_íåy
 = 
	`GET_PBA_ENTRY
(
hash_íåy
->
pba_ödex
);

390 
±r
 +
	`•rötf
’å, "Öba_ödex = %lu\n", (
ULONG
)
hash_íåy
->
pba_ödex
);

391 
±r
 +
	`•rötf
’å, "Öba_íåy->hash_cﬁlisi⁄_èg = %Œu\n", (
U64
)
pba_íåy
->
hash_cﬁlisi⁄_èg
);

392 
±r
 +
	`•rötf
’å, "Öba_íåy->sizê = %Œu\n", (
U64
)
pba_íåy
->
size
);

393 
±r
 +
	`•rötf
’å, "Öba_íåy->ªf_˙à = %Œu\n", (
U64
)
pba_íåy
->
ªf_˙t
);

394 
±r
 +
	`•rötf
’å, "pba_íåy->√xt_hash_cﬁlisi⁄_íåy = %Œu\n", (
U64
)
pba_íåy
->
√xt_íåy_ö_cﬁlisi⁄_li°
);

396 
±r
 +
	`•rötf
(ptr, "========================================\n");

397 
±r
 +
	`•rötf
’å, "Mëad©®TabÀ E¡ry f‹ LBA Index %lu\n", 
lba_ödex
);

398 
±r
 +
	`•rötf
(ptr, "========================================\n");

399 
mëad©a_íåy
 = 
	`GET_MDB_ENTRY
(
lba_ödex
);

400 
±r
 +
	`•rötf
’å, " mëad©a_íåy->mdd_lb® = %Œu\n", (
U64
)
mëad©a_íåy
->
mdd_lba
);

401 
±r
 +
	`•rötf
(ptr, " metadata_entry->mdd_hash = %llx %llx %llx %llx \n",

402 (
U64
)
mëad©a_íåy
->
mdd_hash
.
hash32
[0], (U64)metadata_entry->mdd_hash.hash32[1],

403 (
U64
)
mëad©a_íåy
->
mdd_hash
.
hash32
[2], (U64)metadata_entry->mdd_hash.hash32[3]);

404 
±r
 +
	`•rötf
’å, " mëad©a_íåy->mdd_hash_ödex = %u\n", (
U32
)
mëad©a_íåy
->
mdd_hash_ödex
);

405 
±r
 +
	`•rötf
’å, " mëad©a_íåy->mdd_pba_ödex = %Œu\n", (
U64
)
mëad©a_íåy
->
mdd_pba_ödex
);

406 
±r
 +
	`•rötf
’å, " mëad©a_íåy->mdd_dd_£˘‹ = %Œu\n", (
U64
)
mëad©a_íåy
->
mdd_dd_£˘‹
);

407 
±r
 +
	`•rötf
’å, " mëad©a_íåy->mdd_dúty = %d\n", (
INT
)
mëad©a_íåy
->
mdd_dúty
);

409 
	}
}

411 
INT
 
	$avm_gë_pba_íåy
(
CHAR
 *
buf
)

413 
PPBA_BLOCK
 
pba_íåy
 = 
NULL
;

415 i‡(
avm_sysfs_íåy_gë_£t_pba_íåy
 > 
pba_èbÀ_size
) {

416 
	`LOGE
("Index is greaterÅhanÜbaÅable size\n");

420 
	`¥ötk
(
KERN_ERR
"\n");

421 
pba_íåy
 = 
	`GET_PBA_ENTRY
(
avm_sysfs_íåy_gë_£t_pba_íåy
);

422 
	`LOG
("Öba_ödex = %lu\n", (
ULONG
)
avm_sysfs_íåy_gë_£t_pba_íåy
);

423 
	`LOG
("Öba_íåy->hash_cﬁlisi⁄_èg = %Œu\n", (
U64
)
pba_íåy
->
hash_cﬁlisi⁄_èg
);

424 
	`LOG
("Öba_íåy->sizê%Œu\n", (
U64
)
pba_íåy
->
size
);

425 
	`LOG
("Öba_íåy->ªf_˙à%Œu\n", (
U64
)
pba_íåy
->
ªf_˙t
);

426 
	`LOG
("pba_íåy->√xt_hash_cﬁlisi⁄_íåy = %Œu\n", (
U64
)
pba_íåy
->
√xt_íåy_ö_cﬁlisi⁄_li°
);

427 
	`¥ötk
(
KERN_ERR
"\n");

429 
	}
}

431 
CHAR
 
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex
[
DZ_SYSFS_PAGE_SIZE
];

432 
INT
 
	$avm_gë_£t_pba_èbÀ_ödex
(
CHAR
 *
buf
)

434 
ssize_t
 
ªt
;

435 
ULONG
 
pba_ödex
 = 0;

436 
PPBA_BLOCK
 
pba_íåy
 = 
NULL
;

437 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex
;

438 
ªt
 = 
	`k°πoul
(
±r
, 10, &
pba_ödex
);

439 i‡(
ªt
) {

440 
	`mem£t
(
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex
, 0, 
DZ_SYSFS_PAGE_SIZE
);

441 
	`mem˝y
(
±r
, "\n", 1);

442 
±r
 += 1;

443 
±r
 +
	`•rötf
(ptr, "=================================\n");

444 i‡(
ªt
 =-
EINVAL
) {

445 
±r
 +
	`•rötf
(ptr, "UnableÅo convertÅo index. Invalid Index\n");

447 
±r
 +
	`•rötf
’å, "U«bÀÅÿc⁄vîàtÿödex.Ñë = %zd\n", 
ªt
) ;

449 
±r
 +
	`•rötf
(ptr, "=================================\n");

450  
ªt
;

452 
	`mem£t
(
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex
, 0, 
DZ_SYSFS_PAGE_SIZE
);

453 
	`mem˝y
(
±r
, "\n", 1);

454 
±r
 += 1;

455 
±r
 +
	`•rötf
(ptr, "=================================\n");

456 
±r
 +
	`•rötf
’å, "PBA TabÀ E¡ry f‹ Index %lu\n", 
pba_ödex
);

457 
±r
 +
	`•rötf
(ptr, "=================================\n");

459 i‡(
pba_ödex
 > 
pba_èbÀ_size
) {

460 
	`LOGE
("Index is greaterÅhanÜbaÅable size\n");

461 
±r
 +
	`•rötf
(ptr, "Index %lu is greaterÅhanÖbaÅable size %llu\n",

462 
pba_ödex
, 
pba_èbÀ_size
);

466 
pba_íåy
 = 
	`GET_PBA_ENTRY
(
pba_ödex
);

467 
±r
 +
	`•rötf
’å, "Öba_ödex = %lu\n", (
ULONG
)
pba_ödex
);

468 
±r
 +
	`•rötf
’å, "Öba_íåy->hash_cﬁlisi⁄_èg = %Œu\n", (
U64
)
pba_íåy
->
hash_cﬁlisi⁄_èg
);

469 
±r
 +
	`•rötf
’å, "Öba_íåy->sizê%Œu\n", (
U64
)
pba_íåy
->
size
);

470 
±r
 +
	`•rötf
’å, "Öba_íåy->ªf_˙à%Œu\n", (
U64
)
pba_íåy
->
ªf_˙t
);

471 
±r
 +
	`•rötf
’å, "pba_íåy->√xt_hash_cﬁlisi⁄_íåy = %Œu\n", (
U64
)
pba_íåy
->
√xt_íåy_ö_cﬁlisi⁄_li°
);

473 
	}
}

475 
ATOMIC64
 
dedu≥_disk_ªads
;

476 
ATOMIC64
 
dedu≥_disk_wrôes
;

477 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

478 
ATOMIC64
 
dedu≥_ˇche_hôs
;

479 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

480 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

481 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

482 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

483 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

484 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

487 
INT
 
	$sys_dedu≥_show
(
CHAR
 *
buf
)

489 
INT
 
cou¡
 = 0;

491 
cou¡
 = 
	`•rötf
(
buf
,

502 (
U64
)
dedu≥_tŸ_logiˇl_•a˚
,

503 (
U64
)
dedu≥_tŸ_physiˇl_•a˚
,

504 (
U64
)
	`ATOMIC64_READ
(
dedu≥_cur_logiˇl_•a˚
),

505 (
U64
)
	`ATOMIC64_READ
(
dedu≥_cur_physiˇl_•a˚
),

506 (
U64
)
	`ATOMIC64_READ
(
dedu≥_cur_du∂iˇã_•a˚
),

507 (
U64
)
	`ATOMIC64_READ
(
dedu≥_dñëed_íåõs
),

508 (
U64
)
	`ATOMIC64_READ
(
dedu≥_ˇche_hôs
),

509 (
U64
)
	`ATOMIC64_READ
(
dedu≥_disk_ªads
),

510 (
U64
)
	`ATOMIC64_READ
(
dedu≥_disk_wrôes
),

511 (
U64
)(
	`GET_CURRENT_TIME
()));

513 
	`LOGR
("<------------ Dedupe Show ----------->\n");

514 
	`LOGR
("%s",
buf
);

516 
	`LOGD
("Buf„∏Byã†u£d = %d\n", 
cou¡
);

517  
cou¡
;

519 
	}
}

521 
CHAR
 
avm_sysfs_íåy_gë_èbÀ_size
[
DZ_SYSFS_PAGE_SIZE
];

522 
INT
 
	$avm_gë_èbÀ_size
(
CHAR
 *
buf
)

524 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_èbÀ_size
;

525 
	`mem£t
(
avm_sysfs_íåy_gë_èbÀ_size
, 0, 
DZ_SYSFS_PAGE_SIZE
);

526 
	`mem˝y
(
±r
, "\n", 1);

527 
±r
 += 1;

528 
±r
 +
	`•rötf
(ptr, "================================\n");

529 
±r
 +
	`•rötf
(ptr, "InMemory Tables Size Information\n");

530 
±r
 +
	`•rötf
(ptr, "================================\n");

531 
±r
 +
	`•rötf
’å, "LBA TabÀ Size............%Œu (%lu sizêblocksË", 
lba_èbÀ_size
, 
LBA_BLOCK_SIZE
);

532 
±r
 +
	`•rötf
’å, "%Œu GB ", (
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
/
GB
));

533 
±r
 +
	`•rötf
’å, "%Œu MB ", (
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
/
MB
));

534 
±r
 +
	`•rötf
’å, "%Œu KB ", (
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
/
KB
));

535 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
lba_èbÀ_size
 * 
LBA_BLOCK_SIZE
);

537 
±r
 +
	`•rötf
’å, "HASH TabÀ Size...........%Œu (%lu sizêblocksË", 
hash_èbÀ_size
, 
HBA_BLOCK_SIZE
);

538 
±r
 +
	`•rötf
’å, "%Œu GB ", (
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
/
GB
));

539 
±r
 +
	`•rötf
’å, "%Œu MB ", (
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
/
MB
));

540 
±r
 +
	`•rötf
’å, "%Œu KB ", (
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
/
KB
));

541 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
hash_èbÀ_size
 * 
HBA_BLOCK_SIZE
);

543 
±r
 +
	`•rötf
’å, "PBA TabÀ Size............%Œu (%lu sizêblocksË", 
pba_èbÀ_size
, 
PBA_BLOCK_SIZE
);

544 
±r
 +
	`•rötf
’å, "%Œu GB ", (
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
/
GB
));

545 
±r
 +
	`•rötf
’å, "%Œu MB ", (
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
/
MB
));

546 
±r
 +
	`•rötf
’å, "%Œu KB ", (
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
/
KB
));

547 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
pba_èbÀ_size
 * 
PBA_BLOCK_SIZE
);

549 
±r
 +
	`•rötf
’å, "MDE LBA TabÀ Size........%Œu ", 
mëad©a_lba_èbÀ_size
);

550 
±r
 +
	`•rötf
’å, "%Œu GB ", (
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
/
GB
));

551 
±r
 +
	`•rötf
’å, "%Œu MB ", (
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
/
MB
));

552 
±r
 +
	`•rötf
’å, "%Œu KB ", (
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
/
KB
));

553 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
);

555 
±r
 +
	`•rötf
’å, "MDE LBA Lock TabÀ Size...%Œu ", 
mëad©a_lba_lock_èbÀ_size
);

556 
±r
 +
	`•rötf
’å, "%Œu GB ", (
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
)/
GB
));

557 
±r
 +
	`•rötf
’å, "%Œu MB ", (
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
)/
MB
));

558 
±r
 +
	`•rötf
’å, "%Œu KB ", (
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
)/
KB
));

559 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
));

561 
±r
 +
	`•rötf
’å, "TAGET_DEVICE_SIZE.........%zu (%lu sizêblocksË", 
TARGET_DEVICE_SIZE
, 
LBA_BLOCK_SIZE
);

562 
±r
 +
	`•rötf
’å, "%zu GB ", (
TARGET_DEVICE_SIZE
 * 
LBA_BLOCK_SIZE
/
GB
));

563 
±r
 +
	`•rötf
’å, "%zu MB ", (
TARGET_DEVICE_SIZE
 * 
LBA_BLOCK_SIZE
/
MB
));

564 
±r
 +
	`•rötf
’å, "%zu KB ", (
TARGET_DEVICE_SIZE
 * 
LBA_BLOCK_SIZE
/
KB
));

565 
±r
 +
	`•rötf
’å, "%zu byãs\n", 
TARGET_DEVICE_SIZE
 * 
LBA_BLOCK_SIZE
);

567 
	}
}

569 
PPBA_BLOCK
 
pba_èbÀ
;

570 
PHASH_BLOCK
 
hash_èbÀ
;

571 
PLBA_BLOCK
 
lba_èbÀ
;

572 
BITMAP
 
pba_bôm≠
;

574 
ATOMIC64
 
dedu≥_disk_ªads
;

575 
ATOMIC64
 
dedu≥_disk_wrôes
;

576 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

577 
ATOMIC64
 
dedu≥_ˇche_hôs
;

578 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

579 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

580 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

581 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

582 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

583 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

	@sysfs_engine/fec_engine_sysfs_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

18 
INT
 
dz_swôch_„c_ígöe
;

19 
INT
 
dz_swôch_bec_ígöe
;

20 
INT
 
dz_swôch_dedu≥_ígöe
;

21 
INT
 
dz_swôch_Æignmít_ígöe
;

25 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

26 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

31 
SIZE
 
TARGET_DEVICE_SIZE
;

33 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

34 
NAME
 
DATA_DISK_DEVICE_NAME
;

35 
OBJECT_LIST
 
globÆ_obje˘_li°
;

36 
U64
 
lba_èbÀ_size
;

37 
U64
 
pba_èbÀ_size
;

38 
U64
 
hash_èbÀ_size
;

39 
U32
 
numbî_of_l⁄gs_f‹_pba
;

40 
U32
 
numbî_of_l⁄gs_f‹_lba
;

41 
U32
 
numbî_of_l⁄gs_f‹_gpba
;

42 
ULONG
 
mëad©a_Êush_öãrvÆ
;

43 
U64
 
mëad©a_lba_èbÀ_size
;

44 
U64
 
mëad©a_lba_lock_èbÀ_size
;

45 
U64
 
avm_sysfs_íåy_‰ì_∑ge_cou¡
;

46 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes
[
DZ_SYSFS_PAGE_SIZE
];

47 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
[
DZ_SYSFS_PAGE_SIZE
];

48 
PPBA_BLOCK
 
pba_èbÀ
;

49 
PHASH_BLOCK
 
hash_èbÀ
;

50 
PLBA_BLOCK
 
lba_èbÀ
;

52 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

53 
ATOMIC64
 
bec_ˇche_hô
;

54 
ATOMIC64
 
bec_ˇche_miss
;

55 
ATOMIC64
 
bec_ˇche_dñëe
;

56 
ULONG
 
bec_size
;

57 
INT
 
bec_cutoff_nodes
;

58 
INT
 
bec_cutoff_≥r˚¡
;

59 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

60 
U64
 
time_Êush_¥ï¨e_°¨t
;

61 
U64
 
time_Êush_°¨t
;

62 
U64
 
time_Êush_íd
;

63 
U64
 
time_„c_wrôe_°¨t
;

64 
U64
 
time_„c_wrôe_swôch
;

65 
PFEC_TABLE
 
„c_èbÀs_Êush
;

66 
ATOMIC64
 
„c_a˘ive_cou¡_£quí˚
;

67 
ATOMIC64
 
„c_‰ì_cou¡_£quí˚
;

68 
ATOMIC64
 
„c_cur_Êush_cou¡
;

69 
ATOMIC64
 
„c_Êush_›s_cou¡
;

70 
ATOMIC64
 
„c_cur_Êush_›s_cou¡
;

71 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

72 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

73 
U64
 
„c_a˘ive_cou¡
;

74 
ATOMIC64
 
dedu≥_disk_ªads
;

75 
ATOMIC64
 
dedu≥_disk_wrôes
;

76 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

77 
ATOMIC64
 
dedu≥_ˇche_hôs
;

78 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

79 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

80 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

81 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

82 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

83 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

84 
USHORT
 
dedu≥_num_thªads
;

85 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

86 
PDZ_THREAD_POOL
 
rdedu≥_thªad_poﬁ
;

87 
PDZ_THREAD_POOL
 
wdedu≥_thªad_poﬁ
;

88 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

89 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

90 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

91 
PDZ_THREAD_POOL
 
Æign_wrôe_thªad_poﬁ
;

92 
PDZ_THREAD_POOL
 
Êush_thªad_poﬁ
;

93 
PDZ_THREAD_POOL
 
mëad©a_Êush_thªad_poﬁ
;

94 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡
;

95 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads
;

96 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
;

97 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
;

98 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
;

99 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

100 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

101 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

102 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

103 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

104 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

105 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

107 
ATOMIC64
 
Æign_iocou¡_disk_ªad
;

108 
ATOMIC64
 
Æign_iocou¡_disk_ªad_öã∫Æ
;

109 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

110 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

111 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

112 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

113 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

114 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

115 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

117 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes
;

118 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
;

119 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
;

120 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
;

121 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

122 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

123 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

124 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

125 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

126 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

127 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

129 
ATOMIC64
 
Æign_iocou¡_disk_wrôe
;

130 
ATOMIC64
 
Æign_iocou¡_disk_wrôe_öã∫Æ
;

131 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

132 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

133 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

134 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

135 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

136 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

137 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

139 
PSUPERBLOCK
 
su≥rblock
;

141 
CHAR
 
avm_sysfs_íåy_gë_„c_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
];

142 
INT
 
	$avm_gë_„c_cou¡îs
(
CHAR
 *
buf
)

144 
INT
 
cou¡
 = 0;

145 
UINT
 
Ωídög_i‹eque°s
;

146 
UINT
 
Ωídög_thªads
;

147 
UINT
 
Ωídög_jobs
;

149 
UINT
 
w≥ndög_i‹eque°s
;

150 
UINT
 
w≥ndög_thªads
;

151 
UINT
 
w≥ndög_jobs
;

153 
UINT
 
Âídög_i‹eque°s
;

154 
UINT
 
Âídög_thªads
;

155 
UINT
 
Âídög_jobs
;

157 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_„c_cou¡îs
;

158 
	`mem£t
(
avm_sysfs_íåy_gë_„c_cou¡îs
, 0, 
DZ_SYSFS_PAGE_SIZE
);

159 
	`mem˝y
(
±r
, "\n", 1);

160 
±r
 += 1;

161 
±r
 +
	`•rötf
(ptr, "==============================================\n");

162 
±r
 +
	`•rötf
(ptr, "FEC ENGINE COUNTERS\n");

163 
±r
 +
	`•rötf
(ptr, "==============================================\n");

164 i‡(!
su≥rblock
) {

165 
±r
 +
	`•rötf
(ptr, "Superblock is NULL");

169 i‡(
dz_swôch_„c_ígöe
 =
DZ_DISABLED
) {

170 
±r
 +
	`•rötf
(ptr, "FEC ENGINE DISABLED");

174 
Ωídög_i‹eque°s
 = 
	`©omic_ªad
(&
ªad_thªad_poﬁ
->
ioq_num_ios
);

175 
Ωídög_thªads
 = 
	`©omic_ªad
(&
ªad_thªad_poﬁ
->
num_a˘ive_thªads
);

176 
Ωídög_jobs
 = 
	`©omic_ªad
(&
ªad_thªad_poﬁ
->
num_jobs
);

178 
w≥ndög_i‹eque°s
 = 
	`©omic_ªad
(&
wrôe_thªad_poﬁ
->
ioq_num_ios
);

179 
w≥ndög_thªads
 = 
	`©omic_ªad
(&
wrôe_thªad_poﬁ
->
num_a˘ive_thªads
);

180 
w≥ndög_jobs
 = 
	`©omic_ªad
(&
wrôe_thªad_poﬁ
->
num_jobs
);

182 
Âídög_i‹eque°s
 = 
	`©omic_ªad
(&
Êush_thªad_poﬁ
->
ioq_num_ios
);

183 
Âídög_thªads
 = 
	`©omic_ªad
(&
Êush_thªad_poﬁ
->
num_a˘ive_thªads
);

184 
Âídög_jobs
 = 
	`©omic_ªad
(&
Êush_thªad_poﬁ
->
num_jobs
);

187 
cou¡
 = 
	`•rötf
(
±r
,

253 (
U64
)
	`READ_COUNTER
(
„c_a˘ive_cou¡_£quí˚
),

254 (
U64
)
	`READ_COUNTER
(
„c_‰ì_cou¡_£quí˚
),

255 
„c_a˘ive_cou¡
,

256 (
U64
)
	`READ_COUNTER
(
„c_Êush_›s_cou¡
),

257 (
U64
)
	`READ_COUNTER
(
„c_cur_Êush_›s_cou¡
),

258 (
U64
)
	`READ_COUNTER
(
„c_mem‹y_ªads_cou¡
),

259 (
U64
)
	`READ_COUNTER
(
„c_f‹w¨ded_ªads_cou¡
),

260 
time_„c_wrôe_°¨t
,

261 
time_„c_wrôe_swôch
,

262 
	`GET_CURRENT_TIME
(),

263 (
U64
)(
	`GET_TIME_DIFF_IN_SECONDS
(
time_„c_wrôe_°¨t
, 
	`GET_CURRENT_TIME
())/1000),

264 (
U64
)(
	`GET_TIME_DIFF_IN_SECONDS
(
time_„c_wrôe_°¨t
, 
time_„c_wrôe_swôch
)/1000),

265 (
U64
)
„c_èbÀs_Êush
->
tŸÆ_Êush_˙t
,

266 (
U64
)
	`READ_COUNTER
(
„c_cur_Êush_cou¡
),

267 (
U64
)
time_Êush_¥ï¨e_°¨t
,

268 (
U64
)
time_Êush_°¨t
,

269 (
U64
)
time_Êush_íd
,

270 
ªad_thªad_poﬁ
->
«me
,

271 
ªad_thªad_poﬁ
->
num_thªads
,

272 
Ωídög_i‹eque°s
,

273 
Ωídög_thªads
,

274 
Ωídög_jobs
,

275 
ªad_thªad_poﬁ
->
quõs˚
,

276 
ªad_thªad_poﬁ
->
ioq_›í
,

278 
wrôe_thªad_poﬁ
->
«me
,

279 
wrôe_thªad_poﬁ
->
num_thªads
,

280 
w≥ndög_i‹eque°s
,

281 
w≥ndög_thªads
,

282 
w≥ndög_jobs
,

283 
wrôe_thªad_poﬁ
->
quõs˚
,

284 
wrôe_thªad_poﬁ
->
ioq_›í
,

286 
Êush_thªad_poﬁ
->
«me
,

287 
Êush_thªad_poﬁ
->
num_thªads
,

288 
Âídög_i‹eque°s
,

289 
Âídög_thªads
,

290 
Âídög_jobs
,

291 
Êush_thªad_poﬁ
->
quõs˚
,

292 
Êush_thªad_poﬁ
->
ioq_›í
,

293 (
U64
)
	`GET_CURRENT_TIME
(),

294 (
U64
)(
	`GET_TIME_DIFF_IN_SECONDS
(
time_Êush_°¨t
, 
	`GET_CURRENT_TIME
())/1000),

295 (
U64
)((
	`GET_TIME_DIFF_IN_SECONDS
(
time_Êush_°¨t
, 
time_Êush_íd
))/1000),

296 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡
),

297 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads
),

298 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
),

299 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
),

300 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
),

301 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes
),

302 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
),

303 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
),

304 (
U64
)
	`READ_COUNTER
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
),

305 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_ªads_∑πül_∑ge
),

306 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_ªads_sögÀ_∑ge
),

307 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
),

308 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
),

309 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_ªads_mu…i_∑ge
),

310 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
),

311 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
),

312 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_wrôes_∑πül_∑ge
),

313 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_wrôes_sögÀ_∑ge
),

314 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
),

315 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
),

316 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_wrôes_mu…i_∑ge
),

317 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
),

318 (
U64
)
	`READ_COUNTER
(
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
)

328 
	`LOGD
("Buf„∏Byã†u£d = %d\n", 
cou¡
);

332 
	}
}

334 
U64
 
avm_sysfs_íåy_gë_£t_swôch_„c
;

335 
INT
 
	$avm_gë_swôch_„c
(
CHAR
 *
buf
)

337 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_swôch_„c
, 
dz_swôch_„c_ígöe
);

338 
	}
}

340 
INT
 
	$avm_£t_swôch_„c
(
U64
 
buf
)

342 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_„c_ígöe
, 
buf
);

343 
	}
}

	@sysfs_engine/metadata_engine_sysfs_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

18 
INT
 
dz_swôch_„c_ígöe
;

19 
INT
 
dz_swôch_bec_ígöe
;

20 
INT
 
dz_swôch_dedu≥_ígöe
;

21 
INT
 
dz_swôch_Æignmít_ígöe
;

25 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

26 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

31 
SIZE
 
TARGET_DEVICE_SIZE
;

33 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

34 
NAME
 
DATA_DISK_DEVICE_NAME
;

35 
OBJECT_LIST
 
globÆ_obje˘_li°
;

36 
U64
 
lba_èbÀ_size
;

37 
U64
 
pba_èbÀ_size
;

38 
U64
 
hash_èbÀ_size
;

39 
U32
 
numbî_of_l⁄gs_f‹_pba
;

40 
U32
 
numbî_of_l⁄gs_f‹_lba
;

41 
U32
 
numbî_of_l⁄gs_f‹_gpba
;

42 
ULONG
 
mëad©a_Êush_öãrvÆ
;

43 
U64
 
mëad©a_lba_èbÀ_size
;

44 
U64
 
mëad©a_lba_lock_èbÀ_size
;

45 
U64
 
avm_sysfs_íåy_‰ì_∑ge_cou¡
;

46 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes
[
DZ_SYSFS_PAGE_SIZE
];

47 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
[
DZ_SYSFS_PAGE_SIZE
];

48 
PPBA_BLOCK
 
pba_èbÀ
;

49 
PHASH_BLOCK
 
hash_èbÀ
;

50 
PLBA_BLOCK
 
lba_èbÀ
;

52 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

53 
ATOMIC64
 
bec_ˇche_hô
;

54 
ATOMIC64
 
bec_ˇche_miss
;

55 
ATOMIC64
 
bec_ˇche_dñëe
;

56 
ULONG
 
bec_size
;

57 
INT
 
bec_cutoff_nodes
;

58 
INT
 
bec_cutoff_≥r˚¡
;

59 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

60 
U64
 
time_Êush_¥ï¨e_°¨t
;

61 
U64
 
time_Êush_°¨t
;

62 
U64
 
time_Êush_íd
;

63 
U64
 
time_„c_wrôe_°¨t
;

64 
U64
 
time_„c_wrôe_swôch
;

65 
PFEC_TABLE
 
„c_èbÀs_Êush
;

66 
ATOMIC64
 
„c_a˘ive_cou¡_£quí˚
;

67 
ATOMIC64
 
„c_‰ì_cou¡_£quí˚
;

68 
ATOMIC64
 
„c_cur_Êush_cou¡
;

69 
ATOMIC64
 
„c_Êush_›s_cou¡
;

70 
ATOMIC64
 
„c_cur_Êush_›s_cou¡
;

71 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

72 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

73 
U64
 
„c_a˘ive_cou¡
;

74 
ATOMIC64
 
dedu≥_disk_ªads
;

75 
ATOMIC64
 
dedu≥_disk_wrôes
;

76 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

77 
ATOMIC64
 
dedu≥_ˇche_hôs
;

78 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

79 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

80 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

81 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

82 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

83 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

84 
USHORT
 
dedu≥_num_thªads
;

85 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

86 
PDZ_THREAD_POOL
 
rdedu≥_thªad_poﬁ
;

87 
PDZ_THREAD_POOL
 
wdedu≥_thªad_poﬁ
;

88 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

89 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

90 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

91 
PDZ_THREAD_POOL
 
Æign_wrôe_thªad_poﬁ
;

92 
PDZ_THREAD_POOL
 
Êush_thªad_poﬁ
;

93 
PDZ_THREAD_POOL
 
mëad©a_Êush_thªad_poﬁ
;

94 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡
;

95 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads
;

96 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
;

97 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
;

98 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
;

99 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

100 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

101 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

102 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

103 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

104 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

105 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

107 
ATOMIC64
 
Æign_iocou¡_disk_ªad
;

108 
ATOMIC64
 
Æign_iocou¡_disk_ªad_öã∫Æ
;

109 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

110 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

111 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

112 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

113 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

114 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

115 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

117 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes
;

118 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
;

119 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
;

120 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
;

121 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

122 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

123 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

124 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

125 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

126 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

127 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

129 
ATOMIC64
 
Æign_iocou¡_disk_wrôe
;

130 
ATOMIC64
 
Æign_iocou¡_disk_wrôe_öã∫Æ
;

131 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

132 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

133 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

134 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

135 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

136 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

137 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

139 
PSUPERBLOCK
 
su≥rblock
;

141 
CHAR
 
avm_sysfs_íåy_gë_su≥rblock
[
DZ_SYSFS_PAGE_SIZE
];

142 
INT
 
	$avm_gë_su≥rblock
(
CHAR
 *
buf
)

144 
INT
 
cou¡
 = 0;

145 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_su≥rblock
;

146 
	`mem£t
(
avm_sysfs_íåy_gë_su≥rblock
, 0, 
DZ_SYSFS_PAGE_SIZE
);

147 
	`mem˝y
(
±r
, "\n", 1);

148 
±r
 += 1;

149 
±r
 +
	`•rötf
(ptr, "===================================================================\n");

150 
±r
 +
	`•rötf
(ptr, "SUPERBLOCK STRUCTURE\n");

151 
±r
 +
	`•rötf
(ptr, "===================================================================\n");

153 i‡(!
su≥rblock
) {

154 
±r
 +
	`•rötf
(ptr, "Superblock is NULL\n");

158 
cou¡
 = 
	`•rötf
(
±r
,

176 
su≥rblock
->
vîsi⁄
,

177 
su≥rblock
->
mëad©a_dev_magi˙o
,

178 
su≥rblock
->
mëad©a_dev_«me
,

179 
su≥rblock
->
mëad©a_dev_uuid
,

180 
su≥rblock
->
mëad©a_off£t
,

181 
su≥rblock
->
d©a_dev_magi˙o
,

182 
su≥rblock
->
d©a_dev_«me
,

183 
su≥rblock
->
d©a_dev_uuid
,

184 
su≥rblock
->
lba_èbÀ_size
,

185 
su≥rblock
->
lba_block_size
,

186 
su≥rblock
->
mëad©a_lba_èbÀ_size
,

187 
su≥rblock
->
mëad©a_lba_block_size
,

188 
su≥rblock
->
mëad©a_lba_lock_èbÀ_size
,

189 
su≥rblock
->
mëad©a_lba_lock_block_size
,

190 
su≥rblock
->
pba_èbÀ_size
,

191 
su≥rblock
->
pba_block_size
,

192 
su≥rblock
->
hash_èbÀ_size


196 
	}
}

198 
CHAR
 
avm_sysfs_íåy_gë_mëad©a_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
];

199 
INT
 
	$avm_gë_mëad©a_cou¡îs
(
CHAR
 *
buf
)

201 
INT
 
cou¡
 = 0;

202 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_mëad©a_cou¡îs
;

203 
	`mem£t
(
avm_sysfs_íåy_gë_mëad©a_cou¡îs
, 0, 
DZ_SYSFS_PAGE_SIZE
);

204 
	`mem˝y
(
±r
, "\n", 1);

205 
±r
 += 1;

206 
±r
 +
	`•rötf
(ptr, "===================================\n");

207 
±r
 +
	`•rötf
(ptr, "METADATA ENGINE (MDE) COUNTERS\n");

208 
±r
 +
	`•rötf
(ptr, "===================================\n");

211 i‡(!
su≥rblock
) {

212 
±r
 +
	`•rötf
(ptr, "Superblock is NULL");

217 
cou¡
 = 
	`•rötf
(
±r
,

221 
mëad©a_Êush_thªad_poﬁ
->
num_thªads
,

222 
mëad©a_Êush_thªad_poﬁ
->
«me
,

223 (
ULONG
)
mëad©a_Êush_öãrvÆ


226 
±r
 +
cou¡
;

227 
±r
 +
	`•rötf
’å, "MDE LBA TabÀ Size................%Œu ", 
mëad©a_lba_èbÀ_size
);

228 
±r
 +
	`•rötf
’å, "%Œu GB ", (
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
/
GB
));

229 
±r
 +
	`•rötf
’å, "%Œu MB ", (
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
/
MB
));

230 
±r
 +
	`•rötf
’å, "%Œu KB ", (
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
/
KB
));

231 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
mëad©a_lba_èbÀ_size
 * 
METADATA_BLOCK_SIZE
);

233 
±r
 +
	`•rötf
’å, "MDE LBA Lock TabÀ Size...........%Œu ", 
mëad©a_lba_lock_èbÀ_size
);

234 
±r
 +
	`•rötf
’å, "%Œu GB ", (
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
)/
GB
));

235 
±r
 +
	`•rötf
’å, "%Œu MB ", (
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
)/
MB
));

236 
±r
 +
	`•rötf
’å, "%Œu KB ", (
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
)/
KB
));

237 
±r
 +
	`•rötf
’å, "%Œu byãs\n", 
mëad©a_lba_lock_èbÀ_size
 * (
MD_LOCK
));

241 
	`LOGD
("Buf„∏Byã†u£d = %d\n", 
cou¡
);

244 
	}
}

	@sysfs_engine/sysfs_alignment_engine_autogen.c

2 
	~"¥ŸŸy≥s.h
"

4 
kobje˘
 *
	gdz_kobj
 = 
NULL
;

6 
kobje˘
 *
sysfs_avm_kî√l_kobj
;

8 
U64
 
	gavm_sysfs_íåy_gë_£t_swôch_d´
 = 0;

9 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_d´_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

10 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_d´_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

11 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_swôch_d´_©å
 =

12 
__ATTR
(
gë_£t_swôch_d´
, 0644, 
avm_sysfs_íåy_gë_£t_swôch_d´_show
, 
avm_sysfs_íåy_gë_£t_swôch_d´_°‹e
);

14 
U64
 
	gavm_sysfs_íåy_gë_£t_swôch_d´_mbr
 = 0;

15 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_d´_mbr_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

16 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_d´_mbr_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

17 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_swôch_d´_mbr_©å
 =

18 
__ATTR
(
gë_£t_swôch_d´_mbr
, 0644, 
avm_sysfs_íåy_gë_£t_swôch_d´_mbr_show
, 
avm_sysfs_íåy_gë_£t_swôch_d´_mbr_°‹e
);

20 
U64
 
	gavm_sysfs_íåy_gë_£t_swôch_d´_mbw
 = 0;

21 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_d´_mbw_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

22 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_d´_mbw_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

23 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_swôch_d´_mbw_©å
 =

24 
__ATTR
(
gë_£t_swôch_d´_mbw
, 0644, 
avm_sysfs_íåy_gë_£t_swôch_d´_mbw_show
, 
avm_sysfs_íåy_gë_£t_swôch_d´_mbw_°‹e
);

26 
U64
 
	gavm_sysfs_íåy_gë_£t_swôch_d´_pbr
 = 0;

27 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_d´_pbr_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

28 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_d´_pbr_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

29 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_swôch_d´_pbr_©å
 =

30 
__ATTR
(
gë_£t_swôch_d´_pbr
, 0644, 
avm_sysfs_íåy_gë_£t_swôch_d´_pbr_show
, 
avm_sysfs_íåy_gë_£t_swôch_d´_pbr_°‹e
);

32 
U64
 
	gavm_sysfs_íåy_gë_£t_swôch_d´_pbw
 = 0;

33 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_d´_pbw_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

34 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_d´_pbw_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

35 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_swôch_d´_pbw_©å
 =

36 
__ATTR
(
gë_£t_swôch_d´_pbw
, 0644, 
avm_sysfs_íåy_gë_£t_swôch_d´_pbw_show
, 
avm_sysfs_íåy_gë_£t_swôch_d´_pbw_°‹e
);

38 
U64
 
	gavm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads
 = 0;

39 
ssize_t
 
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

40 
ssize_t
 
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

41 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads_©å
 =

42 
__ATTR
(
gë_£t_tu«bÀ_d´_πhªads
, 0644, 
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads_show
, 
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads_°‹e
);

44 
U64
 
	gavm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads
 = 0;

45 
ssize_t
 
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

46 
ssize_t
 
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

47 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads_©å
 =

48 
__ATTR
(
gë_£t_tu«bÀ_d´_wthªads
, 0644, 
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads_show
, 
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads_°‹e
);

50 
CHAR
 
	gavm_sysfs_íåy_gë_Æign_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

51 
ssize_t
 
avm_sysfs_íåy_gë_Æign_cou¡îs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

52 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_Æign_cou¡îs_©å
 =

53 
__ATTR
(
gë_Æign_cou¡îs
, 0644, 
avm_sysfs_íåy_gë_Æign_cou¡îs_show
, 
NULL
);

55 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_d´_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

57 
INT
 
cou¡
 = 0;

58 
CHAR
 *
±r
 = 
buf
;

59 
cou¡
 = 
	`avm_gë_swôch_d´
(
buf
);

60  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_swôch_d´ : %Œi\n",
avm_sysfs_íåy_gë_£t_swôch_d´
);

61 
	}
}

63 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_d´_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

65 
INT
 
ªt
 = 
SUCCESS
 ;

66 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_swôch_d´
);

67 
	`avm_£t_swôch_d´
(
avm_sysfs_íåy_gë_£t_swôch_d´
);

68  
Àn
;

69 
	}
}

71 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_d´_mbr_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

73 
INT
 
cou¡
 = 0;

74 
CHAR
 *
±r
 = 
buf
;

75 
cou¡
 = 
	`avm_gë_swôch_d´_mbr
(
buf
);

76  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_swôch_d´_mb∏: %Œi\n",
avm_sysfs_íåy_gë_£t_swôch_d´_mbr
);

77 
	}
}

79 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_d´_mbr_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

81 
INT
 
ªt
 = 
SUCCESS
 ;

82 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_swôch_d´_mbr
);

83 
	`avm_£t_swôch_d´_mbr
(
avm_sysfs_íåy_gë_£t_swôch_d´_mbr
);

84  
Àn
;

85 
	}
}

87 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_d´_mbw_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

89 
INT
 
cou¡
 = 0;

90 
CHAR
 *
±r
 = 
buf
;

91 
cou¡
 = 
	`avm_gë_swôch_d´_mbw
(
buf
);

92  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_swôch_d´_mbw : %Œi\n",
avm_sysfs_íåy_gë_£t_swôch_d´_mbw
);

93 
	}
}

95 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_d´_mbw_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

97 
INT
 
ªt
 = 
SUCCESS
 ;

98 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_swôch_d´_mbw
);

99 
	`avm_£t_swôch_d´_mbw
(
avm_sysfs_íåy_gë_£t_swôch_d´_mbw
);

100  
Àn
;

101 
	}
}

103 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_d´_pbr_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

105 
INT
 
cou¡
 = 0;

106 
CHAR
 *
±r
 = 
buf
;

107 
cou¡
 = 
	`avm_gë_swôch_d´_pbr
(
buf
);

108  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_swôch_d´_pb∏: %Œi\n",
avm_sysfs_íåy_gë_£t_swôch_d´_pbr
);

109 
	}
}

111 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_d´_pbr_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

113 
INT
 
ªt
 = 
SUCCESS
 ;

114 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_swôch_d´_pbr
);

115 
	`avm_£t_swôch_d´_pbr
(
avm_sysfs_íåy_gë_£t_swôch_d´_pbr
);

116  
Àn
;

117 
	}
}

119 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_d´_pbw_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

121 
INT
 
cou¡
 = 0;

122 
CHAR
 *
±r
 = 
buf
;

123 
cou¡
 = 
	`avm_gë_swôch_d´_pbw
(
buf
);

124  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_swôch_d´_pbw : %Œi\n",
avm_sysfs_íåy_gë_£t_swôch_d´_pbw
);

125 
	}
}

127 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_d´_pbw_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

129 
INT
 
ªt
 = 
SUCCESS
 ;

130 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_swôch_d´_pbw
);

131 
	`avm_£t_swôch_d´_pbw
(
avm_sysfs_íåy_gë_£t_swôch_d´_pbw
);

132  
Àn
;

133 
	}
}

135 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

137 
INT
 
cou¡
 = 0;

138 
CHAR
 *
±r
 = 
buf
;

139 
cou¡
 = 
	`avm_gë_tu«bÀ_d´_ªad_thªads
(
buf
);

140  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªad†: %Œi\n",
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads
);

141 
	}
}

143 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

145 
INT
 
ªt
 = 
SUCCESS
 ;

146 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads
);

147 
	`avm_£t_tu«bÀ_d´_ªad_thªads
(
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads
);

148  
Àn
;

149 
	}
}

151 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

153 
INT
 
cou¡
 = 0;

154 
CHAR
 *
±r
 = 
buf
;

155 
cou¡
 = 
	`avm_gë_tu«bÀ_d´_wrôe_thªads
(
buf
);

156  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªad†: %Œi\n",
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads
);

157 
	}
}

159 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

161 
INT
 
ªt
 = 
SUCCESS
 ;

162 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads
);

163 
	`avm_£t_tu«bÀ_d´_wrôe_thªads
(
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads
);

164  
Àn
;

165 
	}
}

167 
ssize_t
 
	$avm_sysfs_íåy_gë_Æign_cou¡îs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

169 
INT
 
cou¡
 = 0;

170 
CHAR
 *
±r
 = 
buf
;

171 
cou¡
 = 
	`avm_gë_Æign_cou¡îs
(
buf
);

172  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_Æign_cou¡î†: %s\n",
avm_sysfs_íåy_gë_Æign_cou¡îs
);

173 
	}
}

175 
INT
 
	$avm_sysfs_Æignmít_ígöe_öô
(
VOID
)

177 
INT
 
ªt
 = 
SUCCESS
;

178 
dz_kobj
 = 
	`kobje˘_¸óã_™d_add
("Æignmít_ígöe", 
sysfs_avm_kî√l_kobj
);

179 i‡(!
dz_kobj
)

180  -
ENOMEM
;

181 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_swôch_d´_©å
.
©å
);

182 i‡(
ªt
 =
SUCCESS
) {

183 
	`LOGSYS
("sysfsÉntry /sys/avm/alignment_engine/get_set_switch_dae created \n");

185 
	`LOGSYSE
("sysfsÉntry /sys/avm/alignment_engine/get_set_switch_dae creation failed \n");

186 
RETURNF
;

189 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_swôch_d´_mbr_©å
.
©å
);

190 i‡(
ªt
 =
SUCCESS
) {

191 
	`LOGSYS
("sysfsÉntry /sys/avm/alignment_engine/get_set_switch_dae_mbr created \n");

193 
	`LOGSYSE
("sysfsÉntry /sys/avm/alignment_engine/get_set_switch_dae_mbr creation failed \n");

194 
RETURNF
;

197 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_swôch_d´_mbw_©å
.
©å
);

198 i‡(
ªt
 =
SUCCESS
) {

199 
	`LOGSYS
("sysfsÉntry /sys/avm/alignment_engine/get_set_switch_dae_mbw created \n");

201 
	`LOGSYSE
("sysfsÉntry /sys/avm/alignment_engine/get_set_switch_dae_mbw creation failed \n");

202 
RETURNF
;

205 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_swôch_d´_pbr_©å
.
©å
);

206 i‡(
ªt
 =
SUCCESS
) {

207 
	`LOGSYS
("sysfsÉntry /sys/avm/alignment_engine/get_set_switch_dae_pbr created \n");

209 
	`LOGSYSE
("sysfsÉntry /sys/avm/alignment_engine/get_set_switch_dae_pbr creation failed \n");

210 
RETURNF
;

213 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_swôch_d´_pbw_©å
.
©å
);

214 i‡(
ªt
 =
SUCCESS
) {

215 
	`LOGSYS
("sysfsÉntry /sys/avm/alignment_engine/get_set_switch_dae_pbw created \n");

217 
	`LOGSYSE
("sysfsÉntry /sys/avm/alignment_engine/get_set_switch_dae_pbw creation failed \n");

218 
RETURNF
;

221 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_πhªads_©å
.
©å
);

222 i‡(
ªt
 =
SUCCESS
) {

223 
	`LOGSYS
("sysfsÉntry /sys/avm/alignment_engine/get_set_tunable_dae_rthreads created \n");

225 
	`LOGSYSE
("sysfsÉntry /sys/avm/alignment_engine/get_set_tunable_dae_rthreads creation failed \n");

226 
RETURNF
;

229 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_tu«bÀ_d´_wthªads_©å
.
©å
);

230 i‡(
ªt
 =
SUCCESS
) {

231 
	`LOGSYS
("sysfsÉntry /sys/avm/alignment_engine/get_set_tunable_dae_wthreads created \n");

233 
	`LOGSYSE
("sysfsÉntry /sys/avm/alignment_engine/get_set_tunable_dae_wthreads creation failed \n");

234 
RETURNF
;

237 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_Æign_cou¡îs_©å
.
©å
);

238 i‡(
ªt
 =
SUCCESS
) {

239 
	`LOGSYS
("sysfsÉntry /sys/avm/alignment_engine/get_align_counters created \n");

241 
	`LOGSYSE
("sysfsÉntry /sys/avm/alignment_engine/get_align_counters creation failed \n");

242 
RETURNF
;

245 
RETURNS
;

247 
	}
}

248 
RVOID
 
	$avm_sysfs_Æignmít_ígöe_exô
(
VOID
)

250 
	`kobje˘_put
(
dz_kobj
);

251 
	`LOGSYS
("dz_sysfs freed\n");

252 
	}
}

	@sysfs_engine/sysfs_bec_engine_autogen.c

2 
	~"¥ŸŸy≥s.h
"

4 
kobje˘
 *
	gdz_kobj
 = 
NULL
;

6 
kobje˘
 *
sysfs_avm_kî√l_kobj
;

8 
U64
 
	gavm_sysfs_íåy_gë_£t_swôch_bec
 = 0;

9 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_bec_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

10 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_bec_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

11 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_swôch_bec_©å
 =

12 
__ATTR
(
gë_£t_swôch_bec
, 0644, 
avm_sysfs_íåy_gë_£t_swôch_bec_show
, 
avm_sysfs_íåy_gë_£t_swôch_bec_°‹e
);

14 
U64
 
	gavm_sysfs_íåy_gë_£t_tu«bÀ_bec_size
 = 0;

15 
ssize_t
 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

16 
ssize_t
 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

17 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_tu«bÀ_bec_size_©å
 =

18 
__ATTR
(
gë_£t_tu«bÀ_bec_size
, 0644, 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size_show
, 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size_°‹e
);

20 
U64
 
	gavm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads
 = 0;

21 
ssize_t
 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

22 
ssize_t
 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

23 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads_©å
 =

24 
__ATTR
(
gë_£t_tu«bÀ_bec_thªads
, 0644, 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads_show
, 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads_°‹e
);

26 
U64
 
	gavm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï
 = 0;

27 
ssize_t
 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

28 
ssize_t
 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

29 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï_©å
 =

30 
__ATTR
(
gë_£t_tu«bÀ_bec_ï
, 0644, 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï_show
, 
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï_°‹e
);

32 
CHAR
 
	gavm_sysfs_íåy_gë_bec_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

33 
ssize_t
 
avm_sysfs_íåy_gë_bec_cou¡îs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

34 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_bec_cou¡îs_©å
 =

35 
__ATTR
(
gë_bec_cou¡îs
, 0644, 
avm_sysfs_íåy_gë_bec_cou¡îs_show
, 
NULL
);

37 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_bec_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

39 
INT
 
cou¡
 = 0;

40 
CHAR
 *
±r
 = 
buf
;

41 
cou¡
 = 
	`avm_gë_swôch_bec
(
buf
);

42  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_swôch_be¯: %Œi\n",
avm_sysfs_íåy_gë_£t_swôch_bec
);

43 
	}
}

45 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_bec_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

47 
INT
 
ªt
 = 
SUCCESS
 ;

48 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_swôch_bec
);

49 
	`avm_£t_swôch_bec
(
avm_sysfs_íåy_gë_£t_swôch_bec
);

50  
Àn
;

51 
	}
}

53 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

55 
INT
 
cou¡
 = 0;

56 
CHAR
 *
±r
 = 
buf
;

57 
cou¡
 = 
	`avm_gë_tu«bÀ_bec_size
(
buf
);

58  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_tu«bÀ_bec_sizê: %Œi\n",
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size
);

59 
	}
}

61 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

63 
INT
 
ªt
 = 
SUCCESS
 ;

64 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size
);

65 
	`avm_£t_tu«bÀ_bec_size
(
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size
);

66  
Àn
;

67 
	}
}

69 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

71 
INT
 
cou¡
 = 0;

72 
CHAR
 *
±r
 = 
buf
;

73 
cou¡
 = 
	`avm_gë_tu«bÀ_bec_thªads
(
buf
);

74  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªad†: %Œi\n",
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads
);

75 
	}
}

77 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

79 
INT
 
ªt
 = 
SUCCESS
 ;

80 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads
);

81 
	`avm_£t_tu«bÀ_bec_thªads
(
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads
);

82  
Àn
;

83 
	}
}

85 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

87 
INT
 
cou¡
 = 0;

88 
CHAR
 *
±r
 = 
buf
;

89 
cou¡
 = 
	`avm_gë_tu«bÀ_bec_ï
(
buf
);

90  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï : %Œi\n",
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï
);

91 
	}
}

93 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

95 
INT
 
ªt
 = 
SUCCESS
 ;

96 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï
);

97 
	`avm_£t_tu«bÀ_bec_ï
(
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï
);

98  
Àn
;

99 
	}
}

101 
ssize_t
 
	$avm_sysfs_íåy_gë_bec_cou¡îs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

103 
INT
 
cou¡
 = 0;

104 
CHAR
 *
±r
 = 
buf
;

105 
cou¡
 = 
	`avm_gë_bec_cou¡îs
(
buf
);

106  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_bec_cou¡î†: %s\n",
avm_sysfs_íåy_gë_bec_cou¡îs
);

107 
	}
}

109 
INT
 
	$avm_sysfs_bec_ígöe_öô
(
VOID
)

111 
INT
 
ªt
 = 
SUCCESS
;

112 
dz_kobj
 = 
	`kobje˘_¸óã_™d_add
("back_íd_ˇche_ígöe", 
sysfs_avm_kî√l_kobj
);

113 i‡(!
dz_kobj
)

114  -
ENOMEM
;

115 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_swôch_bec_©å
.
©å
);

116 i‡(
ªt
 =
SUCCESS
) {

117 
	`LOGSYS
("sysfsÉntry /sys/avm/back_end_cache_engine/get_set_switch_bec created \n");

119 
	`LOGSYSE
("sysfsÉntry /sys/avm/back_end_cache_engine/get_set_switch_bec creation failed \n");

120 
RETURNF
;

123 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_size_©å
.
©å
);

124 i‡(
ªt
 =
SUCCESS
) {

125 
	`LOGSYS
("sysfsÉntry /sys/avm/back_end_cache_engine/get_set_tunable_bec_size created \n");

127 
	`LOGSYSE
("sysfsÉntry /sys/avm/back_end_cache_engine/get_set_tunable_bec_size creation failed \n");

128 
RETURNF
;

131 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_thªads_©å
.
©å
);

132 i‡(
ªt
 =
SUCCESS
) {

133 
	`LOGSYS
("sysfsÉntry /sys/avm/back_end_cache_engine/get_set_tunable_bec_threads created \n");

135 
	`LOGSYSE
("sysfsÉntry /sys/avm/back_end_cache_engine/get_set_tunable_bec_threads creation failed \n");

136 
RETURNF
;

139 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_tu«bÀ_bec_ï_©å
.
©å
);

140 i‡(
ªt
 =
SUCCESS
) {

141 
	`LOGSYS
("sysfsÉntry /sys/avm/back_end_cache_engine/get_set_tunable_bec_ep created \n");

143 
	`LOGSYSE
("sysfsÉntry /sys/avm/back_end_cache_engine/get_set_tunable_bec_ep creation failed \n");

144 
RETURNF
;

147 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_bec_cou¡îs_©å
.
©å
);

148 i‡(
ªt
 =
SUCCESS
) {

149 
	`LOGSYS
("sysfsÉntry /sys/avm/back_end_cache_engine/get_bec_counters created \n");

151 
	`LOGSYSE
("sysfsÉntry /sys/avm/back_end_cache_engine/get_bec_counters creation failed \n");

152 
RETURNF
;

155 
RETURNS
;

157 
	}
}

158 
RVOID
 
	$avm_sysfs_bec_ígöe_exô
(
VOID
)

160 
	`kobje˘_put
(
dz_kobj
);

161 
	`LOGSYS
("dz_sysfs freed\n");

162 
	}
}

	@sysfs_engine/sysfs_dedupe_engine_autogen.c

2 
	~"¥ŸŸy≥s.h
"

4 
kobje˘
 *
	gdz_kobj
 = 
NULL
;

6 
kobje˘
 *
sysfs_avm_kî√l_kobj
;

8 
U64
 
	gavm_sysfs_íåy_gë_£t_swôch_dde
 = 0;

9 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_dde_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

10 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_dde_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

11 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_swôch_dde_©å
 =

12 
__ATTR
(
gë_£t_swôch_dde
, 0644, 
avm_sysfs_íåy_gë_£t_swôch_dde_show
, 
avm_sysfs_íåy_gë_£t_swôch_dde_°‹e
);

14 
CHAR
 
	gavm_sysfs_íåy_gë_dedu≥_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

15 
ssize_t
 
avm_sysfs_íåy_gë_dedu≥_cou¡îs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

16 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_dedu≥_cou¡îs_©å
 =

17 
__ATTR
(
gë_dedu≥_cou¡îs
, 0644, 
avm_sysfs_íåy_gë_dedu≥_cou¡îs_show
, 
NULL
);

19 
CHAR
 
	gavm_sysfs_íåy_gë_£t_lba_èbÀ_ödex
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

20 
ssize_t
 
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

21 
ssize_t
 
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

22 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_lba_èbÀ_ödex_©å
 =

23 
__ATTR
(
gë_£t_lba_èbÀ_ödex
, 0644, 
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex_show
, 
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex_°‹e
);

25 
CHAR
 
	gavm_sysfs_íåy_gë_£t_pba_èbÀ_ödex
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

26 
ssize_t
 
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

27 
ssize_t
 
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

28 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_pba_èbÀ_ödex_©å
 =

29 
__ATTR
(
gë_£t_pba_èbÀ_ödex
, 0644, 
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex_show
, 
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex_°‹e
);

31 
U64
 
	gavm_sysfs_íåy_gë_£t_lba_íåy
 = 0;

32 
ssize_t
 
avm_sysfs_íåy_gë_£t_lba_íåy_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

33 
ssize_t
 
avm_sysfs_íåy_gë_£t_lba_íåy_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

34 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_lba_íåy_©å
 =

35 
__ATTR
(
gë_£t_lba_íåy
, 0644, 
avm_sysfs_íåy_gë_£t_lba_íåy_show
, 
avm_sysfs_íåy_gë_£t_lba_íåy_°‹e
);

37 
U64
 
	gavm_sysfs_íåy_gë_£t_pba_íåy
 = 0;

38 
ssize_t
 
avm_sysfs_íåy_gë_£t_pba_íåy_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

39 
ssize_t
 
avm_sysfs_íåy_gë_£t_pba_íåy_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

40 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_pba_íåy_©å
 =

41 
__ATTR
(
gë_£t_pba_íåy
, 0644, 
avm_sysfs_íåy_gë_£t_pba_íåy_show
, 
avm_sysfs_íåy_gë_£t_pba_íåy_°‹e
);

43 
U64
 
	gavm_sysfs_íåy_gë_pba_èbÀ_size
 = 0;

44 
ssize_t
 
avm_sysfs_íåy_gë_pba_èbÀ_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

45 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_pba_èbÀ_size_©å
 =

46 
__ATTR
(
gë_pba_èbÀ_size
, 0644, 
avm_sysfs_íåy_gë_pba_èbÀ_size_show
, 
NULL
);

48 
U64
 
	gavm_sysfs_íåy_gë_hash_èbÀ_size
 = 0;

49 
ssize_t
 
avm_sysfs_íåy_gë_hash_èbÀ_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

50 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_hash_èbÀ_size_©å
 =

51 
__ATTR
(
gë_hash_èbÀ_size
, 0644, 
avm_sysfs_íåy_gë_hash_èbÀ_size_show
, 
NULL
);

53 
CHAR
 
	gavm_sysfs_íåy_gë_èbÀ_size
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

54 
ssize_t
 
avm_sysfs_íåy_gë_èbÀ_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

55 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_èbÀ_size_©å
 =

56 
__ATTR
(
gë_èbÀ_size
, 0644, 
avm_sysfs_íåy_gë_èbÀ_size_show
, 
NULL
);

58 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_dde_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

60 
INT
 
cou¡
 = 0;

61 
CHAR
 *
±r
 = 
buf
;

62 
cou¡
 = 
	`avm_gë_swôch_dde
(
buf
);

63  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_swôch_ddê: %Œi\n",
avm_sysfs_íåy_gë_£t_swôch_dde
);

64 
	}
}

66 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_dde_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

68 
INT
 
ªt
 = 
SUCCESS
 ;

69 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_swôch_dde
);

70 
	`avm_£t_swôch_dde
(
avm_sysfs_íåy_gë_£t_swôch_dde
);

71  
Àn
;

72 
	}
}

74 
ssize_t
 
	$avm_sysfs_íåy_gë_dedu≥_cou¡îs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

76 
INT
 
cou¡
 = 0;

77 
CHAR
 *
±r
 = 
buf
;

78 
cou¡
 = 
	`avm_gë_dedu≥_cou¡îs
(
buf
);

79  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_dedu≥_cou¡î†: %s\n",
avm_sysfs_íåy_gë_dedu≥_cou¡îs
);

80 
	}
}

82 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

84 
INT
 
cou¡
 = 0;

85 
CHAR
 *
±r
 = 
buf
;

86 
cou¡
 = 
	`avm_gë_£t_lba_èbÀ_ödex
(
buf
);

87  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex : %s\n",
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex
);

88 
	}
}

90 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

92 
INT
 
ªt
 = 
SUCCESS
 ;

93 
ªt
 = 
	`ssˇnf
(
buf
, "%s", 
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex
);

94  
Àn
;

95 
	}
}

97 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

99 
INT
 
cou¡
 = 0;

100 
CHAR
 *
±r
 = 
buf
;

101 
cou¡
 = 
	`avm_gë_£t_pba_èbÀ_ödex
(
buf
);

102  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex : %s\n",
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex
);

103 
	}
}

105 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

107 
INT
 
ªt
 = 
SUCCESS
 ;

108 
ªt
 = 
	`ssˇnf
(
buf
, "%s", 
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex
);

109  
Àn
;

110 
	}
}

112 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_lba_íåy_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

114 
INT
 
cou¡
 = 0;

115 
CHAR
 *
±r
 = 
buf
;

116 
cou¡
 = 
	`avm_gë_lba_íåy
(
buf
);

117  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_lba_íåy : %Œi\n",
avm_sysfs_íåy_gë_£t_lba_íåy
);

118 
	}
}

120 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_lba_íåy_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

122 
INT
 
ªt
 = 
SUCCESS
 ;

123 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_lba_íåy
);

124  
Àn
;

125 
	}
}

127 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_pba_íåy_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

129 
INT
 
cou¡
 = 0;

130 
CHAR
 *
±r
 = 
buf
;

131 
cou¡
 = 
	`avm_gë_pba_íåy
(
buf
);

132  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_pba_íåy : %Œi\n",
avm_sysfs_íåy_gë_£t_pba_íåy
);

133 
	}
}

135 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_pba_íåy_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

137 
INT
 
ªt
 = 
SUCCESS
 ;

138 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_pba_íåy
);

139  
Àn
;

140 
	}
}

142 
ssize_t
 
	$avm_sysfs_íåy_gë_pba_èbÀ_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

144 
INT
 
cou¡
 = 0;

145 
CHAR
 *
±r
 = 
buf
;

146 
cou¡
 = 
	`avm_pba_èbÀ_size_show
(
buf
);

147  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_pba_èbÀ_sizê: %Œi\n",
avm_sysfs_íåy_gë_pba_èbÀ_size
);

148 
	}
}

150 
ssize_t
 
	$avm_sysfs_íåy_gë_hash_èbÀ_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

152 
INT
 
cou¡
 = 0;

153 
CHAR
 *
±r
 = 
buf
;

154 
cou¡
 = 
	`avm_gë_hash_èbÀ_size
(
buf
);

155  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_hash_èbÀ_sizê: %Œi\n",
avm_sysfs_íåy_gë_hash_èbÀ_size
);

156 
	}
}

158 
ssize_t
 
	$avm_sysfs_íåy_gë_èbÀ_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

160 
INT
 
cou¡
 = 0;

161 
CHAR
 *
±r
 = 
buf
;

162 
cou¡
 = 
	`avm_gë_èbÀ_size
(
buf
);

163  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_èbÀ_sizê: %s\n",
avm_sysfs_íåy_gë_èbÀ_size
);

164 
	}
}

166 
INT
 
	$avm_sysfs_dedu≥_ígöe_öô
(
VOID
)

168 
INT
 
ªt
 = 
SUCCESS
;

169 
dz_kobj
 = 
	`kobje˘_¸óã_™d_add
("dedu≥_ígöe", 
sysfs_avm_kî√l_kobj
);

170 i‡(!
dz_kobj
)

171  -
ENOMEM
;

172 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_swôch_dde_©å
.
©å
);

173 i‡(
ªt
 =
SUCCESS
) {

174 
	`LOGSYS
("sysfsÉntry /sys/avm/dedupe_engine/get_set_switch_dde created \n");

176 
	`LOGSYSE
("sysfsÉntry /sys/avm/dedupe_engine/get_set_switch_dde creation failed \n");

177 
RETURNF
;

180 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_dedu≥_cou¡îs_©å
.
©å
);

181 i‡(
ªt
 =
SUCCESS
) {

182 
	`LOGSYS
("sysfsÉntry /sys/avm/dedupe_engine/get_dedupe_counters created \n");

184 
	`LOGSYSE
("sysfsÉntry /sys/avm/dedupe_engine/get_dedupe_counters creation failed \n");

185 
RETURNF
;

188 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_lba_èbÀ_ödex_©å
.
©å
);

189 i‡(
ªt
 =
SUCCESS
) {

190 
	`LOGSYS
("sysfsÉntry /sys/avm/dedupe_engine/get_set_lba_table_index created \n");

192 
	`LOGSYSE
("sysfsÉntry /sys/avm/dedupe_engine/get_set_lba_table_index creation failed \n");

193 
RETURNF
;

196 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_pba_èbÀ_ödex_©å
.
©å
);

197 i‡(
ªt
 =
SUCCESS
) {

198 
	`LOGSYS
("sysfsÉntry /sys/avm/dedupe_engine/get_set_pba_table_index created \n");

200 
	`LOGSYSE
("sysfsÉntry /sys/avm/dedupe_engine/get_set_pba_table_index creation failed \n");

201 
RETURNF
;

204 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_lba_íåy_©å
.
©å
);

205 i‡(
ªt
 =
SUCCESS
) {

206 
	`LOGSYS
("sysfsÉntry /sys/avm/dedupe_engine/get_set_lba_entry created \n");

208 
	`LOGSYSE
("sysfsÉntry /sys/avm/dedupe_engine/get_set_lba_entry creation failed \n");

209 
RETURNF
;

212 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_pba_íåy_©å
.
©å
);

213 i‡(
ªt
 =
SUCCESS
) {

214 
	`LOGSYS
("sysfsÉntry /sys/avm/dedupe_engine/get_set_pba_entry created \n");

216 
	`LOGSYSE
("sysfsÉntry /sys/avm/dedupe_engine/get_set_pba_entry creation failed \n");

217 
RETURNF
;

220 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_pba_èbÀ_size_©å
.
©å
);

221 i‡(
ªt
 =
SUCCESS
) {

222 
	`LOGSYS
("sysfsÉntry /sys/avm/dedupe_engine/get_pba_table_size created \n");

224 
	`LOGSYSE
("sysfsÉntry /sys/avm/dedupe_engine/get_pba_table_size creation failed \n");

225 
RETURNF
;

228 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_hash_èbÀ_size_©å
.
©å
);

229 i‡(
ªt
 =
SUCCESS
) {

230 
	`LOGSYS
("sysfsÉntry /sys/avm/dedupe_engine/get_hash_table_size created \n");

232 
	`LOGSYSE
("sysfsÉntry /sys/avm/dedupe_engine/get_hash_table_size creation failed \n");

233 
RETURNF
;

236 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_èbÀ_size_©å
.
©å
);

237 i‡(
ªt
 =
SUCCESS
) {

238 
	`LOGSYS
("sysfsÉntry /sys/avm/dedupe_engine/get_table_size created \n");

240 
	`LOGSYSE
("sysfsÉntry /sys/avm/dedupe_engine/get_table_size creation failed \n");

241 
RETURNF
;

244 
RETURNS
;

246 
	}
}

247 
RVOID
 
	$avm_sysfs_dedu≥_ígöe_exô
(
VOID
)

249 
	`kobje˘_put
(
dz_kobj
);

250 
	`LOGSYS
("dz_sysfs freed\n");

251 
	}
}

	@sysfs_engine/sysfs_engine.c

9 
	~"¥ŸŸy≥s.h
"

11 
OBJECT_LIST
 
globÆ_obje˘_li°
;

12 
U64
 
lba_èbÀ_size
;

13 
U64
 
pba_èbÀ_size
;

14 
U64
 
hash_èbÀ_size
;

15 
U64
 
sysfs_avm_‰ì_∑ge_cou¡
;

16 
CHAR
 
sysfs_avm_gë_li°_of_vﬁumes
[
DZ_SYSFS_PAGE_SIZE
];

17 
PPBA_BLOCK
 
pba_èbÀ
;

18 
PHASH_BLOCK
 
hash_èbÀ
;

19 
PLBA_BLOCK
 
lba_èbÀ
;

21 
kobje˘
 *
	gsysfs_avm_kî√l_kobj
;

22 
EXPORT_SYMBOL
(
sysfs_avm_kî√l_kobj
);

25 
©åibuã
 * 
	gkî√l_©ås
[] = {

26 
NULL
,

27 
NULL
,

28 
NULL
,

29 #ifde‡
CONFIG_PROFILING


30 
NULL
,

32 #ifde‡
CONFIG_KEXEC


33 
NULL
,

34 
NULL
,

35 
NULL
,

36 
NULL
,

38 
NULL
,

39 
NULL


44 
©åibuã_group
 
	gkî√l_©å_group
 = {

45 .
©ås
 = 
kî√l_©ås
,

50 
INT
 
	$avm_sysfs_ígöe_öô
(
VOID
)

52 
îr‹
;

54 
sysfs_avm_kî√l_kobj
 = 
	`kobje˘_¸óã_™d_add
("avm", 
NULL
);

55 i‡(!
sysfs_avm_kî√l_kobj
) {

56 
îr‹
 = -
ENOMEM
;

59 
îr‹
 = 
	`sysfs_¸óã_group
(
sysfs_avm_kî√l_kobj
, &
kî√l_©å_group
);

60 i‡(
îr‹
) {

61 
	`kobje˘_put
(
sysfs_avm_kî√l_kobj
);

64  
SUCCESS
;

65 
	}
}

67 
INT
 
	$avm_sysfs_ígöe_exô
(
VOID
)

69 
	`sysfs_ªmove_group
(
sysfs_avm_kî√l_kobj
, &
kî√l_©å_group
);

70 
	`kobje˘_put
(
sysfs_avm_kî√l_kobj
);

71  
SUCCESS
;

72 
	}
}

74 
	$dz_sysfs_ígöe_moduÀ_öô
()

76 
	`LOGSYS
("%s", " ______________________________________________________ \n");

77 
	`LOGSYS
("%s", "| |\n");

78 
	`LOGSYS
("%s", "| ZAIDSTOR Sysfs Engine Module Registering |\n");

79 
	`LOGSYS
("%s", "|______________________________________________________|\n");

81 
	`avm_sysfs_ígöe_öô
();

82 
	`avm_sysfs_kî√l_öô
();

83 
	`avm_sysfs_èrgë_ígöe_öô
();

84 
	`avm_sysfs_Æignmít_ígöe_öô
();

85 
	`avm_sysfs_bec_ígöe_öô
();

86 
	`avm_sysfs_„c_ígöe_öô
();

87 
	`avm_sysfs_dedu≥_ígöe_öô
();

88 
	`avm_sysfs_vﬁume_ígöe_öô
();

89 
	`avm_sysfs_mëad©a_ígöe_öô
();

91 
	`LOGSYS
("%s", " ______________________________________________________ \n");

92 
	`LOGSYS
("%s", "| |\n");

93 
	`LOGSYS
("%s", "| ZAIDSTOR Sysfs Engine Module Registered |\n");

94 
	`LOGSYS
("%s", "|______________________________________________________|\n");

95 
RETURNS
;

96 
	}
}

98 
	$dz_sysfs_ígöe_moduÀ_exô
()

100 
	`LOGSYS
("%s", " ______________________________________________________ \n");

101 
	`LOGSYS
("%s", "| |\n");

102 
	`LOGSYS
("%s", "| ZAIDSTOR Sysfs Engine Module UnRegistering |\n");

103 
	`LOGSYS
("%s", "|______________________________________________________|\n");

105 
	`avm_sysfs_kî√l_exô
();

106 
	`avm_sysfs_èrgë_ígöe_exô
();

107 
	`avm_sysfs_Æignmít_ígöe_exô
();

108 
	`avm_sysfs_bec_ígöe_exô
();

109 
	`avm_sysfs_„c_ígöe_exô
();

110 
	`avm_sysfs_dedu≥_ígöe_exô
();

111 
	`avm_sysfs_vﬁume_ígöe_exô
();

112 
	`avm_sysfs_mëad©a_ígöe_exô
();

113 
	`avm_sysfs_ígöe_exô
();

115 
	`LOGSYS
("%s", " ______________________________________________________ \n");

116 
	`LOGSYS
("%s", "| |\n");

117 
	`LOGSYS
("%s", "| ZAIDSTOR Sysfs Engine Module UnRegistered |\n");

118 
	`LOGSYS
("%s", "|______________________________________________________|\n");

119 
	}
}

121 
moduÀ_öô
(
dz_sysfs_ígöe_moduÀ_öô
);

122 
moduÀ_exô
(
dz_sysfs_ígöe_moduÀ_exô
);

123 
MODULE_LICENSE
(
DZ_MODULE_LICENSE
);

124 
MODULE_AUTHOR
(
DZ_MODULE_AUTHOR
);

	@sysfs_engine/sysfs_engine.h

9 #i‚de‡
_SYSFS_ENGINE_H_


10 
	#_SYSFS_ENGINE_H_


	)

12 
	#DZ_SYS_GET_SWITCH
(
buf
, 
swôch_«me
) \

14 
	`LOGSYS
("%s:GET\n",
__func__
); \

15 (
buf
Ë(
U64
)(
swôch_«me
); \

17 }

	)

19 
	#DZ_SYS_SET_SWITCH
(
swôch_«me
, 
swôch_vÆue
) \

21 
	`LOGSYS
("%s:SET: I≈uàVÆuê%d\n",
__func__
, (
INT
)
swôch_vÆue
); \

22 
	`LOGSYS
("Bef‹êModifiˇti⁄ : %d\n",(
INT
)(
swôch_«me
)); \

23 (
swôch_«me
Ë(
swôch_vÆue
); \

24 
	`LOGSYS
("A·î Modifiˇti⁄ : %d\n",(
INT
)(
swôch_«me
)); \

26 }

	)

30 
RINT
 
avm_sysfs_kî√l_öô
(
VOID
);

31 
RVOID
 
avm_sysfs_kî√l_exô
(
VOID
);

33 
RINT
 
avm_sysfs_èrgë_ígöe_öô
(
VOID
);

34 
RVOID
 
avm_sysfs_èrgë_ígöe_exô
(
VOID
);

36 
RINT
 
avm_sysfs_bec_ígöe_öô
(
VOID
);

37 
RVOID
 
avm_sysfs_bec_ígöe_exô
(
VOID
);

39 
RINT
 
avm_sysfs_„c_ígöe_öô
(
VOID
);

40 
RVOID
 
avm_sysfs_„c_ígöe_exô
(
VOID
);

42 
RINT
 
avm_sysfs_dedu≥_ígöe_öô
(
VOID
);

43 
RVOID
 
avm_sysfs_dedu≥_ígöe_exô
(
VOID
);

45 
RINT
 
avm_sysfs_vﬁume_ígöe_öô
(
VOID
);

46 
RVOID
 
avm_sysfs_vﬁume_ígöe_exô
(
VOID
);

48 
RINT
 
avm_sysfs_mëad©a_ígöe_öô
(
VOID
);

49 
RVOID
 
avm_sysfs_mëad©a_ígöe_exô
(
VOID
);

51 
RINT
 
avm_sysfs_Æignmít_ígöe_öô
(
VOID
);

52 
RVOID
 
avm_sysfs_Æignmít_ígöe_exô
(
VOID
);

54 
INT
 
avm_gë_sizeof_d©a°ru˘uªs
(
CHAR
 *
buf
);

55 
INT
 
avm_gë_li°_of_obje˘s
(
CHAR
 *
buf
);

56 
INT
 
avm_gë_li°_of_vﬁumes
(
CHAR
 *
buf
);

57 
INT
 
avm_gë_li°_of_vﬁumes_sh‹t
(
CHAR
 *
buf
);

58 
INT
 
avm_gë_vîsi⁄
(
CHAR
 *
buf
);

59 
INT
 
avm_gë_èbÀ_size
(
CHAR
 *
buf
);

60 
INT
 
avm_gë_mem‹y_öfo
(
CHAR
 *
buf
);

61 
INT
 
avm_gë_su≥rblock
(
CHAR
 *
buf
);

62 
INT
 
avm_gë_bec_cou¡îs
(
CHAR
 *
buf
);

63 
INT
 
avm_gë_„c_cou¡îs
(
CHAR
 *
buf
);

64 
INT
 
avm_gë_Æign_cou¡îs
(
CHAR
 *
buf
);

65 
INT
 
avm_gë_mëad©a_cou¡îs
(
CHAR
 *
buf
);

66 
INT
 
avm_gë_dedu≥_cou¡îs
(
CHAR
 *
buf
);

67 
INT
 
avm_gë_Æl_cou¡îs
(
CHAR
 *
buf
);

68 
INT
 
avm_gë_£t_lba_èbÀ_ödex
(
CHAR
 *
buf
);

69 
INT
 
avm_gë_£t_pba_èbÀ_ödex
(
CHAR
 *
buf
);

70 
INT
 
avm_gë_èrgë_«me
(
CHAR
 *
buf
);

71 
INT
 
avm_gë_èrgë_back°‹e_«me
(
CHAR
 *
buf
);

72 
INT
 
avm_pba_èbÀ_size_show
(
CHAR
 *
buf
);

73 
INT
 
avm_gë_hash_èbÀ_size
(
CHAR
 *
buf
);

74 
INT
 
avm_gë_£t_vﬁume_öfo
(
CHAR
 *
buf
);

75 
INT
 
avm_gë_èrgë_devi˚_size_byãs
(
CHAR
 *
buf
);

76 
INT
 
avm_gë_èrgë_devi˚_size_blocks
(
CHAR
 *
buf
);

79 
INT
 
avm_gë_èrgë_∑s°hrough_mode
(
CHAR
 *
buf
);

80 
INT
 
avm_gë_èrgë_∑s°hrough_ªad
(
CHAR
 *
buf
);

81 
INT
 
avm_gë_èrgë_∑s°hrough_wrôe
(
CHAR
 *
buf
);

83 
INT
 
avm_gë_èrgë_lba_block_size
(
CHAR
 *
buf
);

84 
INT
 
avm_£t_èrgë_lba_block_size
(
U64
 
buf
);

86 
INT
 
avm_gë_swôch_„c
(
CHAR
 *
buf
);

87 
INT
 
avm_gë_swôch_bec
(
CHAR
 *
buf
);

88 
INT
 
avm_gë_swôch_dde
(
CHAR
 *
buf
);

89 
INT
 
avm_gë_swôch_d´
(
CHAR
 *
buf
);

90 
INT
 
avm_gë_swôch_d´_mbr
(
CHAR
 *
buf
);

91 
INT
 
avm_gë_swôch_d´_mbw
(
CHAR
 *
buf
);

92 
INT
 
avm_gë_swôch_d´_pbr
(
CHAR
 *
buf
);

93 
INT
 
avm_gë_swôch_d´_pbw
(
CHAR
 *
buf
);

95 
INT
 
avm_£t_èrgë_∑s°hrough_mode
(
U64
 
buf
);

96 
INT
 
avm_£t_èrgë_∑s°hrough_ªad
(
U64
 
buf
);

97 
INT
 
avm_£t_èrgë_∑s°hrough_wrôe
(
U64
 
buf
);

99 
INT
 
avm_£t_swôch_„c
(
U64
 
buf
);

100 
INT
 
avm_£t_swôch_bec
(
U64
 
buf
);

101 
INT
 
avm_£t_swôch_dde
(
U64
 
buf
);

102 
INT
 
avm_£t_swôch_d´
(
U64
 
buf
);

103 
INT
 
avm_£t_swôch_d´_mbr
(
U64
 
buf
);

104 
INT
 
avm_£t_swôch_d´_mbw
(
U64
 
buf
);

105 
INT
 
avm_£t_swôch_d´_pbr
(
U64
 
buf
);

106 
INT
 
avm_£t_swôch_d´_pbw
(
U64
 
buf
);

109 
INT
 
avm_gë_‰ì_∑ge_cou¡
(
CHAR
 *
buf
);

110 
INT
 
avm_do_wrôe_io
(
CHAR
 *
buf
);

111 
INT
 
avm_do_ªad_io
(
CHAR
 *
buf
);

112 
INT
 
avm_do_zîo_io
(
CHAR
 *
buf
);

113 
INT
 
avm_do_wrôe_vîify_io
(
CHAR
 *
buf
);

114 
INT
 
avm_gë_lba_íåy
(
CHAR
 *
buf
);

115 
INT
 
avm_gë_pba_íåy
(
CHAR
 *
buf
);

116 
INT
 
avm_gë_èsb
(
CHAR
 *
buf
);

119 
INT
 
avm_dedu≥_show
(
CHAR
 *
buf
);

122 
INT
 
avm_„c_show
(
CHAR
 *
buf
);

125 
INT
 
avm_bec_show
(
CHAR
 *
buf
);

128 
INT
 
avm_gë_tu«bÀ_d´_ªad_thªads
(
CHAR
 *
buf
);

129 
INT
 
avm_£t_tu«bÀ_d´_ªad_thªads
(
U64
 
buf
);

130 
INT
 
avm_gë_tu«bÀ_d´_wrôe_thªads
(
CHAR
 *
buf
);

131 
INT
 
avm_£t_tu«bÀ_d´_wrôe_thªads
(
U64
 
buf
);

133 
INT
 
avm_gë_tu«bÀ_bec_size
(
CHAR
 *
buf
);

134 
INT
 
avm_£t_tu«bÀ_bec_size
(
U64
 
buf
);

136 
INT
 
avm_gë_tu«bÀ_bec_thªads
(
CHAR
 *
buf
);

137 
INT
 
avm_£t_tu«bÀ_bec_thªads
(
U64
 
buf
);

139 
INT
 
avm_gë_tu«bÀ_bec_ï
(
CHAR
 *
buf
);

140 
INT
 
avm_£t_tu«bÀ_bec_ï
(
U64
 
buf
);

142 
INT
 
avm_gë_èrgë_swôch_i›©h
(
CHAR
 *
buf
);

143 
INT
 
avm_£t_èrgë_swôch_i›©h
(
U64
 
buf
);

	@sysfs_engine/sysfs_engine_autogen.c

2 
	~"¥ŸŸy≥s.h
"

4 
kobje˘
 *
	gdz_kobj
 = 
NULL
;

6 
kobje˘
 *
sysfs_avm_kî√l_kobj
;

8 
U64
 
	gavm_sysfs_íåy_gë_‰ì_∑ge_cou¡
 = 0;

9 
ssize_t
 
avm_sysfs_íåy_gë_‰ì_∑ge_cou¡_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

10 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_‰ì_∑ge_cou¡_©å
 =

11 
__ATTR
(
gë_‰ì_∑ge_cou¡
, 0644, 
avm_sysfs_íåy_gë_‰ì_∑ge_cou¡_show
, 
NULL
);

13 
CHAR
 
	gavm_sysfs_íåy_gë_li°_of_obje˘s
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

14 
ssize_t
 
avm_sysfs_íåy_gë_li°_of_obje˘s_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

15 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_li°_of_obje˘s_©å
 =

16 
__ATTR
(
gë_li°_of_obje˘s
, 0644, 
avm_sysfs_íåy_gë_li°_of_obje˘s_show
, 
NULL
);

18 
CHAR
 
	gavm_sysfs_íåy_gë_vîsi⁄
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

19 
ssize_t
 
avm_sysfs_íåy_gë_vîsi⁄_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

20 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_vîsi⁄_©å
 =

21 
__ATTR
(
gë_vîsi⁄
, 0644, 
avm_sysfs_íåy_gë_vîsi⁄_show
, 
NULL
);

23 
CHAR
 
	gavm_sysfs_íåy_gë_mem‹y_öfo
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

24 
ssize_t
 
avm_sysfs_íåy_gë_mem‹y_öfo_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

25 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_mem‹y_öfo_©å
 =

26 
__ATTR
(
gë_mem‹y_öfo
, 0644, 
avm_sysfs_íåy_gë_mem‹y_öfo_show
, 
NULL
);

28 
CHAR
 
	gavm_sysfs_íåy_gë_Æl_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

29 
ssize_t
 
avm_sysfs_íåy_gë_Æl_cou¡îs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

30 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_Æl_cou¡îs_©å
 =

31 
__ATTR
(
gë_Æl_cou¡îs
, 0644, 
avm_sysfs_íåy_gë_Æl_cou¡îs_show
, 
NULL
);

33 
CHAR
 
	gavm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

34 
ssize_t
 
avm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

35 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs_©å
 =

36 
__ATTR
(
gë_sizeof_d©a°ru˘uªs
, 0644, 
avm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs_show
, 
NULL
);

38 
INT
 
	gavm_sysfs_íåy_wrôe
 = 0;

39 
ssize_t
 
avm_sysfs_íåy_wrôe_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

40 
kobj_©åibuã
 
	gavm_sysfs_íåy_wrôe_©å
 =

41 
__ATTR
(
wrôe
, 0644, 
NULL
, 
avm_sysfs_íåy_wrôe_°‹e
);

43 
INT
 
	gavm_sysfs_íåy_ªad
 = 0;

44 
ssize_t
 
avm_sysfs_íåy_ªad_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

45 
kobj_©åibuã
 
	gavm_sysfs_íåy_ªad_©å
 =

46 
__ATTR
(
ªad
, 0644, 
avm_sysfs_íåy_ªad_show
, 
NULL
);

48 
ssize_t
 
	$avm_sysfs_íåy_gë_‰ì_∑ge_cou¡_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

50 
INT
 
cou¡
 = 0;

51 
CHAR
 *
±r
 = 
buf
;

52 
cou¡
 = 
	`avm_gë_‰ì_∑ge_cou¡
(
buf
);

53  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_‰ì_∑ge_cou¡ : %Œi\n",
avm_sysfs_íåy_gë_‰ì_∑ge_cou¡
);

54 
	}
}

56 
ssize_t
 
	$avm_sysfs_íåy_gë_li°_of_obje˘s_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

58 
INT
 
cou¡
 = 0;

59 
CHAR
 *
±r
 = 
buf
;

60 
cou¡
 = 
	`avm_gë_li°_of_obje˘s
(
buf
);

61  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_li°_of_obje˘†: %s\n",
avm_sysfs_íåy_gë_li°_of_obje˘s
);

62 
	}
}

64 
ssize_t
 
	$avm_sysfs_íåy_gë_vîsi⁄_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

66 
INT
 
cou¡
 = 0;

67 
CHAR
 *
±r
 = 
buf
;

68 
cou¡
 = 
	`avm_gë_vîsi⁄
(
buf
);

69  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_vîsi⁄ : %s\n",
avm_sysfs_íåy_gë_vîsi⁄
);

70 
	}
}

72 
ssize_t
 
	$avm_sysfs_íåy_gë_mem‹y_öfo_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

74 
INT
 
cou¡
 = 0;

75 
CHAR
 *
±r
 = 
buf
;

76 
cou¡
 = 
	`avm_gë_mem‹y_öfo
(
buf
);

77  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_mem‹y_öfÿ: %s\n",
avm_sysfs_íåy_gë_mem‹y_öfo
);

78 
	}
}

80 
ssize_t
 
	$avm_sysfs_íåy_gë_Æl_cou¡îs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

82 
INT
 
cou¡
 = 0;

83 
CHAR
 *
±r
 = 
buf
;

84 
cou¡
 = 
	`avm_gë_Æl_cou¡îs
(
buf
);

85  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_Æl_cou¡î†: %s\n",
avm_sysfs_íåy_gë_Æl_cou¡îs
);

86 
	}
}

88 
ssize_t
 
	$avm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

90 
INT
 
cou¡
 = 0;

91 
CHAR
 *
±r
 = 
buf
;

92 
cou¡
 = 
	`avm_gë_sizeof_d©a°ru˘uªs
(
buf
);

93  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_sizeof_d©a°ru˘uª†: %s\n",
avm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs
);

94 
	}
}

96 
ssize_t
 
	$avm_sysfs_íåy_wrôe_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

98 
INT
 
ªt
 = 
SUCCESS
 ;

99 
ªt
 = 
	`ssˇnf
(
buf
, "%d", &
avm_sysfs_íåy_wrôe
);

100  
Àn
;

101 
	}
}

103 
ssize_t
 
	$avm_sysfs_íåy_ªad_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

105 
INT
 
cou¡
 = 0;

106 
CHAR
 *
±r
 = 
buf
;

107  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_ªad : %d\n",
avm_sysfs_íåy_ªad
);

108 
	}
}

110 
INT
 
	$avm_sysfs_kî√l_öô
(
VOID
)

112 
INT
 
ªt
 = 
SUCCESS
;

113 
dz_kobj
 = 
	`kobje˘_¸óã_™d_add
("kî√l", 
sysfs_avm_kî√l_kobj
);

114 i‡(!
dz_kobj
)

115  -
ENOMEM
;

116 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_‰ì_∑ge_cou¡_©å
.
©å
);

117 i‡(
ªt
 =
SUCCESS
) {

118 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/get_free_page_count created \n");

120 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/get_free_page_count creation failed \n");

121 
RETURNF
;

124 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_li°_of_obje˘s_©å
.
©å
);

125 i‡(
ªt
 =
SUCCESS
) {

126 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/get_list_of_objects created \n");

128 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/get_list_of_objects creation failed \n");

129 
RETURNF
;

132 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_vîsi⁄_©å
.
©å
);

133 i‡(
ªt
 =
SUCCESS
) {

134 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/get_version created \n");

136 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/get_version creation failed \n");

137 
RETURNF
;

140 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_mem‹y_öfo_©å
.
©å
);

141 i‡(
ªt
 =
SUCCESS
) {

142 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/get_memory_info created \n");

144 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/get_memory_info creation failed \n");

145 
RETURNF
;

148 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_Æl_cou¡îs_©å
.
©å
);

149 i‡(
ªt
 =
SUCCESS
) {

150 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/get_all_counters created \n");

152 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/get_all_counters creation failed \n");

153 
RETURNF
;

156 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs_©å
.
©å
);

157 i‡(
ªt
 =
SUCCESS
) {

158 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/get_sizeof_datastructures created \n");

160 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/get_sizeof_datastructures creation failed \n");

161 
RETURNF
;

164 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_wrôe_©å
.
©å
);

165 i‡(
ªt
 =
SUCCESS
) {

166 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/write created \n");

168 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/write creation failed \n");

169 
RETURNF
;

172 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_ªad_©å
.
©å
);

173 i‡(
ªt
 =
SUCCESS
) {

174 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/read created \n");

176 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/read creation failed \n");

177 
RETURNF
;

180 
RETURNS
;

182 
	}
}

183 
RVOID
 
	$avm_sysfs_kî√l_exô
(
VOID
)

185 
	`kobje˘_put
(
dz_kobj
);

186 
	`LOGSYS
("dz_sysfs freed\n");

187 
	}
}

	@sysfs_engine/sysfs_engine_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

18 
INT
 
dz_swôch_„c_ígöe
;

19 
INT
 
dz_swôch_bec_ígöe
;

20 
INT
 
dz_swôch_dedu≥_ígöe
;

21 
INT
 
dz_swôch_Æignmít_ígöe
;

25 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

26 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

31 
SIZE
 
TARGET_DEVICE_SIZE
;

33 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

34 
NAME
 
DATA_DISK_DEVICE_NAME
;

35 
OBJECT_LIST
 
globÆ_obje˘_li°
;

36 
U64
 
lba_èbÀ_size
;

37 
U64
 
pba_èbÀ_size
;

38 
U64
 
hash_èbÀ_size
;

39 
U32
 
numbî_of_l⁄gs_f‹_pba
;

40 
U32
 
numbî_of_l⁄gs_f‹_lba
;

41 
U32
 
numbî_of_l⁄gs_f‹_gpba
;

42 
ULONG
 
mëad©a_Êush_öãrvÆ
;

43 
U64
 
mëad©a_lba_èbÀ_size
;

44 
U64
 
mëad©a_lba_lock_èbÀ_size
;

45 
U64
 
avm_sysfs_íåy_‰ì_∑ge_cou¡
;

46 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes
[
DZ_SYSFS_PAGE_SIZE
];

47 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
[
DZ_SYSFS_PAGE_SIZE
];

48 
PPBA_BLOCK
 
pba_èbÀ
;

49 
PHASH_BLOCK
 
hash_èbÀ
;

50 
PLBA_BLOCK
 
lba_èbÀ
;

52 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

53 
ATOMIC64
 
bec_ˇche_hô
;

54 
ATOMIC64
 
bec_ˇche_miss
;

55 
ATOMIC64
 
bec_ˇche_dñëe
;

56 
ULONG
 
bec_size
;

57 
INT
 
bec_cutoff_nodes
;

58 
INT
 
bec_cutoff_≥r˚¡
;

59 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

60 
U64
 
time_Êush_¥ï¨e_°¨t
;

61 
U64
 
time_Êush_°¨t
;

62 
U64
 
time_Êush_íd
;

63 
U64
 
time_„c_wrôe_°¨t
;

64 
U64
 
time_„c_wrôe_swôch
;

65 
PFEC_TABLE
 
„c_èbÀs_Êush
;

66 
ATOMIC64
 
„c_a˘ive_cou¡_£quí˚
;

67 
ATOMIC64
 
„c_‰ì_cou¡_£quí˚
;

68 
ATOMIC64
 
„c_cur_Êush_cou¡
;

69 
ATOMIC64
 
„c_Êush_›s_cou¡
;

70 
ATOMIC64
 
„c_cur_Êush_›s_cou¡
;

71 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

72 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

73 
U64
 
„c_a˘ive_cou¡
;

74 
ATOMIC64
 
dedu≥_disk_ªads
;

75 
ATOMIC64
 
dedu≥_disk_wrôes
;

76 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

77 
ATOMIC64
 
dedu≥_ˇche_hôs
;

78 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

79 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

80 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

81 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

82 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

83 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

84 
USHORT
 
dedu≥_num_thªads
;

85 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

86 
PDZ_THREAD_POOL
 
rdedu≥_thªad_poﬁ
;

87 
PDZ_THREAD_POOL
 
wdedu≥_thªad_poﬁ
;

88 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

89 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

90 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

91 
PDZ_THREAD_POOL
 
Æign_wrôe_thªad_poﬁ
;

92 
PDZ_THREAD_POOL
 
Êush_thªad_poﬁ
;

93 
PDZ_THREAD_POOL
 
mëad©a_Êush_thªad_poﬁ
;

94 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡
;

95 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads
;

96 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
;

97 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
;

98 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
;

99 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

100 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

101 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

102 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

103 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

104 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

105 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

107 
ATOMIC64
 
Æign_iocou¡_disk_ªad
;

108 
ATOMIC64
 
Æign_iocou¡_disk_ªad_öã∫Æ
;

109 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

110 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

111 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

112 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

113 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

114 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

115 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

117 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes
;

118 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
;

119 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
;

120 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
;

121 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

122 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

123 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

124 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

125 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

126 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

127 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

129 
ATOMIC64
 
Æign_iocou¡_disk_wrôe
;

130 
ATOMIC64
 
Æign_iocou¡_disk_wrôe_öã∫Æ
;

131 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

132 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

133 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

134 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

135 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

136 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

137 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

139 
PSUPERBLOCK
 
su≥rblock
;

141 
CHAR
 
avm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs
[
DZ_SYSFS_PAGE_SIZE
];

142 
INT
 
	$avm_gë_sizeof_d©a°ru˘uªs
(
CHAR
 *
buf
)

144 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs
;

145 
	`mem£t
(
avm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs
, 0, 
DZ_SYSFS_PAGE_SIZE
);

146 
	`mem˝y
(
±r
, "\n", 1);

147 
±r
 += 1;

149 
±r
 +
	`•rötf
(ptr, "\n====================================\n");

150 
±r
 +
	`•rötf
’å, "%s(): Basi¯D©®Såu˘uªs", 
__func__
);

151 
±r
 +
	`•rötf
(ptr, "\n====================================\n");

152 
±r
 +
	`•rötf
(ptr, "Size of int......................= %zu\n", ());

153 
±r
 +
	`•rötf
(ptr, "Size ofÜong int.................= %zu\n", ( ));

154 
±r
 +
	`•rötf
(ptr, "Size ofÜong unsigned int........= %zu\n", ( ));

155 
±r
 +
	`•rötf
(ptr, "Size of Long.....................= %zu\n", ());

156 
±r
 +
	`•rötf
’å, "Sizêo‡U64......................%zu\n", (
U64
));

157 
±r
 +
	`•rötf
(ptr, "Size of unsignedÜong............= %zu\n", ());

158 
±r
 +
	`•rötf
(ptr, "Size of unsignedÜongÜong.......= %zu\n", ());

159 
±r
 +
	`•rötf
(ptr, "Size of signedÜong..............= %zu\n", (signed ));

160 
±r
 +
	`•rötf
(ptr, "Size of signedÜongÜong.........= %zu\n", (signed ));

161 
±r
 +
	`•rötf
(ptr, "Size ofÜongÜong unsigned int...= %zu\n", ());

162 
±r
 +
	`•rötf
(ptr, "Size ofÜongÜong signed int.....= %zu\n", (signed ));

164 
±r
 +
	`•rötf
(ptr, "\n====================================\n");

165 
±r
 +
	`•rötf
’å, "%s(): MACRO†VÆuê", 
__func__
);

166 
±r
 +
	`•rötf
(ptr, "\n====================================\n");

167 
±r
 +
	`•rötf
’å, "DATE_LENGTH.....%d\n", 
DATE_LENGTH
 );

168 
±r
 +
	`•rötf
’å, "TIME_LENGTH.....%d\n", 
TIME_LENGTH
 );

169 
±r
 +
	`•rötf
’å, "NAME_LENGTH.....%d\n", 
NAME_LENGTH
 );

170 
±r
 +
	`•rötf
’å, "UUID_LENGTH.....%d\n", 
UUID_LENGTH
 );

171 
±r
 +
	`•rötf
’å, "GUID_LENGTH.....%d\n", 
GUID_LENGTH
 );

172 
±r
 +
	`•rötf
’å, "MAGICNO_LENGTH..%d\n", 
MAGICNO_LENGTH
 );

173 
±r
 +
	`•rötf
’å, "BDEVNAME_SIZE...%d\n", 
BDEVNAME_SIZE
 );

174 
±r
 +
	`•rötf
’å, "METADATA_BLOCK_SIZE...............%d\n", 
METADATA_BLOCK_SIZE
 );

175 
±r
 +
	`•rötf
’å, "PBA_HASH_COLLISION_TAG_START......%d\n", 
PBA_HASH_COLLISION_TAG_START
 );

176 
±r
 +
	`•rötf
’å, "DZ_FEC_CONCURRENT_READS_LIMIT.....%d\n", 
DZ_FEC_CONCURRENT_READS_LIMIT
 );

177 
±r
 +
	`•rötf
’å, "DZ_FEC_FLUSH_INTERVAL.............%d\n", 
DZ_FEC_FLUSH_INTERVAL
 );

178 
±r
 +
	`•rötf
’å, "SUPERBLOCK_RESERVED_SECTORS.......%d\n", 
SUPERBLOCK_RESERVED_SECTORS
 );

179 
±r
 +
	`•rötf
’å, "SUPERBLOCK_SIZE...................%lu\n", 
SUPERBLOCK_SIZE
 );

180 
±r
 +
	`•rötf
’å, "DZ_NUMBER_OF_WRITE_PAGES_IN_A_BIO.%d\n", 
DZ_NUMBER_OF_WRITE_PAGES_IN_A_BIO
 );

181 
±r
 +
	`•rötf
’å, "DZ_NUMBER_OF_READ_PAGES_IN_A_BIO..%d\n", 
DZ_NUMBER_OF_READ_PAGES_IN_A_BIO
 );

183 
±r
 +
	`•rötf
(ptr, "\n============================================\n");

184 
±r
 +
	`•rötf
’å, "%s(): Kî√»D©®Såu˘uªs", 
__func__
);

185 
±r
 +
	`•rötf
(ptr, "\n============================================\n");

186 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ bio...............%zu byãs\n", (
bio
));

187 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ bio_vec...........%zu byãs\n", (
bio_vec
));

188 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ bio_£t...........%zu byãs\n", (
bio_£t
));

189 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ block_devi˚......%zu byãs\n", (
block_devi˚
));

190 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘Üi°_hód.........%zu byãs\n", (
li°_hód
));

191 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dm_dev............%zu byãs\n", (
dm_dev
));

192 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dm_èrgë.........%zu byãs\n", (
dm_èrgë
));

193 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘Öage..............%zu byãs\n", (
∑ge
));

194 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ com∂ëi⁄........%zu byãs\n", (
com∂ëi⁄
));

195 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘Ñadix_åì_roŸ...%zu byãs\n", (
ødix_åì_roŸ
));

197 
±r
 +
	`•rötf
(ptr, "\n===================================================\n");

198 
±r
 +
	`•rötf
’å, "%s(): ZAIDSTOR AVM D©®Såu˘uªs", 
__func__
);

199 
±r
 +
	`•rötf
(ptr, "\n===================================================\n");

200 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_bôm≠_s.............%zu byãs\n", (
dz_bôm≠_s
));

201 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_èrgë_obje˘_s......%zu byãs\n", (
dz_èrgë_obje˘_s
));

202 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_èrgë_devi˚_s......%zu byãs\n", (
dz_èrgë_devi˚_s
));

203 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_dedu≥_vﬁume_s......%zu byãs\n", (
dz_dedu≥_vﬁume_s
));

204 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_obje˘_li°_s........%zu byãs\n", (
dz_obje˘_li°_s
));

205 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_bvec_hﬁdî_s........%zu byãs\n", (
dz_bvec_hﬁdî_s
));

206 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_i‹eque°_s..........%zu byãs\n", (
dz_i‹eque°_s
));

207 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_dedu≥_öfo_s........%zu byãs\n", (
dz_dedu≥_öfo_s
));

208 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_d©a_∑ges_s.........%zu byãs\n", (
dz_d©a_∑ges_s
));

209 
±r
 +
	`•rötf
’å, "Sizêo‡uni⁄ dz_lba_block_s..........%zu byãs\n", (
dz_lba_block_s
));

210 
±r
 +
	`•rötf
’å, "Sizêo‡uni⁄ dz_hash_block_s.........%zu byãs\n", (
dz_hash_block_s
));

211 
±r
 +
	`•rötf
’å, "Sizêo‡uni⁄ dz_pba_block_s..........%zu byãs\n", (
dz_pba_block_s
));

212 
±r
 +
	`•rötf
’å, "Sizêo‡uni⁄ dz_„c_d©a_wrôe_s.....%zu byãs\n", (
dz_„c_d©a_wrôe_s
));

213 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_„c_èbÀ_s..........%zu byãs\n", (
dz_„c_èbÀ_s
));

214 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_com∂ëi⁄_s.........%zu byãs\n", (
dz_com∂ëi⁄_s
));

215 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_ddvﬁ_lba_block_s....%zu byãs\n", (
dz_ddvﬁ_lba_block_s
));

216 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_bec_ªque°_s........%zu byãs\n", (
dz_bec_ªque°_s
));

217 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_bec_node_s...........%zu byãs\n", (
dz_bec_node_s
));

218 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_hash_s...............%zu byãs\n", (
dz_hash_s
));

219 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_su≥rblock_s.........%zu byãs\n", (
dz_su≥rblock_s
));

220 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_job_s................%zu byãs\n", (
dz_job_s
));

221 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_thªad_s.............%zu byãs\n", (
dz_thªad_s
));

222 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_thªad_poﬁ_s........%zu byãs\n", (
dz_thªad_poﬁ_s
));

223 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_mëad©a_lock_s......%zu byãs\n", (
dz_mëad©a_lock_s
));

224 
±r
 +
	`•rötf
’å, "Sizêo‡°ru˘ dz_mëad©a_disk_block_s%zu byãs\n", (
dz_mëad©a_disk_block_s
));

225 
±r
 +
	`•rötf
(ptr, "\n===================================================\n");

226 
±r
 +
	`•rötf
(ptr, " \n");

229 
	}
}

231 
CHAR
 
avm_sysfs_íåy_gë_Æl_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
];

232 
INT
 
	$avm_gë_Æl_cou¡îs
(
CHAR
 *
buf
)

234 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_Æl_cou¡îs
;

235 
	`mem£t
(
avm_sysfs_íåy_gë_Æl_cou¡îs
, 0, 
DZ_SYSFS_PAGE_SIZE
);

236 
	`mem˝y
(
±r
, "\n", 1);

237 
±r
 += 1;

238 
±r
 +
	`•rötf
(ptr, "ALL ENGINE COUNTERS\n");

239 
±r
 +
	`•rötf
(ptr, "BEC ENGINE COUNTERS\n");

240 
±r
 +
	`•rötf
’å, "bec_pba_∑ge_cou¡ = %Œi\n", (
U64
)
	`READ_COUNTER
(
bec_pba_∑ge_cou¡
));

241 
±r
 +
	`•rötf
’å, "bec_ˇche_hô = %Œi\n", (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_hô
));

242 
±r
 +
	`•rötf
’å, "bec_ˇche_mis† = %Œi\n", (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_miss
));

243 
±r
 +
	`•rötf
’å, "bec_ˇche_dñëê = %Œi\n", (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_dñëe
));

244 
±r
 +
	`•rötf
’å, "bec_sizê = %Œi\n", (
U64
)
bec_size
);

245 
±r
 +
	`•rötf
’å, "bec_cutoff_node† = %Œi\n", (
U64
)
bec_cutoff_nodes
);

246 
±r
 +
	`•rötf
’å, "bec_cutoff_≥r˚¡ = %Œi\n", (
U64
)
bec_cutoff_≥r˚¡
);

247 
±r
 +
	`•rötf
’å, "bec_node_mempoﬁ_cou¡ = %Œi\n", (
U64
)
dz_bec_node_mempoﬁ_cou¡
);

248 
±r
 +
	`•rötf
’å, "AISA ZaidSt‹ Mö‹ = %d\n", 
DZ_AISA_VERSION_MINOR
);

249 
±r
 +
	`•rötf
’å, "AISA ZaidSt‹ P©ch = %d\n", 
DZ_AISA_VERSION_PATCH
);

250 
±r
 +
	`•rötf
’å, "AISA ZaidSt‹ Rñó£ = %s\n", 
DZ_AISA_VERSION_RELEASE
);

251 
±r
 +
	`•rötf
’å, "LINUX_VERSION_CODE = %d\n", 
LINUX_VERSION_CODE
);

253 
	}
}

255 
CHAR
 
avm_sysfs_íåy_gë_mem‹y_öfo
[
DZ_SYSFS_PAGE_SIZE
];

257 
U64
 
bec_ígöe_mem‹y_ußge
;

258 
U64
 
dedu≥_ígöe_mem‹y_ußge
;

259 
U64
 
ö‰a_ígöe_mem‹y_ußge
;

260 
U64
 
md_ígöe_mem‹y_ußge
;

261 
INT
 
	$avm_gë_mem‹y_öfo
(
CHAR
 *
buf
)

263 
U64
 
cou¡
 = 0;

264 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_mem‹y_öfo
;

265 
	`mem£t
(
avm_sysfs_íåy_gë_mem‹y_öfo
, 0, 
DZ_SYSFS_PAGE_SIZE
);

266 
	`mem˝y
(
±r
, "\n", 1);

267 
±r
 += 1;

268 
±r
 +
	`•rötf
(ptr, "======================================================\n");

269 
±r
 +
	`•rötf
(ptr, "AVM Memory Consumption in Kernel during Initialization\n");

270 
±r
 +
	`•rötf
(ptr, "======================================================\n");

271 
cou¡
 = 
	`BASE_COUNTER_ATOMIC64_READ
(
dz_tŸÆ_mem‹y_c⁄sumed_by_Æl_poﬁs
);

272 
±r
 +
	`•rötf
(ptr, "Total Memory Consumed................................= %llu MB %llu KB %llu (bytes)\n",

273 
cou¡
/
MB
,

274 
cou¡
/
KB
,

275 
cou¡
);

276 
±r
 +
	`•rötf
(ptr, " |_ Total Memory Consumed by Infra Engine............= %llu MB %llu KB %llu (bytes)\n",

277 
	`BASE_COUNTER_U64_GET
(
ö‰a_ígöe_mem‹y_ußge
)/
MB
,

278 
	`BASE_COUNTER_U64_GET
(
ö‰a_ígöe_mem‹y_ußge
)/
KB
,

279 
	`BASE_COUNTER_U64_GET
(
ö‰a_ígöe_mem‹y_ußge
));

280 
±r
 +
	`•rötf
(ptr, " |_ Total Memory Consumed by Dedupe Engine...........= %llu MB %llu KB %llu (bytes)\n",

281 
	`DDE_COUNTER_U64_GET
(
dedu≥_ígöe_mem‹y_ußge
)/
MB
,

282 
	`DDE_COUNTER_U64_GET
(
dedu≥_ígöe_mem‹y_ußge
)/
KB
,

283 
	`DDE_COUNTER_U64_GET
(
dedu≥_ígöe_mem‹y_ußge
));

284 
±r
 +
	`•rötf
(ptr, " |_ Total Memory Consumed by FEC Engine..............= %llu MB %llu KB %llu (bytes)\n",

285 
	`FEC_COUNTER_U64_GET
(
„c_ígöe_mem‹y_ußge
)/
MB
,

286 
	`FEC_COUNTER_U64_GET
(
„c_ígöe_mem‹y_ußge
)/
KB
,

287 
	`FEC_COUNTER_U64_GET
(
„c_ígöe_mem‹y_ußge
));

288 
±r
 +
	`•rötf
(ptr, " |_ Total Memory Consumed by BEC Engine..............= %llu MB %llu KB %llu (bytes)\n",

289 
	`BEC_COUNTER_U64_GET
(
bec_ígöe_mem‹y_ußge
)/
MB
,

290 
	`BEC_COUNTER_U64_GET
(
bec_ígöe_mem‹y_ußge
)/
KB
,

291 
	`BEC_COUNTER_U64_GET
(
bec_ígöe_mem‹y_ußge
));

292 
±r
 +
	`•rötf
(ptr, " |_ Total Memory Consumed by MD Engine...............= %llu MB %llu KB %llu (bytes)\n",

293 
	`BASE_COUNTER_U64_GET
(
md_ígöe_mem‹y_ußge
)/
MB
,

294 
	`BASE_COUNTER_U64_GET
(
md_ígöe_mem‹y_ußge
)/
KB
,

295 
	`BASE_COUNTER_U64_GET
(
md_ígöe_mem‹y_ußge
));

297 
±r
 +
	`•rötf
(ptr, "dz_iorequest_alloc_cnt...............................= %ld\n",

298 
	`BASE_COUNTER_ATOMIC64_READ
(
dz_i‹eque°_Æloc_˙t
));

300 
±r
 +
	`•rötf
(ptr, "dz_iorequest_free_cnt................................= %ld\n",

301 
	`BASE_COUNTER_ATOMIC64_READ
(
dz_i‹eque°_‰ì_˙t
));

303 
±r
 +
	`•rötf
(ptr, "dz_iorequest_alloc_cnt - dz_iorequest_free_cnt.......= %ld\n",

304 (
	`BASE_COUNTER_ATOMIC64_READ
(
dz_i‹eque°_Æloc_˙t
Ë- BASE_COUNTER_ATOMIC64_READ(
dz_i‹eque°_‰ì_˙t
)));

306 
±r
 +
	`•rötf
(ptr, "dz_page_alloc_cnt....................................= %ld\n",

307 
	`BASE_COUNTER_ATOMIC64_READ
(
dz_∑ge_Æloc_˙t
));

309 
±r
 +
	`•rötf
(ptr, "dz_page_free_cnt.....................................= %ld\n",

310 
	`BASE_COUNTER_ATOMIC64_READ
(
dz_∑ge_‰ì_˙t
));

312 
±r
 +
	`•rötf
(ptr, "dz_page_alloc_cnt - dz_page_free_cnt.................= %ld\n",

313 (
	`BASE_COUNTER_ATOMIC64_READ
(
dz_∑ge_Æloc_˙t
Ë- BASE_COUNTER_ATOMIC64_READ(
dz_∑ge_‰ì_˙t
)));

315 
±r
 +
	`•rötf
(ptr, "bec_node_alloc_cnt...................................= %ld\n",

316 
	`BEC_COUNTER_ATOMIC64_READ
(
bec_node_Æloc_˙t
));

318 
±r
 +
	`•rötf
(ptr, "bec_node_free_cnt....................................= %ld\n",

319 
	`BEC_COUNTER_ATOMIC64_READ
(
bec_node_‰ì_˙t
));

321 
±r
 +
	`•rötf
(ptr, "bec_node_alloc_cnt - bec_node_free_cnt...............= %ld\n",

322 (
	`BEC_COUNTER_ATOMIC64_READ
(
bec_node_Æloc_˙t
Ë- BEC_COUNTER_ATOMIC64_READ(
bec_node_‰ì_˙t
)));

324 
±r
 +
	`•rötf
(ptr, "bec_page_alloc_cnt...................................= %ld\n",

325 
	`BEC_COUNTER_ATOMIC64_READ
(
bec_∑ge_Æloc_˙t
));

327 
±r
 +
	`•rötf
(ptr, "bec_page_free_cnt....................................= %ld\n",

328 
	`BEC_COUNTER_ATOMIC64_READ
(
bec_∑ge_‰ì_˙t
));

330 
±r
 +
	`•rötf
(ptr, "bec_page_alloc_cnt - bec_page_free_cnt...............= %ld\n",

331 (
	`BEC_COUNTER_ATOMIC64_READ
(
bec_∑ge_Æloc_˙t
Ë- BEC_COUNTER_ATOMIC64_READ(
bec_∑ge_‰ì_˙t
)));

333 
	}
}

335 
CHAR
 
avm_sysfs_íåy_gë_vîsi⁄
[
DZ_SYSFS_PAGE_SIZE
];

336 
INT
 
	$avm_gë_vîsi⁄
(
CHAR
 *
buf
)

338 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_vîsi⁄
;

339 
	`mem£t
(
avm_sysfs_íåy_gë_vîsi⁄
, 0, 
DZ_SYSFS_PAGE_SIZE
);

340 
	`mem˝y
(
±r
, "\n", 1);

341 
±r
 += 1;

342 
±r
 +
	`•rötf
’å, "AISA ZaidSt‹ Maj‹ = %d\n", 
DZ_AISA_VERSION_MAJOR
);

343 
±r
 +
	`•rötf
’å, "AISA ZaidSt‹ Mö‹ = %d\n", 
DZ_AISA_VERSION_MINOR
);

344 
±r
 +
	`•rötf
’å, "AISA ZaidSt‹ P©ch = %d\n", 
DZ_AISA_VERSION_PATCH
);

345 
±r
 +
	`•rötf
’å, "AISA ZaidSt‹ Rñó£ = %s\n", 
DZ_AISA_VERSION_RELEASE
);

346 
±r
 +
	`•rötf
’å, "LINUX_VERSION_CODE = %d\n", 
LINUX_VERSION_CODE
);

348 
	}
}

350 
INT
 
	$avm_gë_‰ì_∑ge_cou¡
(
CHAR
 *
buf
)

354 
	}
}

356 
INT
 
	$avm_gë_li°_of_obje˘s
(
CHAR
 *
buf
)

358 
	`LOGSYS
("%s",
__func__
);

359 
	`¥öt_obje˘_li°
();

361 
	}
}

363 
PPBA_BLOCK
 
pba_èbÀ
;

364 
PHASH_BLOCK
 
hash_èbÀ
;

365 
PLBA_BLOCK
 
lba_èbÀ
;

366 
BITMAP
 
pba_bôm≠
;

368 
U64
 
avm_sysfs_íåy_èsb
;

369 
INT
 
	$avm_gë_èsb
(
CHAR
 *
buf
)

433 
•ölock_t
 
lba_•ö
;

434 
U64
 
°¨t
 = 0;

435 
U64
 
íd
 = 0;

436 
INT
 
ªt
 = 0;

438 
	ua
 {

440 
INT
 
fú°
:1;

441 
INT
 
£c⁄d
:1;

442 
INT
 
thúd
:3;

443 
INT
 
fouπh
:3;

445 }
	`__©åibuã__
((
__∑cked__
));

446 
INT
 
c
;

447 }
	`__©åibuã__
((
__∑cked__
));

449 
LBA_BLOCK
 
lb
;

450 
PLBA_BLOCK
 
lbp
 = &
lb
;

452 
a
 
b
;

453 
	`LOG
("sizeof°ru˘á = %zu\n", (
a
));

454 
b
.
fú°
 = 0;

455 
b
.
£c⁄d
 = 0;

456 
b
.
thúd
 = 7;

457 
	`LOG
("Before bit_spin_lock\n");

458 
	`LOG
("b.fú° = %x\n", 
b
.
fú°
);

459 
	`LOG
("b.£c⁄d = %x\n", 
b
.
£c⁄d
);

460 
	`LOG
("b.thúd = %x\n", 
b
.
thúd
);

461 
	`LOG
("b.¯ = %d 0x%x\n", 
b
.
c
, b.c);

464 
	`LOG
("After bit_spin_lock\n");

465 
	`LOG
("b.fú° = %x\n", 
b
.
fú°
);

466 
	`LOG
("b.£c⁄d = %x\n", 
b
.
£c⁄d
);

467 
	`LOG
("b.thúd = %x\n", 
b
.
thúd
);

468 
	`LOG
("b.¯ = %d 0x%x\n", 
b
.
c
, b.c);

471 
	`LOG
("After bit_spin_unlock\n");

472 
	`LOG
("b.fú° = %x\n", 
b
.
fú°
);

473 
	`LOG
("b.£c⁄d = %x\n", 
b
.
£c⁄d
);

474 
	`LOG
("b.thúd = %x\n", 
b
.
thúd
);

475 
	`LOG
("b.¯ = %d 0x%x\n", 
b
.
c
, b.c);

477 
	`LOG
("\nsizêo‡lba_block = %zu\n", (
LBA_BLOCK
));

478 
	`LOG
("\nsizêo‡pba_block = %zu\n", (
PBA_BLOCK
));

479 
	`LOG
("\nsizêo‡hash_block = %zu\n", (
HASH_BLOCK
));

482 
	`MEMSET
(&
lb
);

484 
	`•ö_lock_öô
(&
lba_•ö
);

485 
lb
.
Æloˇãd
 = 
åue
;

486 
lb
.
hash_ödex
 = 3;

487 
	`¥öt_lba_block
(&
lb
);

488 
	`LOG
("ã°_bô = %d\n", 
	`ã°_bô
(0, &
lb
.
d⁄Ÿch™ge
));

489 
	`LOG
("ã°_bô = %d\n", 
	`ã°_bô
(1, &
lb
.
d⁄Ÿch™ge
));

490 
	`LOG
("ã°_bô = %d\n", 
	`ã°_bô
(2, &
lb
.
d⁄Ÿch™ge
));

491 
	`LOG
("ã°_bô = %d\n", 
	`ã°_bô
(3, &
lb
.
d⁄Ÿch™ge
));

492 
	`LOG
("ã°_bô = %d\n", 
	`ã°_bô
(4, &
lb
.
d⁄Ÿch™ge
));

493 
°¨t
 = 
	`gë_jiffõs_64
();

494 
	`LBA_LOCK
(&
lb
);

495 
ªt
 = 
	`bô_•ö_åylock
(0, &
lb
.
d⁄Ÿch™ge
);

496 
	`LOG
("\¿ªà%d\n", 
ªt
);

497 
	`¥öt_lba_block
(&
lb
);

498 
	`LBA_UNLOCK
(&
lb
);

499 
íd
 = 
	`gë_jiffõs_64
();

500 
	`LOG
("°¨t=%Œx\n", 
°¨t
);

501 
	`LOG
("íd=%Œx\n", 
íd
);

502 
	`LOG
("diff=%x\n", 
	`jiffõs_to_u£cs
(
íd
-
°¨t
));

503 
	`¥öt_lba_block
(&
lb
);

505 
°¨t
 = 
	`gë_jiffõs_64
();

506 
	`•ö_lock
(&
lba_•ö
);

507 i‡(
lb
.
Æloˇãd
 =
åue
 ) {

508 
lb
.
Æloˇãd
 = 
Ál£
;

510 
íd
 = 
	`gë_jiffõs_64
();

511 
	`•ö_u∆ock
(&
lba_•ö
);

513 
lb
.
Æloˇãd
 = 
åue
;

514 
°¨t
 = 
	`gë_jiffõs_64
();

515 
	`•ö_lock
(&
lba_•ö
);

516 i‡(
lbp
->
Æloˇãd
 =
åue
 ) {

517 
lbp
->
Æloˇãd
 = 
Ál£
;

519 
íd
 = 
	`gë_jiffõs_64
();

520 
	`•ö_u∆ock
(&
lba_•ö
);

522 
	`¥öt_lba_block
(&
lb
);

524 
	`bô_•ö_u∆ock
(0, &
lb
.
d⁄Ÿch™ge
);

525 
	`¥öt_lba_block
(&
lb
);

527 
	}
}

529 
ATOMIC64
 
dedu≥_disk_ªads
;

530 
ATOMIC64
 
dedu≥_disk_wrôes
;

531 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

532 
ATOMIC64
 
dedu≥_ˇche_hôs
;

533 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

534 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

535 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

536 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

537 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

538 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

540 
U64
 
„c_a˘ive_cou¡
;

541 
U64
 
time_„c_wrôe_°¨t
;

542 
U64
 
time_„c_wrôe_swôch
;

543 
PFEC_TABLE
 
„c_èbÀs_Êush
;

544 
U64
 
time_Êush_¥ï¨e_°¨t
;

545 
U64
 
time_Êush_°¨t
;

546 
U64
 
time_Êush_íd
;

547 
ATOMIC64
 
„c_a˘ive_cou¡_£quí˚
;

548 
ATOMIC64
 
„c_‰ì_cou¡_£quí˚
;

549 
ATOMIC64
 
„c_cur_Êush_cou¡
;

550 
ATOMIC64
 
„c_Êush_›s_cou¡
;

551 
ATOMIC64
 
„c_cur_Êush_›s_cou¡
;

552 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

553 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

554 
INT
 
	$sys_„c_show
(
CHAR
 *
buf
)

556 
INT
 
cou¡
 = 0;

558 
cou¡
 = 
	`•rötf
(
buf
,

580 (
U64
)
	`READ_COUNTER
(
„c_a˘ive_cou¡_£quí˚
),

581 (
U64
)
	`READ_COUNTER
(
„c_‰ì_cou¡_£quí˚
),

582 
„c_a˘ive_cou¡
,

583 (
U64
)
	`READ_COUNTER
(
„c_Êush_›s_cou¡
),

584 (
U64
)
	`READ_COUNTER
(
„c_cur_Êush_›s_cou¡
),

585 (
U64
)
	`READ_COUNTER
(
„c_mem‹y_ªads_cou¡
),

586 (
U64
)
	`READ_COUNTER
(
„c_f‹w¨ded_ªads_cou¡
),

587 
time_„c_wrôe_°¨t
,

588 
time_„c_wrôe_swôch
,

589 
	`GET_CURRENT_TIME
(),

590 (
U64
)(
	`GET_TIME_DIFF_IN_SECONDS
(
time_„c_wrôe_°¨t
, 
	`GET_CURRENT_TIME
())/1000),

591 (
U64
)(
	`GET_TIME_DIFF_IN_SECONDS
(
time_„c_wrôe_°¨t
, 
time_„c_wrôe_swôch
)/1000),

592 (
U64
)
„c_èbÀs_Êush
->
tŸÆ_Êush_˙t
,

593 (
U64
)
	`READ_COUNTER
(
„c_cur_Êush_cou¡
),

594 (
U64
)
time_Êush_¥ï¨e_°¨t
,

595 (
U64
)
time_Êush_°¨t
,

596 (
U64
)
time_Êush_íd
,

597 (
U64
)
	`GET_CURRENT_TIME
(),

598 (
U64
)(
	`GET_TIME_DIFF_IN_SECONDS
(
time_Êush_°¨t
, 
	`GET_CURRENT_TIME
())/1000),

599 (
U64
)((
	`GET_TIME_DIFF_IN_SECONDS
(
time_Êush_°¨t
, 
time_Êush_íd
))/1000)

606 
	`LOGR
("<------------ FEC Show ----------->\n");

607 
	`LOGR
("%s",
buf
);

609 
	`LOGD
("Buf„∏Byã†u£d = %d\n", 
cou¡
);

611 
	}
}

613 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

614 
ATOMIC64
 
bec_ˇche_hô
;

615 
ATOMIC64
 
bec_ˇche_miss
;

616 
ATOMIC64
 
bec_ˇche_dñëe
;

617 
ULONG
 
bec_size
;

618 
INT
 
bec_cutoff_nodes
;

619 
INT
 
bec_cutoff_≥r˚¡
;

620 
U64
 
bec_ígöe_mem‹y_ußge
;

621 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

624 
INT
 
	$sys_bec_show
(
CHAR
 *
buf
)

626 
INT
 
cou¡
 = 0;

628 
cou¡
 = 
	`•rötf
(
buf
,

637 (
U64
)
	`READ_COUNTER
(
bec_pba_∑ge_cou¡
),

638 (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_hô
),

639 (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_miss
),

640 (
U64
)
	`ATOMIC64_READ
(
bec_ˇche_dñëe
),

641 (
U64
)
bec_size
,

642 (
U64
)
bec_cutoff_nodes
,

643 (
U64
)
bec_cutoff_≥r˚¡
,

644 (
U64
)
dz_bec_node_mempoﬁ_cou¡
);

646 
	`LOGR
("<------------ BEC Show ----------->\n");

647 
	`LOGR
("%s",
buf
);

649 
	`LOGD
("Buf„∏Byã†u£d = %d\n", 
cou¡
);

650  
cou¡
;

652 
	}
}

	@sysfs_engine/sysfs_fec_engine_autogen.c

2 
	~"¥ŸŸy≥s.h
"

4 
kobje˘
 *
	gdz_kobj
 = 
NULL
;

6 
kobje˘
 *
sysfs_avm_kî√l_kobj
;

8 
U64
 
	gavm_sysfs_íåy_gë_£t_swôch_„c
 = 0;

9 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_„c_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

10 
ssize_t
 
avm_sysfs_íåy_gë_£t_swôch_„c_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

11 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_swôch_„c_©å
 =

12 
__ATTR
(
gë_£t_swôch_„c
, 0644, 
avm_sysfs_íåy_gë_£t_swôch_„c_show
, 
avm_sysfs_íåy_gë_£t_swôch_„c_°‹e
);

14 
CHAR
 
	gavm_sysfs_íåy_gë_„c_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

15 
ssize_t
 
avm_sysfs_íåy_gë_„c_cou¡îs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

16 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_„c_cou¡îs_©å
 =

17 
__ATTR
(
gë_„c_cou¡îs
, 0644, 
avm_sysfs_íåy_gë_„c_cou¡îs_show
, 
NULL
);

19 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_„c_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

21 
INT
 
cou¡
 = 0;

22 
CHAR
 *
±r
 = 
buf
;

23 
cou¡
 = 
	`avm_gë_swôch_„c
(
buf
);

24  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_swôch_„¯: %Œi\n",
avm_sysfs_íåy_gë_£t_swôch_„c
);

25 
	}
}

27 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_swôch_„c_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

29 
INT
 
ªt
 = 
SUCCESS
 ;

30 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_swôch_„c
);

31 
	`avm_£t_swôch_„c
(
avm_sysfs_íåy_gë_£t_swôch_„c
);

32  
Àn
;

33 
	}
}

35 
ssize_t
 
	$avm_sysfs_íåy_gë_„c_cou¡îs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

37 
INT
 
cou¡
 = 0;

38 
CHAR
 *
±r
 = 
buf
;

39 
cou¡
 = 
	`avm_gë_„c_cou¡îs
(
buf
);

40  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_„c_cou¡î†: %s\n",
avm_sysfs_íåy_gë_„c_cou¡îs
);

41 
	}
}

43 
INT
 
	$avm_sysfs_„c_ígöe_öô
(
VOID
)

45 
INT
 
ªt
 = 
SUCCESS
;

46 
dz_kobj
 = 
	`kobje˘_¸óã_™d_add
("‰⁄t_íd_ˇche_ígöe", 
sysfs_avm_kî√l_kobj
);

47 i‡(!
dz_kobj
)

48  -
ENOMEM
;

49 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_swôch_„c_©å
.
©å
);

50 i‡(
ªt
 =
SUCCESS
) {

51 
	`LOGSYS
("sysfsÉntry /sys/avm/front_end_cache_engine/get_set_switch_fec created \n");

53 
	`LOGSYSE
("sysfsÉntry /sys/avm/front_end_cache_engine/get_set_switch_fec creation failed \n");

54 
RETURNF
;

57 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_„c_cou¡îs_©å
.
©å
);

58 i‡(
ªt
 =
SUCCESS
) {

59 
	`LOGSYS
("sysfsÉntry /sys/avm/front_end_cache_engine/get_fec_counters created \n");

61 
	`LOGSYSE
("sysfsÉntry /sys/avm/front_end_cache_engine/get_fec_counters creation failed \n");

62 
RETURNF
;

65 
RETURNS
;

67 
	}
}

68 
RVOID
 
	$avm_sysfs_„c_ígöe_exô
(
VOID
)

70 
	`kobje˘_put
(
dz_kobj
);

71 
	`LOGSYS
("dz_sysfs freed\n");

72 
	}
}

	@sysfs_engine/sysfs_kernel_autogen.c

2 
	~"¥ŸŸy≥s.h
"

4 
kobje˘
 *
	gdz_kobj
 = 
NULL
;

6 
kobje˘
 *
sysfs_avm_kî√l_kobj
;

8 
U64
 
	gavm_sysfs_íåy_gë_‰ì_∑ge_cou¡
 = 0;

9 
ssize_t
 
avm_sysfs_íåy_gë_‰ì_∑ge_cou¡_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

10 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_‰ì_∑ge_cou¡_©å
 =

11 
__ATTR
(
gë_‰ì_∑ge_cou¡
, 0644, 
avm_sysfs_íåy_gë_‰ì_∑ge_cou¡_show
, 
NULL
);

13 
CHAR
 
	gavm_sysfs_íåy_gë_li°_of_obje˘s
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

14 
ssize_t
 
avm_sysfs_íåy_gë_li°_of_obje˘s_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

15 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_li°_of_obje˘s_©å
 =

16 
__ATTR
(
gë_li°_of_obje˘s
, 0644, 
avm_sysfs_íåy_gë_li°_of_obje˘s_show
, 
NULL
);

18 
CHAR
 
	gavm_sysfs_íåy_gë_vîsi⁄
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

19 
ssize_t
 
avm_sysfs_íåy_gë_vîsi⁄_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

20 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_vîsi⁄_©å
 =

21 
__ATTR
(
gë_vîsi⁄
, 0644, 
avm_sysfs_íåy_gë_vîsi⁄_show
, 
NULL
);

23 
CHAR
 
	gavm_sysfs_íåy_gë_mem‹y_öfo
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

24 
ssize_t
 
avm_sysfs_íåy_gë_mem‹y_öfo_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

25 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_mem‹y_öfo_©å
 =

26 
__ATTR
(
gë_mem‹y_öfo
, 0644, 
avm_sysfs_íåy_gë_mem‹y_öfo_show
, 
NULL
);

28 
CHAR
 
	gavm_sysfs_íåy_gë_Æl_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

29 
ssize_t
 
avm_sysfs_íåy_gë_Æl_cou¡îs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

30 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_Æl_cou¡îs_©å
 =

31 
__ATTR
(
gë_Æl_cou¡îs
, 0644, 
avm_sysfs_íåy_gë_Æl_cou¡îs_show
, 
NULL
);

33 
CHAR
 
	gavm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

34 
ssize_t
 
avm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

35 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs_©å
 =

36 
__ATTR
(
gë_sizeof_d©a°ru˘uªs
, 0644, 
avm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs_show
, 
NULL
);

38 
INT
 
	gavm_sysfs_íåy_wrôe
 = 0;

39 
ssize_t
 
avm_sysfs_íåy_wrôe_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

40 
kobj_©åibuã
 
	gavm_sysfs_íåy_wrôe_©å
 =

41 
__ATTR
(
wrôe
, 0644, 
NULL
, 
avm_sysfs_íåy_wrôe_°‹e
);

43 
INT
 
	gavm_sysfs_íåy_ªad
 = 0;

44 
ssize_t
 
avm_sysfs_íåy_ªad_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

45 
kobj_©åibuã
 
	gavm_sysfs_íåy_ªad_©å
 =

46 
__ATTR
(
ªad
, 0644, 
avm_sysfs_íåy_ªad_show
, 
NULL
);

48 
ssize_t
 
	$avm_sysfs_íåy_gë_‰ì_∑ge_cou¡_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

50 
INT
 
cou¡
 = 0;

51 
CHAR
 *
±r
 = 
buf
;

52 
cou¡
 = 
	`avm_gë_‰ì_∑ge_cou¡
(
buf
);

53  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_‰ì_∑ge_cou¡ : %Œi\n",
avm_sysfs_íåy_gë_‰ì_∑ge_cou¡
);

54 
	}
}

56 
ssize_t
 
	$avm_sysfs_íåy_gë_li°_of_obje˘s_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

58 
INT
 
cou¡
 = 0;

59 
CHAR
 *
±r
 = 
buf
;

60 
cou¡
 = 
	`avm_gë_li°_of_obje˘s
(
buf
);

61  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_li°_of_obje˘†: %s\n",
avm_sysfs_íåy_gë_li°_of_obje˘s
);

62 
	}
}

64 
ssize_t
 
	$avm_sysfs_íåy_gë_vîsi⁄_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

66 
INT
 
cou¡
 = 0;

67 
CHAR
 *
±r
 = 
buf
;

68 
cou¡
 = 
	`avm_gë_vîsi⁄
(
buf
);

69  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_vîsi⁄ : %s\n",
avm_sysfs_íåy_gë_vîsi⁄
);

70 
	}
}

72 
ssize_t
 
	$avm_sysfs_íåy_gë_mem‹y_öfo_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

74 
INT
 
cou¡
 = 0;

75 
CHAR
 *
±r
 = 
buf
;

76 
cou¡
 = 
	`avm_gë_mem‹y_öfo
(
buf
);

77  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_mem‹y_öfÿ: %s\n",
avm_sysfs_íåy_gë_mem‹y_öfo
);

78 
	}
}

80 
ssize_t
 
	$avm_sysfs_íåy_gë_Æl_cou¡îs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

82 
INT
 
cou¡
 = 0;

83 
CHAR
 *
±r
 = 
buf
;

84 
cou¡
 = 
	`avm_gë_Æl_cou¡îs
(
buf
);

85  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_Æl_cou¡î†: %s\n",
avm_sysfs_íåy_gë_Æl_cou¡îs
);

86 
	}
}

88 
ssize_t
 
	$avm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

90 
INT
 
cou¡
 = 0;

91 
CHAR
 *
±r
 = 
buf
;

92 
cou¡
 = 
	`avm_gë_sizeof_d©a°ru˘uªs
(
buf
);

93  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_sizeof_d©a°ru˘uª†: %s\n",
avm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs
);

94 
	}
}

96 
ssize_t
 
	$avm_sysfs_íåy_wrôe_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

98 
INT
 
ªt
 = 
SUCCESS
 ;

99 
ªt
 = 
	`ssˇnf
(
buf
, "%d", &
avm_sysfs_íåy_wrôe
);

100  
Àn
;

101 
	}
}

103 
ssize_t
 
	$avm_sysfs_íåy_ªad_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

105 
INT
 
cou¡
 = 0;

106 
CHAR
 *
±r
 = 
buf
;

107  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_ªad : %d\n",
avm_sysfs_íåy_ªad
);

108 
	}
}

110 
INT
 
	$avm_sysfs_kî√l_öô
(
VOID
)

112 
INT
 
ªt
 = 
SUCCESS
;

113 
dz_kobj
 = 
	`kobje˘_¸óã_™d_add
("kî√l", 
sysfs_avm_kî√l_kobj
);

114 i‡(!
dz_kobj
)

115  -
ENOMEM
;

116 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_‰ì_∑ge_cou¡_©å
.
©å
);

117 i‡(
ªt
 =
SUCCESS
) {

118 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/get_free_page_count created \n");

120 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/get_free_page_count creation failed \n");

121 
RETURNF
;

124 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_li°_of_obje˘s_©å
.
©å
);

125 i‡(
ªt
 =
SUCCESS
) {

126 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/get_list_of_objects created \n");

128 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/get_list_of_objects creation failed \n");

129 
RETURNF
;

132 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_vîsi⁄_©å
.
©å
);

133 i‡(
ªt
 =
SUCCESS
) {

134 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/get_version created \n");

136 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/get_version creation failed \n");

137 
RETURNF
;

140 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_mem‹y_öfo_©å
.
©å
);

141 i‡(
ªt
 =
SUCCESS
) {

142 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/get_memory_info created \n");

144 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/get_memory_info creation failed \n");

145 
RETURNF
;

148 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_Æl_cou¡îs_©å
.
©å
);

149 i‡(
ªt
 =
SUCCESS
) {

150 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/get_all_counters created \n");

152 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/get_all_counters creation failed \n");

153 
RETURNF
;

156 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_sizeof_d©a°ru˘uªs_©å
.
©å
);

157 i‡(
ªt
 =
SUCCESS
) {

158 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/get_sizeof_datastructures created \n");

160 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/get_sizeof_datastructures creation failed \n");

161 
RETURNF
;

164 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_wrôe_©å
.
©å
);

165 i‡(
ªt
 =
SUCCESS
) {

166 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/write created \n");

168 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/write creation failed \n");

169 
RETURNF
;

172 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_ªad_©å
.
©å
);

173 i‡(
ªt
 =
SUCCESS
) {

174 
	`LOGSYS
("sysfsÉntry /sys/avm/kernel/read created \n");

176 
	`LOGSYSE
("sysfsÉntry /sys/avm/kernel/read creation failed \n");

177 
RETURNF
;

180 
RETURNS
;

182 
	}
}

183 
RVOID
 
	$avm_sysfs_kî√l_exô
(
VOID
)

185 
	`kobje˘_put
(
dz_kobj
);

186 
	`LOGSYS
("dz_sysfs freed\n");

187 
	}
}

	@sysfs_engine/sysfs_metadata_engine_autogen.c

2 
	~"¥ŸŸy≥s.h
"

4 
kobje˘
 *
	gdz_kobj
 = 
NULL
;

6 
kobje˘
 *
sysfs_avm_kî√l_kobj
;

8 
CHAR
 
	gavm_sysfs_íåy_gë_mëad©a_cou¡îs
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

9 
ssize_t
 
avm_sysfs_íåy_gë_mëad©a_cou¡îs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

10 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_mëad©a_cou¡îs_©å
 =

11 
__ATTR
(
gë_mëad©a_cou¡îs
, 0644, 
avm_sysfs_íåy_gë_mëad©a_cou¡îs_show
, 
NULL
);

13 
CHAR
 
	gavm_sysfs_íåy_gë_su≥rblock
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

14 
ssize_t
 
avm_sysfs_íåy_gë_su≥rblock_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

15 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_su≥rblock_©å
 =

16 
__ATTR
(
gë_su≥rblock
, 0644, 
avm_sysfs_íåy_gë_su≥rblock_show
, 
NULL
);

18 
ssize_t
 
	$avm_sysfs_íåy_gë_mëad©a_cou¡îs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

20 
INT
 
cou¡
 = 0;

21 
CHAR
 *
±r
 = 
buf
;

22 
cou¡
 = 
	`avm_gë_mëad©a_cou¡îs
(
buf
);

23  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_mëad©a_cou¡î†: %s\n",
avm_sysfs_íåy_gë_mëad©a_cou¡îs
);

24 
	}
}

26 
ssize_t
 
	$avm_sysfs_íåy_gë_su≥rblock_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

28 
INT
 
cou¡
 = 0;

29 
CHAR
 *
±r
 = 
buf
;

30 
cou¡
 = 
	`avm_gë_su≥rblock
(
buf
);

31  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_su≥rblock : %s\n",
avm_sysfs_íåy_gë_su≥rblock
);

32 
	}
}

34 
INT
 
	$avm_sysfs_mëad©a_ígöe_öô
(
VOID
)

36 
INT
 
ªt
 = 
SUCCESS
;

37 
dz_kobj
 = 
	`kobje˘_¸óã_™d_add
("mëad©a_ígöe", 
sysfs_avm_kî√l_kobj
);

38 i‡(!
dz_kobj
)

39  -
ENOMEM
;

40 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_mëad©a_cou¡îs_©å
.
©å
);

41 i‡(
ªt
 =
SUCCESS
) {

42 
	`LOGSYS
("sysfsÉntry /sys/avm/metadata_engine/get_metadata_counters created \n");

44 
	`LOGSYSE
("sysfsÉntry /sys/avm/metadata_engine/get_metadata_counters creation failed \n");

45 
RETURNF
;

48 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_su≥rblock_©å
.
©å
);

49 i‡(
ªt
 =
SUCCESS
) {

50 
	`LOGSYS
("sysfsÉntry /sys/avm/metadata_engine/get_superblock created \n");

52 
	`LOGSYSE
("sysfsÉntry /sys/avm/metadata_engine/get_superblock creation failed \n");

53 
RETURNF
;

56 
RETURNS
;

58 
	}
}

59 
RVOID
 
	$avm_sysfs_mëad©a_ígöe_exô
(
VOID
)

61 
	`kobje˘_put
(
dz_kobj
);

62 
	`LOGSYS
("dz_sysfs freed\n");

63 
	}
}

	@sysfs_engine/sysfs_target_engine_autogen.c

2 
	~"¥ŸŸy≥s.h
"

4 
kobje˘
 *
	gdz_kobj
 = 
NULL
;

6 
kobje˘
 *
sysfs_avm_kî√l_kobj
;

8 
CHAR
 
	gavm_sysfs_íåy_gë_èrgë_«me
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

9 
ssize_t
 
avm_sysfs_íåy_gë_èrgë_«me_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

10 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_èrgë_«me_©å
 =

11 
__ATTR
(
gë_èrgë_«me
, 0644, 
avm_sysfs_íåy_gë_èrgë_«me_show
, 
NULL
);

13 
CHAR
 
	gavm_sysfs_íåy_gë_èrgë_back°‹e_«me
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

14 
ssize_t
 
avm_sysfs_íåy_gë_èrgë_back°‹e_«me_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

15 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_èrgë_back°‹e_«me_©å
 =

16 
__ATTR
(
gë_èrgë_back°‹e_«me
, 0644, 
avm_sysfs_íåy_gë_èrgë_back°‹e_«me_show
, 
NULL
);

18 
CHAR
 
	gavm_sysfs_íåy_gë_èrgë_devi˚_size_byãs
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

19 
ssize_t
 
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

20 
ssize_t
 
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

21 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_èrgë_devi˚_size_byãs_©å
 =

22 
__ATTR
(
gë_èrgë_devi˚_size_byãs
, 0644, 
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs_show
, 
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs_°‹e
);

24 
CHAR
 
	gavm_sysfs_íåy_gë_èrgë_devi˚_size_blocks
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

25 
ssize_t
 
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

26 
ssize_t
 
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

27 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_èrgë_devi˚_size_blocks_©å
 =

28 
__ATTR
(
gë_èrgë_devi˚_size_blocks
, 0644, 
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks_show
, 
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks_°‹e
);

30 
U64
 
	gavm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode
 = 0;

31 
ssize_t
 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

32 
ssize_t
 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

33 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode_©å
 =

34 
__ATTR
(
gë_£t_èrgë_∑s°hrough_mode
, 0644, 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode_show
, 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode_°‹e
);

36 
U64
 
	gavm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad
 = 0;

37 
ssize_t
 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

38 
ssize_t
 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

39 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad_©å
 =

40 
__ATTR
(
gë_£t_èrgë_∑s°hrough_ªad
, 0644, 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad_show
, 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad_°‹e
);

42 
U64
 
	gavm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe
 = 0;

43 
ssize_t
 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

44 
ssize_t
 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

45 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe_©å
 =

46 
__ATTR
(
gë_£t_èrgë_∑s°hrough_wrôe
, 0644, 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe_show
, 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe_°‹e
);

48 
U64
 
	gavm_sysfs_íåy_gë_£t_èrgë_lba_block_size
 = 0;

49 
ssize_t
 
avm_sysfs_íåy_gë_£t_èrgë_lba_block_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

50 
ssize_t
 
avm_sysfs_íåy_gë_£t_èrgë_lba_block_size_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

51 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_èrgë_lba_block_size_©å
 =

52 
__ATTR
(
gë_£t_èrgë_lba_block_size
, 0644, 
avm_sysfs_íåy_gë_£t_èrgë_lba_block_size_show
, 
avm_sysfs_íåy_gë_£t_èrgë_lba_block_size_°‹e
);

54 
U64
 
	gavm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h
 = 0;

55 
ssize_t
 
avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

56 
ssize_t
 
avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

57 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h_©å
 =

58 
__ATTR
(
gë_£t_èrgë_swôch_i›©h
, 0644, 
avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h_show
, 
avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h_°‹e
);

60 
CHAR
 
	gavm_sysfs_íåy_issue_wrôe_io_⁄_devi˚
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

61 
ssize_t
 
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

62 
ssize_t
 
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

63 
kobj_©åibuã
 
	gavm_sysfs_íåy_issue_wrôe_io_⁄_devi˚_©å
 =

64 
__ATTR
(
issue_wrôe_io_⁄_devi˚
, 0644, 
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚_show
, 
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚_°‹e
);

66 
U64
 
	gavm_sysfs_íåy_issue_wrôe_io_©_£˘‹
 = 0;

67 
ssize_t
 
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

68 
ssize_t
 
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

69 
kobj_©åibuã
 
	gavm_sysfs_íåy_issue_wrôe_io_©_£˘‹_©å
 =

70 
__ATTR
(
issue_wrôe_io_©_£˘‹
, 0644, 
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹_show
, 
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹_°‹e
);

72 
INT
 
	gavm_sysfs_íåy_issue_wrôe_io_wôh_size
 = 0;

73 
ssize_t
 
avm_sysfs_íåy_issue_wrôe_io_wôh_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

74 
ssize_t
 
avm_sysfs_íåy_issue_wrôe_io_wôh_size_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

75 
kobj_©åibuã
 
	gavm_sysfs_íåy_issue_wrôe_io_wôh_size_©å
 =

76 
__ATTR
(
issue_wrôe_io_wôh_size
, 0644, 
avm_sysfs_íåy_issue_wrôe_io_wôh_size_show
, 
avm_sysfs_íåy_issue_wrôe_io_wôh_size_°‹e
);

78 
INT
 
	gavm_sysfs_íåy_issue_wrôe_io
 = 0;

79 
ssize_t
 
avm_sysfs_íåy_issue_wrôe_io_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

80 
kobj_©åibuã
 
	gavm_sysfs_íåy_issue_wrôe_io_©å
 =

81 
__ATTR
(
issue_wrôe_io
, 0644, 
avm_sysfs_íåy_issue_wrôe_io_show
, 
NULL
);

83 
CHAR
 
	gavm_sysfs_íåy_issue_ªad_io_⁄_devi˚
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

84 
ssize_t
 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

85 
ssize_t
 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

86 
kobj_©åibuã
 
	gavm_sysfs_íåy_issue_ªad_io_⁄_devi˚_©å
 =

87 
__ATTR
(
issue_ªad_io_⁄_devi˚
, 0644, 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚_show
, 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚_°‹e
);

89 
U64
 
	gavm_sysfs_íåy_issue_ªad_io_©_£˘‹
 = 0;

90 
ssize_t
 
avm_sysfs_íåy_issue_ªad_io_©_£˘‹_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

91 
ssize_t
 
avm_sysfs_íåy_issue_ªad_io_©_£˘‹_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

92 
kobj_©åibuã
 
	gavm_sysfs_íåy_issue_ªad_io_©_£˘‹_©å
 =

93 
__ATTR
(
issue_ªad_io_©_£˘‹
, 0644, 
avm_sysfs_íåy_issue_ªad_io_©_£˘‹_show
, 
avm_sysfs_íåy_issue_ªad_io_©_£˘‹_°‹e
);

95 
INT
 
	gavm_sysfs_íåy_issue_ªad_io_wôh_size
 = 0;

96 
ssize_t
 
avm_sysfs_íåy_issue_ªad_io_wôh_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

97 
ssize_t
 
avm_sysfs_íåy_issue_ªad_io_wôh_size_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

98 
kobj_©åibuã
 
	gavm_sysfs_íåy_issue_ªad_io_wôh_size_©å
 =

99 
__ATTR
(
issue_ªad_io_wôh_size
, 0644, 
avm_sysfs_íåy_issue_ªad_io_wôh_size_show
, 
avm_sysfs_íåy_issue_ªad_io_wôh_size_°‹e
);

101 
INT
 
	gavm_sysfs_íåy_issue_ªad_io
 = 0;

102 
ssize_t
 
avm_sysfs_íåy_issue_ªad_io_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

103 
kobj_©åibuã
 
	gavm_sysfs_íåy_issue_ªad_io_©å
 =

104 
__ATTR
(
issue_ªad_io
, 0644, 
avm_sysfs_íåy_issue_ªad_io_show
, 
NULL
);

106 
CHAR
 
	gavm_sysfs_íåy_issue_zîo_io_⁄_devi˚
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

107 
ssize_t
 
avm_sysfs_íåy_issue_zîo_io_⁄_devi˚_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

108 
ssize_t
 
avm_sysfs_íåy_issue_zîo_io_⁄_devi˚_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

109 
kobj_©åibuã
 
	gavm_sysfs_íåy_issue_zîo_io_⁄_devi˚_©å
 =

110 
__ATTR
(
issue_zîo_io_⁄_devi˚
, 0644, 
avm_sysfs_íåy_issue_zîo_io_⁄_devi˚_show
, 
avm_sysfs_íåy_issue_zîo_io_⁄_devi˚_°‹e
);

112 
U64
 
	gavm_sysfs_íåy_issue_zîo_io_©_£˘‹
 = 0;

113 
ssize_t
 
avm_sysfs_íåy_issue_zîo_io_©_£˘‹_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

114 
ssize_t
 
avm_sysfs_íåy_issue_zîo_io_©_£˘‹_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

115 
kobj_©åibuã
 
	gavm_sysfs_íåy_issue_zîo_io_©_£˘‹_©å
 =

116 
__ATTR
(
issue_zîo_io_©_£˘‹
, 0644, 
avm_sysfs_íåy_issue_zîo_io_©_£˘‹_show
, 
avm_sysfs_íåy_issue_zîo_io_©_£˘‹_°‹e
);

118 
INT
 
	gavm_sysfs_íåy_issue_zîo_io_wôh_size
 = 0;

119 
ssize_t
 
avm_sysfs_íåy_issue_zîo_io_wôh_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

120 
ssize_t
 
avm_sysfs_íåy_issue_zîo_io_wôh_size_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

121 
kobj_©åibuã
 
	gavm_sysfs_íåy_issue_zîo_io_wôh_size_©å
 =

122 
__ATTR
(
issue_zîo_io_wôh_size
, 0644, 
avm_sysfs_íåy_issue_zîo_io_wôh_size_show
, 
avm_sysfs_íåy_issue_zîo_io_wôh_size_°‹e
);

124 
INT
 
	gavm_sysfs_íåy_issue_zîo_io
 = 0;

125 
ssize_t
 
avm_sysfs_íåy_issue_zîo_io_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

126 
kobj_©åibuã
 
	gavm_sysfs_íåy_issue_zîo_io_©å
 =

127 
__ATTR
(
issue_zîo_io
, 0644, 
avm_sysfs_íåy_issue_zîo_io_show
, 
NULL
);

129 
INT
 
	gavm_sysfs_íåy_wrôe_vîify_io
 = 0;

130 
ssize_t
 
avm_sysfs_íåy_wrôe_vîify_io_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

131 
kobj_©åibuã
 
	gavm_sysfs_íåy_wrôe_vîify_io_©å
 =

132 
__ATTR
(
wrôe_vîify_io
, 0644, 
avm_sysfs_íåy_wrôe_vîify_io_show
, 
NULL
);

134 
ssize_t
 
	$avm_sysfs_íåy_gë_èrgë_«me_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

136 
INT
 
cou¡
 = 0;

137 
CHAR
 *
±r
 = 
buf
;

138 
cou¡
 = 
	`avm_gë_èrgë_«me
(
buf
);

139  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_èrgë_«mê: %s\n",
avm_sysfs_íåy_gë_èrgë_«me
);

140 
	}
}

142 
ssize_t
 
	$avm_sysfs_íåy_gë_èrgë_back°‹e_«me_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

144 
INT
 
cou¡
 = 0;

145 
CHAR
 *
±r
 = 
buf
;

146 
cou¡
 = 
	`avm_gë_èrgë_back°‹e_«me
(
buf
);

147  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_èrgë_back°‹e_«mê: %s\n",
avm_sysfs_íåy_gë_èrgë_back°‹e_«me
);

148 
	}
}

150 
ssize_t
 
	$avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

152 
INT
 
cou¡
 = 0;

153 
CHAR
 *
±r
 = 
buf
;

154 
cou¡
 = 
	`avm_gë_èrgë_devi˚_size_byãs
(
buf
);

155  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_èrgë_devi˚_size_byã†: %s\n",
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs
);

156 
	}
}

158 
ssize_t
 
	$avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

160 
INT
 
ªt
 = 
SUCCESS
 ;

161 
ªt
 = 
	`ssˇnf
(
buf
, "%s", 
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs
);

162  
Àn
;

163 
	}
}

165 
ssize_t
 
	$avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

167 
INT
 
cou¡
 = 0;

168 
CHAR
 *
±r
 = 
buf
;

169 
cou¡
 = 
	`avm_gë_èrgë_devi˚_size_blocks
(
buf
);

170  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_èrgë_devi˚_size_block†: %s\n",
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks
);

171 
	}
}

173 
ssize_t
 
	$avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

175 
INT
 
ªt
 = 
SUCCESS
 ;

176 
ªt
 = 
	`ssˇnf
(
buf
, "%s", 
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks
);

177  
Àn
;

178 
	}
}

180 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

182 
INT
 
cou¡
 = 0;

183 
CHAR
 *
±r
 = 
buf
;

184 
cou¡
 = 
	`avm_gë_èrgë_∑s°hrough_mode
(
buf
);

185  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_modê: %Œi\n",
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode
);

186 
	}
}

188 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

190 
INT
 
ªt
 = 
SUCCESS
 ;

191 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode
);

192 
	`avm_£t_èrgë_∑s°hrough_mode
(
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode
);

193  
Àn
;

194 
	}
}

196 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

198 
INT
 
cou¡
 = 0;

199 
CHAR
 *
±r
 = 
buf
;

200 
cou¡
 = 
	`avm_gë_èrgë_∑s°hrough_ªad
(
buf
);

201  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad : %Œi\n",
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad
);

202 
	}
}

204 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

206 
INT
 
ªt
 = 
SUCCESS
 ;

207 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad
);

208 
	`avm_£t_èrgë_∑s°hrough_ªad
(
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad
);

209  
Àn
;

210 
	}
}

212 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

214 
INT
 
cou¡
 = 0;

215 
CHAR
 *
±r
 = 
buf
;

216 
cou¡
 = 
	`avm_gë_èrgë_∑s°hrough_wrôe
(
buf
);

217  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôê: %Œi\n",
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe
);

218 
	}
}

220 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

222 
INT
 
ªt
 = 
SUCCESS
 ;

223 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe
);

224 
	`avm_£t_èrgë_∑s°hrough_wrôe
(
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe
);

225  
Àn
;

226 
	}
}

228 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_èrgë_lba_block_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

230 
INT
 
cou¡
 = 0;

231 
CHAR
 *
±r
 = 
buf
;

232 
cou¡
 = 
	`avm_gë_èrgë_lba_block_size
(
buf
);

233  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_èrgë_lba_block_sizê: %Œi\n",
avm_sysfs_íåy_gë_£t_èrgë_lba_block_size
);

234 
	}
}

236 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_èrgë_lba_block_size_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

238 
INT
 
ªt
 = 
SUCCESS
 ;

239 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_èrgë_lba_block_size
);

240 
	`avm_£t_èrgë_lba_block_size
(
avm_sysfs_íåy_gë_£t_èrgë_lba_block_size
);

241  
Àn
;

242 
	}
}

244 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

246 
INT
 
cou¡
 = 0;

247 
CHAR
 *
±r
 = 
buf
;

248 
cou¡
 = 
	`avm_gë_èrgë_swôch_i›©h
(
buf
);

249  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h : %Œi\n",
avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h
);

250 
	}
}

252 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

254 
INT
 
ªt
 = 
SUCCESS
 ;

255 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h
);

256 
	`avm_£t_èrgë_swôch_i›©h
(
avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h
);

257  
Àn
;

258 
	}
}

260 
ssize_t
 
	$avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

262 
INT
 
cou¡
 = 0;

263 
CHAR
 *
±r
 = 
buf
;

264  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚ : %s\n",
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚
);

265 
	}
}

267 
ssize_t
 
	$avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

269 
INT
 
ªt
 = 
SUCCESS
 ;

270 
ªt
 = 
	`ssˇnf
(
buf
, "%s", 
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚
);

271  
Àn
;

272 
	}
}

274 
ssize_t
 
	$avm_sysfs_íåy_issue_wrôe_io_©_£˘‹_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

276 
INT
 
cou¡
 = 0;

277 
CHAR
 *
±r
 = 
buf
;

278  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_issue_wrôe_io_©_£˘‹ : %Œi\n",
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹
);

279 
	}
}

281 
ssize_t
 
	$avm_sysfs_íåy_issue_wrôe_io_©_£˘‹_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

283 
INT
 
ªt
 = 
SUCCESS
 ;

284 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹
);

285  
Àn
;

286 
	}
}

288 
ssize_t
 
	$avm_sysfs_íåy_issue_wrôe_io_wôh_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

290 
INT
 
cou¡
 = 0;

291 
CHAR
 *
±r
 = 
buf
;

292  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_issue_wrôe_io_wôh_sizê: %d\n",
avm_sysfs_íåy_issue_wrôe_io_wôh_size
);

293 
	}
}

295 
ssize_t
 
	$avm_sysfs_íåy_issue_wrôe_io_wôh_size_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

297 
INT
 
ªt
 = 
SUCCESS
 ;

298 
ªt
 = 
	`ssˇnf
(
buf
, "%d", &
avm_sysfs_íåy_issue_wrôe_io_wôh_size
);

299  
Àn
;

300 
	}
}

302 
ssize_t
 
	$avm_sysfs_íåy_issue_wrôe_io_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

304 
INT
 
cou¡
 = 0;

305 
CHAR
 *
±r
 = 
buf
;

306 
cou¡
 = 
	`avm_do_wrôe_io
(
buf
);

307  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_issue_wrôe_iÿ: %d\n",
avm_sysfs_íåy_issue_wrôe_io
);

308 
	}
}

310 
ssize_t
 
	$avm_sysfs_íåy_issue_ªad_io_⁄_devi˚_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

312 
INT
 
cou¡
 = 0;

313 
CHAR
 *
±r
 = 
buf
;

314  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_issue_ªad_io_⁄_devi˚ : %s\n",
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚
);

315 
	}
}

317 
ssize_t
 
	$avm_sysfs_íåy_issue_ªad_io_⁄_devi˚_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

319 
INT
 
ªt
 = 
SUCCESS
 ;

320 
ªt
 = 
	`ssˇnf
(
buf
, "%s", 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚
);

321  
Àn
;

322 
	}
}

324 
ssize_t
 
	$avm_sysfs_íåy_issue_ªad_io_©_£˘‹_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

326 
INT
 
cou¡
 = 0;

327 
CHAR
 *
±r
 = 
buf
;

328  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_issue_ªad_io_©_£˘‹ : %Œi\n",
avm_sysfs_íåy_issue_ªad_io_©_£˘‹
);

329 
	}
}

331 
ssize_t
 
	$avm_sysfs_íåy_issue_ªad_io_©_£˘‹_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

333 
INT
 
ªt
 = 
SUCCESS
 ;

334 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_issue_ªad_io_©_£˘‹
);

335  
Àn
;

336 
	}
}

338 
ssize_t
 
	$avm_sysfs_íåy_issue_ªad_io_wôh_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

340 
INT
 
cou¡
 = 0;

341 
CHAR
 *
±r
 = 
buf
;

342  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_issue_ªad_io_wôh_sizê: %d\n",
avm_sysfs_íåy_issue_ªad_io_wôh_size
);

343 
	}
}

345 
ssize_t
 
	$avm_sysfs_íåy_issue_ªad_io_wôh_size_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

347 
INT
 
ªt
 = 
SUCCESS
 ;

348 
ªt
 = 
	`ssˇnf
(
buf
, "%d", &
avm_sysfs_íåy_issue_ªad_io_wôh_size
);

349  
Àn
;

350 
	}
}

352 
ssize_t
 
	$avm_sysfs_íåy_issue_ªad_io_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

354 
INT
 
cou¡
 = 0;

355 
CHAR
 *
±r
 = 
buf
;

356 
cou¡
 = 
	`avm_do_ªad_io
(
buf
);

357  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_issue_ªad_iÿ: %d\n",
avm_sysfs_íåy_issue_ªad_io
);

358 
	}
}

360 
ssize_t
 
	$avm_sysfs_íåy_issue_zîo_io_⁄_devi˚_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

362 
INT
 
cou¡
 = 0;

363 
CHAR
 *
±r
 = 
buf
;

364  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_issue_zîo_io_⁄_devi˚ : %s\n",
avm_sysfs_íåy_issue_zîo_io_⁄_devi˚
);

365 
	}
}

367 
ssize_t
 
	$avm_sysfs_íåy_issue_zîo_io_⁄_devi˚_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

369 
INT
 
ªt
 = 
SUCCESS
 ;

370 
ªt
 = 
	`ssˇnf
(
buf
, "%s", 
avm_sysfs_íåy_issue_zîo_io_⁄_devi˚
);

371  
Àn
;

372 
	}
}

374 
ssize_t
 
	$avm_sysfs_íåy_issue_zîo_io_©_£˘‹_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

376 
INT
 
cou¡
 = 0;

377 
CHAR
 *
±r
 = 
buf
;

378  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_issue_zîo_io_©_£˘‹ : %Œi\n",
avm_sysfs_íåy_issue_zîo_io_©_£˘‹
);

379 
	}
}

381 
ssize_t
 
	$avm_sysfs_íåy_issue_zîo_io_©_£˘‹_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

383 
INT
 
ªt
 = 
SUCCESS
 ;

384 
ªt
 = 
	`ssˇnf
(
buf
, "%Œi", &
avm_sysfs_íåy_issue_zîo_io_©_£˘‹
);

385  
Àn
;

386 
	}
}

388 
ssize_t
 
	$avm_sysfs_íåy_issue_zîo_io_wôh_size_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

390 
INT
 
cou¡
 = 0;

391 
CHAR
 *
±r
 = 
buf
;

392  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_issue_zîo_io_wôh_sizê: %d\n",
avm_sysfs_íåy_issue_zîo_io_wôh_size
);

393 
	}
}

395 
ssize_t
 
	$avm_sysfs_íåy_issue_zîo_io_wôh_size_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

397 
INT
 
ªt
 = 
SUCCESS
 ;

398 
ªt
 = 
	`ssˇnf
(
buf
, "%d", &
avm_sysfs_íåy_issue_zîo_io_wôh_size
);

399  
Àn
;

400 
	}
}

402 
ssize_t
 
	$avm_sysfs_íåy_issue_zîo_io_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

404 
INT
 
cou¡
 = 0;

405 
CHAR
 *
±r
 = 
buf
;

406 
cou¡
 = 
	`avm_do_zîo_io
(
buf
);

407  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_issue_zîo_iÿ: %d\n",
avm_sysfs_íåy_issue_zîo_io
);

408 
	}
}

410 
ssize_t
 
	$avm_sysfs_íåy_wrôe_vîify_io_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

412 
INT
 
cou¡
 = 0;

413 
CHAR
 *
±r
 = 
buf
;

414 
cou¡
 = 
	`avm_do_wrôe_vîify_io
(
buf
);

415  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_wrôe_vîify_iÿ: %d\n",
avm_sysfs_íåy_wrôe_vîify_io
);

416 
	}
}

418 
INT
 
	$avm_sysfs_èrgë_ígöe_öô
(
VOID
)

420 
INT
 
ªt
 = 
SUCCESS
;

421 
dz_kobj
 = 
	`kobje˘_¸óã_™d_add
("èrgë_ígöe", 
sysfs_avm_kî√l_kobj
);

422 i‡(!
dz_kobj
)

423  -
ENOMEM
;

424 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_èrgë_«me_©å
.
©å
);

425 i‡(
ªt
 =
SUCCESS
) {

426 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/get_target_name created \n");

428 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/get_target_name creation failed \n");

429 
RETURNF
;

432 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_èrgë_back°‹e_«me_©å
.
©å
);

433 i‡(
ªt
 =
SUCCESS
) {

434 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/get_target_backstore_name created \n");

436 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/get_target_backstore_name creation failed \n");

437 
RETURNF
;

440 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs_©å
.
©å
);

441 i‡(
ªt
 =
SUCCESS
) {

442 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/get_target_device_size_bytes created \n");

444 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/get_target_device_size_bytes creation failed \n");

445 
RETURNF
;

448 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks_©å
.
©å
);

449 i‡(
ªt
 =
SUCCESS
) {

450 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/get_target_device_size_blocks created \n");

452 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/get_target_device_size_blocks creation failed \n");

453 
RETURNF
;

456 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode_©å
.
©å
);

457 i‡(
ªt
 =
SUCCESS
) {

458 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/get_set_target_passthrough_mode created \n");

460 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/get_set_target_passthrough_mode creation failed \n");

461 
RETURNF
;

464 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad_©å
.
©å
);

465 i‡(
ªt
 =
SUCCESS
) {

466 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/get_set_target_passthrough_read created \n");

468 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/get_set_target_passthrough_read creation failed \n");

469 
RETURNF
;

472 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe_©å
.
©å
);

473 i‡(
ªt
 =
SUCCESS
) {

474 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/get_set_target_passthrough_write created \n");

476 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/get_set_target_passthrough_write creation failed \n");

477 
RETURNF
;

480 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_èrgë_lba_block_size_©å
.
©å
);

481 i‡(
ªt
 =
SUCCESS
) {

482 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/get_set_target_lba_block_size created \n");

484 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/get_set_target_lba_block_size creation failed \n");

485 
RETURNF
;

488 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h_©å
.
©å
);

489 i‡(
ªt
 =
SUCCESS
) {

490 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/get_set_target_switch_iopath created \n");

492 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/get_set_target_switch_iopath creation failed \n");

493 
RETURNF
;

496 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚_©å
.
©å
);

497 i‡(
ªt
 =
SUCCESS
) {

498 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/issue_write_io_on_device created \n");

500 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/issue_write_io_on_device creation failed \n");

501 
RETURNF
;

504 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹_©å
.
©å
);

505 i‡(
ªt
 =
SUCCESS
) {

506 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/issue_write_io_at_sector created \n");

508 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/issue_write_io_at_sector creation failed \n");

509 
RETURNF
;

512 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_issue_wrôe_io_wôh_size_©å
.
©å
);

513 i‡(
ªt
 =
SUCCESS
) {

514 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/issue_write_io_with_size created \n");

516 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/issue_write_io_with_size creation failed \n");

517 
RETURNF
;

520 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_issue_wrôe_io_©å
.
©å
);

521 i‡(
ªt
 =
SUCCESS
) {

522 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/issue_write_io created \n");

524 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/issue_write_io creation failed \n");

525 
RETURNF
;

528 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚_©å
.
©å
);

529 i‡(
ªt
 =
SUCCESS
) {

530 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/issue_read_io_on_device created \n");

532 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/issue_read_io_on_device creation failed \n");

533 
RETURNF
;

536 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_issue_ªad_io_©_£˘‹_©å
.
©å
);

537 i‡(
ªt
 =
SUCCESS
) {

538 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/issue_read_io_at_sector created \n");

540 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/issue_read_io_at_sector creation failed \n");

541 
RETURNF
;

544 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_issue_ªad_io_wôh_size_©å
.
©å
);

545 i‡(
ªt
 =
SUCCESS
) {

546 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/issue_read_io_with_size created \n");

548 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/issue_read_io_with_size creation failed \n");

549 
RETURNF
;

552 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_issue_ªad_io_©å
.
©å
);

553 i‡(
ªt
 =
SUCCESS
) {

554 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/issue_read_io created \n");

556 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/issue_read_io creation failed \n");

557 
RETURNF
;

560 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_issue_zîo_io_⁄_devi˚_©å
.
©å
);

561 i‡(
ªt
 =
SUCCESS
) {

562 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/issue_zero_io_on_device created \n");

564 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/issue_zero_io_on_device creation failed \n");

565 
RETURNF
;

568 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_issue_zîo_io_©_£˘‹_©å
.
©å
);

569 i‡(
ªt
 =
SUCCESS
) {

570 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/issue_zero_io_at_sector created \n");

572 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/issue_zero_io_at_sector creation failed \n");

573 
RETURNF
;

576 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_issue_zîo_io_wôh_size_©å
.
©å
);

577 i‡(
ªt
 =
SUCCESS
) {

578 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/issue_zero_io_with_size created \n");

580 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/issue_zero_io_with_size creation failed \n");

581 
RETURNF
;

584 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_issue_zîo_io_©å
.
©å
);

585 i‡(
ªt
 =
SUCCESS
) {

586 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/issue_zero_io created \n");

588 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/issue_zero_io creation failed \n");

589 
RETURNF
;

592 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_wrôe_vîify_io_©å
.
©å
);

593 i‡(
ªt
 =
SUCCESS
) {

594 
	`LOGSYS
("sysfsÉntry /sys/avm/target_engine/write_verify_io created \n");

596 
	`LOGSYSE
("sysfsÉntry /sys/avm/target_engine/write_verify_io creation failed \n");

597 
RETURNF
;

600 
RETURNS
;

602 
	}
}

603 
RVOID
 
	$avm_sysfs_èrgë_ígöe_exô
(
VOID
)

605 
	`kobje˘_put
(
dz_kobj
);

606 
	`LOGSYS
("dz_sysfs freed\n");

607 
	}
}

	@sysfs_engine/sysfs_volume_engine_autogen.c

2 
	~"¥ŸŸy≥s.h
"

4 
kobje˘
 *
	gdz_kobj
 = 
NULL
;

6 
kobje˘
 *
sysfs_avm_kî√l_kobj
;

8 
CHAR
 
	gavm_sysfs_íåy_gë_£t_vﬁume_öfo
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

9 
ssize_t
 
avm_sysfs_íåy_gë_£t_vﬁume_öfo_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

10 
ssize_t
 
avm_sysfs_íåy_gë_£t_vﬁume_öfo_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
n
);

11 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_£t_vﬁume_öfo_©å
 =

12 
__ATTR
(
gë_£t_vﬁume_öfo
, 0644, 
avm_sysfs_íåy_gë_£t_vﬁume_öfo_show
, 
avm_sysfs_íåy_gë_£t_vﬁume_öfo_°‹e
);

14 
CHAR
 
	gavm_sysfs_íåy_gë_li°_of_vﬁumes
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

15 
ssize_t
 
avm_sysfs_íåy_gë_li°_of_vﬁumes_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

16 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_li°_of_vﬁumes_©å
 =

17 
__ATTR
(
gë_li°_of_vﬁumes
, 0644, 
avm_sysfs_íåy_gë_li°_of_vﬁumes_show
, 
NULL
);

19 
CHAR
 
	gavm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
[
DZ_SYSFS_PAGE_SIZE
] = {'\0'};

20 
ssize_t
 
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
);

21 
kobj_©åibuã
 
	gavm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t_©å
 =

22 
__ATTR
(
gë_li°_of_vﬁumes_sh‹t
, 0644, 
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t_show
, 
NULL
);

24 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_vﬁume_öfo_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

26 
INT
 
cou¡
 = 0;

27 
CHAR
 *
±r
 = 
buf
;

28 
cou¡
 = 
	`avm_gë_£t_vﬁume_öfo
(
buf
);

29  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_£t_vﬁume_öfÿ: %s\n",
avm_sysfs_íåy_gë_£t_vﬁume_öfo
);

30 
	}
}

32 
ssize_t
 
	$avm_sysfs_íåy_gë_£t_vﬁume_öfo_°‹e
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
Àn
)

34 
INT
 
ªt
 = 
SUCCESS
 ;

35 
ªt
 = 
	`ssˇnf
(
buf
, "%s", 
avm_sysfs_íåy_gë_£t_vﬁume_öfo
);

36  
Àn
;

37 
	}
}

39 
ssize_t
 
	$avm_sysfs_íåy_gë_li°_of_vﬁumes_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

41 
INT
 
cou¡
 = 0;

42 
CHAR
 *
±r
 = 
buf
;

43 
cou¡
 = 
	`avm_gë_li°_of_vﬁumes
(
buf
);

44  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_li°_of_vﬁume†: %s\n",
avm_sysfs_íåy_gë_li°_of_vﬁumes
);

45 
	}
}

47 
ssize_t
 
	$avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t_show
(
kobje˘
 *
kobj
, 
kobj_©åibuã
 *
©å
, *
buf
)

49 
INT
 
cou¡
 = 0;

50 
CHAR
 *
±r
 = 
buf
;

51 
cou¡
 = 
	`avm_gë_li°_of_vﬁumes_sh‹t
(
buf
);

52  
	`•rötf
((
±r
 +
cou¡
), "#avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹à: %s\n",
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
);

53 
	}
}

55 
INT
 
	$avm_sysfs_vﬁume_ígöe_öô
(
VOID
)

57 
INT
 
ªt
 = 
SUCCESS
;

58 
dz_kobj
 = 
	`kobje˘_¸óã_™d_add
("vﬁume_ígöe", 
sysfs_avm_kî√l_kobj
);

59 i‡(!
dz_kobj
)

60  -
ENOMEM
;

61 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_£t_vﬁume_öfo_©å
.
©å
);

62 i‡(
ªt
 =
SUCCESS
) {

63 
	`LOGSYS
("sysfsÉntry /sys/avm/volume_engine/get_set_volume_info created \n");

65 
	`LOGSYSE
("sysfsÉntry /sys/avm/volume_engine/get_set_volume_info creation failed \n");

66 
RETURNF
;

69 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_li°_of_vﬁumes_©å
.
©å
);

70 i‡(
ªt
 =
SUCCESS
) {

71 
	`LOGSYS
("sysfsÉntry /sys/avm/volume_engine/get_list_of_volumes created \n");

73 
	`LOGSYSE
("sysfsÉntry /sys/avm/volume_engine/get_list_of_volumes creation failed \n");

74 
RETURNF
;

77 
ªt
 = 
	`sysfs_¸óã_fûe
(
dz_kobj
,&
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t_©å
.
©å
);

78 i‡(
ªt
 =
SUCCESS
) {

79 
	`LOGSYS
("sysfsÉntry /sys/avm/volume_engine/get_list_of_volumes_short created \n");

81 
	`LOGSYSE
("sysfsÉntry /sys/avm/volume_engine/get_list_of_volumes_short creation failed \n");

82 
RETURNF
;

85 
RETURNS
;

87 
	}
}

88 
RVOID
 
	$avm_sysfs_vﬁume_ígöe_exô
(
VOID
)

90 
	`kobje˘_put
(
dz_kobj
);

91 
	`LOGSYS
("dz_sysfs freed\n");

92 
	}
}

	@sysfs_engine/target_engine_sysfs_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

18 
INT
 
dz_swôch_„c_ígöe
;

19 
INT
 
dz_swôch_bec_ígöe
;

20 
INT
 
dz_swôch_dedu≥_ígöe
;

21 
INT
 
dz_swôch_Æignmít_ígöe
;

23 
INT
 
dz_swôch_èrgë_i›©h
;

27 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

28 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

33 
SIZE
 
TARGET_DEVICE_SIZE
;

35 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

36 
NAME
 
DATA_DISK_DEVICE_NAME
;

37 
OBJECT_LIST
 
globÆ_obje˘_li°
;

39 
PSUPERBLOCK
 
su≥rblock
;

40 
èrgë_ty≥
 
dzavm
;

42 
CHAR
 
avm_sysfs_íåy_gë_èrgë_«me
[
DZ_SYSFS_PAGE_SIZE
];

43 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

44 
INT
 
	$avm_gë_èrgë_«me
(
CHAR
 *
buf
)

46 
UINT
 
Àn
 = 0;

47 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_èrgë_«me
;

48 i‡(!
aiß_devi˚_obje˘
) {

51 
	`mem£t
(
avm_sysfs_íåy_gë_èrgë_«me
, 0, 
DZ_SYSFS_PAGE_SIZE
);

53 
Àn
 = 
	`°æí
(
aiß_devi˚_obje˘
->
obj
.
obj_«me
);

55 
	`mem˝y
(
±r
, 
aiß_devi˚_obje˘
->
obj
.
obj_«me
, 
Àn
);

56 
±r
 +
Àn
;

57 
	`mem˝y
(
±r
, "|", 1);

58 
±r
 += 1;

60 
Àn
 = 
	`°æí
(
aiß_devi˚_obje˘
->
obj
.
obj_uuid
);

61 
	`mem˝y
(
±r
, 
aiß_devi˚_obje˘
->
obj
.
obj_uuid
, 
Àn
);

62 
±r
 +
Àn
;

64 
	}
}

66 
CHAR
 
avm_sysfs_íåy_gë_èrgë_back°‹e_«me
[
DZ_SYSFS_PAGE_SIZE
];

67 
INT
 
	$avm_gë_èrgë_back°‹e_«me
(
CHAR
 *
buf
)

69 
UINT
 
Àn
 = 0;

70 i‡(!
aiß_devi˚_obje˘
) {

73 
	`mem£t
(
avm_sysfs_íåy_gë_èrgë_back°‹e_«me
, 0, 
DZ_SYSFS_PAGE_SIZE
);

74 
Àn
 = 
	`°æí
(
aiß_devi˚_obje˘
->
obj
.
obj_dm_dev_«me
);

75 
	`mem˝y
(
avm_sysfs_íåy_gë_èrgë_back°‹e_«me
, 
aiß_devi˚_obje˘
->
obj
.
obj_dm_dev_«me
, 
Àn
);

77 
	}
}

79 
CHAR
 
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs
[
DZ_SYSFS_PAGE_SIZE
];

80 
INT
 
	$avm_gë_èrgë_devi˚_size_byãs
(
CHAR
 *
buf
)

82 
CHAR
 *
devi˚_«me
 = 
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs
;

83 
INT
 
ªt
 = 0;

84 
ULONG
 
size_ö_byãs
 = 0;

85 
	`LOGSYS
("I≈uàDevi˚ Namê: %s\n", 
devi˚_«me
);

87 
ªt
 = 
	`dz_gë_devi˚_size
(
devi˚_«me
, &
size_ö_byãs
);

88 i‡(
ªt
 == 0) {

89 
	`•rötf
(
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs
, "\n%lu", 
size_ö_byãs
);

90 
	`LOGSYS
("Sizêo‡devi˚ i†%lu byãs\n", 
size_ö_byãs
);

92 
	`•rötf
(
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs
, "%d", -1 );

93 
	`LOGSYS
("Sizêo‡devi˚ %†i†-1 byã. ", 
devi˚_«me
);

94 
	`LOGSYS
("IOCTL faûed wôhÉº‹ codê%d\n", 
ªt
);

98 
	}
}

100 
CHAR
 
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks
[
DZ_SYSFS_PAGE_SIZE
];

101 
INT
 
	$avm_gë_èrgë_devi˚_size_blocks
(
CHAR
 *
buf
)

103 
CHAR
 *
devi˚_«me
 = 
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks
;

104 
INT
 
ªt
 = 0;

105 
ULONG
 
size_ö_blocks
 = 0;

106 
	`LOGSYS
("I≈uàDevi˚ Namê: %s\n", 
devi˚_«me
);

108 
ªt
 = 
	`dz_gë_devi˚_size
(
devi˚_«me
, &
size_ö_blocks
);

109 i‡(
ªt
 == 0) {

110 
size_ö_blocks
 = (size_ö_block†/ 
SECTOR_SIZE
);

111 
	`•rötf
(
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks
, "\n%lu", 
size_ö_blocks
);

112 
	`LOGSYS
("Sizêo‡devi˚ i†%lu block†(512 byã†block)\n", 
size_ö_blocks
);

114 
	`•rötf
(
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks
, "%d", -1 );

115 
	`LOGSYS
("Sizêo‡devi˚ %†i†-1 block. ", 
devi˚_«me
);

116 
	`LOGSYS
("IOCTL faûed wôhÉº‹ codê%d\n", 
ªt
);

120 
	}
}

122 
U64
 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode
;

123 
INT
 
	$avm_gë_èrgë_∑s°hrough_mode
(
CHAR
 *
buf
)

125 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode
, 
dz_swôch_∑s°hrough_mode
);

126 
	}
}

128 
INT
 
	$avm_£t_èrgë_∑s°hrough_mode
(
U64
 
buf
)

130 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_∑s°hrough_mode
, 
buf
);

131 
	}
}

133 
U64
 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad
;

134 
INT
 
	$avm_gë_èrgë_∑s°hrough_ªad
(
CHAR
 *
buf
)

136 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad
, 
dz_swôch_∑s°hrough_ªad
);

137 
	}
}

139 
INT
 
	$avm_£t_èrgë_∑s°hrough_ªad
(
U64
 
buf
)

141 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_∑s°hrough_ªad
, 
buf
);

142 
	}
}

144 
U64
 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe
;

145 
INT
 
	$avm_gë_èrgë_∑s°hrough_wrôe
(
CHAR
 *
buf
)

147 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe
, 
dz_swôch_∑s°hrough_wrôe
);

148 
	}
}

150 
INT
 
	$avm_£t_èrgë_∑s°hrough_wrôe
(
U64
 
buf
)

152 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_∑s°hrough_wrôe
, 
buf
);

153 
	}
}

155 
U64
 
avm_sysfs_íåy_gë_£t_èrgë_lba_block_size
;

156 
INT
 
	$avm_gë_èrgë_lba_block_size
(
CHAR
 *
buf
)

158 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_èrgë_lba_block_size
, 
dz_swôch_∑s°hrough_wrôe
);

159 
	}
}

161 
INT
 
	$avm_£t_èrgë_lba_block_size
(
U64
 
buf
)

163 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_∑s°hrough_wrôe
, 
buf
);

164 
	}
}

167 
INT
 
	$avm_do_wrôe_io
(
CHAR
 *
buf
)

169 
	`LOGSYS
("%s",
__func__
);

170 
	`dz_gíî©e_wrôe_io
();

172 
	}
}

174 
INT
 
	$avm_do_ªad_io
(
CHAR
 *
buf
)

176 
	`LOGSYS
("%s",
__func__
);

177 
	`dz_gíî©e_ªad_io
();

179 
	}
}

181 
INT
 
	$avm_do_zîo_io
(
CHAR
 *
buf
)

183 
	`LOGSYS
("%s",
__func__
);

184 
	`dz_gíî©e_zîo_io
();

186 
	}
}

188 
INT
 
dz_doubÀ_∑ge
;

189 
INT
 
	$avm_do_wrôe_vîify_io
(
CHAR
 *
buf
)

191 
	`LOGSYS
("%s",
__func__
);

192 
	`¥ötk
(
KERN_ERR
"\n");

193 
	`LOGSYS
("Generate Write Verify IO With Normal Pages Allocation\n");

194 
dz_doubÀ_∑ge
 = 0;

195 
	`dz_gíî©e_wrôe_vîify_io
();

196 
	`LOGSYS
("Generate Write Verify IO With Double Pages Allocation\n");

197 
dz_doubÀ_∑ge
 = 1;

198 
	`dz_gíî©e_wrôe_vîify_io
();

199 
	`¥ötk
(
KERN_ERR
"\n");

201 
	}
}

203 
CHAR
 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚
[
DZ_SYSFS_PAGE_SIZE
];

204 
U64
 
avm_sysfs_íåy_issue_ªad_io_©_£˘‹
;

205 
INT
 
avm_sysfs_íåy_issue_ªad_io_wôh_size
;

217 
RINT
 
	$dz_gíî©e_ªad_io
(
VOID
)

219 
INT
 
ªt
 = 
SUCCESS
;

220 
IOREQUEST
 
i‹eque°
;

221 
DATA_PAGES_T
 
d©a_∑ges
;

222 
	`MEMSET
(&
i‹eque°
);

225 
	`LOGSYS
("avm_sysfs_íåy_issue_ªad_io_⁄_devi˚ = %s\n", 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚
);

226 
	`LOGSYS
("avm_sysfs_íåy_issue_ªad_io_©_£˘‹ = %Œi\n", 
avm_sysfs_íåy_issue_ªad_io_©_£˘‹
);

227 
	`LOGSYS
("avm_sysfs_íåy_issue_ªad_io_wôh_sizê%d\n", 
avm_sysfs_íåy_issue_ªad_io_wôh_size
);

229 
i‹eque°
.
i‹_£˘‹
 = 
avm_sysfs_íåy_issue_ªad_io_©_£˘‹
;

230 
i‹eque°
.
i‹_size
 = 
avm_sysfs_íåy_issue_ªad_io_wôh_size
;

231 
ªt
 = 
	`dz_ªad_d©a_‰om_block_devi˚
(&
i‹eque°
, 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚
, &
d©a_∑ges
);

232 i‡(
ªt
 !
SUCCESS
) {

233 
	`LOGSYSE
("IO Ród Faûuª o¿devi˚ %†\n", 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚
);

235 
	`LOGSYS
("IO Read successfully\n");

236 
	`¥öt_d©a_∑ges
(&
d©a_∑ges
);

237 
	`dz_‰ì_d©a_∑ges
(&
d©a_∑ges
, 
Ál£
);

239 
RETURN
;

240 
	}
}

241 
EXPORT_SYMBOL
(
dz_gíî©e_ªad_io
);

243 
CHAR
 
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚
[
DZ_SYSFS_PAGE_SIZE
];

244 
U64
 
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹
;

245 
INT
 
avm_sysfs_íåy_issue_wrôe_io_wôh_size
;

247 
RINT
 
	$dz_gíî©e_wrôe_io
(
VOID
)

249 
INT
 
ªt
 = 
SUCCESS
;

250 
IOREQUEST
 
i‹eque°
;

251 
	`MEMSET
(&
i‹eque°
);

253 i‡(
avm_sysfs_íåy_issue_wrôe_io_wôh_size
 > 
_16K
) {

255 
	`LOGW
("IO Size is higherÅhan 16K. Limiting itÅo 16K only\n");

256 
avm_sysfs_íåy_issue_wrôe_io_wôh_size
 = 
_16K
;

259 
	`LOGSYS
("avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚ = %s\n", 
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚
);

260 
	`LOGSYS
("avm_sysfs_íåy_issue_wrôe_io_©_£˘‹ = %Œi\n", 
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹
);

261 
	`LOGSYS
("avm_sysfs_íåy_issue_wrôe_io_wôh_sizê%d\n", 
avm_sysfs_íåy_issue_wrôe_io_wôh_size
);

263 
i‹eque°
.
i‹_£˘‹
 = 
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹
;

264 
i‹eque°
.
i‹_size
 = 
avm_sysfs_íåy_issue_wrôe_io_wôh_size
;

265 
i‹eque°
.
i‹_¥iv©e
 = 
	`dz_gë_io_d©a
(i‹eque°.
i‹_size
);

269 
ªt
 = 
	`dz_wrôe_d©a_to_block_devi˚
(&
i‹eque°
, 
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚
);

270 i‡(
ªt
 !
SUCCESS
) {

271 
	`LOGSYSE
("IO Write Failure on device \n");

273 
	`LOGSYS
("IO written successfully\n");

275 
RETURNS
 ;

276 
	}
}

277 
EXPORT_SYMBOL
(
dz_gíî©e_wrôe_io
);

281 
CHAR
 
avm_sysfs_íåy_issue_zîo_io_⁄_devi˚
[
DZ_SYSFS_PAGE_SIZE
];

282 
U64
 
avm_sysfs_íåy_issue_zîo_io_©_£˘‹
;

283 
INT
 
avm_sysfs_íåy_issue_zîo_io_wôh_size
;

285 
RINT
 
	$dz_gíî©e_zîo_io
(
VOID
)

287 
INT
 
ªt
 = 
SUCCESS
;

288 
IOREQUEST
 
i‹eque°
;

289 
	`MEMSET
(&
i‹eque°
);

291 i‡(
avm_sysfs_íåy_issue_zîo_io_wôh_size
 > 
_16K
) {

293 
	`LOGW
("IO Size is higherÅhan 16K. Limiting itÅo 16K only\n");

294 
avm_sysfs_íåy_issue_zîo_io_wôh_size
 = 
_16K
;

297 
	`LOGSYS
("avm_sysfs_íåy_issue_zîo_io_⁄_devi˚ = %s\n", 
avm_sysfs_íåy_issue_zîo_io_⁄_devi˚
);

298 
	`LOGSYS
("avm_sysfs_íåy_issue_zîo_io_©_£˘‹ = %Œi\n", 
avm_sysfs_íåy_issue_zîo_io_©_£˘‹
);

299 
	`LOGSYS
("avm_sysfs_íåy_issue_zîo_io_wôh_sizê%d\n", 
avm_sysfs_íåy_issue_zîo_io_wôh_size
);

301 
i‹eque°
.
i‹_£˘‹
 = 
avm_sysfs_íåy_issue_zîo_io_©_£˘‹
;

302 
i‹eque°
.
i‹_size
 = 
avm_sysfs_íåy_issue_zîo_io_wôh_size
;

304 
i‹eque°
.
i‹_¥iv©e
 = 
	`dz_kmÆloc
(i‹eque°.
i‹_size
, 
GFP_KERNEL
|
__GFP_ZERO
);

307 
ªt
 = 
	`dz_wrôe_d©a_to_block_devi˚
(&
i‹eque°
, 
avm_sysfs_íåy_issue_zîo_io_⁄_devi˚
);

308 i‡(
ªt
 !
SUCCESS
) {

309 
	`LOGSYSE
("Zeroed IO Failure on device \n");

311 
	`LOGSYS
("Zeroed IO written successfully\n");

313 
	`dz_k‰ì
(
i‹eque°
.
i‹_¥iv©e
, i‹eque°.
i‹_size
);

314 
RETURNS
 ;

315 
	}
}

316 
EXPORT_SYMBOL
(
dz_gíî©e_zîo_io
);

319 
CHAR
 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚
[
DZ_SYSFS_PAGE_SIZE
];

320 
U64
 
avm_sysfs_íåy_issue_ªad_io_©_£˘‹
;

321 
INT
 
avm_sysfs_íåy_issue_ªad_io_wôh_size
;

322 
INT
 
avm_sysfs_íåy_wrôe_vîify_io
;

324 
RINT
 
	$dz_gíî©e_wrôe_vîify_io
(
VOID
)

326 
INT
 
ªt
 = 
SUCCESS
;

327 
UINT
 
pg˙t
 = 0;

328 
PVOID
 
∑ged©a
 = 
NULL
;

329 
CHAR
 *
ªadbuf
 = 
NULL
;

330 
CHAR
 *
¥ódbuf
 = 
NULL
;

331 
INT
 
i
 = 0;

332 
BOOL
 
ßme
 = 
åue
;

333 
DATA_PAGES_T
 
d©a_∑ges
;

335 
IOREQUEST
 
i‹eque°
;

336 
	`MEMSET
(&
i‹eque°
);

337 
ªadbuf
 = 
	`vmÆloc
(
_16K
);

338 i‡(!
ªadbuf
) {

339 
	`LOGSYSE
("UnableÅoállocate memory forÑeadbuf, hence quitting\n");

340 
avm_sysfs_íåy_wrôe_vîify_io
 = 
TEST_FAILED
;

341 
RETURNF
;

343 
	`MEMSET
(
ªadbuf
);

344 
¥ódbuf
 = 
ªadbuf
;

347 i‡(
avm_sysfs_íåy_issue_wrôe_io_wôh_size
 > 
_16K
) {

348 
	`LOGW
("IO Size is higherÅhan 16K. Limiting itÅo 16K only for writes\n");

349 
avm_sysfs_íåy_issue_wrôe_io_wôh_size
 = 
_16K
;

353 
i‹eque°
.
i‹_£˘‹
 = 
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹
;

354 
i‹eque°
.
i‹_size
 = 
avm_sysfs_íåy_issue_wrôe_io_wôh_size
;

355 
i‹eque°
.
i‹_¥iv©e
 = 
	`dz_gë_io_d©a
(i‹eque°.
i‹_size
);

356 
	`°∫˝y
(
DATA_DISK_DEVICE_NAME
, 
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚
, 
	`°æí
(avm_sysfs_entry_issue_write_io_on_device));

358 i‡((
avm_sysfs_íåy_issue_wrôe_io_wôh_size
 % 
SECTOR_SIZE
) != 0) {

359 
	`LOGSYSE
("IO MUST be in multiples of 512 bytes i.e. SECTOR_SIZE, hence quitting\n");

360 
avm_sysfs_íåy_wrôe_vîify_io
 = 
TEST_FAILED
;

361 
RETURNF
;

365 
ªt
 = 
	`dz_wrôe_d©a
(&
i‹eque°
);

366 i‡(
ªt
 !
SUCCESS
) {

367 
	`LOGSYSE
("IO Write Failure on device \n");

368 
avm_sysfs_íåy_wrôe_vîify_io
 = 
TEST_FAILED
;

369 
RETURNF
;

371 
	`LOGSYS
("IO written successfully\n");

374 
	`MEMSET
(&
i‹eque°
);

376 i‡(
avm_sysfs_íåy_issue_wrôe_io_wôh_size
 > 
_16K
) {

377 
	`LOGW
("IO Size is higherÅhan 16K. Limiting itÅo 16K only forÑeadsás well\n");

378 
avm_sysfs_íåy_issue_ªad_io_wôh_size
 = 
_16K
;

382 
i‹eque°
.
i‹_£˘‹
 = 
avm_sysfs_íåy_issue_ªad_io_©_£˘‹
;

383 
i‹eque°
.
i‹_size
 = 
avm_sysfs_íåy_issue_ªad_io_wôh_size
;

384 
	`°∫˝y
(
DATA_DISK_DEVICE_NAME
, 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚
, 
	`°æí
(avm_sysfs_entry_issue_read_io_on_device));

385 
ªt
 = 
	`dz_ªad_d©a
(&
i‹eque°
, &
d©a_∑ges
);

386 i‡(
ªt
 !
SUCCESS
) {

387 
	`LOGSYSE
("IO Read Failure on device \n");

388 
avm_sysfs_íåy_wrôe_vîify_io
 = 
TEST_FAILED
;

389 
RETURNF
;

391 
	`LOGSYS
("IO Read successfully\n");

392 
pg˙t
 = 
d©a_∑ges
.pgcnt;

393 
i
=0; i < 
pg˙t
; i++){

394 
PBIOVEC
 
bvec
 = &(
d©a_∑ges
.
∑gevec
[
i
]);

395 
∑ged©a
 = 
	`km≠
(
bvec
->
bv_∑ge
);

396 
∑ged©a
 +
bvec
->
bv_off£t
;

397 
	`mem˝y
(
¥ódbuf
, 
∑ged©a
, 
bvec
->
bv_Àn
);

398 
	`kunm≠
(
bvec
->
bv_∑ge
);

399 
¥ódbuf
 +
bvec
->
bv_Àn
;

401 
	`LOGSYS
("Buffer isÑead successfullyánd copiedÜocally\n");

402 i‡(
	`°∫cmp
(
	`dz_gë_io_d©a
(
i‹eque°
.
i‹_size
), 
ªadbuf
, 
avm_sysfs_íåy_issue_ªad_io_wôh_size
) == 0 ) {

403 
ßme
 = 
åue
;

405 
ßme
 = 
Ál£
;

407 
	`v‰ì
(
ªadbuf
);

408 
	`dz_‰ì_d©a_∑ges
(&
d©a_∑ges
, 
Ál£
);

409 i‡(
ßme
) {

410 
	`LOGSYS
("\nRESULT:PASSED: Write Dataánd Readback Dataáre same\n");

411 
avm_sysfs_íåy_wrôe_vîify_io
 = 
TEST_PASSED
;

413 
	`LOGSYS
("\nRESULT:FAILED: Write Dataánd Readback Dataáre different\n");

414 
avm_sysfs_íåy_wrôe_vîify_io
 = 
TEST_FAILED
;

417 
RETURNS
 ;

418 
	}
}

420 
EXPORT_SYMBOL
(
dz_gíî©e_wrôe_vîify_io
);

422 
U64
 
avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h
;

424 
INT
 
	$avm_gë_èrgë_swôch_i›©h
(
CHAR
 *
buf
)

426 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h
, 
dz_swôch_èrgë_i›©h
);

427 
	}
}

429 
PDM_TARGET
 
AVM_DM_TARGET
;

430 
INT
 
	$avm_£t_èrgë_swôch_i›©h
(
U64
 
buf
)

433 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_èrgë_i›©h
, 
buf
);

434 
dzavm
.
m≠
 = 
dz_avm_èrgë_m≠
;

435 
dzavm
.
˘r
 = 
NULL
;

436 
	}
}

	@sysfs_engine/volume_engine_sysfs_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

18 
INT
 
dz_swôch_„c_ígöe
;

19 
INT
 
dz_swôch_bec_ígöe
;

20 
INT
 
dz_swôch_dedu≥_ígöe
;

21 
INT
 
dz_swôch_Æignmít_ígöe
;

25 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

26 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

31 
SIZE
 
TARGET_DEVICE_SIZE
;

33 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

34 
NAME
 
DATA_DISK_DEVICE_NAME
;

35 
OBJECT_LIST
 
globÆ_obje˘_li°
;

36 
U64
 
lba_èbÀ_size
;

37 
U64
 
pba_èbÀ_size
;

38 
U64
 
hash_èbÀ_size
;

39 
U32
 
numbî_of_l⁄gs_f‹_pba
;

40 
U32
 
numbî_of_l⁄gs_f‹_lba
;

41 
U32
 
numbî_of_l⁄gs_f‹_gpba
;

42 
ULONG
 
mëad©a_Êush_öãrvÆ
;

43 
U64
 
mëad©a_lba_èbÀ_size
;

44 
U64
 
mëad©a_lba_lock_èbÀ_size
;

45 
U64
 
avm_sysfs_íåy_‰ì_∑ge_cou¡
;

46 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes
[
DZ_SYSFS_PAGE_SIZE
];

47 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
[
DZ_SYSFS_PAGE_SIZE
];

48 
PPBA_BLOCK
 
pba_èbÀ
;

49 
PHASH_BLOCK
 
hash_èbÀ
;

50 
PLBA_BLOCK
 
lba_èbÀ
;

52 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

53 
ATOMIC64
 
bec_ˇche_hô
;

54 
ATOMIC64
 
bec_ˇche_miss
;

55 
ATOMIC64
 
bec_ˇche_dñëe
;

56 
ULONG
 
bec_size
;

57 
INT
 
bec_cutoff_nodes
;

58 
INT
 
bec_cutoff_≥r˚¡
;

59 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

60 
U64
 
time_Êush_¥ï¨e_°¨t
;

61 
U64
 
time_Êush_°¨t
;

62 
U64
 
time_Êush_íd
;

63 
U64
 
time_„c_wrôe_°¨t
;

64 
U64
 
time_„c_wrôe_swôch
;

65 
PFEC_TABLE
 
„c_èbÀs_Êush
;

66 
ATOMIC64
 
„c_a˘ive_cou¡_£quí˚
;

67 
ATOMIC64
 
„c_‰ì_cou¡_£quí˚
;

68 
ATOMIC64
 
„c_cur_Êush_cou¡
;

69 
ATOMIC64
 
„c_Êush_›s_cou¡
;

70 
ATOMIC64
 
„c_cur_Êush_›s_cou¡
;

71 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

72 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

73 
U64
 
„c_a˘ive_cou¡
;

74 
ATOMIC64
 
dedu≥_disk_ªads
;

75 
ATOMIC64
 
dedu≥_disk_wrôes
;

76 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

77 
ATOMIC64
 
dedu≥_ˇche_hôs
;

78 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

79 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

80 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

81 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

82 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

83 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

84 
USHORT
 
dedu≥_num_thªads
;

85 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

86 
PDZ_THREAD_POOL
 
rdedu≥_thªad_poﬁ
;

87 
PDZ_THREAD_POOL
 
wdedu≥_thªad_poﬁ
;

88 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

89 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

90 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

91 
PDZ_THREAD_POOL
 
Æign_wrôe_thªad_poﬁ
;

92 
PDZ_THREAD_POOL
 
Êush_thªad_poﬁ
;

93 
PDZ_THREAD_POOL
 
mëad©a_Êush_thªad_poﬁ
;

94 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡
;

95 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads
;

96 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
;

97 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
;

98 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
;

99 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

100 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

101 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

102 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

103 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

104 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

105 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

107 
ATOMIC64
 
Æign_iocou¡_disk_ªad
;

108 
ATOMIC64
 
Æign_iocou¡_disk_ªad_öã∫Æ
;

109 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

110 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

111 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

112 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

113 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

114 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

115 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

117 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes
;

118 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
;

119 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
;

120 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
;

121 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

122 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

123 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

124 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

125 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

126 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

127 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

129 
ATOMIC64
 
Æign_iocou¡_disk_wrôe
;

130 
ATOMIC64
 
Æign_iocou¡_disk_wrôe_öã∫Æ
;

131 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

132 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

133 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

134 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

135 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

136 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

137 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

139 
PSUPERBLOCK
 
su≥rblock
;

141 
INT
 
	$avm_gë_li°_of_vﬁumes_sh‹t
(
CHAR
 *
buf
)

143 
PDEVICE_OBJECT
 
obje˘
 = 
NULL
;

144 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
;

147 
	`mem£t
(
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
, 0, 
DZ_SYSFS_PAGE_SIZE
);

148 
	`mem˝y
(
±r
, "\n", 1);

149 
±r
 += 1;

151 i‡(!
aiß_devi˚_obje˘
) {

155 
	`•ö_lock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

157 
	`li°_f‹_óch_íåy
(
obje˘
, &
globÆ_obje˘_li°
.
obje˘q_hód
, 
obje˘q
) {

158 i‡(!
obje˘
) {

161 i‡(
obje˘
->
obj_ty≥
 =
åue
) {

165 
±r
 +
	`•rötf
’å, "%s\n", 
obje˘
->
obj_«me
);

168 
	`•ö_u∆ock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

170 
	}
}

173 
INT
 
	$avm_gë_li°_of_vﬁumes
(
CHAR
 *
buf
)

175 
PDEVICE_OBJECT
 
obje˘
 = 
NULL
;

176 
UINT
 
found
 = 0;

177 
UINT
 
cou¡
 = 0;

179 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_li°_of_vﬁumes
;

182 
	`mem£t
(
avm_sysfs_íåy_gë_li°_of_vﬁumes
, 0, 
DZ_SYSFS_PAGE_SIZE
);

183 
	`mem˝y
(
±r
, "\n", 1);

184 
±r
 += 1;

186 
±r
 +
	`•rötf
(ptr, "\nListing Volumes Begin\n");

187 
±r
 +
	`•rötf
(ptr, "\n---------------------\n");

189 i‡(!
aiß_devi˚_obje˘
) {

190 
±r
 +
	`•rötf
(ptr, "\nAISA Target Not Found\n");

191 
±r
 +
	`•rötf
(ptr, "\n---------------------\n");

192 
±r
 +
	`•rötf
(ptr, "\nListing Volumes End\n");

196 
	`•ö_lock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

198 
	`li°_f‹_óch_íåy
(
obje˘
, &
globÆ_obje˘_li°
.
obje˘q_hód
, 
obje˘q
) {

199 i‡(!
obje˘
) {

202 i‡(
obje˘
->
obj_ty≥
 =
åue
) {

206 
±r
 +
	`•rötf
(ptr,

211 ++
cou¡
,

212 
obje˘
->
obj_«me
,

213 
obje˘
->
obj_«me
,

214 
obje˘
->
obj_uuid
);

216 
found
 = 1;

220 
	`•ö_u∆ock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

221 i‡(
found
 == 0) {

222 
±r
 +
	`•rötf
(ptr, "\nVolume Not Found\n");

224 
±r
 +
	`•rötf
(ptr, "\n-------------------\n");

225 
±r
 +
	`•rötf
’å, "\nTŸÆ %d Vﬁume†Found\n", 
cou¡
);

226 
±r
 +
	`•rötf
(ptr, "\nListing Volumes End\n");

228 
	}
}

230 
CHAR
 
avm_sysfs_íåy_gë_£t_vﬁume_öfo
[
DZ_SYSFS_PAGE_SIZE
];

231 
INT
 
	$avm_gë_£t_vﬁume_öfo
(
CHAR
 *
buf
)

233 
UINT
 
Àn
 = 0;

234 
PDEVICE_OBJECT
 
obje˘
 = 
NULL
;

236 
CHAR
 *
«me
 = 
avm_sysfs_íåy_gë_£t_vﬁume_öfo
;

237 
CHAR
 *
∑ª¡_«me
 = 
NULL
;

238 
CHAR
 
obj_ty≥_°r
[64] = "\0";

239 
INT
 
found
 = 0;

240 
BOOL
 
èrgë_found
 = 
FALSE
;

242 
Àn
 = 
	`°æí
(
«me
);

243 
	`LOGVOL
("Àn=%d\n", 
Àn
);

244 
	`LOGVOL
("«me=<%s>\n", 
«me
);

245 i‡(!
aiß_devi˚_obje˘
) {

246 
	`•rötf
(
avm_sysfs_íåy_gë_£t_vﬁume_öfo
, "\nAISA Target Not Found\n");

250 
	`•ö_lock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

252 
	`li°_f‹_óch_íåy
(
obje˘
, &
globÆ_obje˘_li°
.
obje˘q_hód
, 
obje˘q
) {

253 i‡(!
obje˘
) {

256 i‡(
	`°rcmp
(
«me
, 
obje˘
->
obj_«me
) == 0 ) {

258 
obje˘
->
obj_ty≥
) {

259 
OBJECT_TYPE_AISA
:

260 
∑ª¡_«me
 = 
NULL
;

261 
èrgë_found
 = 
TRUE
;

264 
OBJECT_TYPE_DATA_VOLUME
:

265 
∑ª¡_«me
 = 
obje˘
->
obj_dm_dev_«me
;

266 
	`°r˝y
(
obj_ty≥_°r
, "DATA_VOLUME");

269 
OBJECT_TYPE_DATA_VOLUME_SNAPSHOT_READ
:

270 
∑ª¡_«me
 = ((
PDEVICE_OBJECT
)(((
PDDVOL
)
obje˘
)->
ddvﬁ_∑ª¡
))->
obj_«me
;

271 
	`°r˝y
(
obj_ty≥_°r
, "DATA_VOLUME_SNAPSHOT_READ");

274 
OBJECT_TYPE_DATA_VOLUME_SNAPSHOT_WRITE
:

275 
∑ª¡_«me
 = ((
PDEVICE_OBJECT
)(((
PDDVOL
)
obje˘
)->
ddvﬁ_∑ª¡
))->
obj_«me
;

276 
	`°r˝y
(
obj_ty≥_°r
, "DATA_VOLUME_SNAPSHOT_WRITE");

279 
OBJECT_TYPE_VM_VOLUME
:

280 
∑ª¡_«me
 = 
obje˘
->
obj_dm_dev_«me
;

281 
	`°r˝y
(
obj_ty≥_°r
, "VIRTUAL_MACHINE_VOLUME");

284 
OBJECT_TYPE_VM_VOLUME_SNAPSHOT_READ
:

285 
∑ª¡_«me
 = ((
PDEVICE_OBJECT
)(((
PDDVOL
)
obje˘
)->
ddvﬁ_∑ª¡
))->
obj_«me
;

286 
	`°r˝y
(
obj_ty≥_°r
, "VIRTUAL_MACHINE_VOLUME_SNAPSHOT_READ");

289 
OBJECT_TYPE_VM_VOLUME_SNAPSHOT_WRITE
:

290 
∑ª¡_«me
 = ((
PDEVICE_OBJECT
)(((
PDDVOL
)
obje˘
)->
ddvﬁ_∑ª¡
))->
obj_«me
;

291 
	`°r˝y
(
obj_ty≥_°r
, "VIRTUAL_MACHINE_VOLUME_SNAPSHOT_WRITE");

295 i‡(
èrgë_found
) {

296 
	`•rötf
(
avm_sysfs_íåy_gë_£t_vﬁume_öfo
,

321 
obje˘
->
obj_«me
,

322 
obje˘
->
obj_«me
,

323 
obje˘
->
obj_ty≥
,

324 
obj_ty≥_°r
,

325 
obje˘
->
obj_magi˙o
,

326 
obje˘
->
obj_uuid
,

327 
obje˘
->
obj_°¨t_lba
,

328 
obje˘
->
obj_íd_lba
,

329 ((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
),

330 (
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1),

331 (((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
Ë/ 
KB
),

332 (((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
Ë/ 
MB
),

333 (((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
Ë/ 
GB
),

334 ((
obje˘
->
obj_íd_lba
-obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
)/
PAGE_SIZE
,

335 
PAGE_SIZE
,

336 
obje˘
->
obj_Êags
,

337 
obje˘
->
obj_Êags
,

338 
obje˘
->
obj_d©e
[0], object->obj_date[1], object->obj_date[2], object->obj_date[3],

339 
obje˘
->
obj_d©e
[4], object->obj_date[5], object->obj_date[6], object->obj_date[7],

340 
obje˘
->
obj_time
[0], object->obj_time[1], object->obj_time[2],

341 
obje˘
->
obj_time
[3], object->obj_time[4], object->obj_time[5],

342 
obje˘
->
obj_dm_dev_«me
);

343 
found
 = 1;

345 
èrgë_found
 = 
FALSE
;

348 
	`•rötf
(
avm_sysfs_íåy_gë_£t_vﬁume_öfo
,

375 
obje˘
->
obj_«me
,

376 
obje˘
->
obj_«me
,

377 
obje˘
->
obj_ty≥
,

378 
obj_ty≥_°r
,

379 
obje˘
->
obj_magi˙o
,

380 
obje˘
->
obj_uuid
,

381 
obje˘
->
obj_°¨t_lba
,

382 
obje˘
->
obj_íd_lba
,

383 ((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
),

384 (
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1),

385 (((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
Ë/ 
KB
),

386 (((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
Ë/ 
MB
),

387 (((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
Ë/ 
GB
),

388 ((
obje˘
->
obj_íd_lba
-obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
)/
PAGE_SIZE
,

389 
PAGE_SIZE
,

390 
obje˘
->
obj_Êags
,

391 
obje˘
->
obj_Êags
,

392 
obje˘
->
obj_d©e
[0], object->obj_date[1], object->obj_date[2], object->obj_date[3],

393 
obje˘
->
obj_d©e
[4], object->obj_date[5], object->obj_date[6], object->obj_date[7],

394 
obje˘
->
obj_time
[0], object->obj_time[1], object->obj_time[2],

395 
obje˘
->
obj_time
[3], object->obj_time[4], object->obj_time[5],

396 
∑ª¡_«me
,

397 
∑ª¡_«me
,

398 
obje˘
->
obj_dm_dev_«me
);

399 
found
 = 1;

404 
	`•ö_u∆ock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

405 i‡(
found
 == 0) {

406 
	`•rötf
(
avm_sysfs_íåy_gë_£t_vﬁume_öfo
, "\nVolume NOT Found\n");

409 
	}
}

	@target_engine/aisa_init.c

9 
	~"¥ŸŸy≥s.h
"

12 
INT
 
dz_swôch_∑s°hrough_mode
;

13 
INT
 
dz_swôch_∑s°hrough_ªad
;

14 
INT
 
dz_swôch_∑s°hrough_wrôe
;

15 
INT
 
dz_swôch_Áke_wrôe
;

16 
INT
 
dz_swôch_Áke_ªad
;

18 
INT
 
dz_swôch_„c_ígöe
;

20 
moduÀ_∑øm
(
dz_swôch_∑s°hrough_mode
, , 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
);

21 
moduÀ_∑øm
(
dz_swôch_∑s°hrough_ªad
, , 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
);

22 
moduÀ_∑øm
(
dz_swôch_∑s°hrough_wrôe
, , 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
);

23 
moduÀ_∑øm
(
dz_swôch_Áke_ªad
, , 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
);

24 
moduÀ_∑øm
(
dz_swôch_Áke_wrôe
, , 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
);

26 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

27 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

29 
DDE_COUNTERS
 
dz_dde_cou¡îs
;

30 
PDDE_COUNTERS
 
pdz_dde_cou¡îs
;

32 
FEC_COUNTERS
 
dz_„c_cou¡îs
;

33 
PFEC_COUNTERS
 
pdz_„c_cou¡îs
;

35 
BEC_COUNTERS
 
dz_bec_cou¡îs
;

36 
PBEC_COUNTERS
 
pdz_bec_cou¡îs
;

38 
AVM_COUNTERS
 
dz_avm_cou¡îs
;

39 
PAVM_COUNTERS
 
pdz_avm_cou¡îs
;

42 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads
;

43 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
;

44 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
;

45 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
;

48 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes
;

49 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
;

50 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
;

51 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
;

54 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡
;

56 
U64
 
tŸ_‰ì_•a˚
;

58 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

59 
PBLOCK_DEVICE
 
DATA_DISK_DEVICE
;

60 
NAME
 
DATA_DISK_DEVICE_NAME
;

62 
PBLOCK_DEVICE
 
METADATA_DISK_DEVICE
;

63 
NAME
 
METADATA_DISK_DEVICE_NAME
;

65 
PBLOCK_DEVICE
 
TARGET_DEVICE
;

66 
NAME
 
TARGET_DEVICE_NAME
;

68 
SIZE
 
TARGET_DEVICE_SIZE
;

69 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

71 
PBLOCK_DEVICE
 
avm_mëad©a_bdev
;

74 
OBJECT_LIST
 
globÆ_obje˘_li°
;

75 
BITMAP
 
pba_bôm≠
;

77 
PPBA_BLOCK
 
dedu≥_pba_èbÀ
;

78 
PHASH_BLOCK
 
dedu≥_hash_èbÀ
;

79 
PLBA_BLOCK
 
dedu≥_lba_èbÀ
;

81 
U64
 
mëad©a_lba_lock_èbÀ_size
;

82 
PMD_LOCK
 
mëad©a_lba_lock_èbÀ
;

84 
U64
 
mëad©a_lba_èbÀ_size
;

85 
PMD_BLOCK
 
mëad©a_lba_èbÀ
;

87 
SPINLOCK
 
lba_èbÀ_lock
;

88 
SPINLOCK
 
hash_èbÀ_lock
;

89 
SPINLOCK
 
pba_èbÀ_lock
;

91 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

92 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

94 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

95 
PDZ_THREAD_POOL
 
Æign_wrôe_thªad_poﬁ
;

97 
PDZ_THREAD_POOL
 
„c_ªad_thªad_poﬁ
;

98 
PDZ_THREAD_POOL
 
„c_wrôe_thªad_poﬁ
;

101 
PSUPERBLOCK
 
su≥rblock
;

103 
PSUPERBLOCK
 
su≥rblock
;

105 
PDM_TARGET
 
	gAVM_DM_TARGET
 = 
NULL
;

107 
èrgë_ty≥
 
	gdzavm
 = {

109 .
«me
 = "AVM_TARGET",

110 .
	gvîsi⁄
 = {1,0,0},

111 .
	gmoduÀ
 = 
THIS_MODULE
,

112 .
	g˘r
 = 
dz_avm_èrgë_˘r
,

113 .
	gdå
 = 
dz_avm_èrgë_då
,

115 .
	gm≠
 = 
dz_avm_èrgë_deÁu…_m≠
,

118 
RINT
 
dz_avm_èrgë_aiß_ªgi°î
(
VOID
);

122 
RINT
 
	$dz_¥o˚ss_io
(
PDM_TARGET
 
èrgë
, 
PBIO
 
bio
)

124 
UINT
 
io_size
 = 
	`DZ_BIO_GET_SIZE
(
bio
);

126 
PIOREQUEST
 
i‹eque°
 = 
	`dz_io_Æloc
();

127 i‡(!
i‹eque°
) {

128 
	`LOGE
("UnableÅoállocate memory for IO completion\n");

129  -
ENOMEM
;

132 
i‹eque°
->
i‹_lba
 = 
	`dz_c⁄vît_£˘‹_to_lba
(
	`DZ_BIO_GET_SECTOR
(
bio
));

136 
i‹eque°
->
i‹_bio
 = 
bio
;

139 
i‹eque°
->
i‹_∑ª¡
 = 
NULL
;

143 
	`ATOMIC_SET
(
i‹eque°
->
i‹_ªf_˙t
, 0);

145 
	`IF_WRITE_BIO
(
bio
) {

146 
i‹eque°
->
i‹_ty≥
 = 
DZ_IOR_TYPE_APPLICATION_IO_WRITE
;

147 
i‹eque°
->
i‹_thªad_poﬁ
 = 
wrôe_thªad_poﬁ
;

148 
	`ATOMIC64_INC
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes
);

150 i‡(
io_size
 < 
LBA_BLOCK_SIZE
) {

151 
	`ATOMIC64_INC
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
);

152 } i‡(
io_size
 =
LBA_BLOCK_SIZE
) {

153 
	`ATOMIC64_INC
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
);

154 } i‡(
io_size
 > 
LBA_BLOCK_SIZE
) {

155 
	`ATOMIC64_INC
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
);

157 
	`dz_q_i‹eque°
(
wrôe_thªad_poﬁ
, 
i‹eque°
);

159 
i‹eque°
->
i‹_ty≥
 = 
DZ_IOR_TYPE_APPLICATION_IO_READ
;

160 
i‹eque°
->
i‹_thªad_poﬁ
 = 
ªad_thªad_poﬁ
;

164 
	`ATOMIC64_INC
(
tŸ_≠∂iˇti⁄_iocou¡_ªads
);

165 i‡(
io_size
 < 
LBA_BLOCK_SIZE
) {

166 
	`ATOMIC64_INC
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
);

168 } i‡(
io_size
 =
LBA_BLOCK_SIZE
) {

169 
	`ATOMIC64_INC
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
);

171 } i‡(
io_size
 > 
LBA_BLOCK_SIZE
) {

172 
	`ATOMIC64_INC
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
);

174 
	`dz_q_i‹eque°
(
ªad_thªad_poﬁ
, 
i‹eque°
);

177  
DM_MAPIO_SUBMITTED
;

178 
	}
}

180 
RINT
 
	$dz_demo_∑s°hrough_wrôe⁄ly
(
PDM_TARGET
 
èrgë
, 
bio
 *bio)

184 
	`DZ_BIO_SET_BDEV
(
bio
, 
aiß_devi˚_obje˘
->
obj
.
obj_dm_dev
->
bdev
);

186 i‡(
	`bio_›
(
bio
Ë=
REQ_OP_WRITE
) {

187 
	`LOGTGT
("AISA-Info: dz_demo_passthrough_writeonly : bio isá WRITEÑequest.... \n");

194 
	`dz_¥o˚ss_œb_ígöe_pùe
((
	`DZ_BIO_GET_SECTOR
(
bio
Ë* 
SECTOR_SIZE
), 
	`DZ_BIO_GET_SIZE
(bio));

197 
	`LOGTGT
("AISA-Info: dz_demo_passthrough_writeonly : bio isá READÑequest.... \n");

201  
DM_MAPIO_SUBMITTED
;

202 
	}
}

204 
RINT
 
	$dz_demo_∑s°hrough_ªad⁄ly
(
PDM_TARGET
 
èrgë
, 
bio
 *bio)

207 
	`DZ_BIO_SET_BDEV
(
bio
, 
aiß_devi˚_obje˘
->
obj
.
obj_dm_dev
->
bdev
);

208 i‡(
	`bio_›
(
bio
Ë=
REQ_OP_WRITE
) {

210 
	`LOGTGT
("AISA-Info: dz_demo_passthrough_readonly : bio isá WRITEÑequest.... \n");

211 
	`BIODONE
(
bio
, 
IO_ERROR_EIO
);

212  
DM_MAPIO_SUBMITTED
;

214 
	`LOGTGT
("AISA-Info: dz_demo_passthrough_readonly : bio isá READÑequest.... \n");

218  
DM_MAPIO_SUBMITTED
;

219 
	}
}

221 
RINT
 
	$dz_demo_∑s°hrough_io
(
PDM_TARGET
 
èrgë
, 
bio
 *bio)

223 i‡(
dz_swôch_∑s°hrough_ªad
) {

224  
	`dz_demo_∑s°hrough_ªad⁄ly
(
èrgë
, 
bio
);

226 i‡(
dz_swôch_∑s°hrough_wrôe
) {

227  
	`dz_demo_∑s°hrough_wrôe⁄ly
(
èrgë
, 
bio
);

231 
	`DZ_BIO_SET_BDEV
(
bio
, 
aiß_devi˚_obje˘
->
obj
.
obj_dm_dev
->
bdev
);

233 i‡(
	`bio_›
(
bio
Ë=
REQ_OP_WRITE
) {

234 
	`LOGTGT
("AISA-Info: dz_demo_passthrough_io : bio isá WRITEÑequest.... \n");

236 
	`LOGTGT
("AISA-Info: dz_demo_passthrough_io : bio isá READÑequest.... \n");

240  
DM_MAPIO_SUBMITTED
;

241 
	}
}

242 
EXPORT_SYMBOL
(
dz_demo_∑s°hrough_io
);

245 
RINT
 
	$dz_avm_èrgë_m≠
(
PDM_TARGET
 
èrgë
, 
bio
 *bio)

247 
INT
 
ªt
 = 
SUCCESS
;

249 i‡(!
aiß_devi˚_obje˘
) {

250 
èrgë
->
îr‹
 = "AISA-Error: IO isÇot supported untilávm device online";

251 
ªt
 = -
EACCES
;

252  
ªt
;

254 
	`ATOMIC64_INC
(
tŸ_≠∂iˇti⁄_iocou¡
);

256 i‡(
dz_swôch_∑s°hrough_mode
) {

257  
	`dz_demo_∑s°hrough_io
(
èrgë
, 
bio
);

259 } i‡(
dz_swôch_Áke_wrôe
) {

260 
	`BIODONE
(
bio
, 
SUCCESS
);

261  
DM_MAPIO_SUBMITTED
;

263 } i‡(
dz_swôch_Áke_ªad
) {

264 
	`BIODONE
(
bio
, 
SUCCESS
);

265  
DM_MAPIO_SUBMITTED
;

268  
	`dz_¥o˚ss_io
(
èrgë
, 
bio
);

269 
	}
}

271 
RINT
 
	$dz_avm_èrgë_deÁu…_m≠
(
PDM_TARGET
 
èrgë
, 
bio
 *bio)

274 i‡(
	`bio_›
(
bio
Ë=
REQ_OP_WRITE
) {

276 
	`LOGTGT
("AISA-Info: dz_avm_target_default_map : Failing. bio isá WRITEÑequest.... \n");

277 
	`BIODONE
(
bio
, 
IO_ERROR_EIO
);

278  
DM_MAPIO_SUBMITTED
;

279 } i‡(
	`bio_›
(
bio
Ë=
REQ_OP_READ
) {

280 
	`LOGTGT
("AISA-Info: dz_avm_target_default_map : Fake Completion of READ IOs. \n");

281 
	`BIODONE
(
bio
, 
SUCCESS
);

282  
DM_MAPIO_SUBMITTED
;

286 
	`LOGTGT
("AISA-Info: dz_avm_target_default_map : Failing. bio isáÇeither READÇor WRITEÑequest.... \n");

287 
	`BIODONE
(
bio
, 
IO_ERROR_EIO
);

288  
DM_MAPIO_SUBMITTED
;

292 
	}
}

294 
RINT
 
	$dz_avm_èrgë_öô_cou¡îs
(
VOID
)

297 
pdz_basic_cou¡îs
 = &
dz_basic_cou¡îs
;

298 
	`MEMSET
(
pdz_basic_cou¡îs
);

300 
pdz_dde_cou¡îs
 = &
dz_dde_cou¡îs
;

301 
	`MEMSET
(
pdz_dde_cou¡îs
);

303 
pdz_„c_cou¡îs
 = &
dz_„c_cou¡îs
;

304 
	`MEMSET
(
pdz_„c_cou¡îs
);

306 
pdz_Æign_cou¡îs
 = &
dz_Æign_cou¡îs
;

307 
	`MEMSET
(
pdz_Æign_cou¡îs
);

309 
pdz_bec_cou¡îs
 = &
dz_bec_cou¡îs
;

310 
	`MEMSET
(
pdz_bec_cou¡îs
);

312 
pdz_avm_cou¡îs
 = &
dz_avm_cou¡îs
;

313 
	`MEMSET
(
pdz_avm_cou¡îs
);

315 
	`BASE_COUNTER_ATOMIC64_SET
(
dz_tŸÆ_mem‹y_c⁄sumed_by_Æl_poﬁs
, 0);

316 
	`BASE_COUNTER_ATOMIC64_SET
(
dz_i‹eque°_Æloc_˙t
, 0);

317 
	`BASE_COUNTER_ATOMIC64_SET
(
dz_i‹eque°_‰ì_˙t
, 0);

318 
	`BASE_COUNTER_ATOMIC64_SET
(
dz_∑ge_Æloc_˙t
, 0);

319 
	`BASE_COUNTER_ATOMIC64_SET
(
dz_∑ge_‰ì_˙t
, 0);

320 
	`BASE_COUNTER_U64_SET
(
„c_ígöe_mem‹y_ußge
, 0);

323 
	`ATOMIC64_SET
(
tŸ_≠∂iˇti⁄_iocou¡
, 0);

324 
	`ATOMIC64_SET
(
tŸ_≠∂iˇti⁄_iocou¡_ªads
, 0);

325 
	`ATOMIC64_SET
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
, 0);

326 
	`ATOMIC64_SET
(
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
, 0);

327 
	`ATOMIC64_SET
(
tŸ_≠∂iˇti⁄_iocou¡_ªads
, 0);

329 
	`ATOMIC64_SET
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes
, 0);

330 
	`ATOMIC64_SET
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
, 0);

331 
	`ATOMIC64_SET
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
, 0);

332 
	`ATOMIC64_SET
(
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
, 0);

334 
	`dz_„c_öô_cou¡îs
();

336 
RETURNS
;

337 
	}
}

339 
RINT
 
	$dz_avm_èrgë_˘r
(
PDM_TARGET
 
èrgë
, 
¨gc
,**
¨gv
)

341 
ªt
 = 0;

343 i‡(
ªt
 !
SUCCESS
) {

344 
exô
;

347 i‡(
dz_swôch_∑s°hrough_mode
) {

348 
	`LOGTGT
("AISA-Info: IO Passthrough isÉnabled\n");

350 
	`LOGTGT
("AISA-Info: IO Passthrough is disabled. IOs will beállowedÅo AISA device\n");

353 
ªt
 = 
	`dz_èrgë_¸óã
(
èrgë
, 
¨gc
, 
¨gv
);

354 i‡(
ªt
 !
SUCCESS
) {

355 
exô
;

358 i‡(
dz_swôch_„c_ígöe
 =
DZ_DISABLED
) {

359 
wrôe_thªad_poﬁ
 = 
Æign_wrôe_thªad_poﬁ
;

360 
ªad_thªad_poﬁ
 = 
Æign_ªad_thªad_poﬁ
;

362 
wrôe_thªad_poﬁ
 = 
„c_wrôe_thªad_poﬁ
;

363 
ªad_thªad_poﬁ
 = 
„c_ªad_thªad_poﬁ
;

366 
AVM_DM_TARGET
 = 
èrgë
;

368 
exô
:

369  
ªt
;

370 
	}
}

372 
VOID
 
	$dz_avm_èrgë_då
(
PDM_TARGET
 
èrgë
)

374 
	`dz_èrgë_de°roy
(
èrgë
);

375 
	}
}

392 
RINT
 
	$dz_èrgë_¸óã
(
dm_èrgë
 *
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
)

405 *
devi˚_ty≥
 = 
NULL
;

406 
	`¥öt_˛i_¨gs
(
èrgë
, 
¨gc
, 
¨gv
);

408 
devi˚_ty≥
 = (*)
¨gv
[2];

414 if(
	`°rcmp
(
devi˚_ty≥
, 
DEVICE_TYPE_AISA
) == 0) {

415 i‡(
aiß_devi˚_obje˘
) {

416 
èrgë
->
îr‹
 = "AISA_Error: AISA Target DeviceálreadyÉxists. ItÇeedsÅo be created only once";

417  -
EINVAL
;

420  
	`dz_èrgë_¸óã_aiß
(
èrgë
, 
¨gc
, 
¨gv
);

454 
RETURNF
;

455 
	}
}

456 
EXPORT_SYMBOL
(
dz_èrgë_¸óã
);

458 
RVOID
 
	$dz_èrgë_de°roy
(
PDM_TARGET
 
èrgë
 )

460 
DEVICE_OBJECT
 *
obj
 = (DEVICE_OBJECT *Ë
èrgë
->
¥iv©e
;

462 
	`LOGTGT
("De°royög AISA Obje˘ %p\n", 
obj
);

463 
	`dz_dq_obje˘
(&
globÆ_obje˘_li°
, 
obj
->
obj_«me
);

464 
	`dm_put_devi˚
(
èrgë
, 
obj
->
obj_dm_dev
);

466 
obj
->
obj_ty≥
) {

468 
OBJECT_TYPE_AISA
:

469 
	`dz_avm_aiß_de°roy
(
obj
);

498 
	}
}

499 
EXPORT_SYMBOL
(
dz_èrgë_de°roy
);

505 
RINT
 
	$dz_èrgë_¸óã_aiß
(
dm_èrgë
 *
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
)

521 
INT
 
ªt
 = 0;

522 
ªque°_queue
 *
queue
 = 
NULL
;

523 
PAVM_DEVICE
 
aiß_devi˚
 = 
	`dz_kmÆloc
((
AVM_DEVICE
), 
GFP_KERNEL
);

524 
b
[
BDEVNAME_SIZE
];

526 i‡(!
aiß_devi˚
) {

527 
èrgë
->
îr‹
 = "AISA-Error:ávm deviceállocation failed";

528 
ªt
 = -
ENOMEM
;

529 
exô_Áûuª
;

532 
	`MEMSET
(
aiß_devi˚
);

533 
aiß_devi˚_obje˘
 = 
aiß_devi˚
;

535 i‡(
	`°æí
(
¨gv
[6]Ë> 
NAME_LENGTH
) {

536 
èrgë
->
îr‹
 = "AISA-Error: MetadeviceÇame isÜongerÅhanÉxpected";

537 
ªt
 = -
EINVAL
;

538 
exô_Áûuª
;

541 i‡(
	`°æí
(
¨gv
[7]Ë> 
MAGICNO_LENGTH
) {

542 
èrgë
->
îr‹
 = "AISA-Error: Metadevice magicnoÜength isÜongerÅhanÉxpected";

543 
ªt
 = -
EINVAL
;

544 
exô_Áûuª
;

546 i‡(
	`°æí
(
¨gv
[8]Ë> 
UUID_LENGTH
) {

547 
èrgë
->
îr‹
 = "AISA-Error: Metadevice UUIDÜength isÜongerÅhanÉxpected";

548 
ªt
 = -
EINVAL
;

549 
exô_Áûuª
;

551 i‡(
	`°æí
(
¨gv
[9]Ë> (
DATE_LENGTH
 + 
TIME_LENGTH
)) {

552 
èrgë
->
îr‹
 = "AISA-Error: DateTimeÜength isÜongerÅhanÉxpected";

553 
ªt
 = -
EINVAL
;

554 
exô_Áûuª
;

557 
	`°∫˝y
(
aiß_devi˚
->
obj
.
obj_d©e
, 
¨gv
[9], 
DATE_LENGTH
);

560 
aiß_devi˚
->
obj
.
obj_time
[0] = 
¨gv
[9][
DATE_LENGTH
];

561 
aiß_devi˚
->
obj
.
obj_time
[1] = 
¨gv
[9][
DATE_LENGTH
+1];

562 
aiß_devi˚
->
obj
.
obj_time
[2] = 
¨gv
[9][
DATE_LENGTH
+2];

563 
aiß_devi˚
->
obj
.
obj_time
[3] = 
¨gv
[9][
DATE_LENGTH
+3];

564 
aiß_devi˚
->
obj
.
obj_time
[4] = 
¨gv
[9][
DATE_LENGTH
+4];

565 
aiß_devi˚
->
obj
.
obj_time
[5] = 
¨gv
[9][
DATE_LENGTH
+5];

569 
	`°∫˝y
 (
aiß_devi˚
->
mëad©a_dev_«me
, 
¨gv
[6], 
	`°æí
(argv[6]));

575 
	`LOGTGT
("O≥nög MëaD©®Devi˚ %s\n", 
aiß_devi˚
->
mëad©a_dev_«me
);

576 
aiß_devi˚
->
mëad©a_bdev
 = 
	`dz_bdev_›í
◊iß_devi˚->
mëad©a_dev_«me
);

577 i‡(! 
aiß_devi˚
->
mëad©a_bdev
) {

578 
èrgë
->
îr‹
 = "AISA-Error: UnableÅo open Metadata device";

579 
	`LOGE
("U«bÀÅÿ›í Mëad©®devi˚ %s\n", 
aiß_devi˚
->
mëad©a_dev_«me
);

580 
ªt
 = -
ENODEV
;

581 
exô_Áûuª
;

583 
METADATA_DISK_DEVICE
 = 
aiß_devi˚
->
mëad©a_bdev
;

584 
	`°r˝y
(
METADATA_DISK_DEVICE_NAME
, 
aiß_devi˚
->
mëad©a_dev_«me
);

585 
	`LOGTGT
("Mëad©®devi˚ %†O≥√d suc˚ssfuŒy\n", 
METADATA_DISK_DEVICE_NAME
);

587 
avm_mëad©a_bdev
 = 
aiß_devi˚
->
mëad©a_bdev
;

588 
	`°∫˝y
 (
aiß_devi˚
->
mëad©a_dev_magi˙o
, 
¨gv
[7], 
	`°æí
(argv[7]));

589 
	`°∫˝y
 (
aiß_devi˚
->
mëad©a_dev_uuid
, 
¨gv
[8], 
	`°æí
(argv[8]));

591 
aiß_devi˚
->
obj
.
obj_°¨t_pba
 = 
èrgë
->
begö
;

592 
aiß_devi˚
->
obj
.
obj_°¨t_lba
 = 
èrgë
->
begö
;

593 
	`°∫˝y
(
aiß_devi˚
->
obj
.
obj_dm_dev_«me
, 
¨gv
[0], 
	`°æí
(argv[0]));

596 
	`°∫˝y
(
aiß_devi˚
->
obj
.
obj_«me
, 
¨gv
[3], 
	`°æí
(argv[3]) );

597 
	`°∫˝y
(
aiß_devi˚
->
obj
.
obj_magi˙o
, 
¨gv
[4], 
	`°æí
(argv[4]) );

598 
	`°∫˝y
(
aiß_devi˚
->
obj
.
obj_uuid
, 
¨gv
[5], 
	`°æí
(argv[5]) );

601 
	`°∫˝y
(
aiß_devi˚
->
d©a_dev_«me
, 
¨gv
[0], 
	`°æí
(argv[0]) );

602 
	`°∫˝y
(
aiß_devi˚
->
d©a_dev_magi˙o
, 
¨gv
[4], 
	`°æí
(argv[4]) );

603 
	`°∫˝y
(
aiß_devi˚
->
d©a_dev_uuid
, 
¨gv
[5], 
	`°æí
(argv[5]) );

606 
aiß_devi˚
->
obj
.
obj_íd_pba
 =áiß_devi˚->obj.
obj_°¨t_pba
 + 
èrgë
->
Àn
 - 1;

607 
aiß_devi˚
->
obj
.
obj_íd_lba
 =áiß_devi˚->obj.
obj_°¨t_lba
 + 
èrgë
->
Àn
 - 1;

609 
	`LOGTGT
("O≥nög D©®Devi˚ %s\n", 
aiß_devi˚
->
obj
.
obj_dm_dev_«me
);

610 i‡(
	`dm_gë_devi˚
(
èrgë
, 
aiß_devi˚
->
obj
.
obj_dm_dev_«me
,

611 
	`dm_èbÀ_gë_mode
(
èrgë
->
èbÀ
),

612 &
aiß_devi˚
->
obj
.
obj_dm_dev
)) {

614 
èrgë
->
îr‹
 = "AISA-Error: UnableÅo open Data Device";

615 
	`LOGTGT
("AISA-Error: UnableÅo open Data Device %s. Check ifányápp/fs is using it.\n",

616 
aiß_devi˚
->
obj
.
obj_dm_dev_«me
);

617 
	`LOGTGT
("AISA-Error: If filesystem is mounted on it,Åhen unmount itándÅryágain\n");

619 
ªt
 = -
ENODEV
;

620 
exô_Áûuª
;

623 i‡(
aiß_devi˚
->
obj
.
obj_dm_dev
->
bdev
 =
NULL
) {

624 
ªt
 = -
ENODEV
;

625 
èrgë
->
îr‹
 = "AISA-Error: Lookup forÅhe backstore device is failedÅwice";

626 
exô_Áûuª
;

629 
queue
 = 
	`bdev_gë_queue
(
aiß_devi˚
->
obj
.
obj_dm_dev
->
bdev
);

630 i‡(!
queue
) {

631 
ªt
 = -
ENODEV
;

632 
èrgë
->
îr‹
 = "AISA-Error: UnableÅo get device queue";

633 
exô_Áûuª
;

637 
	`blk_queue_max_hw_£˘‹s
(
queue
, 
UINT_MAX
);

639 
DATA_DISK_DEVICE
 = 
aiß_devi˚
->
obj
.
obj_dm_dev
->
bdev
;

640 
	`°r˝y
(
DATA_DISK_DEVICE_NAME
, 
	`bdev«me
(
DATA_DISK_DEVICE
, 
b
));

642 
TARGET_DEVICE_SIZE
 = (((
aiß_devi˚
->
obj
.
obj_íd_lba
 -áiß_devi˚->obj.
obj_°¨t_lba
 + 1)

643 * 
SECTOR_SIZE
Ë/ (
LBA_BLOCK_SIZE
));

645 
	`LOGTGT
("TARGET_DEVICE_SIZE = %zu (blocks. Block Sizê4096 byãs)\n", 
TARGET_DEVICE_SIZE
);

655 
	`LOGTGT
(" ______________________________________________________ \n");

656 
	`LOGTGT
("| |\n");

657 
	`LOGTGT
("| Starting All Engines in Storage Stack(ZaidStor) |\n");

658 
	`LOGTGT
("|______________________________________________________|\n");

661 i‡(
	`dz_ö‰a_ígöe_öô
()) {

662 
èrgë
->
îr‹
 = "AISA-Error: UnableÅo initialize Infrastructure Engine";

663 
ªt
 = -
ENOMEM
;

664 
exô_Áûuª
;

668 i‡((
ªt
 = 
	`dz_Æign_ígöe_öô
())) {

669 
èrgë
->
îr‹
 = "AISA-Error: UnableÅo initialize Alignment Engine";

670 
exô_Áûuª
;

674 i‡(
	`dz_dedu≥_ígöe_öô
()) {

675 
èrgë
->
îr‹
 = "AISA-Error: UnableÅo initialize Dedupe Engine";

676 
ªt
 = -
ENOMEM
;

677 
exô_Áûuª
;

681 i‡(
	`dz_„c_ígöe_öô
()) {

682 
èrgë
->
îr‹
 = "AISA-Error: UnableÅo initialize Frontend Cache Engine";

683 
ªt
 = -
ENOMEM
;

684 
exô_Áûuª
;

688 i‡(
	`dz_bec_ígöe_öô
()) {

689 
èrgë
->
îr‹
 = "AISA-Error: UnableÅo initialize Backend Cache Engine";

690 
ªt
 = -
ENOMEM
;

691 
exô_Áûuª
;

695 i‡((
ªt
 = 
	`dz_mëad©a_ígöe_öô
())) {

696 
èrgë
->
îr‹
 = "AISA-Error: UnableÅo initialize Metadata Engine";

697 
exô_Áûuª
;

704 
	`LOGTGT
(" ______________________________________________________ \n");

705 
	`LOGTGT
("| |\n");

706 
	`LOGTGT
("| Started All Engines in Storage Stack(ZaidStor) |\n");

707 
	`LOGTGT
("|______________________________________________________|\n");

710 
aiß_devi˚
->
pba_disk_off£t
 = 0;

711 
	`•ö_lock_öô
(&
aiß_devi˚
->
pba_disk_off£t_lock
);

714 
aiß_devi˚
->
obj
.
obj_ty≥
 = 
OBJECT_TYPE_AISA
;

715 
aiß_devi˚
->
pba_èbÀ
 = 
dedu≥_pba_èbÀ
;

716 
aiß_devi˚
->
hash_èbÀ
 = 
dedu≥_hash_èbÀ
;

717 
aiß_devi˚
->
lba_èbÀ
 = 
dedu≥_lba_èbÀ
;

718 
aiß_devi˚
->
mëad©a_lba_èbÀ
 = metadata_lba_table;

719 
aiß_devi˚
->
mëad©a_lba_lock_èbÀ
= metadata_lba_lock_table;

720 
aiß_devi˚
->
su≥rblock
 = superblock;

723 
èrgë
->
¥iv©e
 = 
aiß_devi˚_obje˘
;

726 
	`dz_q_obje˘
(&
globÆ_obje˘_li°
, &
aiß_devi˚_obje˘
->
obj
);

728 
tŸ_‰ì_•a˚
 = 
dedu≥_tŸ_logiˇl_•a˚
;

729 
	`LOGTGT
("Successfully created AISA Target Device of size %lli (4K blocks)\n",

730 (
U64
)
TARGET_DEVICE_SIZE
);

732 
	`dz_tŸÆ_mem‹y_c⁄sum±i⁄
();

733 
RETURNS
;

735 
exô_Áûuª
:

736 
	`dz_avm_aiß_de°roy
(&
aiß_devi˚
->
obj
);

748  
ªt
;

749 
	}
}

751 
RVOID
 
	$dz_avm_aiß_de°roy
(
PDEVICE_OBJECT
 
obj
)

753 i‡(
obj
->
obj_ty≥
 =
åue
) {

754 
PAVM_DEVICE
 
aiß_devi˚
 = (PAVM_DEVICEË
obj
;

756 
	`dz_mëad©a_ígöe_exô
();

757 
	`dz_bec_ígöe_exô
();

758 
	`dz_„c_ígöe_exô
();

759 
	`dz_dedu≥_ígöe_exô
();

760 
	`dz_Æign_ígöe_exô
();

761 
	`dz_ö‰a_ígöe_exô
();

763 i‡(
aiß_devi˚
->
mëad©a_bdev
) {

764 
	`dz_bdev_˛o£
(
aiß_devi˚
->
mëad©a_bdev
);

765 
aiß_devi˚
->
mëad©a_bdev
 = 
NULL
;

766 
	`LOGTGT
("Mëad©®devi˚ %†˛o£d\n", 
aiß_devi˚
->
mëad©a_dev_«me
);

770 i‡(
	`memcmp
(
obj
->
obj_uuid
, 
aiß_devi˚_obje˘
->obj.obj_uuid, 
UUID_LENGTH
) == 0) {

771 
aiß_devi˚_obje˘
 = 
NULL
;

773 
	`dz_k‰ì
(
obj
, (
AVM_DEVICE
));

774 
	`dz_tŸÆ_mem‹y_c⁄sum±i⁄
();

776 
	}
}

778 
RINT
 
	$dz_avm_èrgë_aiß_ªgi°î
(
VOID
)

780 
ªsu…
;

781 
ªsu…
 = 
	`dm_ªgi°î_èrgë
(&
dzavm
);

782 i‡(
ªsu…
 < 0) {

783 
	`LOGTGTE
("\nError in Registering AVM AISA Target\n");

784 
RETURNF
;

786 
	`LOGTGT
("AISA Target Registered\n");

789 
RETURNS
;

790 
	}
}

793 
	$dz_avm_èrgë_moduÀ_öô
()

795 
ªsu…
;

797 
	`LOGTGT
(" ______________________________________________________ \n");

798 
	`LOGTGT
("| |\n");

799 
	`LOGTGT
("| ZAIDSTOR AVM AISA Target Registering |\n");

800 
	`LOGTGT
("|______________________________________________________|\n");

802 
	`dz_avm_èrgë_öô_cou¡îs
();

803 
ªsu…
 = 
	`dz_avm_èrgë_aiß_ªgi°î
();

804 i‡(
ªsu…
 < 0) {

805 
RETURNF
;

808 
	`LOGTGT
(" ______________________________________________________ \n");

809 
	`LOGTGT
("| |\n");

810 
	`LOGTGT
("| ZAIDSTOR AVM AISA Target Registered |\n");

811 
	`LOGTGT
("|______________________________________________________|\n");

815 
RETURNS
;

816 
	}
}

818 
	$dz_avm_èrgë_moduÀ_exô
()

820 
	`LOGTGT
(" ______________________________________________________ \n");

821 
	`LOGTGT
("| |\n");

822 
	`LOGTGT
("| ZAIDSTOR AVM AISA Target UnRegistering |\n");

823 
	`LOGTGT
("|______________________________________________________|\n");

825 
	`dz_check_mem‹y_Àak
();

828 
	`dm_uƒegi°î_èrgë
(&
dzavm
);

830 
	`LOGTGT
(" ______________________________________________________ \n");

831 
	`LOGTGT
("| |\n");

832 
	`LOGTGT
("| ZAIDSTOR AVM AISA Target UnRegistered |\n");

833 
	`LOGTGT
("|______________________________________________________|\n");

834 
	}
}

836 
moduÀ_öô
(
dz_avm_èrgë_moduÀ_öô
);

837 
moduÀ_exô
(
dz_avm_èrgë_moduÀ_exô
);

838 
MODULE_LICENSE
(
DZ_MODULE_LICENSE
);

839 
MODULE_AUTHOR
(
DZ_MODULE_AUTHOR
);

	@target_engine/target_engine.h

9 #i‚de‡
_TARGET_ENGINE_H_


10 
	#_TARGET_ENGINE_H_


	)

12 
dz_avm_èrgë_˘r
(
dm_èrgë
 *
èrgë
, 
¨gc
,**
¨gv
);

13 
dz_avm_èrgë_då
(
dm_èrgë
 *
ti
);

14 
dz_avm_èrgë_m≠
(
dm_èrgë
 *
èrgë
, 
bio
 *bio);

15 
dz_avm_èrgë_deÁu…_m≠
(
dm_èrgë
 *
èrgë
, 
bio
 *bio);

	@target_engine/target_engine_sysfs_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

18 
INT
 
dz_swôch_„c_ígöe
;

19 
INT
 
dz_swôch_bec_ígöe
;

20 
INT
 
dz_swôch_dedu≥_ígöe
;

21 
INT
 
dz_swôch_Æignmít_ígöe
;

23 
INT
 
dz_swôch_èrgë_i›©h
;

27 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

28 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

33 
SIZE
 
TARGET_DEVICE_SIZE
;

35 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

36 
NAME
 
DATA_DISK_DEVICE_NAME
;

37 
OBJECT_LIST
 
globÆ_obje˘_li°
;

39 
PSUPERBLOCK
 
su≥rblock
;

40 
èrgë_ty≥
 
dzavm
;

42 
CHAR
 
avm_sysfs_íåy_gë_èrgë_«me
[
DZ_SYSFS_PAGE_SIZE
];

43 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

44 
INT
 
	$avm_gë_èrgë_«me
(
CHAR
 *
buf
)

46 
UINT
 
Àn
 = 0;

47 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_èrgë_«me
;

48 i‡(!
aiß_devi˚_obje˘
) {

51 
	`mem£t
(
avm_sysfs_íåy_gë_èrgë_«me
, 0, 
DZ_SYSFS_PAGE_SIZE
);

53 
Àn
 = 
	`°æí
(
aiß_devi˚_obje˘
->
obj
.
obj_«me
);

55 
	`mem˝y
(
±r
, 
aiß_devi˚_obje˘
->
obj
.
obj_«me
, 
Àn
);

56 
±r
 +
Àn
;

57 
	`mem˝y
(
±r
, "|", 1);

58 
±r
 += 1;

60 
Àn
 = 
	`°æí
(
aiß_devi˚_obje˘
->
obj
.
obj_uuid
);

61 
	`mem˝y
(
±r
, 
aiß_devi˚_obje˘
->
obj
.
obj_uuid
, 
Àn
);

62 
±r
 +
Àn
;

64 
	}
}

66 
CHAR
 
avm_sysfs_íåy_gë_èrgë_back°‹e_«me
[
DZ_SYSFS_PAGE_SIZE
];

67 
INT
 
	$avm_gë_èrgë_back°‹e_«me
(
CHAR
 *
buf
)

69 
UINT
 
Àn
 = 0;

70 i‡(!
aiß_devi˚_obje˘
) {

73 
	`mem£t
(
avm_sysfs_íåy_gë_èrgë_back°‹e_«me
, 0, 
DZ_SYSFS_PAGE_SIZE
);

74 
Àn
 = 
	`°æí
(
aiß_devi˚_obje˘
->
obj
.
obj_dm_dev_«me
);

75 
	`mem˝y
(
avm_sysfs_íåy_gë_èrgë_back°‹e_«me
, 
aiß_devi˚_obje˘
->
obj
.
obj_dm_dev_«me
, 
Àn
);

77 
	}
}

79 
CHAR
 
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs
[
DZ_SYSFS_PAGE_SIZE
];

80 
INT
 
	$avm_gë_èrgë_devi˚_size_byãs
(
CHAR
 *
buf
)

82 
CHAR
 *
devi˚_«me
 = 
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs
;

83 
INT
 
ªt
 = 0;

84 
ULONG
 
size_ö_byãs
 = 0;

85 
	`LOGSYS
("I≈uàDevi˚ Namê: %s\n", 
devi˚_«me
);

87 
ªt
 = 
	`dz_gë_devi˚_size
(
devi˚_«me
, &
size_ö_byãs
);

88 i‡(
ªt
 == 0) {

89 
	`•rötf
(
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs
, "\n%lu", 
size_ö_byãs
);

90 
	`LOGSYS
("Sizêo‡devi˚ i†%lu byãs\n", 
size_ö_byãs
);

92 
	`•rötf
(
avm_sysfs_íåy_gë_èrgë_devi˚_size_byãs
, "%d", -1 );

93 
	`LOGSYS
("Sizêo‡devi˚ %†i†-1 byã. ", 
devi˚_«me
);

94 
	`LOGSYS
("IOCTL faûed wôhÉº‹ codê%d\n", 
ªt
);

98 
	}
}

100 
CHAR
 
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks
[
DZ_SYSFS_PAGE_SIZE
];

101 
INT
 
	$avm_gë_èrgë_devi˚_size_blocks
(
CHAR
 *
buf
)

103 
CHAR
 *
devi˚_«me
 = 
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks
;

104 
INT
 
ªt
 = 0;

105 
ULONG
 
size_ö_blocks
 = 0;

106 
	`LOGSYS
("I≈uàDevi˚ Namê: %s\n", 
devi˚_«me
);

108 
ªt
 = 
	`dz_gë_devi˚_size
(
devi˚_«me
, &
size_ö_blocks
);

109 i‡(
ªt
 == 0) {

110 
size_ö_blocks
 = (size_ö_block†/ 
SECTOR_SIZE
);

111 
	`•rötf
(
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks
, "\n%lu", 
size_ö_blocks
);

112 
	`LOGSYS
("Sizêo‡devi˚ i†%lu block†(512 byã†block)\n", 
size_ö_blocks
);

114 
	`•rötf
(
avm_sysfs_íåy_gë_èrgë_devi˚_size_blocks
, "%d", -1 );

115 
	`LOGSYS
("Sizêo‡devi˚ %†i†-1 block. ", 
devi˚_«me
);

116 
	`LOGSYS
("IOCTL faûed wôhÉº‹ codê%d\n", 
ªt
);

120 
	}
}

122 
U64
 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode
;

123 
INT
 
	$avm_gë_èrgë_∑s°hrough_mode
(
CHAR
 *
buf
)

125 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_mode
, 
dz_swôch_∑s°hrough_mode
);

126 
	}
}

128 
INT
 
	$avm_£t_èrgë_∑s°hrough_mode
(
U64
 
buf
)

130 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_∑s°hrough_mode
, 
buf
);

131 
	}
}

133 
U64
 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad
;

134 
INT
 
	$avm_gë_èrgë_∑s°hrough_ªad
(
CHAR
 *
buf
)

136 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_ªad
, 
dz_swôch_∑s°hrough_ªad
);

137 
	}
}

139 
INT
 
	$avm_£t_èrgë_∑s°hrough_ªad
(
U64
 
buf
)

141 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_∑s°hrough_ªad
, 
buf
);

142 
	}
}

144 
U64
 
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe
;

145 
INT
 
	$avm_gë_èrgë_∑s°hrough_wrôe
(
CHAR
 *
buf
)

147 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_èrgë_∑s°hrough_wrôe
, 
dz_swôch_∑s°hrough_wrôe
);

148 
	}
}

150 
INT
 
	$avm_£t_èrgë_∑s°hrough_wrôe
(
U64
 
buf
)

152 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_∑s°hrough_wrôe
, 
buf
);

153 
	}
}

155 
U64
 
avm_sysfs_íåy_gë_£t_èrgë_lba_block_size
;

156 
INT
 
	$avm_gë_èrgë_lba_block_size
(
CHAR
 *
buf
)

158 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_èrgë_lba_block_size
, 
dz_swôch_∑s°hrough_wrôe
);

159 
	}
}

161 
INT
 
	$avm_£t_èrgë_lba_block_size
(
U64
 
buf
)

163 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_∑s°hrough_wrôe
, 
buf
);

164 
	}
}

167 
INT
 
	$avm_do_wrôe_io
(
CHAR
 *
buf
)

169 
	`LOGSYS
("%s",
__func__
);

170 
	`dz_gíî©e_wrôe_io
();

172 
	}
}

174 
INT
 
	$avm_do_ªad_io
(
CHAR
 *
buf
)

176 
	`LOGSYS
("%s",
__func__
);

177 
	`dz_gíî©e_ªad_io
();

179 
	}
}

181 
INT
 
	$avm_do_zîo_io
(
CHAR
 *
buf
)

183 
	`LOGSYS
("%s",
__func__
);

184 
	`dz_gíî©e_zîo_io
();

186 
	}
}

188 
INT
 
dz_doubÀ_∑ge
;

189 
INT
 
	$avm_do_wrôe_vîify_io
(
CHAR
 *
buf
)

191 
	`LOGSYS
("%s",
__func__
);

192 
	`¥ötk
(
KERN_ERR
"\n");

193 
	`LOGSYS
("Generate Write Verify IO With Normal Pages Allocation\n");

194 
dz_doubÀ_∑ge
 = 0;

195 
	`dz_gíî©e_wrôe_vîify_io
();

196 
	`LOGSYS
("Generate Write Verify IO With Double Pages Allocation\n");

197 
dz_doubÀ_∑ge
 = 1;

198 
	`dz_gíî©e_wrôe_vîify_io
();

199 
	`¥ötk
(
KERN_ERR
"\n");

201 
	}
}

203 
CHAR
 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚
[
DZ_SYSFS_PAGE_SIZE
];

204 
U64
 
avm_sysfs_íåy_issue_ªad_io_©_£˘‹
;

205 
INT
 
avm_sysfs_íåy_issue_ªad_io_wôh_size
;

217 
RINT
 
	$dz_gíî©e_ªad_io
(
VOID
)

219 
INT
 
ªt
 = 
SUCCESS
;

220 
IOREQUEST
 
i‹eque°
;

221 
DATA_PAGES_T
 
d©a_∑ges
;

222 
	`MEMSET
(&
i‹eque°
);

225 
	`LOGSYS
("avm_sysfs_íåy_issue_ªad_io_⁄_devi˚ = %s\n", 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚
);

226 
	`LOGSYS
("avm_sysfs_íåy_issue_ªad_io_©_£˘‹ = %Œi\n", 
avm_sysfs_íåy_issue_ªad_io_©_£˘‹
);

227 
	`LOGSYS
("avm_sysfs_íåy_issue_ªad_io_wôh_sizê%d\n", 
avm_sysfs_íåy_issue_ªad_io_wôh_size
);

229 
i‹eque°
.
i‹_£˘‹
 = 
avm_sysfs_íåy_issue_ªad_io_©_£˘‹
;

230 
i‹eque°
.
i‹_size
 = 
avm_sysfs_íåy_issue_ªad_io_wôh_size
;

231 
ªt
 = 
	`dz_ªad_d©a_‰om_block_devi˚
(&
i‹eque°
, 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚
, &
d©a_∑ges
);

232 i‡(
ªt
 !
SUCCESS
) {

233 
	`LOGSYSE
("IO Ród Faûuª o¿devi˚ %†\n", 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚
);

235 
	`LOGSYS
("IO Read successfully\n");

236 
	`¥öt_d©a_∑ges
(&
d©a_∑ges
);

237 
	`dz_‰ì_d©a_∑ges
(&
d©a_∑ges
, 
Ál£
);

239 
RETURN
;

240 
	}
}

241 
EXPORT_SYMBOL
(
dz_gíî©e_ªad_io
);

243 
CHAR
 
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚
[
DZ_SYSFS_PAGE_SIZE
];

244 
U64
 
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹
;

245 
INT
 
avm_sysfs_íåy_issue_wrôe_io_wôh_size
;

247 
RINT
 
	$dz_gíî©e_wrôe_io
(
VOID
)

249 
INT
 
ªt
 = 
SUCCESS
;

250 
IOREQUEST
 
i‹eque°
;

251 
	`MEMSET
(&
i‹eque°
);

253 i‡(
avm_sysfs_íåy_issue_wrôe_io_wôh_size
 > 
_16K
) {

255 
	`LOGW
("IO Size is higherÅhan 16K. Limiting itÅo 16K only\n");

256 
avm_sysfs_íåy_issue_wrôe_io_wôh_size
 = 
_16K
;

259 
	`LOGSYS
("avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚ = %s\n", 
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚
);

260 
	`LOGSYS
("avm_sysfs_íåy_issue_wrôe_io_©_£˘‹ = %Œi\n", 
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹
);

261 
	`LOGSYS
("avm_sysfs_íåy_issue_wrôe_io_wôh_sizê%d\n", 
avm_sysfs_íåy_issue_wrôe_io_wôh_size
);

263 
i‹eque°
.
i‹_£˘‹
 = 
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹
;

264 
i‹eque°
.
i‹_size
 = 
avm_sysfs_íåy_issue_wrôe_io_wôh_size
;

265 
i‹eque°
.
i‹_¥iv©e
 = 
	`dz_gë_io_d©a
(i‹eque°.
i‹_size
);

269 
ªt
 = 
	`dz_wrôe_d©a_to_block_devi˚
(&
i‹eque°
, 
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚
);

270 i‡(
ªt
 !
SUCCESS
) {

271 
	`LOGSYSE
("IO Write Failure on device \n");

273 
	`LOGSYS
("IO written successfully\n");

275 
RETURNS
 ;

276 
	}
}

277 
EXPORT_SYMBOL
(
dz_gíî©e_wrôe_io
);

281 
CHAR
 
avm_sysfs_íåy_issue_zîo_io_⁄_devi˚
[
DZ_SYSFS_PAGE_SIZE
];

282 
U64
 
avm_sysfs_íåy_issue_zîo_io_©_£˘‹
;

283 
INT
 
avm_sysfs_íåy_issue_zîo_io_wôh_size
;

285 
RINT
 
	$dz_gíî©e_zîo_io
(
VOID
)

287 
INT
 
ªt
 = 
SUCCESS
;

288 
IOREQUEST
 
i‹eque°
;

289 
	`MEMSET
(&
i‹eque°
);

291 i‡(
avm_sysfs_íåy_issue_zîo_io_wôh_size
 > 
_16K
) {

293 
	`LOGW
("IO Size is higherÅhan 16K. Limiting itÅo 16K only\n");

294 
avm_sysfs_íåy_issue_zîo_io_wôh_size
 = 
_16K
;

297 
	`LOGSYS
("avm_sysfs_íåy_issue_zîo_io_⁄_devi˚ = %s\n", 
avm_sysfs_íåy_issue_zîo_io_⁄_devi˚
);

298 
	`LOGSYS
("avm_sysfs_íåy_issue_zîo_io_©_£˘‹ = %Œi\n", 
avm_sysfs_íåy_issue_zîo_io_©_£˘‹
);

299 
	`LOGSYS
("avm_sysfs_íåy_issue_zîo_io_wôh_sizê%d\n", 
avm_sysfs_íåy_issue_zîo_io_wôh_size
);

301 
i‹eque°
.
i‹_£˘‹
 = 
avm_sysfs_íåy_issue_zîo_io_©_£˘‹
;

302 
i‹eque°
.
i‹_size
 = 
avm_sysfs_íåy_issue_zîo_io_wôh_size
;

304 
i‹eque°
.
i‹_¥iv©e
 = 
	`dz_kmÆloc
(i‹eque°.
i‹_size
, 
GFP_KERNEL
|
__GFP_ZERO
);

307 
ªt
 = 
	`dz_wrôe_d©a_to_block_devi˚
(&
i‹eque°
, 
avm_sysfs_íåy_issue_zîo_io_⁄_devi˚
);

308 i‡(
ªt
 !
SUCCESS
) {

309 
	`LOGSYSE
("Zeroed IO Failure on device \n");

311 
	`LOGSYS
("Zeroed IO written successfully\n");

313 
	`dz_k‰ì
(
i‹eque°
.
i‹_¥iv©e
, i‹eque°.
i‹_size
);

314 
RETURNS
 ;

315 
	}
}

316 
EXPORT_SYMBOL
(
dz_gíî©e_zîo_io
);

319 
CHAR
 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚
[
DZ_SYSFS_PAGE_SIZE
];

320 
U64
 
avm_sysfs_íåy_issue_ªad_io_©_£˘‹
;

321 
INT
 
avm_sysfs_íåy_issue_ªad_io_wôh_size
;

322 
INT
 
avm_sysfs_íåy_wrôe_vîify_io
;

324 
RINT
 
	$dz_gíî©e_wrôe_vîify_io
(
VOID
)

326 
INT
 
ªt
 = 
SUCCESS
;

327 
UINT
 
pg˙t
 = 0;

328 
PVOID
 
∑ged©a
 = 
NULL
;

329 
CHAR
 *
ªadbuf
 = 
NULL
;

330 
CHAR
 *
¥ódbuf
 = 
NULL
;

331 
INT
 
i
 = 0;

332 
BOOL
 
ßme
 = 
åue
;

333 
DATA_PAGES_T
 
d©a_∑ges
;

335 
IOREQUEST
 
i‹eque°
;

336 
	`MEMSET
(&
i‹eque°
);

337 
ªadbuf
 = 
	`vmÆloc
(
_16K
);

338 i‡(!
ªadbuf
) {

339 
	`LOGSYSE
("UnableÅoállocate memory forÑeadbuf, hence quitting\n");

340 
avm_sysfs_íåy_wrôe_vîify_io
 = 
TEST_FAILED
;

341 
RETURNF
;

343 
	`MEMSET
(
ªadbuf
);

344 
¥ódbuf
 = 
ªadbuf
;

347 i‡(
avm_sysfs_íåy_issue_wrôe_io_wôh_size
 > 
_16K
) {

348 
	`LOGW
("IO Size is higherÅhan 16K. Limiting itÅo 16K only for writes\n");

349 
avm_sysfs_íåy_issue_wrôe_io_wôh_size
 = 
_16K
;

353 
i‹eque°
.
i‹_£˘‹
 = 
avm_sysfs_íåy_issue_wrôe_io_©_£˘‹
;

354 
i‹eque°
.
i‹_size
 = 
avm_sysfs_íåy_issue_wrôe_io_wôh_size
;

355 
i‹eque°
.
i‹_¥iv©e
 = 
	`dz_gë_io_d©a
(i‹eque°.
i‹_size
);

356 
	`°∫˝y
(
DATA_DISK_DEVICE_NAME
, 
avm_sysfs_íåy_issue_wrôe_io_⁄_devi˚
, 
	`°æí
(avm_sysfs_entry_issue_write_io_on_device));

358 i‡((
avm_sysfs_íåy_issue_wrôe_io_wôh_size
 % 
SECTOR_SIZE
) != 0) {

359 
	`LOGSYSE
("IO MUST be in multiples of 512 bytes i.e. SECTOR_SIZE, hence quitting\n");

360 
avm_sysfs_íåy_wrôe_vîify_io
 = 
TEST_FAILED
;

361 
RETURNF
;

365 
ªt
 = 
	`dz_wrôe_d©a
(&
i‹eque°
);

366 i‡(
ªt
 !
SUCCESS
) {

367 
	`LOGSYSE
("IO Write Failure on device \n");

368 
avm_sysfs_íåy_wrôe_vîify_io
 = 
TEST_FAILED
;

369 
RETURNF
;

371 
	`LOGSYS
("IO written successfully\n");

374 
	`MEMSET
(&
i‹eque°
);

376 i‡(
avm_sysfs_íåy_issue_wrôe_io_wôh_size
 > 
_16K
) {

377 
	`LOGW
("IO Size is higherÅhan 16K. Limiting itÅo 16K only forÑeadsás well\n");

378 
avm_sysfs_íåy_issue_ªad_io_wôh_size
 = 
_16K
;

382 
i‹eque°
.
i‹_£˘‹
 = 
avm_sysfs_íåy_issue_ªad_io_©_£˘‹
;

383 
i‹eque°
.
i‹_size
 = 
avm_sysfs_íåy_issue_ªad_io_wôh_size
;

384 
	`°∫˝y
(
DATA_DISK_DEVICE_NAME
, 
avm_sysfs_íåy_issue_ªad_io_⁄_devi˚
, 
	`°æí
(avm_sysfs_entry_issue_read_io_on_device));

385 
ªt
 = 
	`dz_ªad_d©a
(&
i‹eque°
, &
d©a_∑ges
);

386 i‡(
ªt
 !
SUCCESS
) {

387 
	`LOGSYSE
("IO Read Failure on device \n");

388 
avm_sysfs_íåy_wrôe_vîify_io
 = 
TEST_FAILED
;

389 
RETURNF
;

391 
	`LOGSYS
("IO Read successfully\n");

392 
pg˙t
 = 
d©a_∑ges
.pgcnt;

393 
i
=0; i < 
pg˙t
; i++){

394 
PBIOVEC
 
bvec
 = &(
d©a_∑ges
.
∑gevec
[
i
]);

395 
∑ged©a
 = 
	`km≠
(
bvec
->
bv_∑ge
);

396 
∑ged©a
 +
bvec
->
bv_off£t
;

397 
	`mem˝y
(
¥ódbuf
, 
∑ged©a
, 
bvec
->
bv_Àn
);

398 
	`kunm≠
(
bvec
->
bv_∑ge
);

399 
¥ódbuf
 +
bvec
->
bv_Àn
;

401 
	`LOGSYS
("Buffer isÑead successfullyánd copiedÜocally\n");

402 i‡(
	`°∫cmp
(
	`dz_gë_io_d©a
(
i‹eque°
.
i‹_size
), 
ªadbuf
, 
avm_sysfs_íåy_issue_ªad_io_wôh_size
) == 0 ) {

403 
ßme
 = 
åue
;

405 
ßme
 = 
Ál£
;

407 
	`v‰ì
(
ªadbuf
);

408 
	`dz_‰ì_d©a_∑ges
(&
d©a_∑ges
, 
Ál£
);

409 i‡(
ßme
) {

410 
	`LOGSYS
("\nRESULT:PASSED: Write Dataánd Readback Dataáre same\n");

411 
avm_sysfs_íåy_wrôe_vîify_io
 = 
TEST_PASSED
;

413 
	`LOGSYS
("\nRESULT:FAILED: Write Dataánd Readback Dataáre different\n");

414 
avm_sysfs_íåy_wrôe_vîify_io
 = 
TEST_FAILED
;

417 
RETURNS
 ;

418 
	}
}

420 
EXPORT_SYMBOL
(
dz_gíî©e_wrôe_vîify_io
);

422 
U64
 
avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h
;

424 
INT
 
	$avm_gë_èrgë_swôch_i›©h
(
CHAR
 *
buf
)

426 
	`DZ_SYS_GET_SWITCH
(
avm_sysfs_íåy_gë_£t_èrgë_swôch_i›©h
, 
dz_swôch_èrgë_i›©h
);

427 
	}
}

429 
PDM_TARGET
 
AVM_DM_TARGET
;

430 
INT
 
	$avm_£t_èrgë_swôch_i›©h
(
U64
 
buf
)

433 
	`DZ_SYS_SET_SWITCH
(
dz_swôch_èrgë_i›©h
, 
buf
);

434 
dzavm
.
m≠
 = 
dz_avm_èrgë_m≠
;

435 
dzavm
.
˘r
 = 
NULL
;

436 
	}
}

	@volume_engine/volume_engine.c

9 
	~"¥ŸŸy≥s.h
"

11 
PBLOCK_DEVICE
 
DATA_DISK_DEVICE
;

12 
NAME
 
DATA_DISK_DEVICE_NAME
;

14 
PBLOCK_DEVICE
 
METADATA_DISK_DEVICE
;

15 
NAME
 
METADATA_DISK_DEVICE_NAME
;

17 
PBLOCK_DEVICE
 
TARGET_DEVICE
;

18 
NAME
 
TARGET_DEVICE_NAME
;

20 
SIZE
 
TARGET_DEVICE_SIZE
;

21 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

22 
PBLOCK_DEVICE
 
avm_mëad©a_bdev
;

24 
OBJECT_LIST
 
globÆ_obje˘_li°
;

25 
BITMAP
 
pba_bôm≠
;

27 
U64
 
lba_èbÀ_size
;

28 
U64
 
pba_èbÀ_size
;

29 
U64
 
hash_èbÀ_size
;

31 
PPBA_BLOCK
 
pba_èbÀ
;

32 
PHASH_BLOCK
 
hash_èbÀ
;

33 
PLBA_BLOCK
 
lba_èbÀ
;

35 
U64
 
md_lock_èbÀ_size
;

36 
PMD_LOCK
 
md_lock_èbÀ
;

38 
SPINLOCK
 
lba_èbÀ_lock
;

39 
SPINLOCK
 
hash_èbÀ_lock
;

40 
SPINLOCK
 
pba_èbÀ_lock
;

42 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

43 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

44 
PSUPERBLOCK
 
su≥rblock
;

45 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

46 
U64
 
tŸ_‰ì_•a˚
;

48 
U64
 
	$dz_gë_‰ì_•a˚
(
VOID
)

50  
tŸ_‰ì_•a˚
;

51 
	}
}

52 
EXPORT_SYMBOL
(
dz_gë_‰ì_•a˚
);

54 
RVOID
 
	$dz_vﬁume_de¸ó£_‰ì_•a˚
(
U64
 
•a˚
)

56 
tŸ_‰ì_•a˚
 -
•a˚
;

57 
	}
}

59 
RVOID
 
	$dz_vﬁume_ö¸ó£_‰ì_•a˚
(
U64
 
•a˚
)

61 
tŸ_‰ì_•a˚
 +
•a˚
;

62 
	}
}

64 
RINT
 
	$dz_vﬁume_£t_u£d_•a˚
(
PDM_TARGET
 
èrgë
, 
PDDVOL
 
ddvﬁ
)

66 
DDVOL_LBA_BLOCK
 *
lba_èbÀ_loˇl
 = 
NULL
;

67 
U64
 
èbÀ_size
 = 0;

68 
U64
 
cou¡
 = 0;

69 
S64
 
lba_ödex
 = 0;

70 
S64
 
¥ev_lba_ödex
 = 0;

71 
INT
 
ªt
 = 
SUCCESS
;

72 
BOOL
 
u£d
 = 
TRUE
;

76 
èbÀ_size
 = ((
ddvﬁ
->
ddvﬁ_obj
.
obj_íd_lba
 - ddvﬁ->ddvﬁ_obj.
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
Ë/ 
LBA_BLOCK_SIZE
;

77 i‡(
èbÀ_size
 > 
	`dz_gë_‰ì_•a˚
()) {

78 
èrgë
->
îr‹
 = "AISA-Error: Insufficient free spaceÅo create volume";

79 
	`LOGE
("AISA-Error: Insufficient free spaceÅo create volume\n");

80 
	`LOGE
("Requested Space = %lli (4K Blocks), Current Free Space = %lli (4K Blocks)\n",

81 
èbÀ_size
, 
	`dz_gë_‰ì_•a˚
());

82 
ªt
 = -
ENOMEM
;

83 
u£d
 = 
FALSE
;

84 
exô_Áûuª
;

86 
	`PRINT_U64
(
	`dz_gë_‰ì_•a˚
());

87 
	`dz_vﬁume_de¸ó£_‰ì_•a˚
(
èbÀ_size
);

88 
ddvﬁ
->
ddvﬁ_lba_èbÀ
 = 
NULL
;

89 
ddvﬁ
->
ddvﬁ_èbÀ_size
 = 
èbÀ_size
;

91 
lba_èbÀ_loˇl
 = 
	`dz_vﬁume_¸óã_lba_èbÀ
(
èbÀ_size
);

92 i‡(!
lba_èbÀ_loˇl
) {

93 
èrgë
->
îr‹
 = "AISA-Error: UnableÅo createÜbaÅable";

94 
	`LOGVOLE
("AISA-Error: UnableÅo createÜbaÅable\n");

95 
ªt
 = -
ENOMEM
;

96 
exô_Áûuª
;

101 
cou¡
 = 0; cou¡ < 
èbÀ_size
; count++) {

102 
lba_ödex
 = 
	`dz_gë_‰ì_lba_ödex
();

104 
ªt
 = 
lba_ödex
 - 
¥ev_lba_ödex
;

105 i‡((
lba_ödex
 > 0Ë&& (
¥ev_lba_ödex
 > 0Ë&& (
ªt
 != 1)) {

106 
èrgë
->
îr‹
 = "AISA-Error: Insufficient contagious free blocksÅo create volume";

107 
	`LOGE
("AISA-Error: Insufficient contagious free blocksÅo create volume\n");

108 
	`LOGE
("¥ev_lba_ödex = %Œi,Üba_ödex = %Œi\n", 
¥ev_lba_ödex
, 
lba_ödex
);

109 
ªt
 = -
ENOMEM
;

110 
exô_Áûuª
;

114 i‡(
lba_ödex
 >= 0) {

115 
lba_èbÀ_loˇl
[
cou¡
].
lba_ödex
 =Üba_index;

117 
èrgë
->
îr‹
 = "AISA-Error: Insufficient free blocksÅo create volume";

118 
	`LOGE
("AISA-Error: Insufficient free blocksÅo create volume\n");

119 
ªt
 = -
ENOMEM
;

120 
exô_Áûuª
;

122 
¥ev_lba_ödex
 = 
lba_ödex
;

124 
	`PRINT_U64
(
	`dz_gë_‰ì_•a˚
());

125 
ddvﬁ
->
ddvﬁ_lba_èbÀ
 = 
lba_èbÀ_loˇl
;

126 
RETURNS
;

128 
exô_Áûuª
:

129 i‡(
ddvﬁ
->
ddvﬁ_lba_èbÀ
) {

130 
	`dz_vﬁume_de°roy_lba_èbÀ
(
ddvﬁ
);

132 i‡(
u£d
) {

133 
	`dz_vﬁume_ö¸ó£_‰ì_•a˚
(
èbÀ_size
);

135  
ªt
;

136 
	}
}

138 
RVOID
 
	$dz_vﬁume_‰ìup_•a˚
(
PDDVOL
 
ddvﬁ
)

140 
DDVOL_LBA_BLOCK
 *
lba_èbÀ_loˇl
 = 
NULL
;

141 
U64
 
èbÀ_size
 = 0;

142 
U64
 
cou¡
 = 0;

143 
S64
 
lba_ödex
 = 0;

146 
èbÀ_size
 = 
ddvﬁ
->
ddvﬁ_èbÀ_size
;

147 
lba_èbÀ_loˇl
 = 
ddvﬁ
->
ddvﬁ_lba_èbÀ
;

148 
cou¡
 = 0; cou¡ < 
èbÀ_size
; count++) {

149 
lba_ödex
 = 
lba_èbÀ_loˇl
[
cou¡
].lba_index;

150 
	`dz_put_lba_ödex
(
lba_ödex
);

152 
	`dz_vﬁume_ö¸ó£_‰ì_•a˚
(
èbÀ_size
);

153 
	}
}

155 
	$dz_vﬁume_ígöe_moduÀ_öô
()

157 
ªsu…
;

158 
	`LOGVOL
(" ______________________________________________________ \n");

159 
	`LOGVOL
("| |\n");

160 
	`LOGVOL
("| ZAIDSTOR Volume Engine Registering |\n");

161 
	`LOGVOL
("|______________________________________________________|\n");

163 
ªsu…
 = 
	`dz_ªgi°î_d©avﬁ_èrgë
();

164 i‡(
ªsu…
 < 0) {

165 
RETURNF
;

167 
ªsu…
 = 
	`dz_ªgi°î_vmvﬁ_èrgë
();

168 i‡(
ªsu…
 < 0) {

169 
RETURNF
;

171 
	`LOGVOL
(" ______________________________________________________ \n");

172 
	`LOGVOL
("| |\n");

173 
	`LOGVOL
("| ZAIDSTOR Volume Engine Registered |\n");

174 
	`LOGVOL
("|______________________________________________________|\n");

176 
RETURNS
;

177 
	}
}

180 
	$dz_vﬁume_ígöe_moduÀ_exô
()

182 
	`LOGVOL
(" ______________________________________________________ \n");

183 
	`LOGVOL
("| |\n");

184 
	`LOGVOL
("| ZAIDSTOR Volume Engine Module UnRegistering |\n");

185 
	`LOGVOL
("|______________________________________________________|\n");

188 
	`dz_uƒegi°î_d©avﬁ_èrgë
();

189 
	`dz_uƒegi°î_vmvﬁ_èrgë
();

191 
	`LOGVOL
(" ______________________________________________________ \n");

192 
	`LOGVOL
("| |\n");

193 
	`LOGVOL
("| ZAIDSTOR Volume Engine Module UnRegistered |\n");

194 
	`LOGVOL
("|______________________________________________________|\n");

195 
	}
}

198 
moduÀ_öô
(
dz_vﬁume_ígöe_moduÀ_öô
);

199 
moduÀ_exô
(
dz_vﬁume_ígöe_moduÀ_exô
);

200 
MODULE_LICENSE
(
DZ_MODULE_LICENSE
);

201 
MODULE_AUTHOR
(
DZ_MODULE_AUTHOR
);

	@volume_engine/volume_engine.h

9 #i‚de‡
_VOLUME_ENGINE_H_


10 
	#_VOLUME_ENGINE_H_


	)

13 
RINT
 
dz_ªgi°î_d©avﬁ_èrgë
(
VOID
);

14 
RVOID
 
dz_uƒegi°î_d©avﬁ_èrgë
(
VOID
);

15 
RVOID
 
dz_vﬁume_de°roy_d©avﬁ
(
PDDVOL
 
ddvﬁ
);

16 
RVOID
 
dz_vﬁume_de°roy_d©avﬁ_§ód
(
PDDVOL
 
ddvﬁ
);

17 
RVOID
 
dz_vﬁume_de°roy_d©avﬁ_swrôe
(
PDDVOL
 
ddvﬁ
);

18 
RPVOID
 
dz_vﬁume_¸óã_lba_èbÀ
(
SIZE
 
èbÀ_size
);

19 
RVOID
 
dz_vﬁume_de°roy_lba_èbÀ
(
PDDVOL
 
ddvﬁ
);

20 
U64
 
dz_gë_‰ì_•a˚
(
VOID
);

21 
RVOID
 
dz_vﬁume_de¸ó£_‰ì_•a˚
(
U64
 
•a˚
);

22 
RVOID
 
dz_vﬁume_ö¸ó£_‰ì_•a˚
(
U64
 
•a˚
);

23 
RINT
 
dz_vﬁume_£t_u£d_•a˚
(
PDM_TARGET
 
èrgë
, 
PDDVOL
 
ddvﬁ
);

24 
RVOID
 
dz_vﬁume_‰ìup_•a˚
(
PDDVOL
 
ddvﬁ
);

25 
RINT
 
dz_vﬁume_¸óã_d©avﬁ
(
PDM_TARGET
 
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
);

26 
RPVOID
 
dz_ddvﬁ_¸óã_¢≠shŸ
(
PDM_TARGET
 
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
, 
INT
 *
îr‹
);

27 
RINT
 
dz_vﬁume_¸óã_d©avﬁ_§ód
(
PDM_TARGET
 
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
);

28 
RINT
 
dz_vﬁume_¸óã_d©avﬁ_swrôe
(
PDM_TARGET
 
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
);

31 
RINT
 
dz_ªgi°î_vmvﬁ_èrgë
(
VOID
);

32 
RVOID
 
dz_uƒegi°î_vmvﬁ_èrgë
(
VOID
);

	@volume_engine/volume_engine_datavols.c

9 
	~"¥ŸŸy≥s.h
"

11 
INT
 
dz_swôch_∑s°hrough_mode
;

12 
INT
 
dz_swôch_∑s°hrough_ªad
;

13 
INT
 
dz_swôch_∑s°hrough_wrôe
;

15 
AISA_DEVICE
 *
aiß_devi˚_obje˘
;

16 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

17 
OBJECT_LIST
 
globÆ_obje˘_li°
;

18 
BITMAP
 
pba_bôm≠
;

20 
U64
 
lba_èbÀ_size
;

21 
U64
 
pba_èbÀ_size
;

22 
U64
 
hash_èbÀ_size
;

24 
PPBA_BLOCK
 
pba_èbÀ
;

25 
PHASH_BLOCK
 
hash_èbÀ
;

26 
PLBA_BLOCK
 
lba_èbÀ
;

28 
U64
 
md_lock_èbÀ_size
;

29 
PMD_LOCK
 
md_lock_èbÀ
;

31 
SPINLOCK
 
lba_èbÀ_lock
;

32 
SPINLOCK
 
hash_èbÀ_lock
;

33 
SPINLOCK
 
pba_èbÀ_lock
;

35 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

36 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

37 
PSUPERBLOCK
 
su≥rblock
;

39 
PSUPERBLOCK
 
su≥rblock
;

40 
dz_èrgë_˘r_d©avﬁ
(
PDM_TARGET
 
èrgë
, 
¨gc
,**
¨gv
);

41 
dz_èrgë_m≠_d©avﬁ
(
dm_èrgë
 *
èrgë
, 
bio
 *bio);

42 
dz_èrgë_då_d©avﬁ
(
PDM_TARGET
 
èrgë
);

43 
dz_èrgë_m≠_d©avﬁ_§ód
(
dm_èrgë
 *
èrgë
, 
bio
 *bio);

44 
dz_èrgë_m≠_d©avﬁ_swrôe
(
dm_èrgë
 *
èrgë
, 
bio
 *bio);

47 
èrgë_ty≥
 
	gaiß_d©avﬁ
 = {

49 .
«me
 = "AVM_VOLUME",

50 .
	gvîsi⁄
 = {1,0,0},

51 .
	gmoduÀ
 = 
THIS_MODULE
,

52 .
	g˘r
 = 
dz_èrgë_˘r_d©avﬁ
,

53 .
	gdå
 = 
dz_èrgë_då_d©avﬁ
,

54 .
	gm≠
 = 
dz_èrgë_m≠_d©avﬁ
,

59 
èrgë_ty≥
 
	gaiß_d©avﬁ_§
 = {

61 .
«me
 = "AVM_VOLUME_SR",

62 .
	gvîsi⁄
 = {1,0,0},

63 .
	gmoduÀ
 = 
THIS_MODULE
,

64 .
	g˘r
 = 
dz_èrgë_˘r_d©avﬁ
,

65 .
	gdå
 = 
dz_èrgë_då_d©avﬁ
,

66 .
	gm≠
 = 
dz_èrgë_m≠_d©avﬁ_§ód
,

71 
èrgë_ty≥
 
	gaiß_d©avﬁ_sw
 = {

73 .
«me
 = "AVM_VOLUME_SW",

74 .
	gvîsi⁄
 = {1,0,0},

75 .
	gmoduÀ
 = 
THIS_MODULE
,

76 .
	g˘r
 = 
dz_èrgë_˘r_d©avﬁ
,

77 .
	gdå
 = 
dz_èrgë_då_d©avﬁ
,

78 .
	gm≠
 = 
dz_èrgë_m≠_d©avﬁ_swrôe
,

81 
RINT
 
	$dz_¥o˚ss_d©avﬁ_io
(
PDM_TARGET
 
èrgë
, 
PBIO
 
bio
)

83 
PDDVOL
 
ddvﬁ
 = 
NULL
;

84 
U64
 
lba_ödex
 = 0;

85 
PDDVOL_LBA_BLOCK
 
ddvﬁ_lba_èbÀ
 = 
NULL
;

86 
PIOREQUEST
 
i‹eque°
 = 
	`dz_io_Æloc
();

88 
ddvﬁ
 = (
PDDVOL
)
èrgë
->
¥iv©e
;

90 i‡(!
i‹eque°
) {

91 
	`LOGE
("UnableÅoállocate memory for completion\n");

92  -
ENOMEM
;

97 
ddvﬁ_lba_èbÀ
 = 
ddvﬁ
->ddvol_lba_table;

98 
lba_ödex
 = 
ddvﬁ_lba_èbÀ
[
	`dz_c⁄vît_£˘‹_to_lba
(
	`DZ_BIO_GET_SECTOR
(
bio
))].lba_index;

100 
i‹eque°
->
i‹_lba
 = 
lba_ödex
;

103 
i‹eque°
->
i‹_bio
 = 
bio
;

104 
i‹eque°
->
i‹_∑ª¡
 = 
NULL
;

105 
	`ATOMIC_SET
(
i‹eque°
->
i‹_ªf_˙t
, 0);

110 i‡(
	`bio_›
(
bio
Ë=
REQ_OP_WRITE
) {

111 
	`dz_q_i‹eque°
(
wrôe_thªad_poﬁ
, 
i‹eque°
);

113 
	`dz_q_i‹eque°
(
ªad_thªad_poﬁ
, 
i‹eque°
);

117  
DM_MAPIO_SUBMITTED
;

118 
	}
}

121 
RINT
 
	$dz_¥o˚ss_d©avﬁ_§ód_io
(
PDM_TARGET
 
èrgë
, 
PBIO
 
bio
)

123 
PDDVOL
 
ddvﬁ
 = 
NULL
;

124 
U64
 
lba_ödex
 = 0;

125 
PDDVOL_LBA_BLOCK
 
ddvﬁ_lba_èbÀ
 = 
NULL
;

126 
PIOREQUEST
 
i‹eque°
 = 
NULL
;

128 i‡(
	`bio_›
(
bio
Ë=
REQ_OP_WRITE
) {

130 
	`BIODONE
(
bio
, 
IO_ERROR_EINVAL
);

132  
DM_MAPIO_SUBMITTED
;

135 
i‹eque°
 = 
	`dz_io_Æloc
();

136 i‡(!
i‹eque°
) {

137 
	`LOGE
("UnableÅoállocate memory for completion\n");

138  -
ENOMEM
;

140 
ddvﬁ
 = (
PDDVOL
)
èrgë
->
¥iv©e
;

144 
ddvﬁ_lba_èbÀ
 = 
ddvﬁ
->ddvol_lba_table;

145 
lba_ödex
 = 
ddvﬁ_lba_èbÀ
[
	`dz_c⁄vît_£˘‹_to_lba
(
	`DZ_BIO_GET_SECTOR
(
bio
))].lba_index;

147 
i‹eque°
->
i‹_lba
 = 
lba_ödex
;

150 
i‹eque°
->
i‹_bio
 = 
bio
;

151 
i‹eque°
->
i‹_∑ª¡
 = 
NULL
;

152 
	`ATOMIC_SET
(
i‹eque°
->
i‹_ªf_˙t
, 0);

157 
	`dz_q_i‹eque°
(
ªad_thªad_poﬁ
, 
i‹eque°
);

158  
DM_MAPIO_SUBMITTED
;

159 
	}
}

161 
RINT
 
	$dz_¥o˚ss_d©avﬁ_swrôe_io
(
PDM_TARGET
 
èrgë
, 
PBIO
 
bio
)

163 
PDDVOL
 
ddvﬁ
 = 
NULL
;

164 
U64
 
lba_ödex
 = 0;

165 
PDDVOL_LBA_BLOCK
 
ddvﬁ_lba_èbÀ
 = 
NULL
;

166 
PIOREQUEST
 
i‹eque°
 = 
	`dz_io_Æloc
();

167 i‡(!
i‹eque°
) {

168 
	`LOGE
("UnableÅoállocate memory for completion\n");

169  -
ENOMEM
;

171 
ddvﬁ
 = (
PDDVOL
)
èrgë
->
¥iv©e
;

175 
ddvﬁ_lba_èbÀ
 = 
ddvﬁ
->ddvol_lba_table;

176 
lba_ödex
 = 
ddvﬁ_lba_èbÀ
[
	`dz_c⁄vît_£˘‹_to_lba
(
	`DZ_BIO_GET_SECTOR
(
bio
))].lba_index;

177 
i‹eque°
->
i‹_lba
 = 
lba_ödex
;

180 
i‹eque°
->
i‹_bio
 = 
bio
;

181 
i‹eque°
->
i‹_∑ª¡
 = 
NULL
;

182 
	`ATOMIC_SET
(
i‹eque°
->
i‹_ªf_˙t
, 0);

187 i‡(
	`bio_›
(
bio
Ë=
REQ_OP_WRITE
) {

188 
	`dz_q_i‹eque°
(
wrôe_thªad_poﬁ
, 
i‹eque°
);

190 
	`dz_q_i‹eque°
(
ªad_thªad_poﬁ
, 
i‹eque°
);

193  
DM_MAPIO_SUBMITTED
;

194 
	}
}

196 
	$dz_èrgë_m≠_d©avﬁ
(
PDM_TARGET
 
èrgë
, 
bio
 *bio)

198 
INT
 
ªt
 = 
SUCCESS
;

200 i‡(!
aiß_devi˚_obje˘
) {

201 
èrgë
->
îr‹
 = "AISA-Error: IO isÇot supported until AISA device online";

202 
ªt
 = -
EACCES
;

203  
ªt
;

206 i‡(
dz_swôch_∑s°hrough_mode
) {

207  
	`dz_demo_∑s°hrough_io
(
èrgë
, 
bio
);

210  
	`dz_¥o˚ss_d©avﬁ_io
(
èrgë
, 
bio
);

211 
	}
}

213 
	$dz_èrgë_m≠_d©avﬁ_§ód
(
PDM_TARGET
 
èrgë
, 
bio
 *bio)

215 
INT
 
ªt
 = 
SUCCESS
;

217 i‡(!
aiß_devi˚_obje˘
) {

218 
èrgë
->
îr‹
 = "AISA-Error: IO isÇot supported until AISA device online";

219 
ªt
 = -
EACCES
;

220  
ªt
;

223 i‡(
dz_swôch_∑s°hrough_mode
) {

224  
	`dz_demo_∑s°hrough_io
(
èrgë
, 
bio
);

227  
	`dz_¥o˚ss_d©avﬁ_§ód_io
(
èrgë
, 
bio
);

228 
	}
}

230 
	$dz_èrgë_m≠_d©avﬁ_swrôe
(
PDM_TARGET
 
èrgë
, 
bio
 *bio)

232 
INT
 
ªt
 = 
SUCCESS
;

234 i‡(!
aiß_devi˚_obje˘
) {

235 
èrgë
->
îr‹
 = "AISA-Error: IO isÇot supported until AISA device online";

236 
ªt
 = -
EACCES
;

237  
ªt
;

240 i‡(
dz_swôch_∑s°hrough_mode
) {

241  
	`dz_demo_∑s°hrough_io
(
èrgë
, 
bio
);

244  
	`dz_¥o˚ss_d©avﬁ_swrôe_io
(
èrgë
, 
bio
);

245 
	}
}

247 
	$dz_èrgë_˘r_d©avﬁ
(
PDM_TARGET
 
èrgë
, 
¨gc
,**
¨gv
)

261 *
devi˚_ty≥
 = 
NULL
;

262 
	`¥öt_˛i_¨gs
(
èrgë
, 
¨gc
, 
¨gv
);

264 
devi˚_ty≥
 = (*)
¨gv
[2];

266 i‡(!
aiß_devi˚_obje˘
) {

267 
èrgë
->
îr‹
 = "AISA_Error: AISA Target DeviceÇeedsÅo be created first";

268  -
EINVAL
;

273 if(
	`°rcmp
(
devi˚_ty≥
, 
DEVICE_TYPE_DATA_VOLUME
) == 0) {

274  
	`dz_vﬁume_¸óã_d©avﬁ
(
èrgë
, 
¨gc
, 
¨gv
);

279 if(
	`°rcmp
(
devi˚_ty≥
, 
DEVICE_TYPE_DATA_VOLUME_SNAPSHOT_READ
) == 0) {

280  
	`dz_vﬁume_¸óã_d©avﬁ_§ód
(
èrgë
, 
¨gc
, 
¨gv
);

285 if(
	`°rcmp
(
devi˚_ty≥
, 
DEVICE_TYPE_DATA_VOLUME_SNAPSHOT_WRITE
) == 0) {

286  
	`dz_vﬁume_¸óã_d©avﬁ_swrôe
(
èrgë
, 
¨gc
, 
¨gv
);

289 
RETURNF
;

291 
	}
}

293 
	$dz_èrgë_då_d©avﬁ
(
PDM_TARGET
 
èrgë
)

296 
DEVICE_OBJECT
 *
obj
 = (DEVICE_OBJECT *Ë
èrgë
->
¥iv©e
;

297 
	`LOGVOL
("De°royög VﬁumêObje˘ %p\n", 
obj
);

298 
	`dz_dq_obje˘
(&
globÆ_obje˘_li°
, 
obj
->
obj_«me
);

299 
	`dm_put_devi˚
(
èrgë
, 
obj
->
obj_dm_dev
);

301 
obj
->
obj_ty≥
) {

303 
OBJECT_TYPE_DATA_VOLUME
:

304 
	`dz_vﬁume_de°roy_d©avﬁ
((
PDDVOL
 )
obj
);

307 
OBJECT_TYPE_DATA_VOLUME_SNAPSHOT_READ
:

308 
	`dz_vﬁume_de°roy_d©avﬁ_§ód
((
PDDVOL
 )
obj
);

311 
OBJECT_TYPE_DATA_VOLUME_SNAPSHOT_WRITE
:

312 
	`dz_vﬁume_de°roy_d©avﬁ_swrôe
((
PDDVOL
 )
obj
);

315 
OBJECT_TYPE_VM_VOLUME
:

316 
	`dz_vﬁume_de°roy_d©avﬁ
((
PDDVOL
 )
obj
);

319 
OBJECT_TYPE_VM_VOLUME_SNAPSHOT_READ
:

320 
	`dz_vﬁume_de°roy_d©avﬁ
((
PDDVOL
 )
obj
);

323 
OBJECT_TYPE_VM_VOLUME_SNAPSHOT_WRITE
:

324 
	`dz_vﬁume_de°roy_d©avﬁ
((
PDDVOL
 )
obj
);

327 
	}
}

336 
RINT
 
	$dz_ªgi°î_d©avﬁ_èrgë
()

338 
ªsu…
;

340 
ªsu…
 = 
	`dm_ªgi°î_èrgë
(&
aiß_d©avﬁ
);

341 i‡(
ªsu…
 < 0) {

342 
	`LOGVOLE
("\nError in Registering Data Volume Target\n");

344 
	`LOGVOL
("AISA_NORMAL Target Registered\n");

347 
ªsu…
 = 
	`dm_ªgi°î_èrgë
(&
aiß_d©avﬁ_§
);

348 i‡(
ªsu…
 < 0) {

349 
	`LOGVOLE
("\nError in Registering Data Volume Snapshot Read Target\n");

351 
	`LOGVOL
("AISA_SNAPSHOT_READ Target Registered\n");

354 
ªsu…
 = 
	`dm_ªgi°î_èrgë
(&
aiß_d©avﬁ_sw
);

355 i‡(
ªsu…
 < 0) {

356 
	`LOGVOLE
("\nError in Registering Data Volume Snapshot Write Target\n");

358 
	`LOGVOL
("AISA_SNAPSHOT_WRITE Target Registered\n");

361 
RETURNS
;

362 
	}
}

364 
RVOID
 
	$dz_uƒegi°î_d©avﬁ_èrgë
()

366 
	`dm_uƒegi°î_èrgë
(&
aiß_d©avﬁ_sw
);

367 
	`dm_uƒegi°î_èrgë
(&
aiß_d©avﬁ_§
);

368 
	`dm_uƒegi°î_èrgë
(&
aiß_d©avﬁ
);

369 
	}
}

371 
RINT
 
	$dz_vﬁume_¸óã_d©avﬁ
(
PDM_TARGET
 
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
)

384 
INT
 
ªt
 = 0;

385 
PDDVOL
 
ddvﬁ
 = 
NULL
;

386 
INT
 
Àn
 = 0;

387 
INT
 
Àn_max
 = 0;

388 
BOOL
 
dm_Êag
 = 
TRUE
;

399 
	`_ACQUIRE_TRANSACTION_LOCK
();

401 
ddvﬁ
 = 
	`dz_kmÆloc
((
DDVOL
), 
GFP_KERNEL
);

402 i‡(!
ddvﬁ
) {

403 
èrgë
->
îr‹
 = "AISA-Error: fvm volállocation failed";

404 
ªt
 = -
ENOMEM
;

405 
exô_Áûuª
;

407 
	`MEMSET
(
ddvﬁ
);

408 
ddvﬁ
->
ddvﬁ_obj
.
obj_°¨t_lba
 = 
èrgë
->
begö
;

411 
	`°∫˝y
(
ddvﬁ
->
ddvﬁ_obj
.
obj_dm_dev_«me
, 
¨gv
[0], 
	`°æí
(argv[0]));

413 
ddvﬁ
->
ddvﬁ_obj
.
obj_íd_lba
 = ddvﬁ->ddvﬁ_obj.
obj_°¨t_lba
 + 
èrgë
->
Àn
 - 1;

415 
Àn_max
 = 
NAME_LENGTH
;

416 
Àn
 = 
	`°æí
(
¨gv
[3]);

417 
Àn
 =Üí > 
Àn_max
 ?Üen_max:Üen;

420 
	`°∫˝y
(
ddvﬁ
->
ddvﬁ_obj
.
obj_«me
, 
¨gv
[3], 
Àn
);

422 
Àn_max
 = 
MAGICNO_LENGTH
;

423 
Àn
 = 
	`°æí
(
¨gv
[4]);

424 
Àn
 =Üí > 
Àn_max
 ?Üen_max:Üen;

426 
	`°∫˝y
(
ddvﬁ
->
ddvﬁ_obj
.
obj_magi˙o
, 
¨gv
[4], 
Àn
);

428 
Àn_max
 = 
UUID_LENGTH
;

429 
Àn
 = 
	`°æí
(
¨gv
[5]);

430 
Àn
 =Üí > 
Àn_max
 ?Üen_max:Üen;

432 
	`°∫˝y
(
ddvﬁ
->
ddvﬁ_obj
.
obj_uuid
, 
¨gv
[5], 
Àn
);

435 
	`°∫˝y
(
ddvﬁ
->
ddvﬁ_obj
.
obj_d©e
, 
¨gv
[6], 
DATE_LENGTH
);

438 
ddvﬁ
->
ddvﬁ_obj
.
obj_time
[0] = 
¨gv
[6][
DATE_LENGTH
];

439 
ddvﬁ
->
ddvﬁ_obj
.
obj_time
[1] = 
¨gv
[6][
DATE_LENGTH
+1];

440 
ddvﬁ
->
ddvﬁ_obj
.
obj_time
[2] = 
¨gv
[6][
DATE_LENGTH
+2];

441 
ddvﬁ
->
ddvﬁ_obj
.
obj_time
[3] = 
¨gv
[6][
DATE_LENGTH
+3];

442 
ddvﬁ
->
ddvﬁ_obj
.
obj_time
[4] = 
¨gv
[6][
DATE_LENGTH
+4];

443 
ddvﬁ
->
ddvﬁ_obj
.
obj_time
[5] = 
¨gv
[6][
DATE_LENGTH
+5];

447 
ªt
 = 
	`dm_gë_devi˚
(
èrgë
, 
ddvﬁ
->
ddvﬁ_obj
.
obj_dm_dev_«me
, 
	`dm_èbÀ_gë_mode
—¨gë->
èbÀ
),

448 &
ddvﬁ
->
ddvﬁ_obj
.
obj_dm_dev
);

449 i‡(
ªt
) {

450 
èrgë
->
îr‹
 = "AISA-Error: Lookup forÅhe backstore device is failed";

451 
	`LOGVOLE
("AISA-Error: Lookup forÅhe backstore device %s is failed withÉrrno %d\n",

452 
ddvﬁ
->
ddvﬁ_obj
.
obj_dm_dev_«me
, 
ªt
);

453 
ªt
 = -
ENODEV
;

454 
dm_Êag
 = 
FALSE
;

455 
exô_Áûuª
;

458 
ªt
 = 
	`dz_vﬁume_£t_u£d_•a˚
(
èrgë
, 
ddvﬁ
);

459 i‡(
ªt
) {

460 
exô_Áûuª
;

464 
ddvﬁ
->
ddvﬁ_obj
.
obj_ty≥
 = 
OBJECT_TYPE_DATA_VOLUME
;

467 
èrgë
->
¥iv©e
 = 
ddvﬁ
;

470 
	`dz_q_obje˘
(&
globÆ_obje˘_li°
, &
ddvﬁ
->
ddvﬁ_obj
);

472 
	`LOGVOL
("Suc˚ssfuŒy cª©ed dedu≥ vﬁumê%s\n", 
ddvﬁ
->
ddvﬁ_obj
.
obj_«me
);

473 
	`_RELEASE_TRANSACTION_LOCK
();

474 
RETURNS
;

476 
exô_Áûuª
:

477 
	`_RELEASE_TRANSACTION_LOCK
();

478 i‡(
ddvﬁ
) {

479 i‡(
dm_Êag
) {

480 
	`dm_put_devi˚
(
èrgë
, 
ddvﬁ
->
ddvﬁ_obj
.
obj_dm_dev
);

482 i‡(
ddvﬁ
->
ddvﬁ_lba_èbÀ
) {

483 
	`dz_vﬁume_de°roy_lba_èbÀ
(
ddvﬁ
);

485 
	`dz_k‰ì
(
ddvﬁ
, (*ddvol));

488  
ªt
;

489 
	}
}

491 
RVOID
 
	$dz_vﬁume_de°roy_d©avﬁ
(
PDDVOL
 
ddvﬁ
)

493 i‡(
ddvﬁ
) {

494 
	`dz_gë_‰ì_•a˚
();

495 
	`LOGVOL
("De°royög NORMAL vﬁumê%s\n", 
ddvﬁ
->
ddvﬁ_obj
.
obj_«me
);

496 i‡(
ddvﬁ
->
ddvﬁ_lba_èbÀ
) {

497 
	`dz_vﬁume_‰ìup_•a˚
(
ddvﬁ
);

498 
	`dz_vﬁume_de°roy_lba_èbÀ
(
ddvﬁ
);

500 
	`dz_k‰ì
(
ddvﬁ
, (
DDVOL
));

501 
	`dz_gë_‰ì_•a˚
();

503 
	}
}

504 
EXPORT_SYMBOL
(
dz_vﬁume_de°roy_d©avﬁ
);

	@volume_engine/volume_engine_snapshot.c

9 
	~"¥ŸŸy≥s.h
"

11 
PBLOCK_DEVICE
 
DATA_DISK_DEVICE
;

12 
NAME
 
DATA_DISK_DEVICE_NAME
;

14 
PBLOCK_DEVICE
 
METADATA_DISK_DEVICE
;

15 
NAME
 
METADATA_DISK_DEVICE_NAME
;

17 
PBLOCK_DEVICE
 
TARGET_DEVICE
;

18 
NAME
 
TARGET_DEVICE_NAME
;

20 
SIZE
 
TARGET_DEVICE_SIZE
;

21 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

22 
PBLOCK_DEVICE
 
avm_mëad©a_bdev
;

24 
OBJECT_LIST
 
globÆ_obje˘_li°
;

25 
BITMAP
 
pba_bôm≠
;

27 
U64
 
lba_èbÀ_size
;

28 
U64
 
pba_èbÀ_size
;

29 
U64
 
hash_èbÀ_size
;

31 
PPBA_BLOCK
 
pba_èbÀ
;

32 
PHASH_BLOCK
 
hash_èbÀ
;

33 
PLBA_BLOCK
 
lba_èbÀ
;

35 
U64
 
md_lock_èbÀ_size
;

36 
PMD_LOCK
 
md_lock_èbÀ
;

38 
SPINLOCK
 
lba_èbÀ_lock
;

39 
SPINLOCK
 
hash_èbÀ_lock
;

40 
SPINLOCK
 
pba_èbÀ_lock
;

42 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

43 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

44 
PSUPERBLOCK
 
su≥rblock
;

45 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

46 
U64
 
tŸ_‰ì_•a˚
;

48 
RPVOID
 
	$dz_ddvﬁ_¸óã_¢≠shŸ
(
PDM_TARGET
 
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
, 
INT
 *
îr‹
)

62 
PDDVOL
 
ddvﬁ
 = 
NULL
;

63 
PDEVICE_OBJECT
 
∑ª¡_obje˘
 = 
NULL
;

64 
CHAR
 *
∑ª¡_vﬁ_«me
 = 
NULL
;

65 
PDDVOL
 
∑ª¡_ddvﬁ
 = 
NULL
;

66 
PDDVOL_LBA_BLOCK
 
lba_èbÀ
 = 
NULL
;

67 
PDDVOL_LBA_BLOCK
 
lba_íåy
 = 
NULL
;

68 
PDDVOL_LBA_BLOCK
 
∑ª¡_lba_èbÀ
 = 
NULL
;

69 
PDDVOL_LBA_BLOCK
 
∑ª¡_lba_íåy
 = 
NULL
;

70 
PLBA_BLOCK
 
aiß_lba_íåy
 = 
NULL
;

71 
PPBA_BLOCK
 
aiß_pba_íåy
 = 
NULL
;

72 
PPBA_BLOCK
 
aiß_pba_íåy_cﬁ
 = 
NULL
;

73 
PHBA_BLOCK
 
aiß_hba_íåy
 = 
NULL
;

74 
U64
 
pba_ödex
 = 0;

75 
U64
 
hash_pba_ödex
 = 0;

76 
U64
 
èbÀ_size
 = 0;

77 
U64
 
lba_ödex
 = 0;

78 
INT
 
ªt
 = 
SUCCESS
;

79 
INT
 
Àn
 = 0;

80 
INT
 
Àn_max
 = 0;

81 
BOOL
 
dm_Êag
 = 
TRUE
;

82 
U64
 
cou¡
 = 0;

92 i‡(
¨gc
 != 8) {

93 
èrgë
->
îr‹
 = "AISA-Error: Parent Volume is Missing";

94 
	`LOG
("AISA-Error: Parent Volume is Missing\n");

95 
ªt
 = -
ENODEV
;

96 
exô_Áûuª
;

99 
∑ª¡_vﬁ_«me
 = (
CHAR
 *Ë
¨gv
[6];

100 
∑ª¡_obje˘
 = 
	`dz_föd_obje˘
(&
globÆ_obje˘_li°
, 
∑ª¡_vﬁ_«me
);

101 i‡(!
∑ª¡_obje˘
) {

102 
èrgë
->
îr‹
 = "AISA-Error: Parent VolumeÇot found";

103 
	`LOG
("AISA-Eº‹: P¨íàVﬁumê%†nŸ found\n", 
∑ª¡_vﬁ_«me
);

104 
ªt
 = -
ENODEV
;

105 
exô_Áûuª
;

108 
ddvﬁ
 = 
	`dz_kmÆloc
((
DDVOL
), 
GFP_KERNEL
);

109 i‡(!
ddvﬁ
) {

110 
èrgë
->
îr‹
 = "AISA-Error: memoryállocation failed";

111 
ªt
 = -
ENOMEM
;

112 
exô_Áûuª
;

114 
	`MEMSET
(
ddvﬁ
);

115 
ddvﬁ
->
ddvﬁ_obj
.
obj_°¨t_lba
 = 
èrgë
->
begö
;

116 
	`°∫˝y
(
ddvﬁ
->
ddvﬁ_obj
.
obj_dm_dev_«me
, 
¨gv
[0], 
	`°æí
(argv[0]));

118 
ddvﬁ
->
ddvﬁ_obj
.
obj_íd_lba
 = ddvﬁ->ddvﬁ_obj.
obj_°¨t_lba
 + 
èrgë
->
Àn
 - 1;

120 
Àn_max
 = 
NAME_LENGTH
;

121 
Àn
 = 
	`°æí
(
¨gv
[3]);

122 
Àn
 =Üí > 
Àn_max
 ?Üen_max:Üen;

124 
	`°∫˝y
(
ddvﬁ
->
ddvﬁ_obj
.
obj_«me
, 
¨gv
[3], 
Àn
);

126 
Àn_max
 = 
MAGICNO_LENGTH
;

127 
Àn
 = 
	`°æí
(
¨gv
[4]);

128 
Àn
 =Üí > 
Àn_max
 ?Üen_max:Üen;

130 
	`°∫˝y
(
ddvﬁ
->
ddvﬁ_obj
.
obj_magi˙o
, 
¨gv
[4], 
Àn
);

132 
Àn_max
 = 
UUID_LENGTH
;

133 
Àn
 = 
	`°æí
(
¨gv
[5]);

134 
Àn
 =Üí > 
Àn_max
 ?Üen_max:Üen;

136 
	`°∫˝y
(
ddvﬁ
->
ddvﬁ_obj
.
obj_uuid
, 
¨gv
[5], 
Àn
);

138 
ªt
 = 
	`dm_gë_devi˚
(
èrgë
, 
ddvﬁ
->
ddvﬁ_obj
.
obj_dm_dev_«me
, 
	`dm_èbÀ_gë_mode
—¨gë->
èbÀ
),

139 &
ddvﬁ
->
ddvﬁ_obj
.
obj_dm_dev
);

140 i‡(
ªt
) {

141 
èrgë
->
îr‹
 = "AISA-Error: Lookup forÅhe backstore device is failed";

142 
	`LOG
("AISA-Error: Lookup forÅhe backstore device %s is failed withÉrrno %d\n",

143 
ddvﬁ
->
ddvﬁ_obj
.
obj_dm_dev_«me
, 
ªt
);

144 
ªt
 = -
ENODEV
;

145 
dm_Êag
 = 
FALSE
;

146 
exô_Áûuª
;

149 
∑ª¡_ddvﬁ
 = (
PDDVOL
)
∑ª¡_obje˘
;

150 
èbÀ_size
 = 
∑ª¡_ddvﬁ
->
ddvﬁ_èbÀ_size
;

151 
∑ª¡_lba_èbÀ
 = 
∑ª¡_ddvﬁ
->
ddvﬁ_lba_èbÀ
;

152 
lba_èbÀ
 = 
	`dz_vﬁume_¸óã_lba_èbÀ
(
èbÀ_size
);

154 i‡(!
lba_èbÀ
) {

156 
èrgë
->
îr‹
 = "AISA-Error: Not Enough Memory";

157 
ªt
 = -
ENODEV
;

158 
exô_Áûuª
;

160 
ddvﬁ
->
ddvﬁ_èbÀ_size
 = 
èbÀ_size
;

161 
ddvﬁ
->
ddvﬁ_lba_èbÀ
 = 
lba_èbÀ
;

162 
ddvﬁ
->
ddvﬁ_∑ª¡
 = 
∑ª¡_ddvﬁ
;

164 
cou¡
 = 0; cou¡ < 
èbÀ_size
; count++) {

165 
lba_íåy
 = &
lba_èbÀ
[
cou¡
];

166 
∑ª¡_lba_íåy
 = &
∑ª¡_lba_èbÀ
[
cou¡
];

167 
lba_ödex
 = 
∑ª¡_lba_íåy
->lba_index;

169 
aiß_lba_íåy
 = 
	`GET_LBA_ENTRY
(
lba_ödex
);

170 
	`_ACQUIRE_LBA_LOCK_WRITE
(
aiß_lba_íåy
);

172 
aiß_hba_íåy
 = 
	`GET_HBA_ENTRY
(
aiß_lba_íåy
->
hash_ödex
);

173 
	`_ACQUIRE_HBA_LOCK
(
aiß_hba_íåy
);

175 
hash_pba_ödex
 = 
aiß_hba_íåy
->hash_pba_index;

176 
aiß_pba_íåy
 = 
	`GET_PBA_ENTRY
(
hash_pba_ödex
);

179 
	`_ACQUIRE_PBA_LOCK
(
aiß_pba_íåy
);

181 
pba_ödex
 = 
aiß_lba_íåy
->pba_index;

182 
aiß_pba_íåy_cﬁ
 = 
	`GET_PBA_ENTRY
(
pba_ödex
);

183 
lba_íåy
->
pba_ödex
=Öba_index;

184 
aiß_pba_íåy_cﬁ
->
ªf_˙t
++;

186 
	`_DZ_DDE_RELEASE_PBA_LOCK
(
aiß_pba_íåy
);

187 
	`_DZ_DDE_RELEASE_HBA_LOCK
(
aiß_hba_íåy
);

188 
	`_RELEASE_LBA_LOCK_WRITE
(
aiß_lba_íåy
);

192 
	`°∫˝y
(
ddvﬁ
->
ddvﬁ_obj
.
obj_d©e
, 
¨gv
[7], 
DATE_LENGTH
);

195 
ddvﬁ
->
ddvﬁ_obj
.
obj_time
[0] = 
¨gv
[7][
DATE_LENGTH
];

196 
ddvﬁ
->
ddvﬁ_obj
.
obj_time
[1] = 
¨gv
[7][
DATE_LENGTH
+1];

197 
ddvﬁ
->
ddvﬁ_obj
.
obj_time
[2] = 
¨gv
[7][
DATE_LENGTH
+2];

198 
ddvﬁ
->
ddvﬁ_obj
.
obj_time
[3] = 
¨gv
[7][
DATE_LENGTH
+3];

199 
ddvﬁ
->
ddvﬁ_obj
.
obj_time
[4] = 
¨gv
[7][
DATE_LENGTH
+4];

200 
ddvﬁ
->
ddvﬁ_obj
.
obj_time
[5] = 
¨gv
[7][
DATE_LENGTH
+5];

203 
èrgë
->
¥iv©e
 = 
ddvﬁ
;

206 
	`dz_q_obje˘
(&
globÆ_obje˘_li°
, &
ddvﬁ
->
ddvﬁ_obj
);

208 
	`LOG
("Suc˚ssfuŒy cª©ed s«pshŸ vﬁumê%s\n", 
ddvﬁ
->
ddvﬁ_obj
.
obj_«me
);

209  
ddvﬁ
;

211 
exô_Áûuª
:

212 i‡(
ddvﬁ
) {

213 i‡(
dm_Êag
) {

214 
	`dm_put_devi˚
(
èrgë
, 
ddvﬁ
->
ddvﬁ_obj
.
obj_dm_dev
);

216 i‡(
ddvﬁ
->
ddvﬁ_lba_èbÀ
) {

217 
	`dz_vﬁume_de°roy_lba_èbÀ
(
ddvﬁ
);

219 
	`dz_k‰ì
(
ddvﬁ
, (*ddvol));

221 *
îr‹
 = 
ªt
;

222  
NULL
;

223 
	}
}

225 
RINT
 
	$dz_vﬁume_¸óã_d©avﬁ_§ód
(
PDM_TARGET
 
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
)

227 
INT
 
îr‹
 = 0;

228 
PDDVOL
 
ddvﬁ
 = 
	`dz_ddvﬁ_¸óã_¢≠shŸ
(
èrgë
, 
¨gc
, 
¨gv
, &
îr‹
);

229 i‡(
ddvﬁ
) {

230 
ddvﬁ
->
ddvﬁ_obj
.
obj_ty≥
 = 
OBJECT_TYPE_DATA_VOLUME_SNAPSHOT_READ
;

231 
RETURNS
;

233  
îr‹
;

235 
	}
}

236 
EXPORT_SYMBOL
(
dz_vﬁume_¸óã_d©avﬁ_§ód
);

238 
RINT
 
	$dz_vﬁume_¸óã_d©avﬁ_swrôe
(
PDM_TARGET
 
èrgë
, 
UINT
 
¨gc
, 
CHAR
 ** 
¨gv
)

241 
INT
 
îr‹
 = 0;

242 
PDDVOL
 
ddvﬁ
 = 
	`dz_ddvﬁ_¸óã_¢≠shŸ
(
èrgë
, 
¨gc
, 
¨gv
, &
îr‹
);

243 i‡(
ddvﬁ
) {

244 
ddvﬁ
->
ddvﬁ_obj
.
obj_ty≥
 = 
OBJECT_TYPE_DATA_VOLUME_SNAPSHOT_WRITE
;

245 
RETURNS
;

247  
îr‹
;

249 
RETURNS
;

250 
	}
}

251 
EXPORT_SYMBOL
(
dz_vﬁume_¸óã_d©avﬁ_swrôe
);

253 
RVOID
 
	$dz_vﬁume_de°roy_d©avﬁ_§ód
(
PDDVOL
 
ddvﬁ
)

255 i‡(
ddvﬁ
) {

256 
	`dz_gë_‰ì_•a˚
();

257 
	`LOG
("De°royög SNAPSHOT_READ vﬁumê%s\n", 
ddvﬁ
->
ddvﬁ_obj
.
obj_«me
);

258 
	`dz_k‰ì
(
ddvﬁ
, (
DDVOL
));

259 
	`dz_gë_‰ì_•a˚
();

261 
	}
}

262 
EXPORT_SYMBOL
(
dz_vﬁume_de°roy_d©avﬁ_§ód
);

264 
RVOID
 
	$dz_vﬁume_de°roy_d©avﬁ_swrôe
(
PDDVOL
 
ddvﬁ
)

266 i‡(
ddvﬁ
) {

267 
	`dz_gë_‰ì_•a˚
();

268 
	`LOG
("De°royög SNAPSHOT_WRITE vﬁumê%s\n", 
ddvﬁ
->
ddvﬁ_obj
.
obj_«me
);

269 
	`dz_k‰ì
(
ddvﬁ
, (
DDVOL
));

270 
	`dz_gë_‰ì_•a˚
();

272 
	}
}

273 
EXPORT_SYMBOL
(
dz_vﬁume_de°roy_d©avﬁ_swrôe
);

	@volume_engine/volume_engine_sysfs_functions.c

9 
	~"¥ŸŸy≥s.h
"

11 
	#TEST_PASSED
 100

	)

12 
	#TEST_FAILED
 -1

	)

14 
dz_swôch_∑s°hrough_mode
;

15 
dz_swôch_∑s°hrough_ªad
;

16 
dz_swôch_∑s°hrough_wrôe
;

18 
INT
 
dz_swôch_„c_ígöe
;

19 
INT
 
dz_swôch_bec_ígöe
;

20 
INT
 
dz_swôch_dedu≥_ígöe
;

21 
INT
 
dz_swôch_Æignmít_ígöe
;

25 
BASIC_COUNTERS
 
dz_basic_cou¡îs
;

26 
PBASIC_COUNTERS
 
pdz_basic_cou¡îs
;

31 
SIZE
 
TARGET_DEVICE_SIZE
;

33 
PAVM_DEVICE
 
aiß_devi˚_obje˘
;

34 
NAME
 
DATA_DISK_DEVICE_NAME
;

35 
OBJECT_LIST
 
globÆ_obje˘_li°
;

36 
U64
 
lba_èbÀ_size
;

37 
U64
 
pba_èbÀ_size
;

38 
U64
 
hash_èbÀ_size
;

39 
U32
 
numbî_of_l⁄gs_f‹_pba
;

40 
U32
 
numbî_of_l⁄gs_f‹_lba
;

41 
U32
 
numbî_of_l⁄gs_f‹_gpba
;

42 
ULONG
 
mëad©a_Êush_öãrvÆ
;

43 
U64
 
mëad©a_lba_èbÀ_size
;

44 
U64
 
mëad©a_lba_lock_èbÀ_size
;

45 
U64
 
avm_sysfs_íåy_‰ì_∑ge_cou¡
;

46 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes
[
DZ_SYSFS_PAGE_SIZE
];

47 
CHAR
 
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
[
DZ_SYSFS_PAGE_SIZE
];

48 
PPBA_BLOCK
 
pba_èbÀ
;

49 
PHASH_BLOCK
 
hash_èbÀ
;

50 
PLBA_BLOCK
 
lba_èbÀ
;

52 
ATOMIC64
 
bec_pba_∑ge_cou¡
;

53 
ATOMIC64
 
bec_ˇche_hô
;

54 
ATOMIC64
 
bec_ˇche_miss
;

55 
ATOMIC64
 
bec_ˇche_dñëe
;

56 
ULONG
 
bec_size
;

57 
INT
 
bec_cutoff_nodes
;

58 
INT
 
bec_cutoff_≥r˚¡
;

59 
INT
 
dz_bec_node_mempoﬁ_cou¡
;

60 
U64
 
time_Êush_¥ï¨e_°¨t
;

61 
U64
 
time_Êush_°¨t
;

62 
U64
 
time_Êush_íd
;

63 
U64
 
time_„c_wrôe_°¨t
;

64 
U64
 
time_„c_wrôe_swôch
;

65 
PFEC_TABLE
 
„c_èbÀs_Êush
;

66 
ATOMIC64
 
„c_a˘ive_cou¡_£quí˚
;

67 
ATOMIC64
 
„c_‰ì_cou¡_£quí˚
;

68 
ATOMIC64
 
„c_cur_Êush_cou¡
;

69 
ATOMIC64
 
„c_Êush_›s_cou¡
;

70 
ATOMIC64
 
„c_cur_Êush_›s_cou¡
;

71 
ATOMIC64
 
„c_mem‹y_ªads_cou¡
;

72 
ATOMIC64
 
„c_f‹w¨ded_ªads_cou¡
;

73 
U64
 
„c_a˘ive_cou¡
;

74 
ATOMIC64
 
dedu≥_disk_ªads
;

75 
ATOMIC64
 
dedu≥_disk_wrôes
;

76 
ATOMIC64
 
dedu≥_zî€d_out_∑ge_ªads
;

77 
ATOMIC64
 
dedu≥_ˇche_hôs
;

78 
ATOMIC64
 
dedu≥_dñëed_íåõs
;

79 
ATOMIC64
 
dedu≥_cur_logiˇl_•a˚
;

80 
ATOMIC64
 
dedu≥_cur_physiˇl_•a˚
;

81 
ATOMIC64
 
dedu≥_cur_du∂iˇã_•a˚
;

82 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

83 
U64
 
dedu≥_tŸ_physiˇl_•a˚
;

84 
USHORT
 
dedu≥_num_thªads
;

85 
PDZ_THREAD_POOL
 
dedu≥_thªad_poﬁ
;

86 
PDZ_THREAD_POOL
 
rdedu≥_thªad_poﬁ
;

87 
PDZ_THREAD_POOL
 
wdedu≥_thªad_poﬁ
;

88 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

89 
PDZ_THREAD_POOL
 
Æign_ªad_thªad_poﬁ
;

90 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

91 
PDZ_THREAD_POOL
 
Æign_wrôe_thªad_poﬁ
;

92 
PDZ_THREAD_POOL
 
Êush_thªad_poﬁ
;

93 
PDZ_THREAD_POOL
 
mëad©a_Êush_thªad_poﬁ
;

94 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡
;

95 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads
;

96 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_∑πül_∑ge
;

97 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_sögÀ_∑ge
;

98 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_ªads_mu…i_∑ge
;

99 
ATOMIC64
 
„c_iocou¡_ªads_∑πül_∑ge
;

100 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_∑ge
;

101 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

102 
ATOMIC64
 
„c_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

103 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_∑ge
;

104 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_Æig√d_∑ge
;

105 
ATOMIC64
 
„c_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

107 
ATOMIC64
 
Æign_iocou¡_disk_ªad
;

108 
ATOMIC64
 
Æign_iocou¡_disk_ªad_öã∫Æ
;

109 
ATOMIC64
 
Æign_iocou¡_ªads_∑πül_∑ge
;

110 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_∑ge
;

111 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_Æig√d_∑ge
;

112 
ATOMIC64
 
Æign_iocou¡_ªads_sögÀ_u«lig√d_∑ge
;

113 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_∑ge
;

114 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_Æig√d_∑ge
;

115 
ATOMIC64
 
Æign_iocou¡_ªads_mu…i_u«lig√d_∑ge
;

117 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes
;

118 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_∑πül_∑ge
;

119 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_sögÀ_∑ge
;

120 
ATOMIC64
 
tŸ_≠∂iˇti⁄_iocou¡_wrôes_mu…i_∑ge
;

121 
ATOMIC64
 
„c_iocou¡_wrôes_∑πül_∑ge
;

122 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_∑ge
;

123 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

124 
ATOMIC64
 
„c_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

125 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_∑ge
;

126 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

127 
ATOMIC64
 
„c_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

129 
ATOMIC64
 
Æign_iocou¡_disk_wrôe
;

130 
ATOMIC64
 
Æign_iocou¡_disk_wrôe_öã∫Æ
;

131 
ATOMIC64
 
Æign_iocou¡_wrôes_∑πül_∑ge
;

132 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_∑ge
;

133 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_Æig√d_∑ge
;

134 
ATOMIC64
 
Æign_iocou¡_wrôes_sögÀ_u«lig√d_∑ge
;

135 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_∑ge
;

136 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_Æig√d_∑ge
;

137 
ATOMIC64
 
Æign_iocou¡_wrôes_mu…i_u«lig√d_∑ge
;

139 
PSUPERBLOCK
 
su≥rblock
;

141 
INT
 
	$avm_gë_li°_of_vﬁumes_sh‹t
(
CHAR
 *
buf
)

143 
PDEVICE_OBJECT
 
obje˘
 = 
NULL
;

144 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
;

147 
	`mem£t
(
avm_sysfs_íåy_gë_li°_of_vﬁumes_sh‹t
, 0, 
DZ_SYSFS_PAGE_SIZE
);

148 
	`mem˝y
(
±r
, "\n", 1);

149 
±r
 += 1;

151 i‡(!
aiß_devi˚_obje˘
) {

155 
	`•ö_lock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

157 
	`li°_f‹_óch_íåy
(
obje˘
, &
globÆ_obje˘_li°
.
obje˘q_hód
, 
obje˘q
) {

158 i‡(!
obje˘
) {

161 i‡(
obje˘
->
obj_ty≥
 =
åue
) {

165 
±r
 +
	`•rötf
’å, "%s\n", 
obje˘
->
obj_«me
);

168 
	`•ö_u∆ock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

170 
	}
}

173 
INT
 
	$avm_gë_li°_of_vﬁumes
(
CHAR
 *
buf
)

175 
PDEVICE_OBJECT
 
obje˘
 = 
NULL
;

176 
UINT
 
found
 = 0;

177 
UINT
 
cou¡
 = 0;

179 
CHAR
 *
±r
 = (CHAR *)
avm_sysfs_íåy_gë_li°_of_vﬁumes
;

182 
	`mem£t
(
avm_sysfs_íåy_gë_li°_of_vﬁumes
, 0, 
DZ_SYSFS_PAGE_SIZE
);

183 
	`mem˝y
(
±r
, "\n", 1);

184 
±r
 += 1;

186 
±r
 +
	`•rötf
(ptr, "\nListing Volumes Begin\n");

187 
±r
 +
	`•rötf
(ptr, "\n---------------------\n");

189 i‡(!
aiß_devi˚_obje˘
) {

190 
±r
 +
	`•rötf
(ptr, "\nAISA Target Not Found\n");

191 
±r
 +
	`•rötf
(ptr, "\n---------------------\n");

192 
±r
 +
	`•rötf
(ptr, "\nListing Volumes End\n");

196 
	`•ö_lock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

198 
	`li°_f‹_óch_íåy
(
obje˘
, &
globÆ_obje˘_li°
.
obje˘q_hód
, 
obje˘q
) {

199 i‡(!
obje˘
) {

202 i‡(
obje˘
->
obj_ty≥
 =
åue
) {

206 
±r
 +
	`•rötf
(ptr,

211 ++
cou¡
,

212 
obje˘
->
obj_«me
,

213 
obje˘
->
obj_«me
,

214 
obje˘
->
obj_uuid
);

216 
found
 = 1;

220 
	`•ö_u∆ock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

221 i‡(
found
 == 0) {

222 
±r
 +
	`•rötf
(ptr, "\nVolume Not Found\n");

224 
±r
 +
	`•rötf
(ptr, "\n-------------------\n");

225 
±r
 +
	`•rötf
’å, "\nTŸÆ %d Vﬁume†Found\n", 
cou¡
);

226 
±r
 +
	`•rötf
(ptr, "\nListing Volumes End\n");

228 
	}
}

230 
CHAR
 
avm_sysfs_íåy_gë_£t_vﬁume_öfo
[
DZ_SYSFS_PAGE_SIZE
];

231 
INT
 
	$avm_gë_£t_vﬁume_öfo
(
CHAR
 *
buf
)

233 
UINT
 
Àn
 = 0;

234 
PDEVICE_OBJECT
 
obje˘
 = 
NULL
;

236 
CHAR
 *
«me
 = 
avm_sysfs_íåy_gë_£t_vﬁume_öfo
;

237 
CHAR
 *
∑ª¡_«me
 = 
NULL
;

238 
CHAR
 
obj_ty≥_°r
[64] = "\0";

239 
INT
 
found
 = 0;

240 
BOOL
 
èrgë_found
 = 
FALSE
;

242 
Àn
 = 
	`°æí
(
«me
);

243 
	`LOGVOL
("Àn=%d\n", 
Àn
);

244 
	`LOGVOL
("«me=<%s>\n", 
«me
);

245 i‡(!
aiß_devi˚_obje˘
) {

246 
	`•rötf
(
avm_sysfs_íåy_gë_£t_vﬁume_öfo
, "\nAISA Target Not Found\n");

250 
	`•ö_lock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

252 
	`li°_f‹_óch_íåy
(
obje˘
, &
globÆ_obje˘_li°
.
obje˘q_hód
, 
obje˘q
) {

253 i‡(!
obje˘
) {

256 i‡(
	`°rcmp
(
«me
, 
obje˘
->
obj_«me
) == 0 ) {

258 
obje˘
->
obj_ty≥
) {

259 
OBJECT_TYPE_AISA
:

260 
∑ª¡_«me
 = 
NULL
;

261 
èrgë_found
 = 
TRUE
;

264 
OBJECT_TYPE_DATA_VOLUME
:

265 
∑ª¡_«me
 = 
obje˘
->
obj_dm_dev_«me
;

266 
	`°r˝y
(
obj_ty≥_°r
, "DATA_VOLUME");

269 
OBJECT_TYPE_DATA_VOLUME_SNAPSHOT_READ
:

270 
∑ª¡_«me
 = ((
PDEVICE_OBJECT
)(((
PDDVOL
)
obje˘
)->
ddvﬁ_∑ª¡
))->
obj_«me
;

271 
	`°r˝y
(
obj_ty≥_°r
, "DATA_VOLUME_SNAPSHOT_READ");

274 
OBJECT_TYPE_DATA_VOLUME_SNAPSHOT_WRITE
:

275 
∑ª¡_«me
 = ((
PDEVICE_OBJECT
)(((
PDDVOL
)
obje˘
)->
ddvﬁ_∑ª¡
))->
obj_«me
;

276 
	`°r˝y
(
obj_ty≥_°r
, "DATA_VOLUME_SNAPSHOT_WRITE");

279 
OBJECT_TYPE_VM_VOLUME
:

280 
∑ª¡_«me
 = 
obje˘
->
obj_dm_dev_«me
;

281 
	`°r˝y
(
obj_ty≥_°r
, "VIRTUAL_MACHINE_VOLUME");

284 
OBJECT_TYPE_VM_VOLUME_SNAPSHOT_READ
:

285 
∑ª¡_«me
 = ((
PDEVICE_OBJECT
)(((
PDDVOL
)
obje˘
)->
ddvﬁ_∑ª¡
))->
obj_«me
;

286 
	`°r˝y
(
obj_ty≥_°r
, "VIRTUAL_MACHINE_VOLUME_SNAPSHOT_READ");

289 
OBJECT_TYPE_VM_VOLUME_SNAPSHOT_WRITE
:

290 
∑ª¡_«me
 = ((
PDEVICE_OBJECT
)(((
PDDVOL
)
obje˘
)->
ddvﬁ_∑ª¡
))->
obj_«me
;

291 
	`°r˝y
(
obj_ty≥_°r
, "VIRTUAL_MACHINE_VOLUME_SNAPSHOT_WRITE");

295 i‡(
èrgë_found
) {

296 
	`•rötf
(
avm_sysfs_íåy_gë_£t_vﬁume_öfo
,

321 
obje˘
->
obj_«me
,

322 
obje˘
->
obj_«me
,

323 
obje˘
->
obj_ty≥
,

324 
obj_ty≥_°r
,

325 
obje˘
->
obj_magi˙o
,

326 
obje˘
->
obj_uuid
,

327 
obje˘
->
obj_°¨t_lba
,

328 
obje˘
->
obj_íd_lba
,

329 ((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
),

330 (
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1),

331 (((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
Ë/ 
KB
),

332 (((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
Ë/ 
MB
),

333 (((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
Ë/ 
GB
),

334 ((
obje˘
->
obj_íd_lba
-obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
)/
PAGE_SIZE
,

335 
PAGE_SIZE
,

336 
obje˘
->
obj_Êags
,

337 
obje˘
->
obj_Êags
,

338 
obje˘
->
obj_d©e
[0], object->obj_date[1], object->obj_date[2], object->obj_date[3],

339 
obje˘
->
obj_d©e
[4], object->obj_date[5], object->obj_date[6], object->obj_date[7],

340 
obje˘
->
obj_time
[0], object->obj_time[1], object->obj_time[2],

341 
obje˘
->
obj_time
[3], object->obj_time[4], object->obj_time[5],

342 
obje˘
->
obj_dm_dev_«me
);

343 
found
 = 1;

345 
èrgë_found
 = 
FALSE
;

348 
	`•rötf
(
avm_sysfs_íåy_gë_£t_vﬁume_öfo
,

375 
obje˘
->
obj_«me
,

376 
obje˘
->
obj_«me
,

377 
obje˘
->
obj_ty≥
,

378 
obj_ty≥_°r
,

379 
obje˘
->
obj_magi˙o
,

380 
obje˘
->
obj_uuid
,

381 
obje˘
->
obj_°¨t_lba
,

382 
obje˘
->
obj_íd_lba
,

383 ((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
),

384 (
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1),

385 (((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
Ë/ 
KB
),

386 (((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
Ë/ 
MB
),

387 (((
obje˘
->
obj_íd_lba
 - obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
Ë/ 
GB
),

388 ((
obje˘
->
obj_íd_lba
-obje˘->
obj_°¨t_lba
 + 1Ë* 
SECTOR_SIZE
)/
PAGE_SIZE
,

389 
PAGE_SIZE
,

390 
obje˘
->
obj_Êags
,

391 
obje˘
->
obj_Êags
,

392 
obje˘
->
obj_d©e
[0], object->obj_date[1], object->obj_date[2], object->obj_date[3],

393 
obje˘
->
obj_d©e
[4], object->obj_date[5], object->obj_date[6], object->obj_date[7],

394 
obje˘
->
obj_time
[0], object->obj_time[1], object->obj_time[2],

395 
obje˘
->
obj_time
[3], object->obj_time[4], object->obj_time[5],

396 
∑ª¡_«me
,

397 
∑ª¡_«me
,

398 
obje˘
->
obj_dm_dev_«me
);

399 
found
 = 1;

404 
	`•ö_u∆ock
(&
globÆ_obje˘_li°
.
obje˘q_lock
);

405 i‡(
found
 == 0) {

406 
	`•rötf
(
avm_sysfs_íåy_gë_£t_vﬁume_öfo
, "\nVolume NOT Found\n");

409 
	}
}

	@volume_engine/volume_engine_tables.c

9 
	~"¥ŸŸy≥s.h
"

11 
SIZE
 
dz_pba_∑ge_mempoﬁ_cou¡
;

12 
U64
 
lba_èbÀ_size
;

13 
U64
 
pba_èbÀ_size
;

14 
U64
 
hash_èbÀ_size
;

15 
BITMAP
 
gpba_bôm≠
;

16 
BITMAP
 
pba_bôm≠
;

17 
BITMAP
 
lba_bôm≠
;

18 
PPBA_BLOCK
 
pba_èbÀ
;

19 
PHASH_BLOCK
 
hash_èbÀ
;

20 
PLBA_BLOCK
 
lba_èbÀ
;

22 
SPINLOCK
 
lba_èbÀ_lock
;

23 
SPINLOCK
 
hash_èbÀ_lock
;

24 
SPINLOCK
 
pba_èbÀ_lock
;

26 
RPVOID
 
	$dz_vﬁume_¸óã_lba_èbÀ
(
SIZE
 
èbÀ_size
)

29 
	#DZ_UNIT_SIZE
 ((
DDVOL_LBA_BLOCK
))

	)

30 
PVOID
 
±r
 = 
	`vmÆloc_u£r
(
èbÀ_size
 * 
DZ_UNIT_SIZE
);

31 i‡(!
±r
) {

32 
	`LOGE
("UnableÅoállocate memory for DDVOL LBA Table\n");

33  
NULL
;

35 
	`LOG
("DDVOL LBA Table created ofÉntries %zu, size %zu bytes\n",

36 
èbÀ_size
,ÅabÀ_sizê* 
DZ_UNIT_SIZE
);

38 
	`mem£t
(
±r
, 0, 
èbÀ_size
 * 
DZ_UNIT_SIZE
);

39 
	`log_mem‹y_ußge
(
èbÀ_size
 * 
DZ_UNIT_SIZE
);

41  
±r
;

42 #unde‡
DZ_UNIT_SIZE


43 
	}
}

45 
RVOID
 
	$dz_vﬁume_de°roy_lba_èbÀ
(
PDDVOL
 
ddvﬁ
)

47 
	#DZ_UNIT_SIZE
 ((
DDVOL_LBA_BLOCK
))

	)

48 i‡(
ddvﬁ
->
ddvﬁ_lba_èbÀ
) {

49 
	`v‰ì
(
ddvﬁ
->
ddvﬁ_lba_èbÀ
);

50 
ddvﬁ
->
ddvﬁ_lba_èbÀ
 = 
NULL
;

51 
	`ªdu˚_mem‹y_ußge
 (
ddvﬁ
->
ddvﬁ_èbÀ_size
 * 
DZ_UNIT_SIZE
);

52 
	`LOG
("DDVOL LBA Table destroyed\n");

54 #unde‡
DZ_UNIT_SIZE


55 
	}
}

	@volume_engine/volume_engine_vmvols.c

9 
	~"¥ŸŸy≥s.h
"

11 
AISA_DEVICE
 *
aiß_devi˚_obje˘
;

12 
U64
 
dedu≥_tŸ_logiˇl_•a˚
;

13 
OBJECT_LIST
 
globÆ_obje˘_li°
;

14 
BITMAP
 
pba_bôm≠
;

16 
U64
 
lba_èbÀ_size
;

17 
U64
 
pba_èbÀ_size
;

18 
U64
 
hash_èbÀ_size
;

20 
PPBA_BLOCK
 
pba_èbÀ
;

21 
PHASH_BLOCK
 
hash_èbÀ
;

22 
PLBA_BLOCK
 
lba_èbÀ
;

24 
U64
 
md_lock_èbÀ_size
;

25 
PMD_LOCK
 
md_lock_èbÀ
;

27 
SPINLOCK
 
lba_èbÀ_lock
;

28 
SPINLOCK
 
hash_èbÀ_lock
;

29 
SPINLOCK
 
pba_èbÀ_lock
;

31 
PDZ_THREAD_POOL
 
ªad_thªad_poﬁ
;

32 
PDZ_THREAD_POOL
 
wrôe_thªad_poﬁ
;

33 
PSUPERBLOCK
 
su≥rblock
;

35 
PSUPERBLOCK
 
su≥rblock
;

36 
dz_èrgë_˘r_vmvﬁ
(
PDM_TARGET
 
èrgë
, 
¨gc
,**
¨gv
);

37 
dz_èrgë_m≠_vmvﬁ
(
dm_èrgë
 *
èrgë
, 
bio
 *bio);

38 
dz_èrgë_då_vmvﬁ
(
PDM_TARGET
 
èrgë
);

39 
dz_èrgë_m≠_vmvﬁ_§ód
(
dm_èrgë
 *
èrgë
, 
bio
 *bio);

40 
dz_èrgë_m≠_vmvﬁ_swrôe
(
dm_èrgë
 *
èrgë
, 
bio
 *bio);

43 
èrgë_ty≥
 
	gaiß_vmvﬁ
 = {

45 .
«me
 = "AVM_VOLUME_VM",

46 .
	gvîsi⁄
 = {1,0,0},

47 .
	gmoduÀ
 = 
THIS_MODULE
,

48 .
	g˘r
 = 
dz_èrgë_˘r_vmvﬁ
,

49 .
	gdå
 = 
dz_èrgë_då_vmvﬁ
,

50 .
	gm≠
 = 
dz_èrgë_m≠_vmvﬁ
,

55 
èrgë_ty≥
 
	gaiß_vmvﬁ_§
 = {

57 .
«me
 = "AVM_VOLUME_VMSR",

58 .
	gvîsi⁄
 = {1,0,0},

59 .
	gmoduÀ
 = 
THIS_MODULE
,

60 .
	g˘r
 = 
dz_èrgë_˘r_vmvﬁ
,

61 .
	gdå
 = 
dz_èrgë_då_vmvﬁ
,

62 .
	gm≠
 = 
dz_èrgë_m≠_vmvﬁ_§ód
,

67 
èrgë_ty≥
 
	gaiß_vmvﬁ_sw
 = {

69 .
«me
 = "AVM_VOLUME_VMSW",

70 .
	gvîsi⁄
 = {1,0,0},

71 .
	gmoduÀ
 = 
THIS_MODULE
,

72 .
	g˘r
 = 
dz_èrgë_˘r_vmvﬁ
,

73 .
	gdå
 = 
dz_èrgë_då_vmvﬁ
,

74 .
	gm≠
 = 
dz_èrgë_m≠_vmvﬁ_swrôe
,

77 
RINT
 
	$dz_¥o˚ss_vmvﬁ_io
(
PDM_TARGET
 
èrgë
, 
PBIO
 
bio
)

79 
PDDVOL
 
ddvﬁ
 = 
NULL
;

80 
U64
 
lba_ödex
 = 0;

81 
PDDVOL_LBA_BLOCK
 
ddvﬁ_lba_èbÀ
 = 
NULL
;

82 
PIOREQUEST
 
i‹eque°
 = 
	`dz_io_Æloc
();

84 
ddvﬁ
 = (
PDDVOL
)
èrgë
->
¥iv©e
;

86 i‡(!
i‹eque°
) {

87 
	`LOGE
("UnableÅoállocate memory for completion\n");

88  -
ENOMEM
;

93 
ddvﬁ_lba_èbÀ
 = 
ddvﬁ
->ddvol_lba_table;

94 
lba_ödex
 = 
ddvﬁ_lba_èbÀ
[
	`dz_c⁄vît_£˘‹_to_lba
(
	`DZ_BIO_GET_SECTOR
(
bio
))].lba_index;

96 
i‹eque°
->
i‹_lba
 = 
lba_ödex
;

99 
i‹eque°
->
i‹_bio
 = 
bio
;

100 
i‹eque°
->
i‹_∑ª¡
 = 
NULL
;

101 
	`ATOMIC_SET
(
i‹eque°
->
i‹_ªf_˙t
, 0);

106 i‡(
	`bio_›
(
bio
Ë=
REQ_OP_WRITE
) {

107 
	`dz_q_i‹eque°
(
wrôe_thªad_poﬁ
, 
i‹eque°
);

109 
	`dz_q_i‹eque°
(
ªad_thªad_poﬁ
, 
i‹eque°
);

113  
DM_MAPIO_SUBMITTED
;

114 
	}
}

117 
RINT
 
	$dz_¥o˚ss_vmvﬁ_§ód_io
(
PDM_TARGET
 
èrgë
, 
PBIO
 
bio
)

119 
PDDVOL
 
ddvﬁ
 = 
NULL
;

120 
U64
 
lba_ödex
 = 0;

121 
PDDVOL_LBA_BLOCK
 
ddvﬁ_lba_èbÀ
 = 
NULL
;

122 
PIOREQUEST
 
i‹eque°
 = 
NULL
;

124 i‡(
	`bio_›
(
bio
Ë=
REQ_OP_WRITE
) {

126 
	`BIODONE
(
bio
, 
IO_ERROR_EINVAL
);

128  
DM_MAPIO_SUBMITTED
;

131 
i‹eque°
 = 
	`dz_io_Æloc
();

132 i‡(!
i‹eque°
) {

133 
	`LOGE
("UnableÅoállocate memory for completion\n");

134  -
ENOMEM
;

136 
ddvﬁ
 = (
PDDVOL
)
èrgë
->
¥iv©e
;

140 
ddvﬁ_lba_èbÀ
 = 
ddvﬁ
->ddvol_lba_table;

141 
lba_ödex
 = 
ddvﬁ_lba_èbÀ
[
	`dz_c⁄vît_£˘‹_to_lba
(
	`DZ_BIO_GET_SECTOR
(
bio
))].lba_index;

143 
i‹eque°
->
i‹_lba
 = 
lba_ödex
;

146 
i‹eque°
->
i‹_bio
 = 
bio
;

147 
i‹eque°
->
i‹_∑ª¡
 = 
NULL
;

148 
	`ATOMIC_SET
(
i‹eque°
->
i‹_ªf_˙t
, 0);

153 
	`dz_q_i‹eque°
(
ªad_thªad_poﬁ
, 
i‹eque°
);

154  
DM_MAPIO_SUBMITTED
;

155 
	}
}

157 
RINT
 
	$dz_¥o˚ss_vmvﬁ_swrôe_io
(
PDM_TARGET
 
èrgë
, 
PBIO
 
bio
)

159 
PDDVOL
 
ddvﬁ
 = 
NULL
;

160 
U64
 
lba_ödex
 = 0;

161 
PDDVOL_LBA_BLOCK
 
ddvﬁ_lba_èbÀ
 = 
NULL
;

162 
PIOREQUEST
 
i‹eque°
 = 
	`dz_io_Æloc
();

163 i‡(!
i‹eque°
) {

164 
	`LOGE
("UnableÅoállocate memory for completion\n");

165  -
ENOMEM
;

167 
ddvﬁ
 = (
PDDVOL
)
èrgë
->
¥iv©e
;

171 
ddvﬁ_lba_èbÀ
 = 
ddvﬁ
->ddvol_lba_table;

172 
lba_ödex
 = 
ddvﬁ_lba_èbÀ
[
	`dz_c⁄vît_£˘‹_to_lba
(
	`DZ_BIO_GET_SECTOR
(
bio
))].lba_index;

173 
i‹eque°
->
i‹_lba
 = 
lba_ödex
;

176 
i‹eque°
->
i‹_bio
 = 
bio
;

177 
i‹eque°
->
i‹_∑ª¡
 = 
NULL
;

178 
	`ATOMIC_SET
(
i‹eque°
->
i‹_ªf_˙t
, 0);

183 i‡(
	`bio_›
(
bio
Ë=
REQ_OP_WRITE
) {

184 
	`dz_q_i‹eque°
(
wrôe_thªad_poﬁ
, 
i‹eque°
);

186 
	`dz_q_i‹eque°
(
ªad_thªad_poﬁ
, 
i‹eque°
);

189  
DM_MAPIO_SUBMITTED
;

190 
	}
}

192 
	$dz_èrgë_m≠_vmvﬁ
(
PDM_TARGET
 
èrgë
, 
bio
 *bio)

194 
INT
 
ªt
 = 
SUCCESS
;

196 i‡(!
aiß_devi˚_obje˘
) {

197 
èrgë
->
îr‹
 = "AISA-Error: IO isÇot supported until AISA device online";

198 
ªt
 = -
EACCES
;

199  
ªt
;

202  
	`dz_¥o˚ss_vmvﬁ_io
(
èrgë
, 
bio
);

203 
	}
}

205 
	$dz_èrgë_m≠_vmvﬁ_§ód
(
PDM_TARGET
 
èrgë
, 
bio
 *bio)

207 
INT
 
ªt
 = 
SUCCESS
;

209 i‡(!
aiß_devi˚_obje˘
) {

210 
èrgë
->
îr‹
 = "AISA-Error: IO isÇot supported until AISA device online";

211 
ªt
 = -
EACCES
;

212  
ªt
;

215  
	`dz_¥o˚ss_vmvﬁ_§ód_io
(
èrgë
, 
bio
);

216 
	}
}

218 
	$dz_èrgë_m≠_vmvﬁ_swrôe
(
PDM_TARGET
 
èrgë
, 
bio
 *bio)

220 
INT
 
ªt
 = 
SUCCESS
;

222 i‡(!
aiß_devi˚_obje˘
) {

223 
èrgë
->
îr‹
 = "AISA-Error: IO isÇot supported until AISA device online";

224 
ªt
 = -
EACCES
;

225  
ªt
;

228  
	`dz_¥o˚ss_vmvﬁ_swrôe_io
(
èrgë
, 
bio
);

229 
	}
}

231 
	$dz_èrgë_˘r_vmvﬁ
(
PDM_TARGET
 
èrgë
, 
¨gc
,**
¨gv
)

233  
	`dz_èrgë_¸óã
(
èrgë
, 
¨gc
, 
¨gv
);

234 
	}
}

236 
	$dz_èrgë_då_vmvﬁ
(
PDM_TARGET
 
èrgë
)

238 
	`dz_èrgë_de°roy
(
èrgë
);

239 
	}
}

248 
RINT
 
	$dz_ªgi°î_vmvﬁ_èrgë
()

250 
ªsu…
;

251 
ªsu…
 = 
	`dm_ªgi°î_èrgë
(&
aiß_vmvﬁ
);

252 i‡(
ªsu…
 < 0) {

253 
	`LOGVOLE
("\nError in Registering VM Volume Target\n");

255 
	`LOGVOL
("VM Volume Target Registered\n");

258 
ªsu…
 = 
	`dm_ªgi°î_èrgë
(&
aiß_vmvﬁ_§
);

259 i‡(
ªsu…
 < 0) {

260 
	`LOGVOLE
("\nError in Registering VM Volume Snapshot Read Target\n");

262 
	`LOGVOL
("VM Volume Snapshot Read Target Registered\n");

265 
ªsu…
 = 
	`dm_ªgi°î_èrgë
(&
aiß_vmvﬁ_sw
);

266 i‡(
ªsu…
 < 0) {

267 
	`LOGVOLE
("\nError in Registering VM Volume Snapshot Write Target\n");

269 
	`LOGVOL
("VM Volume Snapshot Write Target Registered\n");

272 
RETURNS
;

273 
	}
}

275 
RVOID
 
	$dz_uƒegi°î_vmvﬁ_èrgë
()

277 
	`dm_uƒegi°î_èrgë
(&
aiß_vmvﬁ_sw
);

278 
	`dm_uƒegi°î_èrgë
(&
aiß_vmvﬁ_§
);

279 
	`dm_uƒegi°î_èrgë
(&
aiß_vmvﬁ
);

280 
	}
}

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

50 #i‚de‡
__îr‹_t_deföed


51 
	#__îr‹_t_deföed
 1

	)

52 
	tîr‹_t
;

57 
__END_DECLS


	@/usr/include/error.h

19 #i‚de‡
_ERROR_H


20 
	#_ERROR_H
 1

	)

22 
	~<„©uªs.h
>

25 
__BEGIN_DECLS


31 
	$îr‹
 (
__°©us
, 
__î∫um
, c⁄° *
__f‹m©
, ...)

32 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

34 
	$îr‹_©_löe
 (
__°©us
, 
__î∫um
, c⁄° *
__‚ame
,

35 
__löío
, c⁄° *
__f‹m©
, ...)

36 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 5, 6)));

41 (*
îr‹_¥öt_¥og«me
) ();

44 
îr‹_mesßge_cou¡
;

48 
îr‹_⁄e_≥r_löe
;

51 #i‡
deföed
 
__exã∫_Æways_ölöe
 && deföed 
__va_¨g_∑ck


52 
	~<bôs/îr‹.h
>

55 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 
f˙é
 (
__fd
, 
__cmd
, ...);

156 #i‚de‡
__USE_FILE_OFFSET64


157 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__REDIRECT


160 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

161 
	`__n⁄nuŒ
 ((1));

163 
	#›í
 
›í64


	)

166 #ifde‡
__USE_LARGEFILE64


167 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__USE_ATFILE


180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

184 #ifde‡
__REDIRECT


185 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

186 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

188 
	#›í©
 
›í©64


	)

191 #ifde‡
__USE_LARGEFILE64


192 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

202 #i‚de‡
__USE_FILE_OFFSET64


203 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__REDIRECT


206 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

207 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

209 
	#¸ót
 
¸ót64


	)

212 #ifde‡
__USE_LARGEFILE64


213 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

217 && !
deföed
 
__USE_POSIX
))

226 
	#F_ULOCK
 0

	)

227 
	#F_LOCK
 1

	)

228 
	#F_TLOCK
 2

	)

229 
	#F_TEST
 3

	)

231 #i‚de‡
__USE_FILE_OFFSET64


232 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

234 #ifde‡
__REDIRECT


235 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

237 
	#lockf
 
lockf64


	)

240 #ifde‡
__USE_LARGEFILE64


241 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

245 #ifde‡
__USE_XOPEN2K


248 #i‚de‡
__USE_FILE_OFFSET64


249 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

250 
__advi£
Ë
__THROW
;

252 #ifde‡
__REDIRECT_NTH


253 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

254 
__off64_t
 
__Àn
, 
__advi£
),

255 
posix_Ádvi£64
);

257 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

260 #ifde‡
__USE_LARGEFILE64


261 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

262 
__advi£
Ë
__THROW
;

270 #i‚de‡
__USE_FILE_OFFSET64


271 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

273 #ifde‡
__REDIRECT


274 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

275 
__off64_t
 
__Àn
),

276 
posix_ÁŒoˇã64
);

278 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

281 #ifde‡
__USE_LARGEFILE64


282 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

288 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

289 && 
deföed
 
__va_¨g_∑ck_Àn


290 
	~<bôs/f˙é2.h
>

293 
__END_DECLS


	@/usr/include/linux/bsg.h

2 #i‚de‡
BSG_H


3 
	#BSG_H


	)

5 
	~<löux/ty≥s.h
>

7 
	#BSG_PROTOCOL_SCSI
 0

	)

9 
	#BSG_SUB_PROTOCOL_SCSI_CMD
 0

	)

10 
	#BSG_SUB_PROTOCOL_SCSI_TMF
 1

	)

11 
	#BSG_SUB_PROTOCOL_SCSI_TRANSPORT
 2

	)

19 
	#BSG_FLAG_Q_AT_TAIL
 0x10

	)

20 
	#BSG_FLAG_Q_AT_HEAD
 0x20

	)

22 
	ssg_io_v4
 {

23 
__s32
 
	mgu¨d
;

24 
__u32
 
	m¥Ÿocﬁ
;

25 
__u32
 
	msub¥Ÿocﬁ
;

28 
__u32
 
	mªque°_Àn
;

29 
__u64
 
	mªque°
;

30 
__u64
 
	mªque°_èg
;

31 
__u32
 
	mªque°_©å
;

32 
__u32
 
	mªque°_¥i‹ôy
;

33 
__u32
 
	mªque°_exåa
;

34 
__u32
 
	mmax_ª•⁄£_Àn
;

35 
__u64
 
	mª•⁄£
;

38 
__u32
 
	mdout_iovec_cou¡
;

40 
__u32
 
	mdout_x„r_Àn
;

41 
__u32
 
	mdö_iovec_cou¡
;

42 
__u32
 
	mdö_x„r_Àn
;

43 
__u64
 
	mdout_x„Ω
;

44 
__u64
 
	mdö_x„Ω
;

46 
__u32
 
	mtimeout
;

47 
__u32
 
	mÊags
;

48 
__u64
 
	mu§_±r
;

49 
__u32
 
	m•¨e_ö
;

51 
__u32
 
	mdrivî_°©us
;

52 
__u32
 
	må™•‹t_°©us
;

53 
__u32
 
	mdevi˚_°©us
;

54 
__u32
 
	mªåy_dñay
;

55 
__u32
 
	möfo
;

56 
__u32
 
	mduøti⁄
;

57 
__u32
 
	mª•⁄£_Àn
;

58 
__s32
 
	mdö_ªsid
;

59 
__s32
 
	mdout_ªsid
;

60 
__u64
 
	mgíî©ed_èg
;

61 
__u32
 
	m•¨e_out
;

63 
__u32
 
	m∑ddög
;

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/fs.h

2 #i‚de‡
_LINUX_FS_H


3 
	#_LINUX_FS_H


	)

13 
	~<löux/limôs.h
>

14 
	~<löux/io˘l.h
>

15 
	~<löux/ty≥s.h
>

28 #unde‡
NR_OPEN


29 
	#INR_OPEN_CUR
 1024

	)

30 
	#INR_OPEN_MAX
 4096

	)

32 
	#BLOCK_SIZE_BITS
 10

	)

33 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

35 
	#SEEK_SET
 0

	)

36 
	#SEEK_CUR
 1

	)

37 
	#SEEK_END
 2

	)

38 
	#SEEK_DATA
 3

	)

39 
	#SEEK_HOLE
 4

	)

40 
	#SEEK_MAX
 
SEEK_HOLE


	)

42 
	#RENAME_NOREPLACE
 (1 << 0Ë

	)

43 
	#RENAME_EXCHANGE
 (1 << 1Ë

	)

44 
	#RENAME_WHITEOUT
 (1 << 2Ë

	)

46 
	sfûe_˛⁄e_ønge
 {

47 
__s64
 
	m§c_fd
;

48 
__u64
 
	m§c_off£t
;

49 
__u64
 
	m§c_Àngth
;

50 
__u64
 
	mde°_off£t
;

53 
	sf°rim_ønge
 {

54 
__u64
 
	m°¨t
;

55 
__u64
 
	mÀn
;

56 
__u64
 
	mmöÀn
;

60 
	#FILE_DEDUPE_RANGE_SAME
 0

	)

61 
	#FILE_DEDUPE_RANGE_DIFFERS
 1

	)

64 
	sfûe_dedu≥_ønge_öfo
 {

65 
__s64
 
	mde°_fd
;

66 
__u64
 
	mde°_off£t
;

67 
__u64
 
	mbyãs_dedu≥d
;

74 
__s32
 
	m°©us
;

75 
__u32
 
	mª£rved
;

79 
	sfûe_dedu≥_ønge
 {

80 
__u64
 
	m§c_off£t
;

81 
__u64
 
	m§c_Àngth
;

82 
__u16
 
	mde°_cou¡
;

83 
__u16
 
	mª£rved1
;

84 
__u32
 
	mª£rved2
;

85 
fûe_dedu≥_ønge_öfo
 
	möfo
[0];

89 
	sfûes_°©_°ru˘
 {

90 
	mƒ_fûes
;

91 
	mƒ_‰ì_fûes
;

92 
	mmax_fûes
;

95 
	söodes_°©_t
 {

96 
	mƒ_öodes
;

97 
	mƒ_unu£d
;

98 
	mdummy
[5];

102 
	#NR_FILE
 8192

	)

108 
	#MS_RDONLY
 1

	)

109 
	#MS_NOSUID
 2

	)

110 
	#MS_NODEV
 4

	)

111 
	#MS_NOEXEC
 8

	)

112 
	#MS_SYNCHRONOUS
 16

	)

113 
	#MS_REMOUNT
 32

	)

114 
	#MS_MANDLOCK
 64

	)

115 
	#MS_DIRSYNC
 128

	)

116 
	#MS_NOATIME
 1024

	)

117 
	#MS_NODIRATIME
 2048

	)

118 
	#MS_BIND
 4096

	)

119 
	#MS_MOVE
 8192

	)

120 
	#MS_REC
 16384

	)

121 
	#MS_VERBOSE
 32768

	)

123 
	#MS_SILENT
 32768

	)

124 
	#MS_POSIXACL
 (1<<16Ë

	)

125 
	#MS_UNBINDABLE
 (1<<17Ë

	)

126 
	#MS_PRIVATE
 (1<<18Ë

	)

127 
	#MS_SLAVE
 (1<<19Ë

	)

128 
	#MS_SHARED
 (1<<20Ë

	)

129 
	#MS_RELATIME
 (1<<21Ë

	)

130 
	#MS_KERNMOUNT
 (1<<22Ë

	)

131 
	#MS_I_VERSION
 (1<<23Ë

	)

132 
	#MS_STRICTATIME
 (1<<24Ë

	)

133 
	#MS_LAZYTIME
 (1<<25Ë

	)

136 
	#MS_SUBMOUNT
 (1<<26)

	)

137 
	#MS_NOREMOTELOCK
 (1<<27)

	)

138 
	#MS_NOSEC
 (1<<28)

	)

139 
	#MS_BORN
 (1<<29)

	)

140 
	#MS_ACTIVE
 (1<<30)

	)

141 
	#MS_NOUSER
 (1<<31)

	)

146 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
|\

147 
MS_LAZYTIME
)

	)

152 
	#MS_MGC_VAL
 0xC0ED0000

	)

153 
	#MS_MGC_MSK
 0xffff0000

	)

158 
	sfsx©å
 {

159 
__u32
 
	mfsx_xÊags
;

160 
__u32
 
	mfsx_extsize
;

161 
__u32
 
	mfsx_√xã¡s
;

162 
__u32
 
	mfsx_¥ojid
;

163 
__u32
 
	mfsx_cowextsize
;

164 
	mfsx_∑d
[8];

170 
	#FS_XFLAG_REALTIME
 0x00000001

	)

171 
	#FS_XFLAG_PREALLOC
 0x00000002

	)

172 
	#FS_XFLAG_IMMUTABLE
 0x00000008

	)

173 
	#FS_XFLAG_APPEND
 0x00000010

	)

174 
	#FS_XFLAG_SYNC
 0x00000020

	)

175 
	#FS_XFLAG_NOATIME
 0x00000040

	)

176 
	#FS_XFLAG_NODUMP
 0x00000080

	)

177 
	#FS_XFLAG_RTINHERIT
 0x00000100

	)

178 
	#FS_XFLAG_PROJINHERIT
 0x00000200

	)

179 
	#FS_XFLAG_NOSYMLINKS
 0x00000400

	)

180 
	#FS_XFLAG_EXTSIZE
 0x00000800

	)

181 
	#FS_XFLAG_EXTSZINHERIT
 0x00001000

	)

182 
	#FS_XFLAG_NODEFRAG
 0x00002000

	)

183 
	#FS_XFLAG_FILESTREAM
 0x00004000

	)

184 
	#FS_XFLAG_DAX
 0x00008000

	)

185 
	#FS_XFLAG_COWEXTSIZE
 0x00010000

	)

186 
	#FS_XFLAG_HASATTR
 0x80000000

	)

191 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

192 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

193 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

194 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

195 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

196 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

197 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

198 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

199 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

200 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

201 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

202 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

204 
	#BLKPG
 
	`_IO
(0x12,105)

	)

208 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

209 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

214 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

215 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

216 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

217 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

218 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

219 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

220 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

221 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

222 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

223 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

224 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

225 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

226 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

227 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

228 
	#BLKROTATIONAL
 
	`_IO
(0x12,126)

	)

229 
	#BLKZEROOUT
 
	`_IO
(0x12,127)

	)

235 
	#BMAP_IOCTL
 1

	)

236 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

237 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

238 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

239 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

240 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

241 
	#FICLONE
 
	`_IOW
(0x94, 9, )

	)

242 
	#FICLONERANGE
 
	`_IOW
(0x94, 13, 
fûe_˛⁄e_ønge
)

	)

243 
	#FIDEDUPERANGE
 
	`_IOWR
(0x94, 54, 
fûe_dedu≥_ønge
)

	)

245 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

246 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

247 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

248 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

249 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

250 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

251 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

252 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

253 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

254 
	#FS_IOC_FSGETXATTR
 
	`_IOR
 ('X', 31, 
fsx©å
)

	)

255 
	#FS_IOC_FSSETXATTR
 
	`_IOW
 ('X', 32, 
fsx©å
)

	)

261 
	#FS_KEY_DESCRIPTOR_SIZE
 8

	)

263 
	#FS_POLICY_FLAGS_PAD_4
 0x00

	)

264 
	#FS_POLICY_FLAGS_PAD_8
 0x01

	)

265 
	#FS_POLICY_FLAGS_PAD_16
 0x02

	)

266 
	#FS_POLICY_FLAGS_PAD_32
 0x03

	)

267 
	#FS_POLICY_FLAGS_PAD_MASK
 0x03

	)

268 
	#FS_POLICY_FLAGS_VALID
 0x03

	)

271 
	#FS_ENCRYPTION_MODE_INVALID
 0

	)

272 
	#FS_ENCRYPTION_MODE_AES_256_XTS
 1

	)

273 
	#FS_ENCRYPTION_MODE_AES_256_GCM
 2

	)

274 
	#FS_ENCRYPTION_MODE_AES_256_CBC
 3

	)

275 
	#FS_ENCRYPTION_MODE_AES_256_CTS
 4

	)

276 
	#FS_ENCRYPTION_MODE_AES_128_CBC
 5

	)

277 
	#FS_ENCRYPTION_MODE_AES_128_CTS
 6

	)

279 
	sfs¸y±_pﬁicy
 {

280 
__u8
 
	mvîsi⁄
;

281 
__u8
 
	mc⁄ã¡s_í¸y±i⁄_mode
;

282 
__u8
 
	mfûíames_í¸y±i⁄_mode
;

283 
__u8
 
	mÊags
;

284 
__u8
 
	mma°î_key_des¸ùt‹
[
FS_KEY_DESCRIPTOR_SIZE
];

287 
	#FS_IOC_SET_ENCRYPTION_POLICY
 
	`_IOR
('f', 19, 
fs¸y±_pﬁicy
)

	)

288 
	#FS_IOC_GET_ENCRYPTION_PWSALT
 
	`_IOW
('f', 20, 
__u8
[16])

	)

289 
	#FS_IOC_GET_ENCRYPTION_POLICY
 
	`_IOW
('f', 21, 
fs¸y±_pﬁicy
)

	)

292 
	#FS_KEY_DESC_PREFIX
 "fs¸y±:"

	)

293 
	#FS_KEY_DESC_PREFIX_SIZE
 8

	)

296 
	#FS_MAX_KEY_SIZE
 64

	)

298 
	sfs¸y±_key
 {

299 
__u32
 
	mmode
;

300 
__u8
 
	møw
[
FS_MAX_KEY_SIZE
];

301 
__u32
 
	msize
;

324 
	#FS_SECRM_FL
 0x00000001

	)

325 
	#FS_UNRM_FL
 0x00000002

	)

326 
	#FS_COMPR_FL
 0x00000004

	)

327 
	#FS_SYNC_FL
 0x00000008

	)

328 
	#FS_IMMUTABLE_FL
 0x00000010

	)

329 
	#FS_APPEND_FL
 0x00000020

	)

330 
	#FS_NODUMP_FL
 0x00000040

	)

331 
	#FS_NOATIME_FL
 0x00000080

	)

333 
	#FS_DIRTY_FL
 0x00000100

	)

334 
	#FS_COMPRBLK_FL
 0x00000200

	)

335 
	#FS_NOCOMP_FL
 0x00000400

	)

337 
	#FS_ENCRYPT_FL
 0x00000800

	)

338 
	#FS_BTREE_FL
 0x00001000

	)

339 
	#FS_INDEX_FL
 0x00001000

	)

340 
	#FS_IMAGIC_FL
 0x00002000

	)

341 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

342 
	#FS_NOTAIL_FL
 0x00008000

	)

343 
	#FS_DIRSYNC_FL
 0x00010000

	)

344 
	#FS_TOPDIR_FL
 0x00020000

	)

345 
	#FS_HUGE_FILE_FL
 0x00040000

	)

346 
	#FS_EXTENT_FL
 0x00080000

	)

347 
	#FS_EA_INODE_FL
 0x00200000

	)

348 
	#FS_EOFBLOCKS_FL
 0x00400000

	)

349 
	#FS_NOCOW_FL
 0x00800000

	)

350 
	#FS_INLINE_DATA_FL
 0x10000000

	)

351 
	#FS_PROJINHERIT_FL
 0x20000000

	)

352 
	#FS_RESERVED_FL
 0x80000000

	)

354 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

355 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

358 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

359 
	#SYNC_FILE_RANGE_WRITE
 2

	)

360 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

366 
	t__bôwi£
 
	t__kî√l_rwf_t
;

369 
	#RWF_HIPRI
 ((
__kî√l_rwf_t
)0x00000001)

	)

372 
	#RWF_DSYNC
 ((
__kî√l_rwf_t
)0x00000002)

	)

375 
	#RWF_SYNC
 ((
__kî√l_rwf_t
)0x00000004)

	)

378 
	#RWF_NOWAIT
 ((
__kî√l_rwf_t
)0x00000008)

	)

381 
	#RWF_SUPPORTED
 (
RWF_HIPRI
 | 
RWF_DSYNC
 | 
RWF_SYNC
 | 
RWF_NOWAIT
)

	)

	@/usr/include/linux/hdreg.h

2 #i‚de‡
_LINUX_HDREG_H


3 
	#_LINUX_HDREG_H


	)

5 
	~<löux/ty≥s.h
>

11 
	#HDIO_DRIVE_CMD_HDR_SIZE
 (4 * (
__u8
))

	)

12 
	#HDIO_DRIVE_HOB_HDR_SIZE
 (8 * (
__u8
))

	)

13 
	#HDIO_DRIVE_TASK_HDR_SIZE
 (8 * (
__u8
))

	)

15 
	#IDE_DRIVE_TASK_NO_DATA
 0

	)

16 
	#IDE_DRIVE_TASK_INVALID
 -1

	)

17 
	#IDE_DRIVE_TASK_SET_XFER
 1

	)

18 
	#IDE_DRIVE_TASK_IN
 2

	)

19 
	#IDE_DRIVE_TASK_OUT
 3

	)

20 
	#IDE_DRIVE_TASK_RAW_WRITE
 4

	)

25 
	#IDE_TASKFILE_STD_IN_FLAGS
 0xFE

	)

26 
	#IDE_HOB_STD_IN_FLAGS
 0x3C

	)

27 
	#IDE_TASKFILE_STD_OUT_FLAGS
 0xFE

	)

28 
	#IDE_HOB_STD_OUT_FLAGS
 0x3C

	)

30 
	tèsk_i‹eg_t
;

31 
	tßè_i‹eg_t
;

33 
	uide_ªg_vÆid_s
 {

34 
	mÆl
 : 16;

36 
	md©a
 : 1;

37 
	mîr‹_„©uª
 : 1;

38 
	m£˘‹
 : 1;

39 
	mn£˘‹
 : 1;

40 
	mlcyl
 : 1;

41 
	mhcyl
 : 1;

42 
	m£À˘
 : 1;

43 
	m°©us_comm™d
 : 1;

45 
	md©a_hob
 : 1;

46 
	mîr‹_„©uª_hob
 : 1;

47 
	m£˘‹_hob
 : 1;

48 
	mn£˘‹_hob
 : 1;

49 
	mlcyl_hob
 : 1;

50 
	mhcyl_hob
 : 1;

51 
	m£À˘_hob
 : 1;

52 
	mc⁄åﬁ_hob
 : 1;

53 } 
	mb
;

54 } 
	tide_ªg_vÆid_t
;

56 
	side_èsk_ªque°_s
 {

57 
__u8
 
	mio_p‹ts
[8];

58 
__u8
 
	mhob_p‹ts
[8];

59 
ide_ªg_vÆid_t
 
	mout_Êags
;

60 
ide_ªg_vÆid_t
 
	mö_Êags
;

61 
	md©a_pha£
;

62 
	mªq_cmd
;

63 
	mout_size
;

64 
	mö_size
;

65 } 
	tide_èsk_ªque°_t
;

67 
	side_io˘l_ªque°_s
 {

68 
ide_èsk_ªque°_t
 *
	mèsk_ªque°
;

69 *
	mout_buf„r
;

70 *
	mö_buf„r
;

71 } 
	tide_io˘l_ªque°_t
;

73 
	shd_drive_cmd_hdr
 {

74 
__u8
 
	mcomm™d
;

75 
__u8
 
	m£˘‹_numbî
;

76 
__u8
 
	m„©uª
;

77 
__u8
 
	m£˘‹_cou¡
;

80 
	shd_drive_èsk_hdr
 {

81 
__u8
 
	md©a
;

82 
__u8
 
	m„©uª
;

83 
__u8
 
	m£˘‹_cou¡
;

84 
__u8
 
	m£˘‹_numbî
;

85 
__u8
 
	mlow_cylödî
;

86 
__u8
 
	mhigh_cylödî
;

87 
__u8
 
	mdevi˚_hód
;

88 
__u8
 
	mcomm™d
;

89 } 
	tèsk_°ru˘_t
;

91 
	shd_drive_hob_hdr
 {

92 
__u8
 
	md©a
;

93 
__u8
 
	m„©uª
;

94 
__u8
 
	m£˘‹_cou¡
;

95 
__u8
 
	m£˘‹_numbî
;

96 
__u8
 
	mlow_cylödî
;

97 
__u8
 
	mhigh_cylödî
;

98 
__u8
 
	mdevi˚_hód
;

99 
__u8
 
	mc⁄åﬁ
;

100 } 
	thob_°ru˘_t
;

102 
	#TASKFILE_NO_DATA
 0x0000

	)

104 
	#TASKFILE_IN
 0x0001

	)

105 
	#TASKFILE_MULTI_IN
 0x0002

	)

107 
	#TASKFILE_OUT
 0x0004

	)

108 
	#TASKFILE_MULTI_OUT
 0x0008

	)

109 
	#TASKFILE_IN_OUT
 0x0010

	)

111 
	#TASKFILE_IN_DMA
 0x0020

	)

112 
	#TASKFILE_OUT_DMA
 0x0040

	)

113 
	#TASKFILE_IN_DMAQ
 0x0080

	)

114 
	#TASKFILE_OUT_DMAQ
 0x0100

	)

116 
	#TASKFILE_P_IN
 0x0200

	)

117 
	#TASKFILE_P_OUT
 0x0400

	)

118 
	#TASKFILE_P_IN_DMA
 0x0800

	)

119 
	#TASKFILE_P_OUT_DMA
 0x1000

	)

120 
	#TASKFILE_P_IN_DMAQ
 0x2000

	)

121 
	#TASKFILE_P_OUT_DMAQ
 0x4000

	)

122 
	#TASKFILE_48
 0x8000

	)

123 
	#TASKFILE_INVALID
 0x7fff

	)

126 
	#WIN_NOP
 0x00

	)

130 
	#CFA_REQ_EXT_ERROR_CODE
 0x03

	)

134 
	#WIN_SRST
 0x08

	)

135 
	#WIN_DEVICE_RESET
 0x08

	)

139 
	#WIN_RECAL
 0x10

	)

140 
	#WIN_RESTORE
 
WIN_RECAL


	)

144 
	#WIN_READ
 0x20

	)

145 
	#WIN_READ_ONCE
 0x21

	)

146 
	#WIN_READ_LONG
 0x22

	)

147 
	#WIN_READ_LONG_ONCE
 0x23

	)

148 
	#WIN_READ_EXT
 0x24

	)

149 
	#WIN_READDMA_EXT
 0x25

	)

150 
	#WIN_READDMA_QUEUED_EXT
 0x26

	)

151 
	#WIN_READ_NATIVE_MAX_EXT
 0x27

	)

155 
	#WIN_MULTREAD_EXT
 0x29

	)

159 
	#WIN_WRITE
 0x30

	)

160 
	#WIN_WRITE_ONCE
 0x31

	)

161 
	#WIN_WRITE_LONG
 0x32

	)

162 
	#WIN_WRITE_LONG_ONCE
 0x33

	)

163 
	#WIN_WRITE_EXT
 0x34

	)

164 
	#WIN_WRITEDMA_EXT
 0x35

	)

165 
	#WIN_WRITEDMA_QUEUED_EXT
 0x36

	)

166 
	#WIN_SET_MAX_EXT
 0x37

	)

167 
	#CFA_WRITE_SECT_WO_ERASE
 0x38

	)

168 
	#WIN_MULTWRITE_EXT
 0x39

	)

172 
	#WIN_WRITE_VERIFY
 0x3C

	)

176 
	#WIN_VERIFY
 0x40

	)

177 
	#WIN_VERIFY_ONCE
 0x41

	)

178 
	#WIN_VERIFY_EXT
 0x42

	)

182 
	#WIN_FORMAT
 0x50

	)

186 
	#WIN_INIT
 0x60

	)

190 
	#WIN_SEEK
 0x70

	)

192 
	#CFA_TRANSLATE_SECTOR
 0x87

	)

193 
	#WIN_DIAGNOSE
 0x90

	)

194 
	#WIN_SPECIFY
 0x91

	)

195 
	#WIN_DOWNLOAD_MICROCODE
 0x92

	)

196 
	#WIN_STANDBYNOW2
 0x94

	)

197 
	#WIN_STANDBY2
 0x96

	)

198 
	#WIN_SETIDLE2
 0x97

	)

199 
	#WIN_CHECKPOWERMODE2
 0x98

	)

200 
	#WIN_SLEEPNOW2
 0x99

	)

204 
	#WIN_PACKETCMD
 0xA0

	)

205 
	#WIN_PIDENTIFY
 0xA1

	)

206 
	#WIN_QUEUED_SERVICE
 0xA2

	)

207 
	#WIN_SMART
 0xB0

	)

208 
	#CFA_ERASE_SECTORS
 0xC0

	)

209 
	#WIN_MULTREAD
 0xC4

	)

210 
	#WIN_MULTWRITE
 0xC5

	)

211 
	#WIN_SETMULT
 0xC6

	)

212 
	#WIN_READDMA_QUEUED
 0xC7

	)

213 
	#WIN_READDMA
 0xC8

	)

214 
	#WIN_READDMA_ONCE
 0xC9

	)

215 
	#WIN_WRITEDMA
 0xCA

	)

216 
	#WIN_WRITEDMA_ONCE
 0xCB

	)

217 
	#WIN_WRITEDMA_QUEUED
 0xCC

	)

218 
	#CFA_WRITE_MULTI_WO_ERASE
 0xCD

	)

219 
	#WIN_GETMEDIASTATUS
 0xDA

	)

220 
	#WIN_ACKMEDIACHANGE
 0xDB

	)

221 
	#WIN_POSTBOOT
 0xDC

	)

222 
	#WIN_PREBOOT
 0xDD

	)

223 
	#WIN_DOORLOCK
 0xDE

	)

224 
	#WIN_DOORUNLOCK
 0xDF

	)

225 
	#WIN_STANDBYNOW1
 0xE0

	)

226 
	#WIN_IDLEIMMEDIATE
 0xE1

	)

227 
	#WIN_STANDBY
 0xE2

	)

228 
	#WIN_SETIDLE1
 0xE3

	)

229 
	#WIN_READ_BUFFER
 0xE4

	)

230 
	#WIN_CHECKPOWERMODE1
 0xE5

	)

231 
	#WIN_SLEEPNOW1
 0xE6

	)

232 
	#WIN_FLUSH_CACHE
 0xE7

	)

233 
	#WIN_WRITE_BUFFER
 0xE8

	)

234 
	#WIN_WRITE_SAME
 0xE9

	)

236 
	#WIN_FLUSH_CACHE_EXT
 0xEA

	)

237 
	#WIN_IDENTIFY
 0xEC

	)

238 
	#WIN_MEDIAEJECT
 0xED

	)

239 
	#WIN_IDENTIFY_DMA
 0xEE

	)

240 
	#WIN_SETFEATURES
 0xEF

	)

241 
	#EXABYTE_ENABLE_NEST
 0xF0

	)

242 
	#WIN_SECURITY_SET_PASS
 0xF1

	)

243 
	#WIN_SECURITY_UNLOCK
 0xF2

	)

244 
	#WIN_SECURITY_ERASE_PREPARE
 0xF3

	)

245 
	#WIN_SECURITY_ERASE_UNIT
 0xF4

	)

246 
	#WIN_SECURITY_FREEZE_LOCK
 0xF5

	)

247 
	#WIN_SECURITY_DISABLE
 0xF6

	)

248 
	#WIN_READ_NATIVE_MAX
 0xF8

	)

249 
	#WIN_SET_MAX
 0xF9

	)

250 
	#DISABLE_SEAGATE
 0xFB

	)

254 
	#SMART_READ_VALUES
 0xD0

	)

255 
	#SMART_READ_THRESHOLDS
 0xD1

	)

256 
	#SMART_AUTOSAVE
 0xD2

	)

257 
	#SMART_SAVE
 0xD3

	)

258 
	#SMART_IMMEDIATE_OFFLINE
 0xD4

	)

259 
	#SMART_READ_LOG_SECTOR
 0xD5

	)

260 
	#SMART_WRITE_LOG_SECTOR
 0xD6

	)

261 
	#SMART_WRITE_THRESHOLDS
 0xD7

	)

262 
	#SMART_ENABLE
 0xD8

	)

263 
	#SMART_DISABLE
 0xD9

	)

264 
	#SMART_STATUS
 0xDA

	)

265 
	#SMART_AUTO_OFFLINE
 0xDB

	)

269 
	#SMART_LCYL_PASS
 0x4F

	)

270 
	#SMART_HCYL_PASS
 0xC2

	)

273 
	#SETFEATURES_EN_8BIT
 0x01

	)

274 
	#SETFEATURES_EN_WCACHE
 0x02

	)

275 
	#SETFEATURES_DIS_DEFECT
 0x04

	)

276 
	#SETFEATURES_EN_APM
 0x05

	)

277 
	#SETFEATURES_EN_SAME_R
 0x22

	)

278 
	#SETFEATURES_DIS_MSN
 0x31

	)

279 
	#SETFEATURES_DIS_RETRY
 0x33

	)

280 
	#SETFEATURES_EN_AAM
 0x42

	)

281 
	#SETFEATURES_RW_LONG
 0x44

	)

282 
	#SETFEATURES_SET_CACHE
 0x54

	)

283 
	#SETFEATURES_DIS_RLA
 0x55

	)

284 
	#SETFEATURES_EN_RI
 0x5D

	)

285 
	#SETFEATURES_EN_SI
 0x5E

	)

286 
	#SETFEATURES_DIS_RPOD
 0x66

	)

287 
	#SETFEATURES_DIS_ECC
 0x77

	)

288 
	#SETFEATURES_DIS_8BIT
 0x81

	)

289 
	#SETFEATURES_DIS_WCACHE
 0x82

	)

290 
	#SETFEATURES_EN_DEFECT
 0x84

	)

291 
	#SETFEATURES_DIS_APM
 0x85

	)

292 
	#SETFEATURES_EN_ECC
 0x88

	)

293 
	#SETFEATURES_EN_MSN
 0x95

	)

294 
	#SETFEATURES_EN_RETRY
 0x99

	)

295 
	#SETFEATURES_EN_RLA
 0xAA

	)

296 
	#SETFEATURES_PREFETCH
 0xAB

	)

297 
	#SETFEATURES_EN_REST
 0xAC

	)

298 
	#SETFEATURES_4B_RW_LONG
 0xBB

	)

299 
	#SETFEATURES_DIS_AAM
 0xC2

	)

300 
	#SETFEATURES_EN_RPOD
 0xCC

	)

301 
	#SETFEATURES_DIS_RI
 0xDD

	)

302 
	#SETFEATURES_EN_SAME_M
 0xDD

	)

303 
	#SETFEATURES_DIS_SI
 0xDE

	)

307 
	#SECURITY_SET_PASSWORD
 0xBA

	)

308 
	#SECURITY_UNLOCK
 0xBB

	)

309 
	#SECURITY_ERASE_PREPARE
 0xBC

	)

310 
	#SECURITY_ERASE_UNIT
 0xBD

	)

311 
	#SECURITY_FREEZE_LOCK
 0xBE

	)

312 
	#SECURITY_DISABLE_PASSWORD
 0xBF

	)

314 
	shd_geomëry
 {

315 
	mhóds
;

316 
	m£˘‹s
;

317 
	mcylödîs
;

318 
	m°¨t
;

322 
	#HDIO_GETGEO
 0x0301

	)

323 
	#HDIO_GET_UNMASKINTR
 0x0302

	)

324 
	#HDIO_GET_MULTCOUNT
 0x0304

	)

325 
	#HDIO_GET_QDMA
 0x0305

	)

327 
	#HDIO_SET_XFER
 0x0306

	)

329 
	#HDIO_OBSOLETE_IDENTITY
 0x0307

	)

330 
	#HDIO_GET_KEEPSETTINGS
 0x0308

	)

331 
	#HDIO_GET_32BIT
 0x0309

	)

332 
	#HDIO_GET_NOWERR
 0x030®

	)

333 
	#HDIO_GET_DMA
 0x030b

	)

334 
	#HDIO_GET_NICE
 0x030¯

	)

335 
	#HDIO_GET_IDENTITY
 0x030d

	)

336 
	#HDIO_GET_WCACHE
 0x030ê

	)

337 
	#HDIO_GET_ACOUSTIC
 0x030‡

	)

338 
	#HDIO_GET_ADDRESS
 0x0310

	)

340 
	#HDIO_GET_BUSSTATE
 0x031®

	)

341 
	#HDIO_TRISTATE_HWIF
 0x031b

	)

342 
	#HDIO_DRIVE_RESET
 0x031¯

	)

343 
	#HDIO_DRIVE_TASKFILE
 0x031d

	)

344 
	#HDIO_DRIVE_TASK
 0x031ê

	)

345 
	#HDIO_DRIVE_CMD
 0x031‡

	)

346 
	#HDIO_DRIVE_CMD_AEB
 
HDIO_DRIVE_TASK


	)

349 
	#HDIO_SET_MULTCOUNT
 0x0321

	)

350 
	#HDIO_SET_UNMASKINTR
 0x0322

	)

351 
	#HDIO_SET_KEEPSETTINGS
 0x0323

	)

352 
	#HDIO_SET_32BIT
 0x0324

	)

353 
	#HDIO_SET_NOWERR
 0x0325

	)

354 
	#HDIO_SET_DMA
 0x0326

	)

355 
	#HDIO_SET_PIO_MODE
 0x0327

	)

356 
	#HDIO_SCAN_HWIF
 0x0328

	)

357 
	#HDIO_UNREGISTER_HWIF
 0x032®

	)

358 
	#HDIO_SET_NICE
 0x0329

	)

359 
	#HDIO_SET_WCACHE
 0x032b

	)

360 
	#HDIO_SET_ACOUSTIC
 0x032¯

	)

361 
	#HDIO_SET_BUSSTATE
 0x032d

	)

362 
	#HDIO_SET_QDMA
 0x032ê

	)

363 
	#HDIO_SET_ADDRESS
 0x032‡

	)

367 
	mBUSSTATE_OFF
 = 0,

368 
	mBUSSTATE_ON
,

369 
	mBUSSTATE_TRISTATE


378 
	#__NEW_HD_DRIVE_ID


	)

386 
	shd_driveid
 {

387 
	mc⁄fig
;

388 
	mcyls
;

389 
	mª£rved2
;

390 
	mhóds
;

391 
	måack_byãs
;

392 
	m£˘‹_byãs
;

393 
	m£˘‹s
;

394 
	mvíd‹0
;

395 
	mvíd‹1
;

396 
	mvíd‹2
;

397 
	m£rül_no
[20];

398 
	mbuf_ty≥
;

399 
	mbuf_size
;

402 
	mecc_byãs
;

403 
	mfw_ªv
[8];

404 
	mmodñ
[40];

405 
	mmax_mu…£˘
;

406 
	mvíd‹3
;

407 
	mdw‹d_io
;

408 
	mvíd‹4
;

409 
	mˇ∑bûôy
;

415 
	mª£rved50
;

416 
	mvíd‹5
;

417 
	mtPIO
;

418 
	mvíd‹6
;

419 
	mtDMA
;

420 
	mfõld_vÆid
;

425 
	mcur_cyls
;

426 
	mcur_hóds
;

427 
	mcur_£˘‹s
;

428 
	mcur_ˇ∑côy0
;

429 
	mcur_ˇ∑côy1
;

430 
	mmu…£˘
;

431 
	mmu…£˘_vÆid
;

432 
	mlba_ˇ∑côy
;

433 
	mdma_1w‹d
;

434 
	mdma_mw‹d
;

435 
	meide_pio_modes
;

436 
	meide_dma_mö
;

437 
	meide_dma_time
;

438 
	meide_pio
;

439 
	meide_pio_i‹dy
;

440 
	mw‹ds69_70
[2];

443 
	mw‹ds71_74
[4];

446 
	mqueue_dïth
;

450 
	mw‹ds76_79
[4];

451 
	mmaj‹_ªv_num
;

452 
	mmö‹_ªv_num
;

453 
	mcomm™d_£t_1
;

471 
	mcomm™d_£t_2
;

489 
	mcfs£
;

501 
	mcfs_íabÀ_1
;

520 
	mcfs_íabÀ_2
;

539 
	mcsf_deÁu…
;

551 
	mdma_u…ø
;

552 
	må£uc
;

553 
	måsEuc
;

554 
	mCurAPMvÆues
;

555 
	mm¥c
;

556 
	mhw_c⁄fig
;

574 
	macou°ic
;

578 
	mm§qs
;

579 
	msx„π
;

580 
	mßl
;

581 
	m•g
;

582 
	mlba_ˇ∑côy_2
;

583 
	mw‹ds104_125
[22];

584 
	mœ°_lun
;

585 
	mw‹d127
;

593 
	mdlf
;

605 
	mcsfo
;

613 
	mw‹ds130_155
[26];

614 
	mw‹d156
;

615 
	mw‹ds157_159
[3];

616 
	mcÁ_powî
;

623 
	mw‹ds161_175
[15];

624 
	mw‹ds176_205
[30];

625 
	mw‹ds206_254
[49];

626 
	möãgrôy_w‹d
;

637 
	#IDE_NICE_DSC_OVERLAP
 (0Ë

	)

638 
	#IDE_NICE_ATAPI_OVERLAP
 (1Ë

	)

639 
	#IDE_NICE_1
 (3Ë

	)

640 
	#IDE_NICE_0
 (2Ë

	)

641 
	#IDE_NICE_2
 (4Ë

	)

	@/usr/include/linux/kernel.h

2 #i‚de‡
_LINUX_KERNEL_H


3 
	#_LINUX_KERNEL_H


	)

5 
	~<löux/sysöfo.h
>

6 
	~<löux/c⁄°.h
>

	@/usr/include/linux/major.h

2 #i‚de‡
_LINUX_MAJOR_H


3 
	#_LINUX_MAJOR_H


	)

10 
	#UNNAMED_MAJOR
 0

	)

11 
	#MEM_MAJOR
 1

	)

12 
	#RAMDISK_MAJOR
 1

	)

13 
	#FLOPPY_MAJOR
 2

	)

14 
	#PTY_MASTER_MAJOR
 2

	)

15 
	#IDE0_MAJOR
 3

	)

16 
	#HD_MAJOR
 
IDE0_MAJOR


	)

17 
	#PTY_SLAVE_MAJOR
 3

	)

18 
	#TTY_MAJOR
 4

	)

19 
	#TTYAUX_MAJOR
 5

	)

20 
	#LP_MAJOR
 6

	)

21 
	#VCS_MAJOR
 7

	)

22 
	#LOOP_MAJOR
 7

	)

23 
	#SCSI_DISK0_MAJOR
 8

	)

24 
	#SCSI_TAPE_MAJOR
 9

	)

25 
	#MD_MAJOR
 9

	)

26 
	#MISC_MAJOR
 10

	)

27 
	#SCSI_CDROM_MAJOR
 11

	)

28 
	#MUX_MAJOR
 11

	)

29 
	#XT_DISK_MAJOR
 13

	)

30 
	#INPUT_MAJOR
 13

	)

31 
	#SOUND_MAJOR
 14

	)

32 
	#CDU31A_CDROM_MAJOR
 15

	)

33 
	#JOYSTICK_MAJOR
 15

	)

34 
	#GOLDSTAR_CDROM_MAJOR
 16

	)

35 
	#OPTICS_CDROM_MAJOR
 17

	)

36 
	#SANYO_CDROM_MAJOR
 18

	)

37 
	#CYCLADES_MAJOR
 19

	)

38 
	#CYCLADESAUX_MAJOR
 20

	)

39 
	#MITSUMI_X_CDROM_MAJOR
 20

	)

40 
	#MFM_ACORN_MAJOR
 21

	)

41 
	#SCSI_GENERIC_MAJOR
 21

	)

42 
	#IDE1_MAJOR
 22

	)

43 
	#DIGICU_MAJOR
 22

	)

44 
	#DIGI_MAJOR
 23

	)

45 
	#MITSUMI_CDROM_MAJOR
 23

	)

46 
	#CDU535_CDROM_MAJOR
 24

	)

47 
	#STL_SERIALMAJOR
 24

	)

48 
	#MATSUSHITA_CDROM_MAJOR
 25

	)

49 
	#STL_CALLOUTMAJOR
 25

	)

50 
	#MATSUSHITA_CDROM2_MAJOR
 26

	)

51 
	#QIC117_TAPE_MAJOR
 27

	)

52 
	#MATSUSHITA_CDROM3_MAJOR
 27

	)

53 
	#MATSUSHITA_CDROM4_MAJOR
 28

	)

54 
	#STL_SIOMEMMAJOR
 28

	)

55 
	#ACSI_MAJOR
 28

	)

56 
	#AZTECH_CDROM_MAJOR
 29

	)

57 
	#FB_MAJOR
 29

	)

58 
	#MTD_BLOCK_MAJOR
 31

	)

59 
	#CM206_CDROM_MAJOR
 32

	)

60 
	#IDE2_MAJOR
 33

	)

61 
	#IDE3_MAJOR
 34

	)

62 
	#Z8530_MAJOR
 34

	)

63 
	#XPRAM_MAJOR
 35

	)

64 
	#NETLINK_MAJOR
 36

	)

65 
	#PS2ESDI_MAJOR
 36

	)

66 
	#IDETAPE_MAJOR
 37

	)

67 
	#Z2RAM_MAJOR
 37

	)

68 
	#APBLOCK_MAJOR
 38

	)

69 
	#DDV_MAJOR
 39

	)

70 
	#NBD_MAJOR
 43

	)

71 
	#RISCOM8_NORMAL_MAJOR
 48

	)

72 
	#DAC960_MAJOR
 48

	)

73 
	#RISCOM8_CALLOUT_MAJOR
 49

	)

74 
	#MKISS_MAJOR
 55

	)

75 
	#DSP56K_MAJOR
 55

	)

77 
	#IDE4_MAJOR
 56

	)

78 
	#IDE5_MAJOR
 57

	)

80 
	#SCSI_DISK1_MAJOR
 65

	)

81 
	#SCSI_DISK2_MAJOR
 66

	)

82 
	#SCSI_DISK3_MAJOR
 67

	)

83 
	#SCSI_DISK4_MAJOR
 68

	)

84 
	#SCSI_DISK5_MAJOR
 69

	)

85 
	#SCSI_DISK6_MAJOR
 70

	)

86 
	#SCSI_DISK7_MAJOR
 71

	)

88 
	#COMPAQ_SMART2_MAJOR
 72

	)

89 
	#COMPAQ_SMART2_MAJOR1
 73

	)

90 
	#COMPAQ_SMART2_MAJOR2
 74

	)

91 
	#COMPAQ_SMART2_MAJOR3
 75

	)

92 
	#COMPAQ_SMART2_MAJOR4
 76

	)

93 
	#COMPAQ_SMART2_MAJOR5
 77

	)

94 
	#COMPAQ_SMART2_MAJOR6
 78

	)

95 
	#COMPAQ_SMART2_MAJOR7
 79

	)

97 
	#SPECIALIX_NORMAL_MAJOR
 75

	)

98 
	#SPECIALIX_CALLOUT_MAJOR
 76

	)

100 
	#AURORA_MAJOR
 79

	)

102 
	#I2O_MAJOR
 80

	)

104 
	#SHMIQ_MAJOR
 85

	)

105 
	#SCSI_CHANGER_MAJOR
 86

	)

107 
	#IDE6_MAJOR
 88

	)

108 
	#IDE7_MAJOR
 89

	)

109 
	#IDE8_MAJOR
 90

	)

110 
	#MTD_CHAR_MAJOR
 90

	)

111 
	#IDE9_MAJOR
 91

	)

113 
	#DASD_MAJOR
 94

	)

115 
	#MDISK_MAJOR
 95

	)

117 
	#UBD_MAJOR
 98

	)

119 
	#PP_MAJOR
 99

	)

120 
	#JSFD_MAJOR
 99

	)

122 
	#PHONE_MAJOR
 100

	)

124 
	#COMPAQ_CISS_MAJOR
 104

	)

125 
	#COMPAQ_CISS_MAJOR1
 105

	)

126 
	#COMPAQ_CISS_MAJOR2
 106

	)

127 
	#COMPAQ_CISS_MAJOR3
 107

	)

128 
	#COMPAQ_CISS_MAJOR4
 108

	)

129 
	#COMPAQ_CISS_MAJOR5
 109

	)

130 
	#COMPAQ_CISS_MAJOR6
 110

	)

131 
	#COMPAQ_CISS_MAJOR7
 111

	)

133 
	#VIODASD_MAJOR
 112

	)

134 
	#VIOCD_MAJOR
 113

	)

136 
	#ATARAID_MAJOR
 114

	)

138 
	#SCSI_DISK8_MAJOR
 128

	)

139 
	#SCSI_DISK9_MAJOR
 129

	)

140 
	#SCSI_DISK10_MAJOR
 130

	)

141 
	#SCSI_DISK11_MAJOR
 131

	)

142 
	#SCSI_DISK12_MAJOR
 132

	)

143 
	#SCSI_DISK13_MAJOR
 133

	)

144 
	#SCSI_DISK14_MAJOR
 134

	)

145 
	#SCSI_DISK15_MAJOR
 135

	)

147 
	#UNIX98_PTY_MASTER_MAJOR
 128

	)

148 
	#UNIX98_PTY_MAJOR_COUNT
 8

	)

149 
	#UNIX98_PTY_SLAVE_MAJOR
 (
UNIX98_PTY_MASTER_MAJOR
+
UNIX98_PTY_MAJOR_COUNT
)

	)

151 
	#DRBD_MAJOR
 147

	)

152 
	#RTF_MAJOR
 150

	)

153 
	#RAW_MAJOR
 162

	)

155 
	#USB_ACM_MAJOR
 166

	)

156 
	#USB_ACM_AUX_MAJOR
 167

	)

157 
	#USB_CHAR_MAJOR
 180

	)

159 
	#MMC_BLOCK_MAJOR
 179

	)

161 
	#VXVM_MAJOR
 199

	)

162 
	#VXSPEC_MAJOR
 200

	)

163 
	#VXDMP_MAJOR
 201

	)

165 
	#XENVBD_MAJOR
 202

	)

167 
	#MSR_MAJOR
 202

	)

168 
	#CPUID_MAJOR
 203

	)

170 
	#OSST_MAJOR
 206

	)

172 
	#IBM_TTY3270_MAJOR
 227

	)

173 
	#IBM_FS3270_MAJOR
 228

	)

175 
	#VIOTAPE_MAJOR
 230

	)

177 
	#BLOCK_EXT_MAJOR
 259

	)

178 
	#SCSI_OSD_MAJOR
 260

	)

	@/usr/include/linux/module.h

2 #i‚de‡
_LINUX_MODULE_H


3 
	#_LINUX_MODULE_H


	)

6 
	#MODULE_INIT_IGNORE_MODVERSIONS
 1

	)

7 
	#MODULE_INIT_IGNORE_VERMAGIC
 2

	)

	@/usr/include/linux/poll.h

1 
	~<asm/pﬁl.h
>

	@/usr/include/linux/sched.h

2 #i‚de‡
_LINUX_SCHED_H


3 
	#_LINUX_SCHED_H


	)

8 
	#CSIGNAL
 0x000000f‡

	)

9 
	#CLONE_VM
 0x00000100

	)

10 
	#CLONE_FS
 0x00000200

	)

11 
	#CLONE_FILES
 0x00000400

	)

12 
	#CLONE_SIGHAND
 0x00000800

	)

13 
	#CLONE_PTRACE
 0x00002000

	)

14 
	#CLONE_VFORK
 0x00004000

	)

15 
	#CLONE_PARENT
 0x00008000

	)

16 
	#CLONE_THREAD
 0x00010000

	)

17 
	#CLONE_NEWNS
 0x00020000

	)

18 
	#CLONE_SYSVSEM
 0x00040000

	)

19 
	#CLONE_SETTLS
 0x00080000

	)

20 
	#CLONE_PARENT_SETTID
 0x00100000

	)

21 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

22 
	#CLONE_DETACHED
 0x00400000

	)

23 
	#CLONE_UNTRACED
 0x00800000

	)

24 
	#CLONE_CHILD_SETTID
 0x01000000

	)

25 
	#CLONE_NEWCGROUP
 0x02000000

	)

26 
	#CLONE_NEWUTS
 0x04000000

	)

27 
	#CLONE_NEWIPC
 0x08000000

	)

28 
	#CLONE_NEWUSER
 0x10000000

	)

29 
	#CLONE_NEWPID
 0x20000000

	)

30 
	#CLONE_NEWNET
 0x40000000

	)

31 
	#CLONE_IO
 0x80000000

	)

36 
	#SCHED_NORMAL
 0

	)

37 
	#SCHED_FIFO
 1

	)

38 
	#SCHED_RR
 2

	)

39 
	#SCHED_BATCH
 3

	)

41 
	#SCHED_IDLE
 5

	)

42 
	#SCHED_DEADLINE
 6

	)

45 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

50 
	#SCHED_FLAG_RESET_ON_FORK
 0x01

	)

51 
	#SCHED_FLAG_RECLAIM
 0x02

	)

	@/usr/include/linux/stddef.h

4 #i‚de‡
__Æways_ölöe


5 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 265983

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/linux/wait.h

2 #i‚de‡
_LINUX_WAIT_H


3 
	#_LINUX_WAIT_H


	)

5 
	#WNOHANG
 0x00000001

	)

6 
	#WUNTRACED
 0x00000002

	)

7 
	#WSTOPPED
 
WUNTRACED


	)

8 
	#WEXITED
 0x00000004

	)

9 
	#WCONTINUED
 0x00000008

	)

10 
	#WNOWAIT
 0x01000000

	)

12 
	#__WNOTHREAD
 0x20000000

	)

13 
	#__WALL
 0x40000000

	)

14 
	#__WCLONE
 0x80000000

	)

17 
	#P_ALL
 0

	)

18 
	#P_PID
 1

	)

19 
	#P_PGID
 2

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	~<bôs/ty≥s/__FILE.h
>

37 
	~<bôs/ty≥s/FILE.h
>

39 
	#_STDIO_USES_IOSTREAM


	)

41 
	~<bôs/libio.h
>

43 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


44 #ifde‡
__GNUC__


45 #i‚de‡
_VA_LIST_DEFINED


46 
_G_va_li°
 
	tva_li°
;

47 
	#_VA_LIST_DEFINED


	)

50 
	~<°d¨g.h
>

54 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


55 #i‚de‡
__off_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__off_t
 
	toff_t
;

59 
__off64_t
 
	toff_t
;

61 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

69 #ifde‡
__USE_XOPEN2K8


70 #i‚de‡
__ssize_t_deföed


71 
__ssize_t
 
	tssize_t
;

72 
	#__ssize_t_deföed


	)

77 #i‚de‡
__USE_FILE_OFFSET64


78 
_G_Âos_t
 
	tÂos_t
;

80 
_G_Âos64_t
 
	tÂos_t
;

82 #ifde‡
__USE_LARGEFILE64


83 
_G_Âos64_t
 
	tÂos64_t
;

87 
	#_IOFBF
 0

	)

88 
	#_IOLBF
 1

	)

89 
	#_IONBF
 2

	)

93 #i‚de‡
BUFSIZ


94 
	#BUFSIZ
 
_IO_BUFSIZ


	)

100 #i‚de‡
EOF


101 
	#EOF
 (-1)

	)

107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

110 #ifde‡
__USE_GNU


111 
	#SEEK_DATA
 3

	)

112 
	#SEEK_HOLE
 4

	)

116 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


118 
	#P_tmpdú
 "/tmp"

	)

131 
	~<bôs/°dio_lim.h
>

135 
_IO_FILE
 *
°dö
;

136 
_IO_FILE
 *
°dout
;

137 
_IO_FILE
 *
°dîr
;

139 
	#°dö
 
°dö


	)

140 
	#°dout
 
°dout


	)

141 
	#°dîr
 
°dîr


	)

144 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

146 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

148 #ifde‡
__USE_ATFILE


150 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

151 c⁄° *
__√w
Ë
__THROW
;

158 #i‚de‡
__USE_FILE_OFFSET64


159 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

161 #ifde‡
__REDIRECT


162 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

164 
	#tmpfûe
 
tmpfûe64


	)

168 #ifde‡
__USE_LARGEFILE64


169 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

173 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

175 #ifde‡
__USE_MISC


178 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


190 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

191 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

199 
	`f˛o£
 (
FILE
 *
__°ªam
);

204 
	`fÊush
 (
FILE
 *
__°ªam
);

206 #ifde‡
__USE_MISC


213 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

216 #ifde‡
__USE_GNU


223 
	`f˛o£Æl
 ();

227 #i‚de‡
__USE_FILE_OFFSET64


232 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

233 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

238 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

239 c⁄° *
__ª°ri˘
 
__modes
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

242 #ifde‡
__REDIRECT


243 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

244 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

245 
__wur
;

246 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

249 
__wur
;

251 
	#f›í
 
f›í64


	)

252 
	#‰e›í
 
‰e›í64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

257 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

258 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

263 #ifdef 
__USE_POSIX


265 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

268 #ifdef 
__USE_GNU


271 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

272 c⁄° *
__ª°ri˘
 
__modes
,

273 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

276 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

278 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

279 
__THROW
 
__wur
;

284 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

290 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

294 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

295 
__modes
, 
size_t
 
__n
Ë
__THROW
;

297 #ifdef 
__USE_MISC


300 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

301 
size_t
 
__size
Ë
__THROW
;

304 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

312 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

313 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

318 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

320 
	$•rötf
 (*
__ª°ri˘
 
__s
,

321 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

327 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

328 
_G_va_li°
 
__¨g
);

333 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

335 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

336 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

338 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


340 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

341 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

342 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

344 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

345 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

346 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

349 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

352 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

353 
_G_va_li°
 
__¨g
)

354 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

355 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

356 c⁄° *
__ª°ri˘
 
__fmt
, ...)

357 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

358 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

359 c⁄° *
__ª°ri˘
 
__fmt
, ...)

360 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

363 #ifde‡
__USE_XOPEN2K8


365 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

366 
_G_va_li°
 
__¨g
)

367 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

368 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

369 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

377 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

378 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

383 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

385 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

386 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

388 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

389 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

390 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

391 #ifde‡
__REDIRECT


395 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

396 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

397 
__isoc99_fsˇnf
Ë
__wur
;

398 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

399 
__isoc99_sˇnf
Ë
__wur
;

400 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

401 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

402 
__isoc99_ssˇnf
);

404 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

405 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

406 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
	#fsˇnf
 
__isoc99_fsˇnf


	)

410 
	#sˇnf
 
__isoc99_sˇnf


	)

411 
	#ssˇnf
 
__isoc99_ssˇnf


	)

415 #ifdef 
__USE_ISOC99


420 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

421 
_G_va_li°
 
__¨g
)

422 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

428 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

429 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

432 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

433 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

434 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

436 #i‡!
deföed
 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
vfsˇnf
,

444 (
FILE
 *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

446 
__isoc99_vfsˇnf
)

447 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

448 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

449 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

450 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

451 
	`__REDIRECT_NTH
 (
vssˇnf
,

452 (c⁄° *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
,

454 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

455 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

457 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
,

459 
_G_va_li°
 
__¨g
Ë
__wur
;

460 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

461 
_G_va_li°
 
__¨g
Ë
__wur
;

462 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

463 c⁄° *
__ª°ri˘
 
__f‹m©
,

464 
_G_va_li°
 
__¨g
Ë
__THROW
;

465 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

466 
	#vsˇnf
 
__isoc99_vsˇnf


	)

467 
	#vssˇnf
 
__isoc99_vssˇnf


	)

477 
	`fgëc
 (
FILE
 *
__°ªam
);

478 
	`gëc
 (
FILE
 *
__°ªam
);

484 
	`gëch¨
 ();

488 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

490 #ifde‡
__USE_POSIX199506


495 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

496 
	`gëch¨_u∆ocked
 ();

499 #ifde‡
__USE_MISC


506 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

517 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

518 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

524 
	`putch¨
 (
__c
);

528 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
_G_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 #ifde‡
__USE_EXTERN_INLINES


859 
	~<bôs/°dio.h
>

861 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


862 
	~<bôs/°dio2.h
>

864 #ifde‡
__LDBL_COMPAT


865 
	~<bôs/°dio-ldbl.h
>

868 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

541 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

542 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

549 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

550 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

552 #ifde‡
__USE_GNU


558 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

563 
	$‰ì
 (*
__±r
Ë
__THROW
;

565 #ifde‡
__USE_MISC


566 
	~<Æloˇ.h
>

569 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

570 || 
deföed
 
__USE_MISC


572 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

575 #ifde‡
__USE_XOPEN2K


577 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

581 #ifde‡
__USE_ISOC11


583 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

584 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

588 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

592 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

594 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


596 #ifde‡
__˝lu•lus


597 "C++" 
	$©_quick_exô
 ((*
__func
) ())

598 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

600 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #ifdef 
__USE_MISC


607 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

614 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

616 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


620 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

623 #ifde‡
__USE_ISOC99


626 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_GNU


636 *
	$£cuª_gëív
 (c⁄° *
__«me
)

637 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


644 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

647 #ifde‡
__USE_XOPEN2K


650 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

651 
__THROW
 
	`__n⁄nuŒ
 ((2));

654 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifdef 
__USE_MISC


661 
	$˛óªnv
 (Ë
__THROW
;

665 #i‡
deföed
 
__USE_MISC
 \

666 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

672 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


684 #i‚de‡
__USE_FILE_OFFSET64


685 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

687 #ifde‡
__REDIRECT


688 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

689 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

691 
	#mk°emp
 
mk°emp64


	)

694 #ifde‡
__USE_LARGEFILE64


695 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__USE_MISC


706 #i‚de‡
__USE_FILE_OFFSET64


707 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

711 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

713 
	#mk°emps
 
mk°emps64


	)

716 #ifde‡
__USE_LARGEFILE64


717 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

718 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_XOPEN2K8


728 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

731 #ifde‡
__USE_GNU


738 #i‚de‡
__USE_FILE_OFFSET64


739 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__REDIRECT


742 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

743 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 
	#mko°emp
 
mko°emp64


	)

748 #ifde‡
__USE_LARGEFILE64


749 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

758 #i‚de‡
__USE_FILE_OFFSET64


759 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

760 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

762 #ifde‡
__REDIRECT


763 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

764 
__Êags
), 
mko°emps64
)

765 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

767 
	#mko°emps
 
mko°emps64


	)

770 #ifde‡
__USE_LARGEFILE64


771 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

772 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

784 #ifdef 
__USE_GNU


787 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


797 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

798 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

803 #i‚de‡
__COMPAR_FN_T


804 
	#__COMPAR_FN_T


	)

805 (*
	t__com∑r_‚_t
) (const *, const *);

807 #ifdef 
__USE_GNU


808 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

811 #ifde‡
__USE_GNU


812 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

817 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

818 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

819 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

821 #ifde‡
__USE_EXTERN_INLINES


822 
	~<bôs/°dlib-b£¨ch.h
>

827 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

828 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

829 #ifde‡
__USE_GNU


830 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

832 
	`__n⁄nuŒ
 ((1, 4));

837 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

838 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

840 #ifde‡
__USE_ISOC99


841 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

842 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
div_t
 
	$div
 (
__numî
, 
__díom
)

850 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

852 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 #ifde‡
__USE_ISOC99


855 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

856 
__díom
)

857 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

861 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

862 || 
deföed
 
__USE_MISC


869 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

870 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

875 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

876 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

881 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

882 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

885 #ifde‡
__USE_MISC


887 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

888 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

889 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

894 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

899 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

901 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

902 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

906 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

907 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

908 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

910 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

911 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

912 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

922 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

923 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

926 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

930 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

931 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

934 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

935 
__THROW
;

938 #ifde‡
__USE_MISC


943 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

947 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


954 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

955 *c⁄° *
__ª°ri˘
 
__tokís
,

956 **
__ª°ri˘
 
__vÆuï
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

961 #ifde‡
__USE_XOPEN


963 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 #ifde‡
__USE_XOPEN2KXSI


971 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

974 #ifde‡
__USE_XOPEN_EXTENDED


979 
	$gø¡±
 (
__fd
Ë
__THROW
;

983 
	$u∆ock±
 (
__fd
Ë
__THROW
;

988 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

991 #ifde‡
__USE_GNU


995 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

996 
__THROW
 
	`__n⁄nuŒ
 ((2));

999 
	`gë±
 ();

1002 #ifde‡
__USE_MISC


1006 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1013 
	$ây¶Ÿ
 (Ë
__THROW
;

1016 
	~<bôs/°dlib-Êﬂt.h
>

1019 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1020 
	~<bôs/°dlib.h
>

1022 #ifde‡
__LDBL_COMPAT


1023 
	~<bôs/°dlib-ldbl.h
>

1026 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #ifde‡
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	~<bôs/gë›t_posix.h
>

876 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


880 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

884 #i‡
deföed
 
__USE_MISC


887 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

888 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

898 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

900 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$vh™gup
 (Ë
__THROW
;

910 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

919 
size_t
 
__off£t
, 
__sˇÀ
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

930 *
	$gëu£rshñl
 (Ë
__THROW
;

931 
	$ídu£rshñl
 (Ë
__THROW
;

932 
	$£tu£rshñl
 (Ë
__THROW
;

938 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

942 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

945 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

949 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

957 
	`fsync
 (
__fd
);

960 #ifde‡
__USE_GNU


963 
	$syncfs
 (
__fd
Ë
__THROW
;

967 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


970 
	`gëho°id
 ();

973 
	$sync
 (Ë
__THROW
;

976 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


979 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

984 
	$gëdèbÀsize
 (Ë
__THROW
;

990 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


993 #i‚de‡
__USE_FILE_OFFSET64


994 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

997 #ifde‡
__REDIRECT_NTH


998 
	`__REDIRECT_NTH
 (
åunˇã
,

999 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1000 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1002 
	#åunˇã
 
åunˇã64


	)

1005 #ifde‡
__USE_LARGEFILE64


1006 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1012 #i‡
deföed
 
__USE_POSIX199309
 \

1013 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1016 #i‚de‡
__USE_FILE_OFFSET64


1017 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1019 #ifde‡
__REDIRECT_NTH


1020 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1021 
·runˇã64
Ë
__wur
;

1023 
	#·runˇã
 
·runˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1033 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1034 || 
deföed
 
__USE_MISC


1038 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1044 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1048 #ifde‡
__USE_MISC


1059 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1064 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1076 
	#F_ULOCK
 0

	)

1077 
	#F_LOCK
 1

	)

1078 
	#F_TLOCK
 2

	)

1079 
	#F_TEST
 3

	)

1081 #i‚de‡
__USE_FILE_OFFSET64


1082 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1084 #ifde‡
__REDIRECT


1085 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1086 
lockf64
Ë
__wur
;

1088 
	#lockf
 
lockf64


	)

1091 #ifde‡
__USE_LARGEFILE64


1092 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1097 #ifde‡
__USE_GNU


1102 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1103 (
__exãnsi⁄__
 \

1104 ({ 
__ªsu…
; \

1105 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1106 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1107 
__ªsu…
; 
	}
}))

	)

1110 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1111 
__outfd
, 
__off64_t
 *
__poutoff
,

1112 
size_t
 
__Àngth
, 
__Êags
);

1115 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1118 
fd©async
 (
__fûdes
);

1124 #ifdef 
__USE_XOPEN


1126 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1131 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1132 
__THROW
 
	`__n⁄nuŒ
 ((1));

1139 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1140 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1149 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1152 *
	`cu£rid
 (*
__s
);

1158 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1159 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1160 (*
__∑ª¡
) (),

1161 (*
__chûd
Ë()Ë
__THROW
;

1164 #ifde‡
__USE_MISC


1167 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1171 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1172 
	~<bôs/uni°d.h
>

1175 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/poll.h

1 
	~<asm-gíîic/pﬁl.h
>

	@/usr/include/asm/types.h

2 #i‚de‡
_ASM_X86_TYPES_H


3 
	#_ASM_X86_TYPES_H


	)

5 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 27

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/linux/const.h

4 #i‚de‡
_LINUX_CONST_H


5 
	#_LINUX_CONST_H


	)

16 #ifde‡
__ASSEMBLY__


17 
	#_AC
(
X
,
Y
Ë
	)
X

18 
	#_AT
(
T
,
X
Ë
	)
X

20 
	#__AC
(
X
,
Y
Ë(X##Y)

	)

21 
	#_AC
(
X
,
Y
Ë
	`__AC
(X,Y)

	)

22 
	#_AT
(
T
,
X
Ë((T)(X))

	)

25 
	#_BITUL
(
x
Ë(
	`_AC
(1,
UL
Ë<< (x))

	)

26 
	#_BITULL
(
x
Ë(
	`_AC
(1,
ULL
Ë<< (x))

	)

28 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

29 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

31 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/ioctl.h

2 #i‚de‡
_LINUX_IOCTL_H


3 
	#_LINUX_IOCTL_H


	)

5 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

2 #i‚de‡
_LINUX_LIMITS_H


3 
	#_LINUX_LIMITS_H


	)

5 
	#NR_OPEN
 1024

	)

7 
	#NGROUPS_MAX
 65536

	)

8 
	#ARG_MAX
 131072

	)

9 
	#LINK_MAX
 127

	)

10 
	#MAX_CANON
 255

	)

11 
	#MAX_INPUT
 255

	)

12 
	#NAME_MAX
 255

	)

13 
	#PATH_MAX
 4096

	)

14 
	#PIPE_BUF
 4096

	)

15 
	#XATTR_NAME_MAX
 255

	)

16 
	#XATTR_SIZE_MAX
 65536

	)

17 
	#XATTR_LIST_MAX
 65536

	)

19 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/sysinfo.h

2 #i‚de‡
_LINUX_SYSINFO_H


3 
	#_LINUX_SYSINFO_H


	)

5 
	~<löux/ty≥s.h
>

7 
	#SI_LOAD_SHIFT
 16

	)

8 
	ssysöfo
 {

9 
__kî√l_l⁄g_t
 
	mu±ime
;

10 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

11 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

12 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

13 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

14 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

15 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

16 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

17 
__u16
 
	m¥ocs
;

18 
__u16
 
	m∑d
;

19 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

20 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

21 
__u32
 
	mmem_unô
;

22 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/asm-generic/errno.h

2 #i‚de‡
_ASM_GENERIC_ERRNO_H


3 
	#_ASM_GENERIC_ERRNO_H


	)

5 
	~<asm-gíîic/î∫o-ba£.h
>

7 
	#EDEADLK
 35

	)

8 
	#ENAMETOOLONG
 36

	)

9 
	#ENOLCK
 37

	)

18 
	#ENOSYS
 38

	)

20 
	#ENOTEMPTY
 39

	)

21 
	#ELOOP
 40

	)

22 
	#EWOULDBLOCK
 
EAGAIN


	)

23 
	#ENOMSG
 42

	)

24 
	#EIDRM
 43

	)

25 
	#ECHRNG
 44

	)

26 
	#EL2NSYNC
 45

	)

27 
	#EL3HLT
 46

	)

28 
	#EL3RST
 47

	)

29 
	#ELNRNG
 48

	)

30 
	#EUNATCH
 49

	)

31 
	#ENOCSI
 50

	)

32 
	#EL2HLT
 51

	)

33 
	#EBADE
 52

	)

34 
	#EBADR
 53

	)

35 
	#EXFULL
 54

	)

36 
	#ENOANO
 55

	)

37 
	#EBADRQC
 56

	)

38 
	#EBADSLT
 57

	)

40 
	#EDEADLOCK
 
EDEADLK


	)

42 
	#EBFONT
 59

	)

43 
	#ENOSTR
 60

	)

44 
	#ENODATA
 61

	)

45 
	#ETIME
 62

	)

46 
	#ENOSR
 63

	)

47 
	#ENONET
 64

	)

48 
	#ENOPKG
 65

	)

49 
	#EREMOTE
 66

	)

50 
	#ENOLINK
 67

	)

51 
	#EADV
 68

	)

52 
	#ESRMNT
 69

	)

53 
	#ECOMM
 70

	)

54 
	#EPROTO
 71

	)

55 
	#EMULTIHOP
 72

	)

56 
	#EDOTDOT
 73

	)

57 
	#EBADMSG
 74

	)

58 
	#EOVERFLOW
 75

	)

59 
	#ENOTUNIQ
 76

	)

60 
	#EBADFD
 77

	)

61 
	#EREMCHG
 78

	)

62 
	#ELIBACC
 79

	)

63 
	#ELIBBAD
 80

	)

64 
	#ELIBSCN
 81

	)

65 
	#ELIBMAX
 82

	)

66 
	#ELIBEXEC
 83

	)

67 
	#EILSEQ
 84

	)

68 
	#ERESTART
 85

	)

69 
	#ESTRPIPE
 86

	)

70 
	#EUSERS
 87

	)

71 
	#ENOTSOCK
 88

	)

72 
	#EDESTADDRREQ
 89

	)

73 
	#EMSGSIZE
 90

	)

74 
	#EPROTOTYPE
 91

	)

75 
	#ENOPROTOOPT
 92

	)

76 
	#EPROTONOSUPPORT
 93

	)

77 
	#ESOCKTNOSUPPORT
 94

	)

78 
	#EOPNOTSUPP
 95

	)

79 
	#EPFNOSUPPORT
 96

	)

80 
	#EAFNOSUPPORT
 97

	)

81 
	#EADDRINUSE
 98

	)

82 
	#EADDRNOTAVAIL
 99

	)

83 
	#ENETDOWN
 100

	)

84 
	#ENETUNREACH
 101

	)

85 
	#ENETRESET
 102

	)

86 
	#ECONNABORTED
 103

	)

87 
	#ECONNRESET
 104

	)

88 
	#ENOBUFS
 105

	)

89 
	#EISCONN
 106

	)

90 
	#ENOTCONN
 107

	)

91 
	#ESHUTDOWN
 108

	)

92 
	#ETOOMANYREFS
 109

	)

93 
	#ETIMEDOUT
 110

	)

94 
	#ECONNREFUSED
 111

	)

95 
	#EHOSTDOWN
 112

	)

96 
	#EHOSTUNREACH
 113

	)

97 
	#EALREADY
 114

	)

98 
	#EINPROGRESS
 115

	)

99 
	#ESTALE
 116

	)

100 
	#EUCLEAN
 117

	)

101 
	#ENOTNAM
 118

	)

102 
	#ENAVAIL
 119

	)

103 
	#EISNAM
 120

	)

104 
	#EREMOTEIO
 121

	)

105 
	#EDQUOT
 122

	)

107 
	#ENOMEDIUM
 123

	)

108 
	#EMEDIUMTYPE
 124

	)

109 
	#ECANCELED
 125

	)

110 
	#ENOKEY
 126

	)

111 
	#EKEYEXPIRED
 127

	)

112 
	#EKEYREVOKED
 128

	)

113 
	#EKEYREJECTED
 129

	)

116 
	#EOWNERDEAD
 130

	)

117 
	#ENOTRECOVERABLE
 131

	)

119 
	#ERFKILL
 132

	)

121 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/poll.h

2 #i‚de‡
__ASM_GENERIC_POLL_H


3 
	#__ASM_GENERIC_POLL_H


	)

6 
	#POLLIN
 0x0001

	)

7 
	#POLLPRI
 0x0002

	)

8 
	#POLLOUT
 0x0004

	)

9 
	#POLLERR
 0x0008

	)

10 
	#POLLHUP
 0x0010

	)

11 
	#POLLNVAL
 0x0020

	)

14 
	#POLLRDNORM
 0x0040

	)

15 
	#POLLRDBAND
 0x0080

	)

16 #i‚de‡
POLLWRNORM


17 
	#POLLWRNORM
 0x0100

	)

19 #i‚de‡
POLLWRBAND


20 
	#POLLWRBAND
 0x0200

	)

22 #i‚de‡
POLLMSG


23 
	#POLLMSG
 0x0400

	)

25 #i‚de‡
POLLREMOVE


26 
	#POLLREMOVE
 0x1000

	)

28 #i‚de‡
POLLRDHUP


29 
	#POLLRDHUP
 0x2000

	)

32 
	#POLLFREE
 0x4000

	)

34 
	#POLL_BUSY_LOOP
 0x8000

	)

36 
	spﬁlfd
 {

37 
	mfd
;

38 
	mevíts
;

39 
	mªvíts
;

	@/usr/include/asm-generic/types.h

2 #i‚de‡
_ASM_GENERIC_TYPES_H


3 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/posix_types.h

2 #ifde‡
__i386__


3 
	~<asm/posix_ty≥s_32.h
>

4 #ñi‡
deföed
(
__ILP32__
)

5 
	~<asm/posix_ty≥s_x32.h
>

7 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

61 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/asm-generic/errno-base.h

2 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


3 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

5 
	#EPERM
 1

	)

6 
	#ENOENT
 2

	)

7 
	#ESRCH
 3

	)

8 
	#EINTR
 4

	)

9 
	#EIO
 5

	)

10 
	#ENXIO
 6

	)

11 
	#E2BIG
 7

	)

12 
	#ENOEXEC
 8

	)

13 
	#EBADF
 9

	)

14 
	#ECHILD
 10

	)

15 
	#EAGAIN
 11

	)

16 
	#ENOMEM
 12

	)

17 
	#EACCES
 13

	)

18 
	#EFAULT
 14

	)

19 
	#ENOTBLK
 15

	)

20 
	#EBUSY
 16

	)

21 
	#EEXIST
 17

	)

22 
	#EXDEV
 18

	)

23 
	#ENODEV
 19

	)

24 
	#ENOTDIR
 20

	)

25 
	#EISDIR
 21

	)

26 
	#EINVAL
 22

	)

27 
	#ENFILE
 23

	)

28 
	#EMFILE
 24

	)

29 
	#ENOTTY
 25

	)

30 
	#ETXTBSY
 26

	)

31 
	#EFBIG
 27

	)

32 
	#ENOSPC
 28

	)

33 
	#ESPIPE
 29

	)

34 
	#EROFS
 30

	)

35 
	#EMLINK
 31

	)

36 
	#EPIPE
 32

	)

37 
	#EDOM
 33

	)

38 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

9 #i‚de‡
_ASM_GENERIC_INT_LL64_H


10 
	#_ASM_GENERIC_INT_LL64_H


	)

12 
	~<asm/bô•îl⁄g.h
>

14 #i‚de‡
__ASSEMBLY__


20 
__sig√d__
 
	t__s8
;

21 
	t__u8
;

23 
__sig√d__
 
	t__s16
;

24 
	t__u16
;

26 
__sig√d__
 
	t__s32
;

27 
	t__u32
;

29 #ifde‡
__GNUC__


30 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

31 
__exãnsi⁄__
 
	t__u64
;

33 
__sig√d__
 
	t__s64
;

34 
	t__u64
;

	@/usr/include/asm-generic/ioctl.h

2 #i‚de‡
_ASM_GENERIC_IOCTL_H


3 
	#_ASM_GENERIC_IOCTL_H


	)

23 
	#_IOC_NRBITS
 8

	)

24 
	#_IOC_TYPEBITS
 8

	)

31 #i‚de‡
_IOC_SIZEBITS


32 
	#_IOC_SIZEBITS
 14

	)

35 #i‚de‡
_IOC_DIRBITS


36 
	#_IOC_DIRBITS
 2

	)

39 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

40 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

41 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

42 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

44 
	#_IOC_NRSHIFT
 0

	)

45 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

46 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

47 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

57 #i‚de‡
_IOC_NONE


58 
	#_IOC_NONE
 0U

	)

61 #i‚de‡
_IOC_WRITE


62 
	#_IOC_WRITE
 1U

	)

65 #i‚de‡
_IOC_READ


66 
	#_IOC_READ
 2U

	)

69 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

70 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

71 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

72 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

73 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

75 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

83 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

84 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

85 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

86 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

87 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

88 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

89 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

92 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

93 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

94 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

95 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

99 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

100 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

101 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

102 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

103 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm/posix_types_32.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


3 
	#_ASM_X86_POSIX_TYPES_32_H


	)

11 
	t__kî√l_mode_t
;

12 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

14 
	t__kî√l_ùc_pid_t
;

15 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

17 
	t__kî√l_uid_t
;

18 
	t__kî√l_gid_t
;

19 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

21 
	t__kî√l_ﬁd_dev_t
;

22 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

24 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


3 
	#_ASM_X86_POSIX_TYPES_64_H


	)

11 
	t__kî√l_ﬁd_uid_t
;

12 
	t__kî√l_ﬁd_gid_t
;

13 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

15 
	t__kî√l_ﬁd_dev_t
;

16 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

18 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


3 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

16 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

18 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm-generic/posix_types.h

2 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


3 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

5 
	~<asm/bô•îl⁄g.h
>

14 #i‚de‡
__kî√l_l⁄g_t


15 
	t__kî√l_l⁄g_t
;

16 
	t__kî√l_ul⁄g_t
;

19 #i‚de‡
__kî√l_öo_t


20 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

23 #i‚de‡
__kî√l_mode_t


24 
	t__kî√l_mode_t
;

27 #i‚de‡
__kî√l_pid_t


28 
	t__kî√l_pid_t
;

31 #i‚de‡
__kî√l_ùc_pid_t


32 
	t__kî√l_ùc_pid_t
;

35 #i‚de‡
__kî√l_uid_t


36 
	t__kî√l_uid_t
;

37 
	t__kî√l_gid_t
;

40 #i‚de‡
__kî√l_su£c⁄ds_t


41 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

44 #i‚de‡
__kî√l_daddr_t


45 
	t__kî√l_daddr_t
;

48 #i‚de‡
__kî√l_uid32_t


49 
	t__kî√l_uid32_t
;

50 
	t__kî√l_gid32_t
;

53 #i‚de‡
__kî√l_ﬁd_uid_t


54 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

55 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

58 #i‚de‡
__kî√l_ﬁd_dev_t


59 
	t__kî√l_ﬁd_dev_t
;

66 #i‚de‡
__kî√l_size_t


67 #i‡
__BITS_PER_LONG
 != 64

68 
	t__kî√l_size_t
;

69 
	t__kî√l_ssize_t
;

70 
	t__kî√l_±rdiff_t
;

72 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

74 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

78 #i‚de‡
__kî√l_fsid_t


80 
	mvÆ
[2];

81 } 
	t__kî√l_fsid_t
;

87 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

88 
	t__kî√l_loff_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

90 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

91 
	t__kî√l_timî_t
;

92 
	t__kî√l_˛ockid_t
;

93 * 
	t__kî√l_ˇddr_t
;

94 
	t__kî√l_uid16_t
;

95 
	t__kî√l_gid16_t
;

	@/usr/include/asm/bitsperlong.h

2 #i‚de‡
__ASM_X86_BITSPERLONG_H


3 
	#__ASM_X86_BITSPERLONG_H


	)

5 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

6 
	#__BITS_PER_LONG
 64

	)

8 
	#__BITS_PER_LONG
 32

	)

11 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm-generic/bitsperlong.h

2 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


3 
	#__ASM_GENERIC_BITS_PER_LONG


	)

12 #i‚de‡
__BITS_PER_LONG


13 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
198
6745
alignment_engine/alignment_engine.c
alignment_engine/alignment_engine.h
alignment_engine/alignment_engine_read.c
alignment_engine/alignment_engine_read_multi.c
alignment_engine/alignment_engine_read_partial.c
alignment_engine/alignment_engine_read_single.c
alignment_engine/alignment_engine_sysfs_functions.c
alignment_engine/alignment_engine_thread_pool.c
alignment_engine/alignment_engine_write.c
alignment_engine/alignment_engine_write_multi.c
alignment_engine/alignment_engine_write_partial.c
alignment_engine/alignment_engine_write_single.c
bec_engine/bec_engine.c
bec_engine/bec_engine_mempool.c
bec_engine/bec_engine_radix_tree.c
bec_engine/bec_engine_sysfs_functions.c
bec_engine/datumsoft_zaidstor_avm_4_B_bec_engine_module.mod.c
dedupe_engine/datumsoft_zaidstor_avm_6_B_dedupe_engine_module.mod.c
dedupe_engine/dedupe_engine.c
dedupe_engine/dedupe_engine_hash.c
dedupe_engine/dedupe_engine_pools.c
dedupe_engine/dedupe_engine_read.c
dedupe_engine/dedupe_engine_sysfs_functions.c
dedupe_engine/dedupe_engine_tables.c
dedupe_engine/dedupe_engine_write.c
fec_engine/datumsoft_zaidstor_avm_8_B_fec_engine_module.mod.c
fec_engine/fec_engine.c
fec_engine/fec_engine_align_read.c
fec_engine/fec_engine_align_read_multi.c
fec_engine/fec_engine_align_read_partial.c
fec_engine/fec_engine_align_read_single.c
fec_engine/fec_engine_align_write.c
fec_engine/fec_engine_align_write_multi.c
fec_engine/fec_engine_align_write_partial.c
fec_engine/fec_engine_align_write_single.c
fec_engine/fec_engine_flush.c
fec_engine/fec_engine_read.c
fec_engine/fec_engine_replay.c
fec_engine/fec_engine_sysfs_functions.c
fec_engine/fec_engine_tables.c
fec_engine/fec_engine_thread_pool.c
fec_engine/fec_engine_write.c
hash_engine/hash_engine_murmur3.c
hash_engine/hash_engine_murmur3.h
headers/about.h
headers/alignment_engine.h
headers/bec_engine.h
headers/bio_engine.h
headers/counters.h
headers/data_structures.h
headers/dedupe_engine.h
headers/emlog.h
headers/fec_engine.h
headers/infra_engine.h
headers/infra_engine_hash_murmur3.h
headers/iorequest.h
headers/lab_engine_binary_tree.h
headers/lab_engine_bplus_tree.h
headers/lab_engine_heap.h
headers/lab_engine_interval.h
headers/lab_engine_linked_list.h
headers/lab_engine_locks.h
headers/lab_engine_pipe.h
headers/macros.h
headers/memory_pool_engine.h
headers/metadata_engine.h
headers/prototypes.h
headers/sysfs_engine.h
headers/target_engine.h
headers/thread_pool_engine.h
headers/types.h
headers/volume_engine.h
infra_engine/datumsoft_zaidstor_avm_2_B_infra_engine_module.mod.c
infra_engine/infra_engine.c
infra_engine/infra_engine_align.c
infra_engine/infra_engine_bec.c
infra_engine/infra_engine_bio_read.c
infra_engine/infra_engine_bio_write.c
infra_engine/infra_engine_dedupe.c
infra_engine/infra_engine_experiment.c
infra_engine/infra_engine_experiment_data.c
infra_engine/infra_engine_fec.c
infra_engine/infra_engine_file.c
infra_engine/infra_engine_globals.c
infra_engine/infra_engine_hash_murmur3.c
infra_engine/infra_engine_interval.c
infra_engine/infra_engine_iorequest.c
infra_engine/infra_engine_locks.c
infra_engine/infra_engine_log.c
infra_engine/infra_engine_memory_pool.c
infra_engine/infra_engine_metadata.c
infra_engine/infra_engine_object.c
infra_engine/infra_engine_switches_tunables.c
infra_engine/infra_engine_target.c
infra_engine/infra_engine_thread_pool.c
infra_engine/infra_engine_utils.c
lab_engine/deep_copy/tree_deep_copy.c
lab_engine/deep_copy/tree_deep_copy.h
lab_engine/deep_copy/tree_deep_utils.c
lab_engine/lab_engine.c
lab_engine/lab_engine_binary_tree.c
lab_engine/lab_engine_bplus_tree.c
lab_engine/lab_engine_bplus_tree_delete.c
lab_engine/lab_engine_bplus_tree_get_set.c
lab_engine/lab_engine_bplus_tree_insert.c
lab_engine/lab_engine_bplus_tree_search.c
lab_engine/lab_engine_bplus_tree_traversal.c
lab_engine/lab_engine_heap.c
lab_engine/lab_engine_interval.c
lab_engine/lab_engine_linked_list.c
lab_engine/lab_engine_locks.c
lab_engine/lab_engine_pipe.c
log_engine/emlog.c
log_engine/mkemlog.c
log_engine/nbcat.c
metadata_engine/datumsoft_zaidstor_avm_5_B_metadata_engine_module.mod.c
metadata_engine/metadata_engine.c
metadata_engine/metadata_engine_sysfs_functions.c
metadata_engine/metadata_flush.c
metadata_engine/metadata_superblock.c
metadata_engine/metadata_tables.c
metadata_engine/metadata_write.c
misc/man_pages/bio.h
misc/man_pages/blk_types.h
misc/man_pages/blkdev.h
sysfs_engine/alignment_engine_sysfs_functions.c
sysfs_engine/bec_engine_sysfs_functions.c
sysfs_engine/dedupe_engine_sysfs_functions.c
sysfs_engine/fec_engine_sysfs_functions.c
sysfs_engine/metadata_engine_sysfs_functions.c
sysfs_engine/sysfs_alignment_engine_autogen.c
sysfs_engine/sysfs_bec_engine_autogen.c
sysfs_engine/sysfs_dedupe_engine_autogen.c
sysfs_engine/sysfs_engine.c
sysfs_engine/sysfs_engine.h
sysfs_engine/sysfs_engine_autogen.c
sysfs_engine/sysfs_engine_functions.c
sysfs_engine/sysfs_fec_engine_autogen.c
sysfs_engine/sysfs_kernel_autogen.c
sysfs_engine/sysfs_metadata_engine_autogen.c
sysfs_engine/sysfs_target_engine_autogen.c
sysfs_engine/sysfs_volume_engine_autogen.c
sysfs_engine/target_engine_sysfs_functions.c
sysfs_engine/volume_engine_sysfs_functions.c
target_engine/aisa_init.c
target_engine/target_engine.h
target_engine/target_engine_sysfs_functions.c
volume_engine/volume_engine.c
volume_engine/volume_engine.h
volume_engine/volume_engine_datavols.c
volume_engine/volume_engine_snapshot.c
volume_engine/volume_engine_sysfs_functions.c
volume_engine/volume_engine_tables.c
volume_engine/volume_engine_vmvols.c
/usr/include/errno.h
/usr/include/error.h
/usr/include/fcntl.h
/usr/include/linux/bsg.h
/usr/include/linux/errno.h
/usr/include/linux/fs.h
/usr/include/linux/hdreg.h
/usr/include/linux/kernel.h
/usr/include/linux/major.h
/usr/include/linux/module.h
/usr/include/linux/poll.h
/usr/include/linux/sched.h
/usr/include/linux/stddef.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/linux/wait.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm/errno.h
/usr/include/asm/poll.h
/usr/include/asm/types.h
/usr/include/features.h
/usr/include/linux/const.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/linux/sysinfo.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/poll.h
/usr/include/asm-generic/types.h
/usr/include/asm/ioctl.h
/usr/include/asm/posix_types.h
/usr/include/stdc-predef.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/asm-generic/bitsperlong.h
