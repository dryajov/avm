cscope 15 /home/aisa/gitrepo/avm/cli_engine               0000112559
	@AISA_AVMConfig.py

1 #! /
u§
/
bö
/
pyth⁄


2 
‰om
 
AISA_AVMC‹e
 
imp‹t
 *

3 
‰om
 
AISA_AVMHñp
 
imp‹t
 *

4 
‰om
 
AISA_MDRaid
 
	gimp‹t
 *

6 ###########################################################
#dz_lﬂd_c⁄fig_fûe(
¨g_show_key_vÆ
)

7 #Thi†
fun˘i⁄
 
p›uœãs
 
the
 
key
 
vÆue
 
∑ús
 
¥e£¡
 
ö


8 #thê
c⁄fig
 
fûe
 
loˇãd
 
ö
 
∑th
 /
ëc
/
d©umso·
/
avm
.
c⁄f


9 #avm 
˛i
 
wûl
 
nŸ
 
be
 
°¨ãd
 
thîe
 
is
 
no
 
c⁄fig
 
fûe


11 #I‡
¨g_show_key_vÆ
 
is
 
£t
 
to
 1 
thí
 
ô
 
wûl
 
¥öt


12 #Æ»
key
 
vÆue
 
∑ús
 
¥e£¡
 
ö
 
c⁄fig
 
fûe


14 
def
 
	$dz_lﬂd_c⁄fig_fûe
(
¨g_show_key_vÆ
):

16 
os
.
∑th
.
	$exi°s
(
DZ_CLI_CONFIG_FILE_PATH
):

17 
	`LOG
 (
DEBUG
, "C⁄fig Fûê" + 
DZ_CLI_CONFIG_FILE_PATH
 + "Éxist")

18 
∑ss


20 
	`LOG
 (
ERROR
, "C⁄fig Fûê" + 
DZ_CLI_CONFIG_FILE_PATH
 + " doesÇotÉxist")

21  
CLI_FAILURE


23 
dz_c⁄fig_di˘
 = {
	}
}

25 
wôh
 
›í
(
DZ_CLI_CONFIG_FILE_PATH
, 'r'Ë
as
 
	gc⁄fig_fûe
:

26 
löe
 
ö
 
c⁄fig_fûe
:

27 
löe
 =Üöe.
	$°rù
()

28 
löe
:

29 
nŸ
 
löe
.
	`°¨tswôh
("#"):

30 
key
, 
vÆue
 = 
löe
.
	`•lô
('=')

31 
dz_c⁄fig_di˘
[
key
.
	`°rù
()] = 
vÆue
.
	$°rù
()

33 
globÆ
 
CONFIG_AVM_DATA_DEVICE_NAME


34 
globÆ
 
CONFIG_AVM_METADATA_DEVICE_NAME


35 
globÆ
 
CONFIG_SWITCH_PASSTHROUGH_MODE


36 
globÆ
 
CONFIG_SWITCH_PASSTHROUGH_READ


37 
globÆ
 
CONFIG_SWITCH_PASSTHROUGH_WRITE


38 
globÆ
 
CONFIG_SWITCH_FEC


39 
globÆ
 
CONFIG_SWITCH_BEC


40 
globÆ
 
CONFIG_SWITCH_DDE


41 
globÆ
 
CONFIG_SWITCH_DAE


42 
globÆ
 
CONFIG_SWITCH_DAE_MBR


43 
globÆ
 
CONFIG_SWITCH_DAE_MBW


44 
globÆ
 
CONFIG_SWITCH_DAE_PBR


45 
globÆ
 
CONFIG_SWITCH_DAE_PBW


47 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

49 
dz_c⁄fig_di˘
.
	`has_key
('AVM_DATA_DEVICE_NAME'):

50 
CONFIG_AVM_DATA_DEVICE_NAME
 = 
dz_c⁄fig_di˘
['AVM_DATA_DEVICE_NAME']

52 
	`LOG
(
ERROR
,"Key AVM_DATA_DEVICE_NAME d€†nŸÉxi° i¿"+
DZ_CLI_CONFIG_FILE_PATH
)

53  
CLI_FAILURE


55 #¥öt(
CONFIG_AVM_DATA_DEVICE_NAME
);

57 
dz_c⁄fig_di˘
.
	`has_key
('AVM_METADATA_DEVICE_NAME'):

58 
CONFIG_AVM_METADATA_DEVICE_NAME
 = 
dz_c⁄fig_di˘
['AVM_METADATA_DEVICE_NAME']

60 
	`LOG
(
ERROR
,"Key AVM_METADATA_DEVICE_NAME d€†nŸÉxi° i¿"+
DZ_CLI_CONFIG_FILE_PATH
)

61  
CLI_FAILURE


63 #¥öt(
CONFIG_AVM_METADATA_DEVICE_NAME
);

65 #Swôche†
™d
 
Tu«bÀs


67 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_PASSTHROUGH_MODE'):

68 
CONFIG_SWITCH_PASSTHROUGH_MODE
 = 
dz_c⁄fig_di˘
['SWITCH_PASSTHROUGH_MODE']

70 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_PASSTHROUGH_READ'):

71 
CONFIG_SWITCH_PASSTHROUGH_READ
 = 
dz_c⁄fig_di˘
['SWITCH_PASSTHROUGH_READ']

73 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_PASSTHROUGH_WRITE'):

74 
CONFIG_SWITCH_PASSTHROUGH_WRITE
 = 
dz_c⁄fig_di˘
['SWITCH_PASSTHROUGH_WRITE']

77 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_FEC'):

78 
CONFIG_SWITCH_FEC
 = 
dz_c⁄fig_di˘
['SWITCH_FEC']

80 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_BEC'):

81 
CONFIG_SWITCH_BEC
 = 
dz_c⁄fig_di˘
['SWITCH_BEC']

83 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_DDE'):

84 
CONFIG_SWITCH_DDE
 = 
dz_c⁄fig_di˘
['SWITCH_DDE']

86 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_DAE'):

87 
CONFIG_SWITCH_DAE
 = 
dz_c⁄fig_di˘
['SWITCH_DAE']

90 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_DAE_MBR'):

91 
CONFIG_SWITCH_DAE_MBR
 = 
dz_c⁄fig_di˘
['SWITCH_DAE_MBR']

93 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_DAE_MBW'):

94 
CONFIG_SWITCH_DAE_MBW
 = 
dz_c⁄fig_di˘
['SWITCH_DAE_MBW']

96 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_DAE_PBR'):

97 
CONFIG_SWITCH_DAE_PBR
 = 
dz_c⁄fig_di˘
['SWITCH_DAE_PBR']

99 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_DAE_PBW'):

100 
CONFIG_SWITCH_DAE_PBW
 = 
dz_c⁄fig_di˘
['SWITCH_DAE_PBW']

103 #¥öà(
CONFIG_AVM_DATA_DEVICE_NAME
)

104 #¥öà(
CONFIG_AVM_METADATA_DEVICE_NAME
)

105 
	`LOG
(
INFO
,"C⁄fig fûê" + 
DZ_CLI_CONFIG_FILE_PATH
 + "Öopulated")

107 
key
,
vÆ
 
ö
 
	`s‹ãd
(
dz_c⁄fig_di˘
.
	$ôems
()):

108 
keyvÆ°r
 = 
key
.
	`lju°
(25Ë+ " => " + 
vÆ


109 #i‡(
vÆ
 == "0"):

110 #keyvÆ°∏
key
.
	`lju°
(25) + " => DISABLED"

112 #keyvÆ°∏
key
.
	`lju°
(25) + " => ENABLED"

114 i‡(
¨g_show_key_vÆ
 == 1):

115 
	$LOG
(
INFO
, 
keyvÆ°r
)

117  
CLI_SUCCESS


119 
def
 
	$maö
(
¨gv
):

120 
¨gc
 = 
	$Àn
(
sys
.
¨gv
)

121 
	$dz_lﬂd_c⁄fig_fûe
(1)

125 
__«me__
 == "__main__":

126 
	`maö
(
sys
.
¨gv
[0:])

	@AISA_AVMCore.py

1 #! /
u§
/
bö
/
pyth⁄


2 
‰om
 
__futuª__
 
imp‹t
 
¥öt_fun˘i⁄


3 
imp‹t
 
os


4 
imp‹t
 
sys


5 
imp‹t
 
gë›t


6 
imp‹t
 
cmd


7 
‰om
 
	glsm
.
	glsm˛i
.
cmdlöe
 
imp‹t
 
cmds


8 
‰om
 
sys
 
imp‹t
 
¨gv


10 
‰om
 
AISA_Utûs
 
imp‹t
 *

11 
‰om
 
AISA_DeÁu…s
 
	gimp‹t
 *

12 #‰om 
AISA_Mdøid
 
imp‹t
 *

14 
	gCLI_SUCCESS
 = 0

15 
CLI_FAILURE
 = -1

16 
CLI_NOOP
 = 1

17 
CLI_DATA_DEVICE_DOES_NOT_EXIST
 = -2

18 
CLI_METADDATA_DEVICE_DOES_NOT_EXIST
 = -3

21 
DZ_CLI_VERSION
 = "1.1.a"

22 
DZ_DRIVER_VERSION
 = "3.10.101"

23 
DZ_CLI_PRODUCT
 = "AISA Volume Manager (AVM)"

24 
DZ_CLI_CONFIG_FILE_PATH
 = "/etc/datumsoft/avm.conf"

26 
KERNEL_MODULE_LIST
 = [

32 
	gDEVICE_TYPE_AISA
 = "DEVICE_TYPE_AISA"

33 
DEVICE_TYPE_DATA_VOLUME
 = "DEVICE_TYPE_DATA_VOLUME"

34 
DEVICE_TYPE_DATA_VOLUME_SNAPSHOT_READ
 = "DEVICE_TYPE_DATA_VOLUME_SNAPSHOT_READ"

35 
DEVICE_TYPE_DATA_VOLUME_SNAPSHOT_WRITE
 = "DEVICE_TYPE_DATA_VOLUME_SNAPSHOT_WRITE"

36 
DEVICE_TYPE_VM_VOLUME
 = "DEVICE_TYPE_VM_VOLUME"

37 
DEVICE_TYPE_VM_VOLUME_SNAPSHOT_READ
 = "DEVICE_TYPE_VM_VOLUME_SNAPSHOT_READ"

38 
DEVICE_TYPE_VM_VOLUME_SNAPSHOT_WRITE
 = "DEVICE_TYPE_VM_VOLUME_SNAPSHOT_WRITE"

40 #T¨gë 
Ty≥
 
TabÀ
 
Name
 
öside
 
Kî√l


41 
TABLE_NAME_AISA
 = "AVM_TARGET"

42 
TABLE_NAME_AISA_DATA_VOLUME
 = "AVM_VOLUME"

43 
TABLE_NAME_AISA_DATA_VOLUME_SNAPSHOT_READ
 = "AVM_VOLUME_SR"

44 
TABLE_NAME_AISA_DATA_VOLUME_SNAPSHOT_WRITE
 = "AVM_VOLUME_SW"

46 
TABLE_NAME_AISA_VM_VOLUME
 = "AVM_VOLUME_VM"

47 
TABLE_NAME_AISA_VM_VOLUME_SNAPSHOT_READ
 = "AVM_VOLUME_VMSR"

48 
TABLE_NAME_AISA_VM_VOLUME_SNAPSHOT_WRITE
 = "AVM_VOLUME_VMSW"

51 
AISA_DEVICE_HOME
 = "/dev/mapper"

52 
AISA_VOLUME_PREFIX
 = "/dev/mapper"

53 
AISA_DEVICE_NAME
 = "AISA"

54 
AISA_DEVICE_PATH
 = 
AISA_DEVICE_HOME
 + "/" + 
AISA_DEVICE_NAME


58 #globÆ 
CONFIG_AISA_DATA_DEVICE_NAME


59 #globÆ 
CONFIG_AISA_METADATA_DEVICE_NAME


60 #globÆ 
CONFIG_AISA_PASSTHROUGH_MODE


61 #globÆ 
CONFIG_AISA_PASSTHROUGH_MODE_READ


62 #globÆ 
CONFIG_AISA_PASSTHROUGH_MODE_WRITE


69 
AISA_METADATA_DISK_MAGIC_NO
 = "AISAMTDT"

75 #Cœs†
¸ótög
 
AISA
 
T¨gë
 
™d
 
Vﬁumes
.

76 #Ià
öãø˘s
 
wôh
 
the
 
devi˚
 
m≠≥r
 
‰amew‹k
 
by


77 #ˇŒög 
dm£tup
 
comm™ds
.

78 #Thi†
˛ass
 
is
 
dediˇãd
 
¸ótög
/
dñëög
 
AISA
 
èrgë


79 #d©®
vﬁumes
, 
vútuÆ
 
machöe
 vﬁume†
™d
 
¢≠shŸ


82 
˛ass
 
	$AVM_CORE
():

85 
def
 
	$__öô__
(
£lf
, 
¨g_d©a_devi˚_«me
, 
¨g_mëad©a_devi˚_«me
):

86 
£lf
.
d©a
 = []

87 
°r
 = 'Cœs†' + 
__«me__
 + ' defined'

88 
£lf
.
d©a_devi˚_«me
 = 
¨g_d©a_devi˚_«me


89 
£lf
.
mëad©a_devi˚_«me
 = 
¨g_mëad©a_devi˚_«me


91 
def
 
	$gë_kî√l_vîsi⁄
(
£lf
):

92 
cmd°r
 = ''

93 
cmd°r
 += 'cat /sys/kernel/avm/get_version'

94 
cmd°r
 += ''

95 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

96 i‡(
ªtobj
.
ªtcode
 != 0):

97 
	`LOG
(
ERROR
, "UnableÅo get kernel version. LooksÜike kernel module is NOTÜoaded")

98  
CLI_FAILURE


100 
d©a
 = 
ªtobj
.
ªt°r


101 
vî°r
 = 
d©a
.
	`•lô
("\n")

102 
löe
 
ö
 
vî°r
:

103 i‡(
löe
.
	`°¨tswôh
( '#' )):

106 
	$¥öt
(
löe
)

108  
CLI_SUCCESS


110 
def
 
	$gë_sysfs_íåõs
(
£lf
):

111 
cmd°r
 = ''

112 
AVM_SYSFS_PATH
 = "/sys/kernel/avm/"

113 
os
.
∑th
.
	$exi°s
(
AVM_SYSFS_PATH
):

114 
fûñ
 
ö
 
os
.
	`li°dú
("/sys/kernel/avm"):

115 
	`¥öt
(
AVM_SYSFS_PATH
 + 
fûñ
)

117 
	`¥öt
("\n")

118  
CLI_SUCCESS


120 
	`LOG
 (
ERROR
, "P©h " + 
AVM_SYSFS_PATH
 + " doesÇotÉxist. AVM driver in kernel isÇotÜoaded\n")

121  
CLI_FAILURE


123 
def
 
	$gë_kî√l_mem‹y
(
£lf
):

124 
cmd°r
 = ''

125 
cmd°r
 += 'cat /sys/kernel/avm/get_memory_info'

126 
cmd°r
 += ''

127 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

128 i‡(
ªtobj
.
ªtcode
 != 0):

129 
	`LOG
(
ERROR
, "UnableÅo get kernel memory information. LooksÜike kernel module is NOTÜoaded")

130  
CLI_FAILURE


132 
d©a
 = 
ªtobj
.
ªt°r


133 
vî°r
 = 
d©a
.
	`•lô
("\n")

134 
löe
 
ö
 
vî°r
:

135 i‡(
löe
.
	`°¨tswôh
( '#' )):

138 
	$¥öt
(
löe
)

140  
CLI_SUCCESS


142 #Gë 
Su≥rblock
 
hódî
 
öfo
 
‰om
 
kî√l


143 
def
 
	$gë_kî√l_su≥rblock
(
£lf
):

144 
cmd°r
 = ''

145 
cmd°r
 += 'cat /sys/kernel/avm/get_superblock'

146 
cmd°r
 += ''

147 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

148 i‡(
ªtobj
.
ªtcode
 != 0):

149 
	`LOG
(
ERROR
, "UnableÅo get kernel superblock information. LooksÜike kernel module is NOTÜoaded")

150  
CLI_FAILURE


152 
d©a
 = 
ªtobj
.
ªt°r


153 
vî°r
 = 
d©a
.
	`•lô
("\n")

154 
löe
 
ö
 
vî°r
:

155 i‡(
löe
.
	`°¨tswôh
( '#' )):

158 
	$¥öt
(
löe
)

160  
CLI_SUCCESS


162 #InMem‹y 
TabÀs
 
such
 
as
 
LBA
, 
Hash
 
™d
 
PBA


163 
def
 
	$gë_kî√l_èbÀ_size
(
£lf
):

164 
cmd°r
 = ''

165 
cmd°r
 += 'cat /sys/kernel/avm/get_table_size'

166 
cmd°r
 += ''

167 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

168 i‡(
ªtobj
.
ªtcode
 != 0):

169 
	`LOG
(
ERROR
, "UnableÅo get kernel InMemory Tables Size. LooksÜike kernel module is NOTÜoaded")

170  
CLI_FAILURE


172 
d©a
 = 
ªtobj
.
ªt°r


173 
vî°r
 = 
d©a
.
	`•lô
("\n")

174 
löe
 
ö
 
vî°r
:

175 i‡(
löe
.
	`°¨tswôh
( '#' )):

178 
	$¥öt
(
löe
)

180  
CLI_SUCCESS


182 #Mëad©®
Engöe
 
Cou¡îs


183 
def
 
	$gë_kî√l_cou¡îs_mëad©a
(
£lf
):

185 
cmd°r
 = ''

186 
cmd°r
 += 'cat /sys/kernel/avm/get_metadata_counters'

187 
cmd°r
 += ''

188 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

189 i‡(
ªtobj
.
ªtcode
 != 0):

190 
	`LOG
(
ERROR
, "UnableÅo get kernel metadata counters. LooksÜike kernel module is NOTÜoaded")

191  
CLI_FAILURE


193 
d©a
 = 
ªtobj
.
ªt°r


194 
vî°r
 = 
d©a
.
	`•lô
("\n")

195 
löe
 
ö
 
vî°r
:

196 i‡(
löe
.
	`°¨tswôh
( '#' )):

199 
	$¥öt
(
löe
)

201  
CLI_SUCCESS


203 #Fr⁄tEnd 
Cache
 
Engöe
 
Cou¡îs


204 
def
 
	$gë_kî√l_cou¡îs_„c
(
£lf
):

205 
cmd°r
 = ''

206 
cmd°r
 += 'cat /sys/kernel/avm/get_fec_counters'

207 
cmd°r
 += ''

208 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

209 i‡(
ªtobj
.
ªtcode
 != 0):

210 
	`LOG
(
ERROR
, "UnableÅo get kernel fec counters. LooksÜike kernel module is NOTÜoaded")

211  
CLI_FAILURE


213 
d©a
 = 
ªtobj
.
ªt°r


214 
vî°r
 = 
d©a
.
	`•lô
("\n")

215 
löe
 
ö
 
vî°r
:

216 i‡(
löe
.
	`°¨tswôh
( '#' )):

219 
	$¥öt
(
löe
)

221  
CLI_SUCCESS


223 #Alignmíà
Engöe
 
Cou¡îs


224 
def
 
	$gë_kî√l_cou¡îs_Æign
(
£lf
):

225 
cmd°r
 = ''

226 
cmd°r
 += 'cat /sys/kernel/avm/get_align_counters'

227 
cmd°r
 += ''

228 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

229 i‡(
ªtobj
.
ªtcode
 != 0):

230 
	`LOG
(
ERROR
, "UnableÅo get kernelálign counters. LooksÜike kernel module is NOTÜoaded")

231  
CLI_FAILURE


233 
d©a
 = 
ªtobj
.
ªt°r


234 
vî°r
 = 
d©a
.
	`•lô
("\n")

235 
löe
 
ö
 
vî°r
:

236 i‡(
löe
.
	`°¨tswôh
( '#' )):

239 
	$¥öt
(
löe
)

241  
CLI_SUCCESS


243 #BackEnd 
Cache
 
Engöe
 
Cou¡îs


244 
def
 
	$gë_kî√l_cou¡îs_bec
(
£lf
):

245 
cmd°r
 = ''

246 
cmd°r
 += 'cat /sys/kernel/avm/get_bec_counters'

247 
cmd°r
 += ''

248 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

249 i‡(
ªtobj
.
ªtcode
 != 0):

250 
	`LOG
(
ERROR
, "UnableÅo get kernel bec counters. LooksÜike kernel module is NOTÜoaded")

251  
CLI_FAILURE


253 
d©a
 = 
ªtobj
.
ªt°r


254 
vî°r
 = 
d©a
.
	`•lô
("\n")

255 
löe
 
ö
 
vî°r
:

256 i‡(
löe
.
	`°¨tswôh
( '#' )):

259 
	$¥öt
(
löe
)

261  
CLI_SUCCESS


263 #Dedu≥ 
Engöe
 
Cou¡îs


264 
def
 
	$gë_kî√l_cou¡îs_dedu≥
(
£lf
):

265 
cmd°r
 = ''

266 
cmd°r
 += 'cat /sys/kernel/avm/get_dedupe_counters'

267 
cmd°r
 += ''

268 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

269 i‡(
ªtobj
.
ªtcode
 != 0):

270 
	`LOG
(
ERROR
, "UnableÅo get kernel dedupeÉngine counters. LooksÜike kernel module is NOTÜoaded")

271  
CLI_FAILURE


273 
d©a
 = 
ªtobj
.
ªt°r


274 
vî°r
 = 
d©a
.
	`•lô
("\n")

275 
löe
 
ö
 
vî°r
:

276 i‡(
löe
.
	`°¨tswôh
( '#' )):

279 
	$¥öt
(
löe
)

281  
CLI_SUCCESS


283 
def
 
	$vÆid©e_aiß_èrgë
(
£lf
, 
¨g_show
):

284 
os
.
∑th
.
	$exi°s
(
AISA_DEVICE_PATH
):

285 i‡(
¨g_show
 == 1):

286 
	`LOG
 (
INFO
, "AISA T¨gë cª©ed. " + 
AISA_DEVICE_PATH
 + "Éxist")

287  
CLI_SUCCESS


289  
CLI_SUCCESS


291 
	`LOG
 (
ERROR
, "AISA T¨gë NŸ cª©ed. " + 
AISA_DEVICE_PATH
 + " doesÇotÉxist")

292  
CLI_FAILURE


294 #NŸê
hîe
 
Mëad©a
 
devi˚
 
öfo
 
is
 
NOT
 
∑s£d


295 
def
 
	$¸óã_vﬁume
(
£lf
, 
¨g_ty≥
, 
¨g_«me
, 
¨g_size
, 
¨g_∑ª¡
):

297 #I‡
AISA
 
èrgë
 
d€s
 
nŸ
 
exi°
 
thí
 
¸óã
 
a
  
⁄e
 
fú°


298 i‡(
£lf
.
	`vÆid©e_aiß_èrgë
(0) < 0):

299 
	`LOG
(
INFO
, "AISA Target doesÇotÉxist. Creating default sizeÅarget")

300 
ªtobj
 = 
£lf
.
	$¸óã_aiß_deÁu…
()

301 i‡(
ªtobj
.
ªtcode
 == 0):

302 
	`LOGR
("AISA Target created")

304 
	`LOG
(
ERROR
, "UnableÅo create AISA Target. Exiting...")

305  
ªtobj
.
ªtcode


307 
aiß_size_blocks
 = 
£lf
.
	$gë_aiß_size_blocks
()

308 i‡((
¨g_size
Ë> (
aiß_size_blocks
)): #{

309 
îr°r
 = "Volume Size cannot be greaterÅhan AISA Size\n"

310 
îr°r
 +"VﬁumêSizê: " + 
¨g_size
 + " blocks\n"

311 
îr°r
 +"AISA Sizê: " + 
aiß_size_blocks
 + " blocks\n"

312 
ªtobj
 = 
	$Rëu∫Info
(
CLI_FAILURE
, 
îr°r
)

313  
ªtobj


317 
dev_°¨t_£˘‹
 = 0

318 
dev_Àn
 = 
¨g_size


320 
¨g_ty≥
 =
DEVICE_TYPE_DATA_VOLUME
:

321 
dev_èbÀ_«me
 = 
TABLE_NAME_AISA_DATA_VOLUME


322 
dev_∑ª¡
 = ''

323 
dev_magic_°r
 = 'VOLUME'

325 
¨g_ty≥
 =
DEVICE_TYPE_DATA_VOLUME_SNAPSHOT_READ
:

326 
dev_èbÀ_«me
 = 
TABLE_NAME_AISA_DATA_VOLUME_SNAPSHOT_READ


327 #dev_∑ª¡ = 
AISA_DEVICE_HOME
 + "/" + 
¨g_∑ª¡


328 
dev_∑ª¡
 = 
¨g_∑ª¡


329 
dev_magic_°r
 = 'VOLUSR'

331 
¨g_ty≥
 =
DEVICE_TYPE_DATA_VOLUME_SNAPSHOT_WRITE
:

332 
dev_èbÀ_«me
 = 
TABLE_NAME_AISA_DATA_VOLUME_SNAPSHOT_WRITE


333 #dev_∑ª¡ = 
AISA_DEVICE_HOME
 + "/" + 
¨g_∑ª¡


334 
dev_∑ª¡
 = 
¨g_∑ª¡


335 
dev_magic_°r
 = 'VOLUSW'

337 #NŸê
D©a
 
devi˚
 
wûl
 
poöt
 
to
 
AISA
 devi˚ 
«me
, 
beˇu£


338 #vﬁume†
¨e
 
ˇrved
 
out
 
⁄
 
AISA
 
Devi˚


339 
dev_d©a_devi˚_«me
 = 
AISA_DEVICE_PATH
 #argv[0]

340 
dev_°¨t_£˘‹_2
 = 0 #argv[1]

341 
dev_ty≥
 = 
¨g_ty≥
 #argv[2]

342 
dev_«me
 = 
¨g_«me
 #¨gv[3] 
Name
 
of
 
cuºít
 
vﬁume


343 
dev_magic
 = 
£lf
.
	$gë_magic_no
(
dev_magic_°r
) #argv[4]

344 
ªtobj
 = 
	$gëUUID
() #argv[5]

345 
dev_uuid
 = 
ªtobj
.
ªt°r


347 
cmd°r
 = ''

348 
cmd°r
 +'dm£tu∞¸óã ' + 
dev_«me


349 
cmd°r
 +' --uuid ' + 
	$°r
(
dev_uuid
)

350 
cmd°r
 += ' --table "'

351 
cmd°r
 +' ' + 
	$°r
(
dev_°¨t_£˘‹
)

352 
cmd°r
 +' ' + 
	$°r
(
dev_Àn
)

353 
cmd°r
 +' ' + 
dev_èbÀ_«me


354 
cmd°r
 +' ' + 
dev_d©a_devi˚_«me
 #argv[0]

355 
cmd°r
 +' ' + 
	$°r
(
dev_°¨t_£˘‹_2
) #argv[1]

356 
cmd°r
 +' ' + 
dev_ty≥
 #argv[2]

357 
cmd°r
 +' ' + 
dev_«me
 #¨gv[3] 
Pas£d
 
twi˚


358 
cmd°r
 +' ' + 
dev_magic
 #argv[4]

359 
cmd°r
 +' ' + 
dev_uuid
 #argv[5]

360 
cmd°r
 +' ' + 
dev_∑ª¡
 #argv[6]

361 
cmd°r
 +' ' + 
	`gëCuºítD©eRaw
(Ë+ 
	$gëCuºítTimeRaw
()#¨gv[7] #Timê
ö
 "ddmmyyyyhhmmss"

362 
cmd°r
 += ' "'

363 #LOG(
INFO
, "MagicNÿ: " + 
dev_magic
)

364 #LOG(
INFO
, "UUID : " + 
dev_uuid
)

365  
ShñlCmd
.
	$runo
(
cmd°r
)

367 
def
 
	$gë_aiß_size_blocks
(
£lf
):

368  
£lf
.
	$gë_devi˚_size_blocks
(
AISA_DEVICE_PATH
)

370 
def
 
	$gë_aiß_size_byãs
(
£lf
):

371  
£lf
.
	$gë_devi˚_size_byãs
(
AISA_DEVICE_PATH
)

373 
def
 
	$gë_aiß_deÁu…_size_blocks
(
£lf
):

374 #deÁu… 
size
 
wûl
 
be
 
the
 sizê
of
 
d©a
 
devi˚


375 #ªtu∫ 
£lf
.
	`gë_devi˚_size_blocks
(
CONFIG_AISA_DATA_DEVICE_NAME
)

376  
£lf
.
	$gë_devi˚_size_blocks
(
£lf
.
d©a_devi˚_«me
)

378 
def
 
	$gë_aiß_deÁu…_size_byãs
(
£lf
):

379 #deÁu… 
size
 
wûl
 
be
 
the
 sizê
of
 
d©a
 
devi˚


380 #ªtu∫ 
£lf
.
	`gë_devi˚_size_byãs
(
CONFIG_AISA_DATA_DEVICE_NAME
)

381  
£lf
.
	$gë_devi˚_size_byãs
(
£lf
.
d©a_devi˚_«me
)

383 
def
 
	$¸óã_aiß_deÁu…
(
£lf
):

384 
dev_ty≥
 = 
DEVICE_TYPE_AISA


385 
dev_«me
 = 
AISA_DEVICE_NAME


387 #By  
¸óã
 
the
 
AISA
 
èrgë
 
wôh
Åhê
size
 
of
 
d©a
 
devi˚


388 
dev_size_blocks
 = 
£lf
.
	$gë_aiß_deÁu…_size_blocks
()

389 i‡((
dev_size_blocks
) <= 0 ):

390 #îr°∏"D©®Devi˚ "+ 
CONFIG_AISA_DATA_DEVICE_NAME


391 
îr°r
 = "D©®Devi˚ "+ 
£lf
.
d©a_devi˚_«me


392 
îr°r
 += " doesÇotÉxist orÇotáccessible"

394 #LOG(
ERROR
,"D©®Devi˚ "+ 
CONFIG_AISA_DATA_DEVICE_NAME
)

395 
	`LOG
(
ERROR
,"D©®Devi˚ "+ 
£lf
.
d©a_devi˚_«me
)

396 
	`LOGRAW
(" doesÇotÉxist orÇotáccessible")

398 
ªtobj
 = 
	$Rëu∫Info
(
CLI_FAILURE
, 
îr°r
)

399  
ªtobj


401 
	`LOG
(
INFO
,"Cª©ög AISA T¨gë o‡deÁu… sizê" + 
dev_size_blocks
 + " blocks")

403  (
£lf
.
	$¸óã_aiß
(
dev_ty≥
, 
dev_«me
, 
dev_size_blocks
))

405 #NŸê
hîe
 
Mëad©a
 
devi˚
 
öfo
 
is
 
Æso
 
∑s£d


406 
def
 
	$¸óã_aiß
(
£lf
, 
¨g_ty≥
, 
¨g_«me
, 
¨g_size
):

408 
dev_°¨t_£˘‹
 = 0

409 
dev_Àn
 = 
¨g_size


410 
dev_èbÀ_«me
 = 
TABLE_NAME_AISA


411 #NŸê
D©a
 
devi˚
 
wûl
 
poöt
 
to
 
AISA
 
DATA
 
DEVICE


412 #dev_d©a_devi˚_«mê
CONFIG_AISA_DATA_DEVICE_NAME
 #argv[0]

413 
dev_d©a_devi˚_«me
 = 
£lf
.
d©a_devi˚_«me
 #argv[0]

414 
dev_°¨t_£˘‹_2
 = 0 #argv[1]

415 
dev_ty≥
 = 
¨g_ty≥
 #argv[2]

416 
dev_«me
 = 
¨g_«me
 #argv[3]

417 
dev_magic_°r
 = 'AISADD' #AISA 
D©a
 
Devi˚


418 
dev_magic
 = 
£lf
.
	$gë_magic_no
(
dev_magic_°r
) #argv[4]

419 
ªtobj
 = 
	$gëUUID
() #argv[5]

420 
dev_uuid
 = 
ªtobj
.
ªt°r


422 #dev_mëad©a_«mê
CONFIG_AISA_METADATA_DEVICE_NAME


423 
dev_mëad©a_«me
 = 
£lf
.
mëad©a_devi˚_«me


424 
dev_magic_°r
 = 'AISAMD' #AISA 
MëaD©a
 
Devi˚


425 
dev_mëad©a_magic
 = 
£lf
.
	$gë_magic_no
(
dev_magic_°r
)

426 
ªtobj
 = 
	$gëUUID
()

427 
dev_mëad©a_uuid
 = 
ªtobj
.
ªt°r


429 
cmd°r
 = ''

430 
cmd°r
 +'dm£tu∞¸óã ' + 
dev_«me


431 
cmd°r
 +' --uuid ' + 
	$°r
(
dev_uuid
)

432 
cmd°r
 += ' --table "'

433 
cmd°r
 +' ' + 
	$°r
(
dev_°¨t_£˘‹
)

434 
cmd°r
 +' ' + 
	$°r
(
dev_Àn
)

435 
cmd°r
 +' ' + 
dev_èbÀ_«me


436 
cmd°r
 +' ' + 
dev_d©a_devi˚_«me
 #argv[0]

437 
cmd°r
 +' ' + 
	$°r
(
dev_°¨t_£˘‹_2
) #argv[1]

438 
cmd°r
 +' ' + 
dev_ty≥
 #argv[2]

439 
cmd°r
 +' ' + 
dev_«me
 #¨gv[3] 
Pas£d
 
twi˚


440 
cmd°r
 +' ' + 
dev_magic
 #argv[4]

441 
cmd°r
 +' ' + 
dev_uuid
 #argv[5]

442 
cmd°r
 +' ' + 
dev_mëad©a_«me
 #argv[6]

443 
cmd°r
 +' ' + 
dev_mëad©a_magic
 #argv[7]

444 
cmd°r
 +' ' + 
dev_mëad©a_uuid
 #argv[8]

445 
cmd°r
 +' ' + 
	`gëCuºítD©eRaw
(Ë+ 
	$gëCuºítTimeRaw
()#¨gv[9] #Timê
ö
 "ddmmyyyyhhmmss"

446 
cmd°r
 += ' "'

447 #LOG(
INFO
, "MagicNÿ: " + 
dev_magic
)

448 #LOG(
INFO
, "UUID : " + 
dev_uuid
)

449  
ShñlCmd
.
	$runo
(
cmd°r
)

451 
def
 
	$dñëe_vﬁume
(
£lf
, 
¨g_dev«me
):

452 
dev_«me
 = 
¨g_dev«me


453 
cmd°r
 = ''

454 
cmd°r
 +'dm£tu∞ªmovê' + 
dev_«me


455 
cmd°r
 += ''

456 
	`LOG
(
INFO
, "Dñëög Vﬁumê: " + 
dev_«me
)

457  
ShñlCmd
.
	$runo
(
cmd°r
)

459 
def
 
	$dñëe_Æl_vﬁumes
(
£lf
):

460 
ªtobj
 = 
£lf
.
	$li°_vﬁume_sh‹t
()

461 
d©a
 = 
ªtobj
.
ªt°r


462 
devi˚s
 = 
d©a
.
	`•lô
("\n")

463 
vﬁ
 
ö
 
devi˚s
:

464 i‡(
vﬁ
.
	`°¨tswôh
( '#' )):

467 
ªtobj
 = 
£lf
.
	$dñëe_vﬁume
(
vﬁ
)

468 
ªtobj
.
	$LOG
()

470 
def
 
	$dñëe_aiß
(
£lf
):

471 
£lf
.
	$dñëe_Æl_vﬁumes
()

472 
dev_«me
 = "AISA"

473 
cmd°r
 = ''

474 
cmd°r
 +'dm£tu∞ªmovê' + 
dev_«me


475 
cmd°r
 += ''

476 
	`LOG
(
INFO
, "Dñëög AISA T¨gë : " + 
dev_«me
)

477  
ShñlCmd
.
	$runo
(
cmd°r
)

479 
def
 
	$kî√l_sizeof_d©a°ru˘uªs
(
£lf
, 
¨gc
, 
¨gv
):

480 
cmd°r
 = ''

481 
cmd°r
 += 'cat /sys/kernel/avm/get_sizeof_datastructures'

482 
cmd°r
 += ''

483  
ShñlCmd
.
	$ruƒ
(
cmd°r
)

485 
def
 
	$kî√l_io_ªad
(
£lf
, 
¨gc
, 
¨gv
):

486 
devi˚_«me
 = 
¨gv
[2]

487 
£˘‹
 = 
¨gv
[3]

488 
size
 = 
¨gv
[4]

489 
vîbo£
 = ""

490 i‡(
¨gc
 == 6):

491 
vîbo£
 = 
¨gv
[5]

493 
	`LOG
(
INFO
, "READ IO Details")

494 
	`LOG
(
INFO
, "===============")

495 
	`LOG
(
INFO
, "DEVICE NAME : " + 
devi˚_«me
)

496 
	`LOG
(
INFO
, "DEVICE LBA : " + 
£˘‹
)

497 
	`LOG
(
INFO
, "DEVICE SIZE : " + 
size
)

498 
cmd°r
 = ''

499 
cmd°r
 +'echÿ' + 
devi˚_«me
 + ' > /sys/kernel/avm/issue_read_io_on_device;\n'

500 
cmd°r
 +'echÿ' + 
£˘‹
 + ' > /sys/kernel/avm/issue_read_io_at_sector;\n'

501 
cmd°r
 +'echÿ' + 
size
 + ' > /sys/kernel/avm/issue_read_io_with_size;\n'

502 
cmd°r
 += 'cat ' + ' /sys/kernel/avm/issue_read_io;\n'

503 
cmd°r
 += ''

505 i‡(
vîbo£
 == "-v"):

506 
	`LOG
(
INFO
, "Verbose:Command Details")

507 
	`LOG
(
INFO
, "=======================")

508 #LOG(
INFO
, "\n" + 
cmd°r
)

509 
	$¥öt
(
cmd°r
)

511  
ShñlCmd
.
	$ruƒ
(
cmd°r
)

513 
def
 
	$kî√l_io_wrôe
(
£lf
, 
¨gc
, 
¨gv
):

514 
devi˚_«me
 = 
¨gv
[2]

515 
£˘‹
 = 
¨gv
[3]

516 
size
 = 
¨gv
[4]

517 
vîbo£
 = ""

518 i‡(
¨gc
 == 6):

519 
vîbo£
 = 
¨gv
[5]

520 
	`LOG
(
INFO
, "WRITE IO Details")

521 
	`LOG
(
INFO
, "================")

522 
	`LOG
(
INFO
, "DEVICE NAME : " + 
devi˚_«me
)

523 
	`LOG
(
INFO
, "DEVICE LBA : " + 
£˘‹
)

524 
	`LOG
(
INFO
, "DEVICE SIZE : " + 
size
)

525 
cmd°r
 = ''

526 
cmd°r
 +'echÿ' + 
devi˚_«me
 + ' > /sys/kernel/avm/issue_write_io_on_device;\n'

527 
cmd°r
 +'echÿ' + 
£˘‹
 + ' > /sys/kernel/avm/issue_write_io_at_sector;\n'

528 
cmd°r
 +'echÿ' + 
size
 + ' > /sys/kernel/avm/issue_write_io_with_size;\n'

529 
cmd°r
 += 'cat ' + ' /sys/kernel/avm/issue_write_io\n'

530 
cmd°r
 += ''

532 i‡(
vîbo£
 == "-v"):

533 
	`LOG
(
INFO
, "Verbose:Command Details")

534 
	`LOG
(
INFO
, "=======================")

535 #LOG(
INFO
, "\n" + 
cmd°r
)

536 
	$¥öt
(
cmd°r
)

538  
ShñlCmd
.
	$ruƒ
(
cmd°r
)

540 
def
 
	$kî√l_io_zîo
(
£lf
, 
¨gc
, 
¨gv
):

541 
devi˚_«me
 = 
¨gv
[2]

542 
£˘‹
 = 
¨gv
[3]

543 
size
 = 
¨gv
[4]

544 
vîbo£
 = ""

545 i‡(
¨gc
 == 6):

546 
vîbo£
 = 
¨gv
[5]

547 
	`LOG
(
INFO
, "ZERO IO Details")

548 
	`LOG
(
INFO
, "================")

549 
	`LOG
(
INFO
, "DEVICE NAME : " + 
devi˚_«me
)

550 
	`LOG
(
INFO
, "DEVICE LBA : " + 
£˘‹
)

551 
	`LOG
(
INFO
, "DEVICE SIZE : " + 
size
)

552 
cmd°r
 = ''

553 
cmd°r
 +'echÿ' + 
devi˚_«me
 + ' > /sys/kernel/avm/issue_zero_io_on_device;\n'

554 
cmd°r
 +'echÿ' + 
£˘‹
 + ' > /sys/kernel/avm/issue_zero_io_at_sector;\n'

555 
cmd°r
 +'echÿ' + 
size
 + ' > /sys/kernel/avm/issue_zero_io_with_size;\n'

556 
cmd°r
 += 'cat ' + ' /sys/kernel/avm/issue_zero_io\n'

557 
cmd°r
 += ''

559 i‡(
vîbo£
 == "-v"):

560 
	`LOG
(
INFO
, "Verbose:Command Details")

561 
	`LOG
(
INFO
, "=======================")

562 #LOG(
INFO
, "\n" + 
cmd°r
)

563 
	$¥öt
(
cmd°r
)

565  
ShñlCmd
.
	$ruƒ
(
cmd°r
)

569 
def
 
	$li°_vﬁume
(
£lf
, 
¨gc
, 
¨gv
):

571 
cmd°r
 = ''

572 
cmd°r
 += 'cat /sys/kernel/avm/get_list_of_volumes'

573 
cmd°r
 += ''

574  
ShñlCmd
.
	$ruƒ
(
cmd°r
)

576 
def
 
	$li°_vﬁume_sh‹t
(
£lf
):

578 
cmd°r
 = ''

579 
cmd°r
 += 'cat /sys/kernel/avm/get_list_of_volumes_short'

580 
cmd°r
 += ''

581  
ShñlCmd
.
	$ruƒ
(
cmd°r
)

583 
def
 
	$öfo_aiß
(
£lf
):

584 
cmd°r
 = ''

585 
cmd°r
 +'echÿ"' + 
AISA_DEVICE_NAME
 + '"> /sys/kernel/avm/get_set_volume_info ;'

586 
cmd°r
 += 'cat /sys/kernel/avm/get_set_volume_info'

587 
cmd°r
 += ''

588  
ShñlCmd
.
	$ruƒ
(
cmd°r
)

590 
def
 
	$öfo_vﬁume
(
£lf
, 
¨g_«me
):

591 
cmd°r
 = ''

592 
cmd°r
 +'echÿ"'+
¨g_«me
+'"> /sys/kernel/avm/get_set_volume_info ;'

593 
cmd°r
 += 'cat /sys/kernel/avm/get_set_volume_info'

594 
cmd°r
 += ''

595  
ShñlCmd
.
	$ruƒ
(
cmd°r
)

597 
def
 
	$gë_kî√l_lba_íåy
(
£lf
, 
¨g_lba_ödex
):

598 
cmd°r
 = ''

599 
cmd°r
 +'echÿ"' + 
¨g_lba_ödex
 + '"> /sys/kernel/avm/get_set_lba_table_index ;'

600 
cmd°r
 += 'cat /sys/kernel/avm/get_set_lba_table_index'

601 
cmd°r
 += ''

603 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

604 i‡(
ªtobj
.
ªtcode
 != 0):

605 
	`LOG
(
ERROR
, "UnableÅo get kernelÜbaÅableÉntry. LooksÜike kernel module is NOTÜoaded")

606  
CLI_FAILURE


608 
d©a
 = 
ªtobj
.
ªt°r


609 
vî°r
 = 
d©a
.
	`•lô
("\n")

610 
löe
 
ö
 
vî°r
:

611 i‡(
löe
.
	`°¨tswôh
( '#' )):

614 
	$¥öt
(
löe
)

616  
CLI_SUCCESS


618 
def
 
	$gë_kî√l_pba_íåy
(
£lf
, 
¨g_pba_ödex
):

619 
cmd°r
 = ''

620 
cmd°r
 +'echÿ"' + 
¨g_pba_ödex
 + '"> /sys/kernel/avm/get_set_pba_table_index ;'

621 
cmd°r
 += 'cat /sys/kernel/avm/get_set_pba_table_index'

622 
cmd°r
 += ''

624 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

625 i‡(
ªtobj
.
ªtcode
 != 0):

626 
	`LOG
(
ERROR
, "UnableÅo get kernelÖbaÅableÉntry. LooksÜike kernel module is NOTÜoaded")

627  
CLI_FAILURE


629 
d©a
 = 
ªtobj
.
ªt°r


630 
vî°r
 = 
d©a
.
	`•lô
("\n")

631 
löe
 
ö
 
vî°r
:

632 i‡(
löe
.
	`°¨tswôh
( '#' )):

635 
	$¥öt
(
löe
)

637  
CLI_SUCCESS


639 
def
 
	$gë_devi˚_size_byãs
(
£lf
, 
¨g_vﬁ«me
):

640 #vﬁ«mê
AISA_VOLUME_PREFIX
 + "/" + 
¨g_vﬁ«me


641 
vﬁ«me
 = 
¨g_vﬁ«me


642 
cmd°r
 = ''

643 
cmd°r
 +'echÿ"'+
vﬁ«me
+'"> /sys/kernel/avm/get_set_device_size_bytes ;'

644 
cmd°r
 += 'cat /sys/kernel/avm/get_set_device_size_bytes'

645 
cmd°r
 += ''

646 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

648 
ouçut
 = 
ªtobj
.
ªt°r


649 
size_ö_byãs
 = 
ouçut
.
	`•lô
("\n")

650 
sz
 
ö
 
size_ö_byãs
:

651 i‡(
sz
.
	`°¨tswôh
( '#' )):

654 #LOGR("Sizêö Byã†"+
sz
)

655  
sz


657  
	`°r
(-1)

659 
def
 
	$gë_devi˚_size_blocks
(
£lf
, 
¨g_vﬁ«me
):

660 #vﬁ«mê
AISA_VOLUME_PREFIX
 + "/" + 
¨g_vﬁ«me


661 
vﬁ«me
 = 
¨g_vﬁ«me


662 
cmd°r
 = ''

663 
cmd°r
 +'echÿ"'+
vﬁ«me
+'"> /sys/kernel/avm/get_set_device_size_blocks ;'

664 
cmd°r
 += 'cat /sys/kernel/avm/get_set_device_size_blocks'

665 
cmd°r
 += ''

666 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

668 
ouçut
 = 
ªtobj
.
ªt°r


669 
size_ö_blocks
 = 
ouçut
.
	`•lô
("\n")

670 
sz
 
ö
 
size_ö_blocks
:

671 i‡(
sz
.
	`°¨tswôh
( '#' )):

674 #LOGR("Sizêö Block†"+
sz
)

675  
sz


677  
	`°r
(-1)

679 
def
 
	$¥öt_vﬁume_size_Æl
(
£lf
):

680 
ªtobj
 = 
£lf
.
	$li°_vﬁume_sh‹t
()

681 
d©a
 = 
ªtobj
.
ªt°r


682 
devi˚s
 = 
d©a
.
	`•lô
("\n")

683 
vﬁ
 
ö
 
devi˚s
:

684 i‡(
vﬁ
.
	`°¨tswôh
( '#' )):

687 
vﬁ∑th
 = 
AISA_VOLUME_PREFIX
 + "/" + 
vﬁ


688 
dev_size_blocks
 = 
£lf
.
	$gë_devi˚_size_blocks
(
vﬁ∑th
)

689 
dev_size_byãs
 = 
£lf
.
	$gë_devi˚_size_byãs
(
vﬁ∑th
)

690 
	`LOGRAW
("[ " + 
vﬁ∑th
 + " ]")

691 
	`LOGRAW
(" " + 
vﬁ∑th
 +" sizêö Byã†: " + 
dev_size_byãs
)

692 
	`LOGRAW
(" " + 
vﬁ∑th
 +" sizêö Blocks: " + 
dev_size_blocks
)

693 
	`LOGRAW
(" " + 
vﬁ∑th
 +" sizêö KB : " + 
	$c⁄vît_byãs_to_kb
(
dev_size_byãs
))

694 
	`LOGRAW
(" " + 
vﬁ∑th
 +" sizêö MB : " + 
	$c⁄vît_byãs_to_mb
(
dev_size_byãs
))

695 
	`LOGRAW
(" " + 
vﬁ∑th
 +" sizêö GB : " + 
	$c⁄vît_byãs_to_gb
(
dev_size_byãs
))

697 
	`LOGRAW
("")

699 
def
 
	$¥öt_aiß_size
(
£lf
):

700 
vﬁ∑th
 = 
AISA_DEVICE_PATH


701 
dev_size_blocks
 = 
£lf
.
	$gë_devi˚_size_blocks
(
vﬁ∑th
)

702 
dev_size_byãs
 = 
£lf
.
	$gë_devi˚_size_byãs
(
vﬁ∑th
)

703 
	`LOGRAW
("[ " + 
vﬁ∑th
 + " ]")

704 
	`LOGRAW
(" " + 
vﬁ∑th
 +" sizêö Byã†: " + 
dev_size_byãs
)

705 
	`LOGRAW
(" " + 
vﬁ∑th
 +" sizêö Blocks: " + 
dev_size_blocks
)

706 
	`LOGRAW
(" " + 
vﬁ∑th
 +" sizêö KB : " + 
	$c⁄vît_byãs_to_kb
(
dev_size_byãs
))

707 
	`LOGRAW
(" " + 
vﬁ∑th
 +" sizêö MB : " + 
	$c⁄vît_byãs_to_mb
(
dev_size_byãs
))

708 
	`LOGRAW
(" " + 
vﬁ∑th
 +" sizêö GB : " + 
	$c⁄vît_byãs_to_gb
(
dev_size_byãs
))

709 
	`LOGRAW
("")

711 
def
 
	$gë_magic_no
(
£lf
, 
¨g°r
):

712 
magic°r
 = ""

713 
ch
 
ö
 
¨g°r
:

714 
magic°r
 +
	$gëHex
(
ch
)

716  
magic°r


	@AISA_AVMGlobals.py

1 #! /
u§
/
bö
/
pyth⁄


2 
‰om
 
AISA_AVMC‹e
 
imp‹t
 *

4 
	gCLI_SUCCESS
 = 0

5 
CLI_FAILURE
 = -1

6 
CLI_NOOP
 = 1

7 
CLI_DATA_DEVICE_DOES_NOT_EXIST
 = -2

8 
CLI_METADATA_DEVICE_DOES_NOT_EXIST
 = -3

9 
CLI_DEVICES_DOES_NOT_EXIST
 = -4

11 
DZ_CLI_VERSION
 = "1.1.a"

12 
DZ_DRIVER_VERSION
 = "3.10.101"

13 
DZ_CLI_PRODUCT
 = "ZAIDSTOR AISA Volume Manager (AVM)"

14 
DZ_CLI_CONFIG_FILE_PATH
 = "/etc/datumsoft/avm.conf"

17 #"
d©umso·_avm_9_sysfs_ígöe_moduÀ
",

18 #"
d©umso·_avm_8_vﬁume_ígöe_moduÀ
",

19 #"
d©umso·_avm_7_èrgë_ígöe_moduÀ
",

20 #"
d©umso·_avm_6_„c_ígöe_moduÀ
",

21 #"
d©umso·_avm_5_dedu≥_ígöe_moduÀ
",

22 #"
d©umso·_avm_4_mëad©a_ígöe_moduÀ
",

23 #"
d©umso·_avm_3_bec_ígöe_moduÀ
",

24 #"
d©umso·_avm_2_œb_ígöe_moduÀ
",

25 #"
d©umso·_avm_1_ö‰a_ígöe_moduÀ
",]

27 
KERNEL_MODULE_LIST
 = [

41 
	gCLI_OP_TYPE_LIST
 = ["--list", "-l", "ls", "list"]

42 
	gCLI_OP_TYPE_CREATE
 = ["--create", "-c", "create" ]

43 
	gCLI_OP_TYPE_DELETE
 = ["--delete", "-d", "delete" ]

44 
	gCLI_OP_TYPE_DESTROY
 = ["--destroy", "-dy", "destroy" ]

45 
	gCLI_OP_TYPE_INFO
 = ["--info", "-i", "info" ]

46 
	gCLI_OP_TYPE_STATUS
 = ["--status", "-s", "status" ]

47 
	gCLI_OP_TYPE_HELP
 = ["--help", "-h", "help","-?" ]

48 
	gCLI_OP_TYPE_VERSION
 = ["--version", "-v", "version" ]

49 
	gCLI_OP_TYPE_KERNEL_MODULES
 = ["--kernel-modules", "--km", "km" ]

50 
	gCLI_OP_TYPE_RMMOD
 = ["--rmmod", "-rm", "rm" ]

51 
	gCLI_OP_TYPE_SIZE
 = ["--size", "-sz", "sz", "size" ]

52 
	gCLI_OP_TYPE_STATS
 = ["--stats", "-st", "st", "stats"]

53 
	gCLI_OP_TYPE_LBA
 = ["--lba", "lba" ]

54 
	gCLI_OP_TYPE_PBA
 = ["--pba", "pba" ]

55 
	gCLI_OP_TYPE_SIZEOF
 = ["--sizeof", "-so", "sof", "sizeof"]

56 
	gCLI_OP_TYPE_IO
 = ["--io", "-io", "ior", "ioread"]

57 
	gCLI_OP_TYPE_IO_READ
 = ["--ior", "-ior", "ior", "ioread"]

58 
	gCLI_OP_TYPE_IO_WRITE
 = ["--iow", "-iow", "iow", "iowrite"]

59 
	gCLI_OP_TYPE_IO_WRITE_READ
 = ["--iowr", "-iowr", "iowr", "iowriteread"]

60 
	gCLI_OP_TYPE_IO_READ_WRITE
 = ["--iorw", "-iorw", "iorw", "ioreadwrite"]

61 
	gCLI_OP_TYPE_IO_READ_WRITE_READ
 = ["--iorwr", "-iorwr", "iorwr", "ioreadwriteread"]

62 
	gCLI_OP_TYPE_IO_ZERO
 = ["--ioz", "-ioz", "ioz", "iozero"]

63 
	gCLI_OP_TYPE_IO_READ_ZERO_READ
 = ["--iorzr", "-iorzr", "iorzr", "ioreadzeroread"]

64 
	gCLI_OP_TYPE_LOG
 = ["--log", "log"]

65 
	gCLI_OP_TYPE_CONFIG
 = ["--config", "conf", "config", "--conf"]

66 
	gCLI_OP_TYPE_DISKS
 = ["--disks", "disk", "disks", "--disk"]

67 
	gCLI_OP_TYPE_START
 = ["--start", "start"]

68 
	gCLI_OP_TYPE_STOP
 = ["--stop", "stop"]

69 
	gCLI_OP_TYPE_RESTART
 = ["--restart", "restart"]

70 
	gCLI_OP_TYPE_SYSFS
 = ["--sysfs", "sysfs", "--sys", "sys"]

73 
	gCLI_DEV_TYPE_AISA
 = ["AISA", "-a", "aisa" ]

74 
	gCLI_DEV_TYPE_VOLUME
 = ["--volume", "-vol" ]

75 
	gCLI_DEV_TYPE_SNAPSHOT_READ
 = ["--sread", "-srvol" ]

76 
	gCLI_DEV_TYPE_SNAPSHOT_WRITE
 = ["--swrite", "-swvol" ]

77 
	gCLI_DEV_TYPE_VM_VOLUME
 = ["--vmvolume","-vmvol" ]

78 
	gCLI_DEV_TYPE_VM_SNAPSHOT_READ
 = ["--vmsread", "-vmsr" ]

79 
	gCLI_DEV_TYPE_VM_SNAPSHOT_WRITE
 = ["--vmswrite","-vmsw" ]

81 
	gCLI_DEV_TYPE_ALL
 = [""]

82 
CLI_DEV_TYPE_ALL
 +
CLI_DEV_TYPE_VOLUME


83 
CLI_DEV_TYPE_ALL
 +
CLI_DEV_TYPE_SNAPSHOT_READ


84 
CLI_DEV_TYPE_ALL
 +
CLI_DEV_TYPE_SNAPSHOT_WRITE


85 
CLI_DEV_TYPE_ALL
 +
CLI_DEV_TYPE_VM_VOLUME


86 
CLI_DEV_TYPE_ALL
 +
CLI_DEV_TYPE_VM_SNAPSHOT_READ


87 
CLI_DEV_TYPE_ALL
 +
CLI_DEV_TYPE_VM_SNAPSHOT_WRITE


90 
globÆ
 
CONFIG_AVM_DATA_DEVICE_NAME


91 
globÆ
 
CONFIG_AVM_METADATA_DEVICE_NAME


92 
globÆ
 
CONFIG_AVM_PASSTHROUGH_MODE


93 
globÆ
 
CONFIG_AVM_PASSTHROUGH_MODE_READ


94 
globÆ
 
CONFIG_AVM_PASSTHROUGH_MODE_WRITE


95 
CONFIG_AVM_DATA_DEVICE_NAME
 = ""

96 
CONFIG_AVM_METADATA_DEVICE_NAME
 = ""

97 
CONFIG_AVM_PASSTHROUGH_MODE
 = ""

98 
CONFIG_AVM_PASSTHROUGH_MODE_READ
 = ""

99 
CONFIG_AVM_PASSTHROUGH_MODE_WRITE
 = ""

100 
AISA_METADATA_DISK_MAGIC_NO
 = "AISAMTDT"

103 #DATA 
DISKS
 
CONFIGURATION


106 #AŒ 
the£
 
d©a
 
disks
 
¨e
 
a˘uÆly
 
≥ndrives
 (
S™Disk
 
Cruzî
 
Bœde
)

107 #Each 
≥ndrive
 
of
 64
GB


108 
AISA_DATA_DISKS_CNT
 = 6

110 
AISA_DATA_DISKS
 = '';

111 
	gAISA_DATA_DISKS
 += '/dev/sdd ';

112 
	gAISA_DATA_DISKS
 += '/dev/sde ';

113 
	gAISA_DATA_DISKS
 += '/dev/sdf ';

114 
	gAISA_DATA_DISKS
 += '/dev/sdg ';

115 
	gAISA_DATA_DISKS
 += '/dev/sdh ';

116 
	gAISA_DATA_DISKS
 += '/dev/sdi ';

118 
	gAISA_DATA_DISKS_ARRAY
 = '/dev/md1'

121 #METADATA 
DISKS
 
CONFIGURATION


123 #AŒ 
the£
 
d©a
 
disks
 
¨e
 
a˘uÆly
 
≥ndrives
 (
S™Disk
 
Cruzî
 
Bœde
)

124 #Each 
≥ndrive
 
of
 64
GB


125 
AISA_METADATA_DISKS
 = '';

126 
	gAISA_METADATA_DISKS
 +'/dev/sd¯'; #O¿250
GB
 
H¨ddisk


127 
	gAISA_METADATA_DISKS_CNT
 = 2

128 
AISA_METADATA_DISKS_ARRAY
 = '/dev/md0'

	@AISA_AVMHelp.py

1 #! /
u§
/
bö
/
pyth⁄


2 
‰om
 
AISA_AVMC‹e
 
imp‹t
 *

3 
‰om
 
AISA_AVMGlobÆs
 
imp‹t
 *

5 
def
 
	$dz_˛i_hñp_¸óã_vmvﬁ¢≠
(
¨gc
, 
¨gv
):

6 
¨gv
[0] = "avm"

7 
hñp_¸óã
 = ' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_CREATE
) + ' > '

8 
hñp_¸óã
 +'< '+' | '.
	`joö
(
CLI_DEV_TYPE_VM_SNAPSHOT_READ
) + ' > '

9 
hñp_¸óã
 += '--name < VOL_NAME > --parent < PVOL_NAME >'

10 
hñp_¸óã
 += '\n OR\n'

11 
hñp_¸óã
 +' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_CREATE
) + ' > '

12 
hñp_¸óã
 +'< '+' | '.
	`joö
(
CLI_DEV_TYPE_VM_SNAPSHOT_WRITE
) + ' > '

13 
hñp_¸óã
 += '--name < VOL_NAME > --parent < PVOL_NAME >'

14 
hñp_¸óã
 += '\n Where'

15 
hñp_¸óã
 += '\n VOL_NAME : Name of Snapshot Volume'

16 
hñp_¸óã
 += '\n PVOL_NAME : Name of Volume whose snapshot is beingÅaken'

17 
cmd°r
 = '\n\n Examples:'

18 
cmd°r
 += '\n\tTo Createá ReadOnly Snapshot VolumeÅestvolsr for VM volumeÅestvmvol\n'

19 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --create --vmsread --nameÅestvolsr --parentÅestvmvol\n'

20 
cmd°r
 += '\n\tTo Createá Writable Snapshot VolumeÅestvolsw for VM volumeÅestvmvol\n'

21 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --create --vmswrite --nameÅestvolsw --parentÅestvmvol\n'

22  (
hñp_¸óã
 + 
cmd°r
)

24 
def
 
	$dz_˛i_hñp_¸óã_vﬁ¢≠
(
¨gc
, 
¨gv
):

25 
¨gv
[0] = "avm"

26 
hñp_¸óã
 = ' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_CREATE
) + ' > '

27 
hñp_¸óã
 +'< '+' | '.
	`joö
(
CLI_DEV_TYPE_SNAPSHOT_READ
) + ' > '

28 
hñp_¸óã
 += '--name < VOL_NAME > --parent < PVOL_NAME >'

29 
hñp_¸óã
 += '\n OR\n'

30 
hñp_¸óã
 +' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_CREATE
) + ' > '

31 
hñp_¸óã
 +'< '+' | '.
	`joö
(
CLI_DEV_TYPE_SNAPSHOT_WRITE
) + ' > '

32 
hñp_¸óã
 += '--name < VOL_NAME > --parent < PVOL_NAME >'

33 
hñp_¸óã
 += '\n Where'

34 
hñp_¸óã
 += '\n VOL_NAME : Name of Snapshot Volume'

35 
hñp_¸óã
 += '\n PVOL_NAME : Name of Volume whose snapshot is beingÅaken'

36 
cmd°r
 = '\n\n Examples:'

37 
cmd°r
 += '\n\tTo Createá ReadOnly Snapshot VolumeÅestvolsr for volumeÅestvol\n'

38 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --create --sread --nameÅestvolsr --parentÅestvol\n'

39 
cmd°r
 += '\n\tTo Createá Writable Snapshot VolumeÅestvolsw for volumeÅestvol\n'

40 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --create --swrite --nameÅestvolsw --parentÅestvol\n'

41  (
hñp_¸óã
 + 
cmd°r
)

43 
def
 
	$dz_˛i_hñp_¸óã_vmvﬁ
(
¨gc
, 
¨gv
):

44 
¨gv
[0] = "avm"

45 
hñp_¸óã
 = ' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_CREATE
) + ' > '

46 
hñp_¸óã
 +'< '+' | '.
	`joö
(
CLI_DEV_TYPE_VM_VOLUME
) + ' > '

47 
hñp_¸óã
 += '--name < VOL_NAME > --size < SIZE >'

48 
hñp_¸óã
 += '\n Where'

49 
hñp_¸óã
 += '\n VOL_NAME : Name of Virtual Machine VolumeÖassed'

50 
hñp_¸óã
 += '\n SIZE : It is in GB. Optionalárgument'

51 
cmd°r
 = '\n\n Examples:'

52 
cmd°r
 += '\n\tTo Createá VM VolumeÅestvmvol with size 1024\n'

53 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --create --vmvolume --nameÅestvmvol --size 1024\n'

54 
cmd°r
 += '\n\tTo Createá VM VolumeÅestvmvol with default size\n'

55 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --create --vmvolume --nameÅestvmvol\n'

56  (
hñp_¸óã
 + 
cmd°r
)

58 
def
 
	$dz_˛i_hñp_¸óã_vﬁ
(
¨gc
, 
¨gv
):

59 
¨gv
[0] = "avm"

60 
hñp_¸óã
 = ' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_CREATE
) + ' > '

61 
hñp_¸óã
 +'< '+' | '.
	`joö
(
CLI_DEV_TYPE_VOLUME
) + ' > '

62 
hñp_¸óã
 += '--name < VOL_NAME > --size < SIZE >'

63 
hñp_¸óã
 += '\n Where'

64 
hñp_¸óã
 += '\n VOL_NAME : Name of volumeÖassed'

65 
hñp_¸óã
 += '\n SIZE : It is in GB. Optionalárgument'

66 
cmd°r
 = '\n\n Examples:'

67 
cmd°r
 += '\n\tTo Createá VolumeÅestvol with size 1024\n'

68 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --create --volume --nameÅestvol --size 1024\n'

69 
cmd°r
 += '\n\tTo Createá VolumeÅestvol with default size\n'

70 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --create --volume --nameÅestvol\n'

71  (
hñp_¸óã
 + 
cmd°r
)

73 
def
 
	$dz_˛i_hñp_dñëe
(
¨gc
, 
¨gv
):

74 
¨gv
[0] = "avm"

75 
hñp_dñëe
 = ' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_DELETE
) + ' > < VOL_NAME |áll | AISA > '

76 
cmd°r
 = '\n\n Examples:'

77 
cmd°r
 += '\n\tTo Deleteá VolumeÅestvol\n'

78 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --deleteÅestvol\n'

80 
cmd°r
 += '\n\tTo Deleteáll volumes\n'

81 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --deleteáll\n'

83 
cmd°r
 += '\n\tTo Delete AISA Target \n'

84 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --delete AISA\n'

86 #¥öt(
hñp_dñëe
)

87 #¥öt(
cmd°r
)

88  (
hñp_dñëe
 + 
cmd°r
)

90 
def
 
	$dz_˛i_hñp_de°roy
(
¨gc
, 
¨gv
):

91 
¨gv
[0] = "avm"

92 
hñp_dñëe
 = ' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_DESTROY
) + ' > '

93 
cmd°r
 = '\n\n Examples:'

94 
cmd°r
 += '\n\tTo Destroyáll volumesánd Target\n'

95 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --destroy\n'

97 #¥öt(
hñp_dñëe
)

98 #¥öt(
cmd°r
)

99  (
hñp_dñëe
 + 
cmd°r
)

103 
def
 
	$dz_˛i_hñp_size
(
¨gc
, 
¨gv
):

104 
¨gv
[0] = "avm"

105 
hñp_size
 = ' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_SIZE
) + ' > [ NAME |áll | default ] '

106 
hñp_size
 += '\n Where'

107 
hñp_size
 += '\n NAME : Name of volumeÖassed orány block deviceÖresent inÅhe system'

108 
hñp_size
 += '\n : It should beálwaysÖrovided with completeÖath'

109 
hñp_size
 += '\náll : WillÖrintÅhe sizes ofáll volumes createdánd AISAÅarget'

110 
hñp_size
 += '\n default : WillÖrintÅhe default size of AISA Target'

111 
hñp_size
 += '\n'

112 
hñp_size
 += '\n This command willÖrintÅhe size in bytes, blocks, KB, MBánd GBs'

113 
hñp_size
 += '\n IfÇone ofÅheárugments isÖassedÅhen it willÖrintÅhe sizes of '

114 
hñp_size
 += '\náll volumesÉxcluding AISAÅarget. Size shown in blocks, KB, MBánd GB '

115 
hñp_size
 += '\n willálways have integer value'

116 
cmd°r
 = '\n\n Examples:'

117 
cmd°r
 += '\n\tTo get sizeábout VolumeÅestvol\n'

118 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --size /dev/mapper/testvol\n'

120 
cmd°r
 += '\n\tTo get size ofáll volumesánd AISA Target\n'

121 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --sizeáll\n'

123 
cmd°r
 += '\n\tTo get size ofáll volumes only\n'

124 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --size\n'

126 
cmd°r
 += '\n\tTo get size for block device /dev/sda\n'

127 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --size /dev/sda\n'

129 #¥öt(
hñp_dñëe
)

130 #¥öt(
cmd°r
)

131  (
hñp_size
 + 
cmd°r
)

133 
def
 
	$dz_˛i_hñp_°©s
(
¨gc
, 
¨gv
):

134 
¨gv
[0] = "avm"

135 
hñp_°©s
 = ' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_STATS
) + ' > [ -k | k | -m | m | -d | d |-f | -b | b |Å | -t | -s | s | -all |áll ] '

136 
hñp_°©s
 += '\n Where'

137 
hñp_°©s
 += '\n -k/k : Print Kernel Memory Utilization during initialization'

138 
hñp_°©s
 += '\n -m/m : Print Metadata Engine Counters'

139 
hñp_°©s
 += '\n -d/d : Print Dedupe Engine Counters'

140 
hñp_°©s
 += '\n -f/f : Print FrontEnd Cache Engine Counters'

141 
hñp_°©s
 += '\n -b/b : Print BackEnd Cache Engine Counters'

142 
hñp_°©s
 += '\n -t/t : Print InMemory LBA, HASHánd PBAÅables'

143 
hñp_°©s
 += '\n -s/s : Print SuperBlock Info'

144 
hñp_°©s
 += '\n -all/all : Printáll ofábove'

145 
hñp_°©s
 += '\n'

146 
cmd°r
 = '\n\n Examples:'

147 
cmd°r
 += '\n\tTo get kernel memory utilization during initialization\n'

148 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --stats -k\n'

150 
cmd°r
 += '\n\tTo get Metadata Engine Counters\n'

151 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --stats -m\n'

153 
cmd°r
 += '\n\tTo get FrontEnd Cache Engine Counters\n'

154 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --stats -f\n'

156 
cmd°r
 += '\n\tTo get BackEnd Cache Engine Counters\n'

157 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --stats -b\n'

159 
cmd°r
 += '\n\tTo get Dedupe Engine Engine Counters\n'

160 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --stats -d\n'

162 
cmd°r
 += '\n\tTo get memoryándáll Engine Counters\n'

163 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --stats -d\n'

165 #¥öt(
hñp_dñëe
)

166 #¥öt(
cmd°r
)

167  (
hñp_°©s
 + 
cmd°r
)

169 
def
 
	$dz_˛i_hñp_öfo
(
¨gc
, 
¨gv
):

170 
¨gv
[0] = "avm"

171 
hñp_öfo
 = ' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_INFO
) + ' > [ VOL_NAME |áll ] '

172 
cmd°r
 = '\n\n Examples:'

173 
cmd°r
 += '\n\tTo get infoábout VolumeÅestvol\n'

174 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --infoÅestvol\n'

176 
cmd°r
 += '\n\tTo get info foráll volumesánd AISA Target\n'

177 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --infoáll\n'

179 
cmd°r
 += '\n\tTo get info foráll volumes only\n'

180 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --info\n'

182 #¥öt(
hñp_dñëe
)

183 #¥öt(
cmd°r
)

184  (
hñp_öfo
 + 
cmd°r
)

186 
def
 
	$dz_˛i_hñp_¸óã_aiß
(
¨gc
, 
¨gv
):

187 
¨gv
[0] = "avm"

188 
hñp_¸óã
 = ' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_CREATE
) + ' > '

189 
hñp_¸óã
 +'< '+' | '.
	`joö
(
CLI_DEV_TYPE_AISA
) + ' > '

190 
hñp_¸óã
 += '[ --size < SIZE > ]'

191 
hñp_¸óã
 += '\n Where'

192 
hñp_¸óã
 += '\n SIZE: It is in GB. Optionalárgument'

193 
hñp_¸óã
 += '\n NOTE: The default size isÅhe size ofÅhe Data Device'

194 
hñp_¸óã
 += '\n :Örovided inávm.conf'

195 
cmd°r
 = '\n\n Examples:'

196 
cmd°r
 += '\n\tTo Create AISA Target with default size\n'

197 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --create AISA\n'

198 
cmd°r
 += '\n\tTo Create AISA Target with 100 GB size\n'

199 
cmd°r
 +'\t#> ' + 
¨gv
[0] + ' --create AISA --size 100\n'

200  (
hñp_¸óã
 + 
cmd°r
)

202 
def
 
	$dz_˛i_hñp_io
(
¨gc
, 
¨gv
):

203 
¨gv
[0] = "avm"

205 
hñp_i‹
 = " [1] For READ IOs\n"

206 
hñp_i‹
 +' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_IO_READ
) + ' > < DEVICE_NAME > < SECTOR > < IO SIZE >'

208 
rcmd°r
 = '\n\n Examples:'

209 
rcmd°r
 += '\n\tTo issue READ IO oná DEVICE /dev/sda on SECTOR 1ánd SIZE 4K\n'

210 
rcmd°r
 +'\t#> ' + 
¨gv
[0] + ' -ior /dev/sda 1 4K\n\n'

212 
hñp_iow
 = " [2] For WRITE IOs\n"

213 
hñp_iow
 +' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_IO_WRITE
) + ' > < DEVICE_NAME > < SECTOR > < IO SIZE >'

215 
wcmd°r
 = '\n\n Examples:'

216 
wcmd°r
 += '\n\tTo issue WRITE IO oná DEVICE /dev/sda on SECTOR 1ánd SIZE 4K\n'

217 
wcmd°r
 +'\t#> ' + 
¨gv
[0] + ' -iow /dev/sda 1 4K\n\n'

219 
hñp_ioz
 = " [3] For ZEROED IOs\n"

220 
hñp_ioz
 +' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_IO_ZERO
) + ' > < DEVICE_NAME > < SECTOR > < IO SIZE >'

222 
zcmd°r
 = '\n\n Examples:'

223 
zcmd°r
 += '\n\tTo issue ZERO WRITE IO oná DEVICE /dev/sda on SECTOR 1ánd SIZE 4K\n'

224 
zcmd°r
 +'\t#> ' + 
¨gv
[0] + ' -ioz /dev/sda 1 4K\n\n'

226 
hñp_i‹w
 = " [4] For issuing READánd WRITE IOs sequentially\n"

227 
hñp_i‹w
 +' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_IO_READ_WRITE
) + ' > < DEVICE_NAME > < SECTOR > < IO SIZE >'

229 
rwcmd°r
 = '\n\n Examples:'

230 
rwcmd°r
 += '\n\tTo issue READánd WRITE IO oná DEVICE /dev/sda on SECTOR 1ánd SIZE 4K\n'

231 
rwcmd°r
 +'\t#> ' + 
¨gv
[0] + ' -iorw /dev/sda 1 4K\n\n'

233 
hñp_iowr
 = " [5] For issuing WRITEánd READ IOs sequentially\n"

234 
hñp_iowr
 +' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_IO_WRITE_READ
) + ' > < DEVICE_NAME > < SECTOR > < IO SIZE >'

236 
wrcmd°r
 = '\n\n Examples:'

237 
wrcmd°r
 += '\n\tTo issue WRITEánd READ IO oná DEVICE /dev/sda on SECTOR 1ánd SIZE 4K\n'

238 
wrcmd°r
 +'\t#> ' + 
¨gv
[0] + ' -iowr /dev/sda 1 4K\n\n'

240 
hñp_i‹wr
 = " [6] For issuing READ, WRITEánd READ IOs sequentially\n"

241 
hñp_i‹wr
 +' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_IO_READ_WRITE_READ
) + ' > < DEVICE_NAME > < SECTOR > < IO SIZE >'

243 
rwrcmd°r
 = '\n\n Examples:'

244 
rwrcmd°r
 += '\n\tTo issue READ, WRITEánd READ IO oná DEVICE /dev/sda on SECTOR 1ánd SIZE 4K\n'

245 
rwrcmd°r
 +'\t#> ' + 
¨gv
[0] + ' -iorwr /dev/sda 1 4K\n\n'

247 
hñp_i‹zr
 = " [7] For issuing READ, ZERO WRITEánd READ IOs sequentially\n"

248 
hñp_i‹zr
 +' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_IO_READ_ZERO_READ
) + ' > < DEVICE_NAME > < SECTOR > < IO SIZE >'

250 
rzrcmd°r
 = '\n\n Examples:'

251 
rzrcmd°r
 += '\n\tTo issue READ, ZERO WRITEánd READ IOs oná DEVICE /dev/sda on SECTOR 1ánd SIZE 4K\n'

252 
rzrcmd°r
 +'\t#> ' + 
¨gv
[0] + ' -iorzr /dev/sda 1 4K\n\n'

254 
hñp_io
 = " Note: \n"

255 
hñp_io
 += " [1]: Use dmesg for gettingÅhe output\n"

256 
hñp_io
 += " [2]: Max WRITE IO size is 16K (Will beÅruncated if given greater)\n"

257 
hñp_io
 += " [3]: PreDefined data(string) is used for issuing WRITE IOs\n"

259 #hñp_iÿ
hñp_i‹
 + 
rcmd°r
 + 
hñp_iow
 + 
wcmd°r
 + + 
hñp_i‹w
 + 
rwcmd°r
 
hñp_io
;

260 
tmp°r
 = 
hñp_i‹
 + 
rcmd°r
 + 
hñp_iow
 + 
wcmd°r
 + 
hñp_ioz
 + 
zcmd°r


261 
tmp°r
 +
hñp_i‹w
 + 
rwcmd°r
 + 
hñp_iowr
 + 
wrcmd°r


262 
tmp°r
 +
hñp_i‹wr
 + 
rwrcmd°r
 + 
hñp_i‹zr
 + 
rzrcmd°r
 + 
hñp_io


263 
hñp_io
 = 
tmp°r


265 #¥öt(
hñp_io
+
cmd°r
)

266  (
hñp_io
)

268 
def
 
	$dz_˛i_hñp_hñp
(
¨gc
, 
¨gv
):

269 
¨gv
[0] = "avm"

270 
cmd°r
 = ' #> '+
¨gv
[0]+' < '+' | '.
	`joö
(
CLI_OP_TYPE_HELP
) + ' > \\'

271 
cmd°r
 +'\¿ [ '+' | '.
	`joö
(
CLI_OP_TYPE_CREATE
) + ' ] \\'

272 
cmd°r
 +'\¿ [ '+' | '.
	`joö
(
CLI_OP_TYPE_DELETE
) + ' ] \\'

273 
cmd°r
 +'\¿ [ '+' | '.
	`joö
(
CLI_OP_TYPE_INFO
) + ' ] \\'

274 
cmd°r
 +'\¿ [ '+' | '.
	`joö
(
CLI_OP_TYPE_SIZE
) + ' ] \\'

275 
cmd°r
 +'\¿ [ '+' | '.
	`joö
(
CLI_OP_TYPE_STATS
) + ' ] \\'

276 
cmd°r
 +'\¿ [ '+' | '.
	`joö
(
CLI_OP_TYPE_LIST
) + ' ] \n'

277  (
cmd°r
)

279 
def
 
	$dz_˛i_hñp_Æl
(
¨gc
, 
¨gv
):

280 
¨gv
[0] = "avm"

282 
cmd°r
 = ' ' + 
DZ_CLI_PRODUCT
 + " CLI Vîsi⁄ " + 
DZ_CLI_VERSION


283 
cmd°r
 +'\¿ ' + 
DZ_CLI_PRODUCT
 + " Drivî Vîsi⁄ " + 
DZ_DRIVER_VERSION


284 
cmd°r
 +"\¿ CuºíàD©e: "+
	$gëCuºítD©eAndTime
()

285 
cmd°r
 += '\n\n Usage: \n'

286 
cmd°r
 += '\n To Create AISA Target Device'

287 
cmd°r
 += '\n ----------------------------\n'

288 
cmd°r
 +
	$dz_˛i_hñp_¸óã_aiß
(
¨gc
, 
¨gv
)

290 
cmd°r
 += '\n To Create Volumes'

291 
cmd°r
 += '\n -----------------\n'

292 
cmd°r
 +
	$dz_˛i_hñp_¸óã_vﬁ
(
¨gc
, 
¨gv
)

294 
cmd°r
 += '\n To Create ReadOnlyánd Writable Snapshot Volumes'

295 
cmd°r
 += '\n ------------------------------------------------\n'

296 
cmd°r
 +
	$dz_˛i_hñp_¸óã_vﬁ¢≠
(
¨gc
, 
¨gv
)

298 
cmd°r
 += '\n To Create Volumes dedicated for Virtual Machines'

299 
cmd°r
 += '\n ------------------------------------------------\n'

300 
cmd°r
 +
	$dz_˛i_hñp_¸óã_vmvﬁ
(
¨gc
, 
¨gv
)

302 
cmd°r
 += '\n To Create ReadOnlyánd Writable Snapshot Volumes for VM Volumes'

303 
cmd°r
 += '\n ---------------------------------------------------------------\n'

304 
cmd°r
 +
	$dz_˛i_hñp_¸óã_vmvﬁ¢≠
(
¨gc
, 
¨gv
)

306 
cmd°r
 += '\n To Deleteá Volume (Be it volume, snapshot, virtual machine volume)'

307 
cmd°r
 += '\n -------------------------------------------------------------------\n'

308 
cmd°r
 +
	$dz_˛i_hñp_dñëe
(
¨gc
, 
¨gv
)

310 
cmd°r
 += '\n To DestroyÉverything in one go'

311 
cmd°r
 += '\n -------------------------------\n'

312 
cmd°r
 +
	$dz_˛i_hñp_de°roy
(
¨gc
, 
¨gv
)

314 
cmd°r
 += '\n To Issued READánd WRITE IOs on block devices'

315 
cmd°r
 += '\n ---------------------------------------------\n'

316 
cmd°r
 +
	$dz_˛i_hñp_io
(
¨gc
, 
¨gv
)

318 
cmd°r
 += '\n To Listáll Volumes'

319 
cmd°r
 += '\n -------------------\n'

320 
cmd°r
 +' #> ' + 
¨gv
[0] + ' < '+' | '.
	`joö
(
CLI_OP_TYPE_LIST
) + ' >\n'

322 
cmd°r
 += '\n To show details/info ofÉach volumes'

323 
cmd°r
 += '\n ------------------------------------\n'

324 
cmd°r
 +
	$dz_˛i_hñp_öfo
(
¨gc
, 
¨gv
)

326 
cmd°r
 += '\n To show sizes of volumesánd block devices'

327 
cmd°r
 += '\n ------------------------------------------\n'

328 
cmd°r
 +
	$dz_˛i_hñp_size
(
¨gc
, 
¨gv
)

330 
cmd°r
 += '\n To show memory utilizationándállÉngine counters'

331 
cmd°r
 += '\n --------------------------------------------------\n'

332 
cmd°r
 +
	$dz_˛i_hñp_°©s
(
¨gc
, 
¨gv
)

334 
cmd°r
 += '\n To Listáll kernel modules'

335 
cmd°r
 += '\n --------------------------\n'

336 
cmd°r
 +' #> ' + 
¨gv
[0] + ' < '+' | '.
	`joö
(
CLI_OP_TYPE_KERNEL_MODULES
) + ' >\n'

338 
cmd°r
 += '\n To Show status ofáll kernel modulesándÅarget device'

339 
cmd°r
 += '\n ------------------------------------------------------\n'

340 
cmd°r
 +' #> ' + 
¨gv
[0] + ' < '+' | '.
	`joö
(
CLI_OP_TYPE_STATUS
) + ' >\n'

342 
cmd°r
 += '\n To Show LBA Table Entry forá given index'

343 
cmd°r
 += '\n ------------------------------------------------------\n'

344 
cmd°r
 +' #> ' + 
¨gv
[0] + ' < '+' | '.
	`joö
(
CLI_OP_TYPE_LBA
) + ' > < INDEX_NUMBER >\n'

346 
cmd°r
 += '\n To Show PBA Table Entry forá given index'

347 
cmd°r
 += '\n ------------------------------------------------------\n'

348 
cmd°r
 +' #> ' + 
¨gv
[0] + ' < '+' | '.
	`joö
(
CLI_OP_TYPE_PBA
) + ' > < INDEX_NUMBER >\n'

350 
cmd°r
 += '\n To Show sizeof of data structuresÖresent in system'

351 
cmd°r
 += '\n ------------------------------------------------------\n'

352 
cmd°r
 +' #> ' + 
¨gv
[0] + ' < '+' | '.
	`joö
(
CLI_OP_TYPE_SIZEOF
) + ' >\n'

354 
cmd°r
 += '\n To Listáll sysfsÉntries created by AVM in Kerel'

355 
cmd°r
 += '\n ------------------------------------------------------\n'

356 
cmd°r
 +' #> ' + 
¨gv
[0] + ' < '+' | '.
	`joö
(
CLI_OP_TYPE_SYSFS
) + ' >\n'

358 
cmd°r
 += '\n To Start AVM'

359 
cmd°r
 += '\n ------------------------------------------------------\n'

360 
cmd°r
 +' #> ' + 
¨gv
[0] + ' < '+' | '.
	`joö
(
CLI_OP_TYPE_START
) + ' >\n'

362 
cmd°r
 += '\n To Stop AVM'

363 
cmd°r
 += '\n ------------------------------------------------------\n'

364 
cmd°r
 +' #> ' + 
¨gv
[0] + ' < '+' | '.
	`joö
(
CLI_OP_TYPE_STOP
) + ' >\n'

366 
cmd°r
 += '\n To Restart (Stopánd Start) AVM'

367 
cmd°r
 += '\n ------------------------------------------------------\n'

368 
cmd°r
 +' #> ' + 
¨gv
[0] + ' < '+' | '.
	`joö
(
CLI_OP_TYPE_RESTART
) + ' >\n'

370 
cmd°r
 += '\n To show help'

371 
cmd°r
 += '\n ------------\n'

372 #cmd°∏+' #> ' + 
¨gv
[0] + ' < '+' | '.
	`joö
(
CLI_OP_TYPE_HELP
) + ' >\n'

373 
cmd°r
 +
	$dz_˛i_hñp_hñp
(
¨gc
, 
¨gv
)

375 
cmd°r
 += ' Note: Keywordsándárgumentsáre strictly in order.\n'

377 
	`¥öt
 ("%s" % 
cmd°r
)

380 
def
 
	$dz_˛i_hñp
(
¨gc
, 
¨gv
):

382 i‡(
¨gc
 == 1):

383 
	$dz_˛i_hñp_Æl
(
¨gc
, 
¨gv
)

384  
CLI_SUCCESS


386 i‡(
¨gc
 == 2):

387 i‡(
¨gv
[1] 
	$ö
 (
CLI_OP_TYPE_HELP
)):

388 
	$dz_˛i_hñp_Æl
(
¨gc
, 
¨gv
)

389  
CLI_SUCCESS


391 
	$dz_˛i_hñp_Æl
(
¨gc
, 
¨gv
)

392  
CLI_FAILURE


394 i‡(
¨gc
 == 3):

395 i‡((
¨gv
[1] 
	$ö
 (
CLI_OP_TYPE_HELP
)Ë
	`™d
 (
¨gv
[2] 
	$ö
 (
CLI_OP_TYPE_CREATE
))):

396 
cmd°r
 = ' ' + 
DZ_CLI_PRODUCT
 + " CLI Vîsi⁄ " + 
DZ_CLI_VERSION


397 
cmd°r
 +'\¿ ' + 
DZ_CLI_PRODUCT
 + " Drivî Vîsi⁄ " + 
DZ_DRIVER_VERSION


398 
cmd°r
 +"\¿ CuºíàD©e: "+
	$gëCuºítD©eAndTime
()

399 
cmd°r
 += '\n\n Usage: \n'

400 
cmd°r
 += '\n To Create AISA Target Device'

401 
cmd°r
 += '\n ----------------------------\n'

402 
cmd°r
 +
	$dz_˛i_hñp_¸óã_aiß
(
¨gc
, 
¨gv
)

404 
cmd°r
 += '\n To Create Volumes'

405 
cmd°r
 += '\n -----------------\n'

406 
cmd°r
 +
	$dz_˛i_hñp_¸óã_vﬁ
(
¨gc
, 
¨gv
)

408 
cmd°r
 += '\n To Create ReadOnlyánd Writable Snapshot Volumes'

409 
cmd°r
 += '\n ------------------------------------------------\n'

410 
cmd°r
 +
	$dz_˛i_hñp_¸óã_vﬁ¢≠
(
¨gc
, 
¨gv
)

412 
cmd°r
 += '\n To Create Volumes dedicated for Virtual Machines'

413 
cmd°r
 += '\n ------------------------------------------------\n'

414 
cmd°r
 +
	$dz_˛i_hñp_¸óã_vmvﬁ
(
¨gc
, 
¨gv
)

416 
cmd°r
 += '\n To Create ReadOnlyánd Writable Snapshot Volumes for VM Volumes'

417 
cmd°r
 += '\n ---------------------------------------------------------------\n'

418 
cmd°r
 +
	$dz_˛i_hñp_¸óã_vmvﬁ¢≠
(
¨gc
, 
¨gv
)

419 
	$¥öt
(
cmd°r
)

420  
CLI_SUCCESS


421 
	`ñif
 (
¨gv
[1] 
	$ö
 (
CLI_OP_TYPE_HELP
Ë
™d
 
¨gv
[2] 
	$ö
 (
CLI_OP_TYPE_DELETE
)):

422 
cmd°r
 = ' ' + 
DZ_CLI_PRODUCT
 + " CLI Vîsi⁄ " + 
DZ_CLI_VERSION


423 
cmd°r
 +'\¿ ' + 
DZ_CLI_PRODUCT
 + " Drivî Vîsi⁄ " + 
DZ_DRIVER_VERSION


424 
cmd°r
 +"\¿ CuºíàD©e: "+
	$gëCuºítD©eAndTime
()

425 
cmd°r
 += '\n\n Usage: \n'

426 
cmd°r
 += '\n To Deleteá Volume (Be it volume, snapshot, virtual machine volume)'

427 
cmd°r
 += '\n -------------------------------------------------------------------\n'

428 
cmd°r
 +
	$dz_˛i_hñp_dñëe
(
¨gc
, 
¨gv
)

429 
	$¥öt
(
cmd°r
)

430  
CLI_SUCCESS


432 
	`ñif
 (
¨gv
[1] 
	$ö
 (
CLI_OP_TYPE_HELP
Ë
™d
 
¨gv
[2] 
	$ö
 (
CLI_OP_TYPE_INFO
)):

433 
cmd°r
 = ' ' + 
DZ_CLI_PRODUCT
 + " CLI Vîsi⁄ " + 
DZ_CLI_VERSION


434 
cmd°r
 +'\¿ ' + 
DZ_CLI_PRODUCT
 + " Drivî Vîsi⁄ " + 
DZ_DRIVER_VERSION


435 
cmd°r
 +"\¿ CuºíàD©e: "+
	$gëCuºítD©eAndTime
()

436 
cmd°r
 += '\n\n Usage: \n'

437 
cmd°r
 += '\n To show details/info ofÉach volumes'

438 
cmd°r
 += '\n ------------------------------------\n'

439 
cmd°r
 +
	$dz_˛i_hñp_öfo
(
¨gc
, 
¨gv
)

440 
	$¥öt
(
cmd°r
)

441  
CLI_SUCCESS


443 
	`ñif
 (
¨gv
[1] 
	$ö
 (
CLI_OP_TYPE_HELP
Ë
™d
 
¨gv
[2] 
	$ö
 (
CLI_OP_TYPE_LIST
)):

444 
cmd°r
 = ' ' + 
DZ_CLI_PRODUCT
 + " CLI Vîsi⁄ " + 
DZ_CLI_VERSION


445 
cmd°r
 +'\¿ ' + 
DZ_CLI_PRODUCT
 + " Drivî Vîsi⁄ " + 
DZ_DRIVER_VERSION


446 
cmd°r
 +"\¿ CuºíàD©e: "+
	$gëCuºítD©eAndTime
()

447 
cmd°r
 += '\n\n Usage: \n'

448 
cmd°r
 += '\n To Listáll Volumes'

449 
cmd°r
 += '\n -------------------\n'

450 
cmd°r
 +' #> ' + 
¨gv
[0] + ' < '+' | '.
	`joö
(
CLI_OP_TYPE_LIST
) + ' >\n'

451 
	$¥öt
(
cmd°r
)

452  
CLI_SUCCESS


454 
	`ñif
 (
¨gv
[1] 
	$ö
 (
CLI_OP_TYPE_HELP
Ë
™d
 
¨gv
[2] 
	$ö
 (
CLI_OP_TYPE_SIZE
)):

455 
cmd°r
 = ' ' + 
DZ_CLI_PRODUCT
 + " CLI Vîsi⁄ " + 
DZ_CLI_VERSION


456 
cmd°r
 +'\¿ ' + 
DZ_CLI_PRODUCT
 + " Drivî Vîsi⁄ " + 
DZ_DRIVER_VERSION


457 
cmd°r
 +"\¿ CuºíàD©e: "+
	$gëCuºítD©eAndTime
()

458 
cmd°r
 += '\n\n Usage: \n'

459 
cmd°r
 += '\n To show sizes of volumesánd block devices'

460 
cmd°r
 += '\n ------------------------------------------\n'

461 
cmd°r
 +
	$dz_˛i_hñp_size
(
¨gc
, 
¨gv
)

462 
	$¥öt
(
cmd°r
)

463  
CLI_SUCCESS


465 
	`ñif
 (
¨gv
[1] 
	$ö
 (
CLI_OP_TYPE_HELP
Ë
™d
 
¨gv
[2] 
	$ö
 (
CLI_OP_TYPE_STATS
)):

466 
cmd°r
 = ' ' + 
DZ_CLI_PRODUCT
 + " CLI Vîsi⁄ " + 
DZ_CLI_VERSION


467 
cmd°r
 +'\¿ ' + 
DZ_CLI_PRODUCT
 + " Drivî Vîsi⁄ " + 
DZ_DRIVER_VERSION


468 
cmd°r
 +"\¿ CuºíàD©e: "+
	$gëCuºítD©eAndTime
()

469 
cmd°r
 += '\n\n Usage: \n'

470 
cmd°r
 += '\n To show memory utilizationándállÉngine counters'

471 
cmd°r
 += '\n --------------------------------------------------\n'

472 
cmd°r
 +
	$dz_˛i_hñp_size
(
¨gc
, 
¨gv
)

473 
	$¥öt
(
cmd°r
)

474  
CLI_SUCCESS


476 
	`¥öt
(
	$dz_˛i_hñp_hñp
(
¨gc
, 
¨gv
))

477  
CLI_FAILURE


480 
	$dz_˛i_hñp_Æl
(
¨gc
, 
¨gv
)

481  
CLI_FAILURE


	@AISA_Avm.py

1 #! /
u§
/
bö
/
pyth⁄


2 
‰om
 
AISA_AVMC‹e
 
imp‹t
 *

3 
‰om
 
AISA_AVMHñp
 
imp‹t
 *

4 
‰om
 
AISA_MDRaid
 
	gimp‹t
 *

7 #Thi†
fun˘i⁄
 
show
 
the
  
of
 
d©a°ru˘uªs
 
¥e£¡


8 #ö 
kî√l
 
moduÀs
 
of
 
avm
.

9 #Ià
Æso
 
shows
 
some
 
d©a°ru˘uªs
 
of
 
bio
 
‰amew‹k


11 
def
 
	$dz_˛i_sizeof
(
¨gc
, 
¨gv
):

12 i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

13 
	`LOG
(
ERROR
,"Kernel Modulesáre NOTÜoaded")

14  
CLI_FAILURE


16 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

18 if–
¨gc
 == 2) : #{

19 
keyw‹d
 = 
¨gv
[1]

20 
ªtobj
 = 
avm
.
	$kî√l_sizeof_d©a°ru˘uªs
(
¨gc
, 
¨gv
)

21 i‡(
ªtobj
.
ªtcode
 != 0):

22 
	`LOG
(
ERROR
, "UnableÅo get kernel datastructures sizes. LooksÜike kernel module is NOTÜoaded")

23  
CLI_FAILURE


25 
d©a
 = 
ªtobj
.
ªt°r


26 
	$¥öt
(
d©a
)

29 
	`¥öt
("")

30  
CLI_FAILURE


32  
CLI_SUCCESS


35 #Thi†
fun˘i⁄
 
issues
 
READ
 
IO
 
to
 
AISA
 
devi˚s


36 #through 
sysfs
 
öãrÁ˚
. 
It
 
wûl
 
by∑ss
 
devi˚
 
m≠≥r


39 
def
 
	$dz_˛i_io_ªad
(
¨gc
, 
¨gv
):

40 i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

41 
	`LOG
(
ERROR
,"Kernel Modulesáre NOTÜoaded")

42  
CLI_FAILURE


44 i‡(
¨gc
 
	$ö
( 5,6)):

45 
∑ss


47 
	`¥öt
(
	$dz_˛i_hñp_io
(
¨gc
, 
¨gv
))

48  
CLI_FAILURE


50 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

52 
ªtobj
 = 
avm
.
	$kî√l_io_ªad
(
¨gc
, 
¨gv
)

53 i‡(
ªtobj
.
ªtcode
 != 0):

54 
	`LOG
(
ERROR
, "UnableÅo issue READ IO. LooksÜike kernel module is NOTÜoaded")

55  
CLI_FAILURE


57 
d©a
 = 
ªtobj
.
ªt°r


58 
	$¥öt
(
d©a
)

59  
CLI_SUCCESS


64 #Thi†
fun˘i⁄
 
issues
 
WRITE
 
IO
 
to
 
AISA
 
devi˚s


65 #through 
sysfs
 
öãrÁ˚
. 
It
 
wûl
 
by∑ss
 
devi˚
 
m≠≥r


68 
def
 
	$dz_˛i_io_wrôe
(
¨gc
, 
¨gv
):

69 i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

70 
	`LOG
(
ERROR
,"Kernel Modulesáre NOTÜoaded")

71  
CLI_FAILURE


73 i‡(
¨gc
 
	$ö
( 5,6)):

74 
∑ss


76 
	`¥öt
(
	$dz_˛i_hñp_io
(
¨gc
, 
¨gv
))

77  
CLI_FAILURE


79 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

81 
ªtobj
 = 
avm
.
	$kî√l_io_wrôe
(
¨gc
, 
¨gv
)

82 i‡(
ªtobj
.
ªtcode
 != 0):

83 
	`LOG
(
ERROR
, "UnableÅo issue READ IO. LooksÜike kernel module is NOTÜoaded")

84  
CLI_FAILURE


86 
d©a
 = 
ªtobj
.
ªt°r


87 
	$¥öt
(
d©a
)

88  
CLI_SUCCESS


92 
def
 
	$dz_˛i_io_ªad_wrôe
(
¨gc
, 
¨gv
):

93 
	$dz_˛i_io_ªad
(
¨gc
, 
¨gv
)

94 
	$dz_˛i_io_wrôe
(
¨gc
, 
¨gv
)

97 
def
 
	$dz_˛i_io_wrôe_ªad
(
¨gc
, 
¨gv
):

98 
	$dz_˛i_io_wrôe
(
¨gc
, 
¨gv
)

99 
	$dz_˛i_io_ªad
(
¨gc
, 
¨gv
)

101 
def
 
	$dz_˛i_io_ªad_wrôe_ªad
(
¨gc
, 
¨gv
):

102 
	$dz_˛i_io_ªad
(
¨gc
, 
¨gv
)

103 
	$dz_˛i_io_wrôe
(
¨gc
, 
¨gv
)

104 
	$dz_˛i_io_ªad
(
¨gc
, 
¨gv
)

106 
def
 
	$dz_˛i_io_zîo
(
¨gc
, 
¨gv
):

107 i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

108 
	`LOG
(
ERROR
,"Kernel Modulesáre NOTÜoaded")

109  
CLI_FAILURE


111 i‡(
¨gc
 
	$ö
( 5,6)):

112 
∑ss


114 
	`¥öt
(
	$dz_˛i_hñp_io
(
¨gc
, 
¨gv
))

115  
CLI_FAILURE


117 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

119 
ªtobj
 = 
avm
.
	$kî√l_io_zîo
(
¨gc
, 
¨gv
)

120 i‡(
ªtobj
.
ªtcode
 != 0):

121 
	`LOG
(
ERROR
, "UnableÅo issue READ IO. LooksÜike kernel module is NOTÜoaded")

122  
CLI_FAILURE


124 
d©a
 = 
ªtobj
.
ªt°r


125 
	$¥öt
(
d©a
)

126  
CLI_SUCCESS


129 
def
 
	$dz_˛i_io_ªad_zîo_ªad
(
¨gc
, 
¨gv
):

130 
	$dz_˛i_io_ªad
(
¨gc
, 
¨gv
)

131 
	$dz_˛i_io_zîo
(
¨gc
, 
¨gv
)

132 
	$dz_˛i_io_ªad
(
¨gc
, 
¨gv
)

136 #Thi†
fun˘i⁄
 
¥öts
 
the
 
kî√l
 
cúcuœr
 
buf„r
 
log


137 #
###########################################################
 dz_˛i_log◊rgc,árgv):

138 i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

139 
	`LOG
(
ERROR
,"Kernel Modulesáre NOTÜoaded")

140  
CLI_FAILURE


142 
DZ_AVM_LOG_FILE
 = "/dev/dzlog"

144 
cmd°r
 = ''

145 
cmd°r
 +'dzˇà' + 
DZ_AVM_LOG_FILE


147 
cmd°r
 += ''

149 #I¿
‹dî
 
to
 
c⁄vît
 
jiffõs
, 
we
 
¨e
 
goög
Åÿ
have
Åÿ
°¨t
 
by


150 #födög 
kî√ls
 
c⁄°™t
 
vÆue
 
HZ
. 
It
 
ˇn
 
be
 
d⁄e
 
by
 
usög
 
os
.
sysc⁄f
:

151 
sc_˛k_tck
 = 
os
.
sysc⁄f_«mes
['SC_CLK_TCK']

152 
HZ
 = 
os
.
	$sysc⁄f
(
sc_˛k_tck
)

154 #From 
hîe
 
we
 
w™t
 
to
 
föd
 
the
 
sy°em
 
boŸ
 
time


155 
wôh
 
	`›í
('/¥oc/°©'Ë
as
 
f
:

156 
 
 
ö
 
f
.
	$ªadlöes
():

157 
 
.
	`°¨tswôh
('btime'):

158 
btime
 = (
 
.
	`•lô
()[1])

162 #Fëch 
the
 
logd©a
 
‰om
Åhê
kî√l
 
usög
 
dzˇt
 
comm™d


163 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

165 i‡(
ªtobj
.
ªtcode
 != 0):

166 
ªtobj
.
ªtcode


168 
logd©a
 = 
ªtobj
.
ªt°r


170 
löed©a
 = 
logd©a
.
	`•lô
("\n")

171 
löe
 
ö
 
löed©a
:

172 
löe_jiffy
 = 
löe
.
	`•lô
(":")[0]

173 
löe_jiffy_öt
 = (
löe
.
	`•lô
(":")[0])

174 
löe_time
 = (
löe_jiffy_öt
 / 
HZ
Ë+ 
btime


175 
	`¥öt
(
time
.
	`˘ime
(
löe_time
Ë+ 
löe
[
	$Àn
(
löe_jiffy
):])

176 #¥öt(
löe_jiffy
)

178  
CLI_SUCCESS


182 #Thi†
fun˘i⁄
 
°¨ts
 
AVM


183 #
###########################################################
 dz_˛i_avm_°¨t◊rgc,árgv):

185 
DZ_AVM_START_SCRIPT
 = "/opt/DATUMSOFT/zaidstor_databank/avm/scripts/avm_start.sh"

187 
cmd°r
 = ''

188 
cmd°r
 +
DZ_AVM_START_SCRIPT


189 
cmd°r
 += ''

191 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

193 i‡(
ªtobj
.
ªtcode
 == 255):

194 
	`LOG
(
ERROR
, "ZAIDSTOR AVMálready Started")

195  
CLI_FAILURE


197 
logd©a
 = 
ªtobj
.
ªt°r


198 
	$¥öt
(
logd©a
)

199  
ªtobj
.
ªtcode


203 #Thi†
fun˘i⁄
 
°›
 
AVM


204 #
###########################################################
 dz_˛i_avm_°›◊rgc,árgv):

206 
DZ_AVM_STOP_SCRIPT
 = "/opt/DATUMSOFT/zaidstor_databank/avm/scripts/avm_stop.sh"

208 
cmd°r
 = ''

209 
cmd°r
 +
DZ_AVM_STOP_SCRIPT


210 
cmd°r
 += ''

212 
ªtobj
 = 
ShñlCmd
.
	$ruƒ
(
cmd°r
)

214 i‡(
ªtobj
.
ªtcode
 == 254):

215 
	`LOG
(
ERROR
, "ZAIDSTOR AVM Already Stopped")

216  
CLI_FAILURE


218 
logd©a
 = 
ªtobj
.
ªt°r


219 
	$¥öt
(
logd©a
)

220  
ªtobj
.
ªtcode


223 #Thi†
fun˘i⁄
 
ª°¨t
 
AVM


224 #
###########################################################
 dz_˛i_avm_ª°¨t◊rgc,árgv):

226 
	$dz_˛i_avm_°›
(
¨gc
, 
¨gv
)

227 
	$dz_˛i_avm_°¨t
(
¨gc
, 
¨gv
)

230 #Thi†
fun˘i⁄
 
gës
 
the
 
lba
 
èbÀ
 
íåy
 
a
 
giví
 
ödex


232 
def
 
	$dz_˛i_lba_pba
(
¨gc
, 
¨gv
):

233 i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

234 
	`LOG
(
ERROR
,"Kernel Modulesáre NOTÜoaded")

235  
CLI_FAILURE


237 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

239 if–
¨gc
 == 3) : #{

240 
keyw‹d
 = 
¨gv
[1]

241 
keyvÆ
 = 
¨gv
[2]

242 i‡(
keyvÆ
.
	$isdigô
()): #{

243 i‡(
keyw‹d
 
	$ö
 (
CLI_OP_TYPE_LBA
)): #{

244 
avm
.
	$gë_kî√l_lba_íåy
(
keyvÆ
)

246 
	`ñif
 (
keyw‹d
 
	$ö
 (
CLI_OP_TYPE_PBA
)): #{

247 
avm
.
	$gë_kî√l_pba_íåy
(
keyvÆ
)

250 
	`¥öt
("")

251  
CLI_FAILURE


255 
	`LOG
(
ERROR
, "Index should beáán integer")

256  
CLI_FAILURE


260 
	`¥öt
("")

261  
CLI_FAILURE


263  
CLI_SUCCESS


268 #Thi†
fun˘i⁄
 
gës
 
the
 
size
 
of
 
a
 
block
 
devi˚
 
by


269 #£ndög 
™
 
io˘l
 
to
 
the
 
kî√l
 
‰om
 
AISA
 kî√»
moduÀ


271 
def
 
	$dz_˛i_°©s
(
¨gc
, 
¨gv
):

272 i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

273 
	`LOG
(
ERROR
,"Kernel Modulesáre NOTÜoaded")

274  
CLI_FAILURE


276 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

278 if–
¨gc
 > 2) : #{

279 
devty≥
 = 
¨gv
[2]

280 
dev_«me
 = 
devty≥


281 i‡(
dev_«me
 
	`ö
 ("-all", "all")): #{

282 
	`¥öt
("")

283 
avm
.
	$gë_kî√l_mem‹y
()

284 
	`¥öt
("")

285 
avm
.
	$gë_kî√l_su≥rblock
()

286 
	`¥öt
("")

287 
avm
.
	$gë_kî√l_cou¡îs_mëad©a
()

288 
	`¥öt
("")

289 
avm
.
	$gë_kî√l_cou¡îs_„c
()

290 
	`¥öt
("")

291 
avm
.
	$gë_kî√l_cou¡îs_Æign
()

292 
	`¥öt
("")

293 
avm
.
	$gë_kî√l_cou¡îs_bec
()

294 
	`¥öt
("")

295 
avm
.
	$gë_kî√l_cou¡îs_dedu≥
()

296 
	`¥öt
("")

297 
avm
.
	$gë_kî√l_èbÀ_size
()

298 
	`¥öt
("")

301 
	`ñif
 (
dev_«me
 
	`ö
 ("-k", "k")): #{

302 
	`¥öt
("")

303 
avm
.
	$gë_kî√l_mem‹y
()

304 
	`¥öt
("")

306 
	`ñif
 (
dev_«me
 
	`ö
 ("-s", "s")): #{

307 
	`¥öt
("")

308 
avm
.
	$gë_kî√l_su≥rblock
()

309 
	`¥öt
("")

311 
	`ñif
 (
dev_«me
 
	`ö
 ("-m", "m")): #{

312 
	`¥öt
("")

313 
avm
.
	$gë_kî√l_cou¡îs_mëad©a
()

314 
	`¥öt
("")

316 
	`ñif
 (
dev_«me
 
	`ö
 ("-b", "b")): #{

317 
	`¥öt
("")

318 
avm
.
	$gë_kî√l_cou¡îs_bec
()

319 
	`¥öt
("")

321 
	`ñif
 (
dev_«me
 
	`ö
 ("-d", "d")): #{

322 
	`¥öt
("")

323 
avm
.
	$gë_kî√l_cou¡îs_dedu≥
()

324 
	`¥öt
("")

326 
	`ñif
 (
dev_«me
 
	`ö
 ("-f", "f")): #{

327 
	`¥öt
("")

328 
avm
.
	$gë_kî√l_cou¡îs_„c
()

329 
	`¥öt
("")

330 
avm
.
	$gë_kî√l_cou¡îs_Æign
()

331 
	`¥öt
("")

333 
	`ñif
 (
dev_«me
 
	`ö
 ("-t", "t")): #{

334 
	`¥öt
("")

335 
avm
.
	$gë_kî√l_èbÀ_size
()

336 
	`¥öt
("")

338 
	`ñif
 (
dev_«me
 
	`ö
 ("--help", "help", "-h")): #{

339 
	`¥öt
(
	$dz_˛i_hñp_°©s
(
¨gc
, 
¨gv
))

340  
CLI_SUCCESS


343 
	`¥öt
("")

344 
avm
.
	$gë_kî√l_mem‹y
()

345 
	`¥öt
("")

346 
avm
.
	$gë_kî√l_èbÀ_size
()

347 
	`¥öt
("")

348 
avm
.
	$gë_kî√l_su≥rblock
()

349 
	`¥öt
("")

350 
avm
.
	$gë_kî√l_cou¡îs_mëad©a
()

351 
	`¥öt
("")

352 
avm
.
	$gë_kî√l_cou¡îs_„c
()

353 
	`¥öt
("")

354 
avm
.
	$gë_kî√l_cou¡îs_Æign
()

355 
	`¥öt
("")

356 
avm
.
	$gë_kî√l_cou¡îs_bec
()

357 
	`¥öt
("")

358 
avm
.
	$gë_kî√l_cou¡îs_dedu≥
()

359 
	`¥öt
("")

360 
avm
.
	$gë_kî√l_èbÀ_size
()

361 
	`¥öt
("")

366 
	`¥öt
("")

367 
avm
.
	$gë_kî√l_mem‹y
()

368 
	`¥öt
("")

369 
avm
.
	$gë_kî√l_èbÀ_size
()

370 
	`¥öt
("")

372  
CLI_SUCCESS


376 #Thi†
fun˘i⁄
 
gës
 
the
 
size
 
of
 
a
 
block
 
devi˚
 
by


377 #£ndög 
™
 
io˘l
 
to
 
the
 
kî√l
 
‰om
 
AISA
 kî√»
moduÀ


379 
def
 
	$dz_˛i_size
(
¨gc
, 
¨gv
):

380 i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

381 
	`LOG
(
ERROR
,"Kernel Modulesáre NOTÜoaded")

382  
CLI_FAILURE


384 #avm = 
	`AVM_CORE
()

385 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

386 if–
¨gc
 > 2) : #{

387 
devty≥
 = 
¨gv
[2]

388 
dev_«me
 = 
devty≥


389 i‡(
dev_«me
 == "all"): #{

390 #Pröà
the
 
size
 
of
 
Æl
Åhê
vﬁumes
 
¥e£¡


391 
avm
.
	$¥öt_vﬁume_size_Æl
()

393 #FöÆly 
¥öt
 
the
 
size
 
of
 
AISA
 
T¨gë


394 
avm
.
	$¥öt_aiß_size
()

396 
	`ñif
 (
dev_«me
 == "default"): #{

397 
dev_«me
 = 
AISA_DEVICE_PATH


398 
dev_size_blocks
 = 
avm
.
	$gë_aiß_deÁu…_size_blocks
()

399 
dev_size_byãs
 = 
avm
.
	$gë_aiß_deÁu…_size_byãs
()

400 
	`LOGRAW
("[ " + 
dev_«me
 + " ]")

401 
	`LOGRAW
(" " + 
dev_«me
 +" sizêö Byã†: "+
dev_size_byãs
)

402 
	`LOGRAW
(" " + 
dev_«me
 +" sizêö Blocks: "+
dev_size_blocks
)

403 
	`LOGRAW
(" " + 
dev_«me
 +" sizêö KB : " + 
	$c⁄vît_byãs_to_kb
(
dev_size_byãs
))

404 
	`LOGRAW
(" " + 
dev_«me
 +" sizêö MB : " + 
	$c⁄vît_byãs_to_mb
(
dev_size_byãs
))

405 
	`LOGRAW
(" " + 
dev_«me
 +" sizêö GB : " + 
	$c⁄vît_byãs_to_gb
(
dev_size_byãs
))

408 
	`ñif
 (
dev_«me
 
	`ö
 ("--help", "help", "-h")): #{

409 
	`¥öt
(
	$dz_˛i_hñp_size
(
¨gc
, 
¨gv
))

410  
CLI_SUCCESS


413 
dev_size_blocks
 = 
avm
.
	$gë_devi˚_size_blocks
(
dev_«me
)

415 i‡((
dev_size_blocks
) <= 0 ):

416 
	`LOG
(
ERROR
,"Devi˚ "+
dev_«me
+ " doesÇotÉxist. Try with fullÖath (ifÇotÅried)")

417  
CLI_FAILURE


419 
dev_size_byãs
 = 
avm
.
	$gë_devi˚_size_byãs
(
dev_«me
)

420 
	`LOGRAW
("[ " + 
dev_«me
 + " ]")

421 
	`LOGRAW
(" " + 
dev_«me
 +" sizêö Byã†: "+
dev_size_byãs
)

422 
	`LOGRAW
(" " + 
dev_«me
 +" sizêö Blocks: "+
dev_size_blocks
)

423 
	`LOGRAW
(" " + 
dev_«me
 +" sizêö KB : " + 
	$c⁄vît_byãs_to_kb
(
dev_size_byãs
))

424 
	`LOGRAW
(" " + 
dev_«me
 +" sizêö MB : " + 
	$c⁄vît_byãs_to_mb
(
dev_size_byãs
))

425 
	`LOGRAW
(" " + 
dev_«me
 +" sizêö GB : " + 
	$c⁄vît_byãs_to_gb
(
dev_size_byãs
))

429 #Pröà
the
 
size
 
of
 
Æl
Åhê
vﬁumes
 
¥e£¡


430 
avm
.
	$¥öt_vﬁume_size_Æl
()

435 
def
 
	$dz_˛i_rmmod
(
¨gc
, 
¨gv
):

436 
km
 
ö
 
	$ªvî£d
(
KERNEL_MODULE_LIST
):

437 
	`LOG
(
INFO
, "U∆ﬂdög Kî√»ModuÀ: "+
km
)

438 
ªtobj
 = 
ShñlCmd
.
	$ªmove_moduÀ
(
km
)

439 
ªtobj
.
	$LOG
()

442 #Thi†
fun˘i⁄
 
li°s
 
whëhî
 
Æl
 
the
 
ªquúed
 
D©umSo·


443 #kî√»
moduÀs
 
¨e
 
lﬂded
.

444 #Ià
d€s
 
this
 
by
 
checkög
 
the
 
kî√l
 
moduÀ
 
ö
Åhê
∑th


445 #/
sys
/
moduÀ


446 #e.
g
.

447 #/
sys
/
moduÀ
/
d©umso·_avm_aiß_èrgë_moduÀ


449 
def
 
	$dz_li°_kî√l_moduÀs
(
¨gc
, 
¨gv
):

450 
¥efix
 = "/sys/module/"

451 
km
 
ö
 
KERNEL_MODULE_LIST
:

452 
os
.
∑th
.
	`exi°s
(
¥efix
+
km
):

453 
	`LOG
 (
INFO
, "Kî√»ModuÀ " + 
km
 + " Loaded")

454 
	`LOG
 (
INFO
, "P©h " + 
¥efix
 + 
km
 + "Éxist")

456 
	`LOG
 (
INFO
, "Kî√»ModuÀ " + 
km
 + " Not Loaded")

457 
	`LOG
 (
INFO
, "P©h " + 
¥efix
 + 
km
 + " doesÇotÉxist")

459  
CLI_SUCCESS


462 #Thi†
fun˘i⁄
 
checks
 
the
 
°©us
 
of
:

463 #1. 
AŒ
 
kî√l
 
moduÀs


464 #2. 
Whëhî
 
AISA
 
èrgë
 
is
 
¸óãd


466 
def
 
	$dz_°©us
(
¨gc
, 
¨gv
):

467 
show
 = 1

468 
	`¥öt
("\n")

469 
	`¥öt
("AVM Kernel Module Information")

470 
	`¥öt
("-----------------------------")

471 
	$dz_vÆid©e_kî√l_moduÀs
(
show
)

472 
	`¥öt
("\n")

473 
	`¥öt
("AVM AISA Target Information")

474 
	`¥öt
("---------------------------")

475 
	$dz_vÆid©e_aiß_èrgë
(
show
)

476 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

477 
	`¥öt
("\n")

478 
	`¥öt
("AVM sysfsÉntries in kernel")

479 
	`¥öt
("---------------------------")

480 
avm
.
	$gë_sysfs_íåõs
()

481  
CLI_SUCCESS


483 ###########################################################
#dz_p›uœã_c⁄fig_fûe(
¨g_show_key_vÆ
)

484 #Thi†
fun˘i⁄
 
p›uœãs
 
the
 
key
 
vÆue
 
∑ús
 
¥e£¡
 
ö


485 #thê
c⁄fig
 
fûe
 
loˇãd
 
ö
 
∑th
 /
ëc
/
d©umso·
/
avm
.
c⁄f


486 #avm 
˛i
 
wûl
 
nŸ
 
be
 
°¨ãd
 
thîe
 
is
 
no
 
c⁄fig
 
fûe


488 #I‡
¨g_show_key_vÆ
 
is
 
£t
 
to
 1 
thí
 
ô
 
wûl
 
¥öt


489 #Æ»
key
 
vÆue
 
∑ús
 
¥e£¡
 
ö
 
c⁄fig
 
fûe


491 
def
 
	$dz_p›uœã_c⁄fig_fûe
(
¨g_show_key_vÆ
):

493 
os
.
∑th
.
	$exi°s
(
DZ_CLI_CONFIG_FILE_PATH
):

494 
	`LOG
 (
DEBUG
, "C⁄fig Fûê" + 
DZ_CLI_CONFIG_FILE_PATH
 + "Éxist")

495 
∑ss


497 
	`LOG
 (
ERROR
, "C⁄fig Fûê" + 
DZ_CLI_CONFIG_FILE_PATH
 + " doesÇotÉxist")

498  
CLI_FAILURE


500 
dz_c⁄fig_di˘
 = {
	}
}

502 
wôh
 
›í
(
DZ_CLI_CONFIG_FILE_PATH
, 'r'Ë
as
 
	gc⁄fig_fûe
:

503 
löe
 
ö
 
c⁄fig_fûe
:

504 
löe
 =Üöe.
	$°rù
()

505 
löe
:

506 
nŸ
 
löe
.
	`°¨tswôh
("#"):

507 
key
, 
vÆue
 = 
löe
.
	`•lô
('=')

508 
dz_c⁄fig_di˘
[
key
.
	`°rù
()] = 
vÆue
.
	$°rù
()

510 
globÆ
 
CONFIG_AVM_DATA_DEVICE_NAME


511 
globÆ
 
CONFIG_AVM_METADATA_DEVICE_NAME


512 
globÆ
 
CONFIG_SWITCH_PASSTHROUGH_MODE


513 
globÆ
 
CONFIG_SWITCH_PASSTHROUGH_READ


514 
globÆ
 
CONFIG_SWITCH_PASSTHROUGH_WRITE


515 
globÆ
 
CONFIG_SWITCH_FEC


516 
globÆ
 
CONFIG_SWITCH_BEC


517 
globÆ
 
CONFIG_SWITCH_DDE


518 
globÆ
 
CONFIG_SWITCH_DAE


519 
globÆ
 
CONFIG_SWITCH_DAE_MBR


520 
globÆ
 
CONFIG_SWITCH_DAE_MBW


521 
globÆ
 
CONFIG_SWITCH_DAE_PBR


522 
globÆ
 
CONFIG_SWITCH_DAE_PBW


524 
dz_c⁄fig_di˘
.
	`has_key
('AVM_DATA_DEVICE_NAME'):

525 
CONFIG_AVM_DATA_DEVICE_NAME
 = 
dz_c⁄fig_di˘
['AVM_DATA_DEVICE_NAME']

527 
	`LOG
(
ERROR
,"Key AVM_DATA_DEVICE_NAME d€†nŸÉxi° i¿"+
DZ_CLI_CONFIG_FILE_PATH
)

528  
CLI_FAILURE


530 #¥öt(
CONFIG_AVM_DATA_DEVICE_NAME
);

532 
dz_c⁄fig_di˘
.
	`has_key
('AVM_METADATA_DEVICE_NAME'):

533 
CONFIG_AVM_METADATA_DEVICE_NAME
 = 
dz_c⁄fig_di˘
['AVM_METADATA_DEVICE_NAME']

535 
	`LOG
(
ERROR
,"Key AVM_METADATA_DEVICE_NAME d€†nŸÉxi° i¿"+
DZ_CLI_CONFIG_FILE_PATH
)

536  
CLI_FAILURE


538 #¥öt(
CONFIG_AVM_METADATA_DEVICE_NAME
);

540 #Swôche†
™d
 
Tu«bÀs


542 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_PASSTHROUGH_MODE'):

543 
CONFIG_SWITCH_PASSTHROUGH_MODE
 = 
dz_c⁄fig_di˘
['SWITCH_PASSTHROUGH_MODE']

545 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_PASSTHROUGH_READ'):

546 
CONFIG_SWITCH_PASSTHROUGH_READ
 = 
dz_c⁄fig_di˘
['SWITCH_PASSTHROUGH_READ']

548 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_PASSTHROUGH_WRITE'):

549 
CONFIG_SWITCH_PASSTHROUGH_WRITE
 = 
dz_c⁄fig_di˘
['SWITCH_PASSTHROUGH_WRITE']

552 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_FEC'):

553 
CONFIG_SWITCH_FEC
 = 
dz_c⁄fig_di˘
['SWITCH_FEC']

555 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_BEC'):

556 
CONFIG_SWITCH_BEC
 = 
dz_c⁄fig_di˘
['SWITCH_BEC']

558 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_DDE'):

559 
CONFIG_SWITCH_DDE
 = 
dz_c⁄fig_di˘
['SWITCH_DDE']

561 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_DAE'):

562 
CONFIG_SWITCH_DAE
 = 
dz_c⁄fig_di˘
['SWITCH_DAE']

565 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_DAE_MBR'):

566 
CONFIG_SWITCH_DAE_MBR
 = 
dz_c⁄fig_di˘
['SWITCH_DAE_MBR']

568 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_DAE_MBW'):

569 
CONFIG_SWITCH_DAE_MBW
 = 
dz_c⁄fig_di˘
['SWITCH_DAE_MBW']

571 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_DAE_PBR'):

572 
CONFIG_SWITCH_DAE_PBR
 = 
dz_c⁄fig_di˘
['SWITCH_DAE_PBR']

574 
dz_c⁄fig_di˘
.
	`has_key
('SWITCH_DAE_PBW'):

575 
CONFIG_SWITCH_DAE_PBW
 = 
dz_c⁄fig_di˘
['SWITCH_DAE_PBW']

578 #¥öà(
CONFIG_AVM_DATA_DEVICE_NAME
)

579 #¥öà(
CONFIG_AVM_METADATA_DEVICE_NAME
)

580 
	`LOG
(
INFO
,"C⁄fig fûê" + 
DZ_CLI_CONFIG_FILE_PATH
 + "Öopulated")

582 
key
,
vÆ
 
ö
 
	`s‹ãd
(
dz_c⁄fig_di˘
.
	$ôems
()):

583 
keyvÆ°r
 = 
key
.
	`lju°
(25Ë+ " => " + 
vÆ


584 #i‡(
vÆ
 == "0"):

585 #keyvÆ°∏
key
.
	`lju°
(25) + " => DISABLED"

587 #keyvÆ°∏
key
.
	`lju°
(25) + " => ENABLED"

589 i‡(
¨g_show_key_vÆ
 == 1):

590 
	$LOG
(
INFO
, 
keyvÆ°r
)

592  
CLI_SUCCESS


596 #Thi†
fun˘i⁄
 
checks
 
whëhî
 
AISA
 
èrgë
 
is
 
¸óãd


598 
def
 
	$dz_vÆid©e_aiß_èrgë
(
¨g_show
):

600 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

601  
avm
.
	`vÆid©e_aiß_èrgë
(
¨g_show
)

603 
os
.
∑th
.
	$exi°s
(
AISA_DEVICE_PATH
):

604 i‡(
¨g_show
 == 1):

605 
	`LOG
 (
INFO
, "AISA T¨gë cª©ed. " + 
AISA_DEVICE_PATH
 + "Éxist")

606  
CLI_SUCCESS


608  
CLI_SUCCESS


610 
	`LOG
 (
ERROR
, "AISA T¨gë NŸ cª©ed. " + 
AISA_DEVICE_PATH
 + " doesÇotÉxist")

611  
CLI_FAILURE


616 #Thi†
fun˘i⁄
 
checks
 
whëhî
 
Æl
 
the
 
ªquúed
 
kî√l


617 #moduÀ†
¨e
 
lﬂded
. 
It
 
ªtu∫s
 
™
 
îr‹
 
™y
 
of
 
the


618 #kî√»
moduÀ
 
is
 
nŸ
 
lﬂded


620 
def
 
	$dz_vÆid©e_kî√l_moduÀs
(
¨g_show
):

621 
¥efix
 = "/sys/module/"

622 
lﬂded
 = 1

623 
km
 
ö
 
KERNEL_MODULE_LIST
:

624 
os
.
∑th
.
	`exi°s
(
¥efix
+
km
):

625 i‡(
¨g_show
 == 1):

626 
	`LOG
 (
INFO
, "Kî√»ModuÀ " + 
km
 + " Loaded")

627 
	`LOG
 (
INFO
, "P©h " + 
¥efix
 + 
km
 + "Éxist")

629 
∑ss


631 
	`LOG
 (
ERROR
, "Kî√»ModuÀ " + 
km
 + " Not Loaded")

632 
	`LOG
 (
ERROR
, "P©h " + 
¥efix
 + 
km
 + " doesÇotÉxist")

633 
lﬂded
 = 0

635 i‡(
lﬂded
 == 0):

636  
CLI_FAILURE


638  
CLI_SUCCESS


641 #Thi†
fun˘i⁄
 
checks
 
whëhî
 
Æl
 
the
 
¥îequi°es
 
¨e


642 #£à
bef‹e
 
°¨tög
 
the
 
avm
 
˛i
.

644 
def
 
	$dz_˛i_vÆid©e
(
¨gc
, 
¨gv
):

645 #¥öt(
	`Àn
(
¨gv
))

647 #¥öà(
CONFIG_AVM_DATA_DEVICE_NAME
)

648 #¥öà(
CONFIG_AVM_METADATA_DEVICE_NAME
)

650 i‡(
¨gc
 == 1):

651 
	$dz_˛i_hñp
(
¨gc
, 
¨gv
)

652  
CLI_FAILURE


654 
›î©i⁄ty≥
 = 
¨gv
[1]

655 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_CONFIG
):

656 
îr
 = 
	$dz_p›uœã_c⁄fig_fûe
(1)

658 
îr
 = 
	$dz_p›uœã_c⁄fig_fûe
(0)

659 i‡(
îr
 !
CLI_SUCCESS
):

660  
îr


662  
CLI_SUCCESS


664 
def
 
	$dz_˛i_vîsi⁄
(
¨gc
, 
¨gv
):

665 
	$LOGR
(
DZ_CLI_PRODUCT
)

666 
	`LOGR
("CLI Vîsi⁄ " + 
DZ_CLI_VERSION
)

667 #avm = 
	`AVM_CORE
()

668 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

669 
avm
.
	$gë_kî√l_vîsi⁄
()

670  
CLI_SUCCESS


673 #Thi†
fun˘i⁄
 
¥öts
 
dëaûed
 
öf‹m©i⁄
 
about
 
óch


676 
def
 
	$dz_˛i_öfo
(
¨gc
, 
¨gv
):

677 i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

678 
	`LOG
(
ERROR
,"Kernel Modulesáre NOTÜoaded")

679  
CLI_FAILURE


681 #avm = 
	`AVM_CORE
()

682 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

683 if–
¨gc
 > 2) :

684 
devty≥
 = 
¨gv
[2]

685 
dev_«me
 = 
devty≥


686 i‡(
dev_«me
 
is
 
nŸ
 
N⁄e
):

687 i‡(
dev_«me
 
	$ö
 (
CLI_DEV_TYPE_AISA
)):

688 
ªtobj
 = 
avm
.
	$öfo_aiß
()

689 
ªtobj
.
	$LOG
()

690 
	`ñif
 (
dev_«me
 == "all"):

691 
ªtobj
 = 
avm
.
	$li°_vﬁume_sh‹t
()

692 
d©a
 = 
ªtobj
.
ªt°r


693 
devi˚s
 = 
d©a
.
	`•lô
("\n")

694 
vﬁ
 
ö
 
devi˚s
:

695 i‡(
vﬁ
.
	`°¨tswôh
( '#' )):

698 
ªtobj
 = 
avm
.
	$öfo_vﬁume
(
vﬁ
)

699 
ªtobj
.
	$LOGRAW
()

701 
ªtobj
 = 
avm
.
	$öfo_aiß
()

702 
ªtobj
.
	$LOGRAW
()

703 
	`ñif
 (
dev_«me
 
	`ö
 ("--help", "help", "-h")):

704 
	`¥öt
(
	$dz_˛i_hñp_öfo
(
¨gc
, 
¨gv
))

705  
CLI_SUCCESS


708 
ªtobj
 = 
avm
.
	$öfo_vﬁume
(
dev_«me
)

709 
ªtobj
.
	$LOGRAW
()

711 
ªtobj
 = 
avm
.
	$li°_vﬁume_sh‹t
()

712 
d©a
 = 
ªtobj
.
ªt°r


713 
devi˚s
 = 
d©a
.
	`•lô
("\n")

714 
vﬁ
 
ö
 
devi˚s
:

715 i‡(
vﬁ
.
	`°¨tswôh
( '#' )):

718 
ªtobj
 = 
avm
.
	$öfo_vﬁume
(
vﬁ
)

719 
ªtobj
.
	$LOG
()

721 
ªtobj
 = 
avm
.
	$li°_vﬁume_sh‹t
()

722 
d©a
 = 
ªtobj
.
ªt°r


723 
devi˚s
 = 
d©a
.
	`•lô
("\n")

724 
vﬁ
 
ö
 
devi˚s
:

725 i‡(
vﬁ
.
	`°¨tswôh
( '#' )):

728 
ªtobj
 = 
avm
.
	$öfo_vﬁume
(
vﬁ
)

729 
ªtobj
.
	$LOGRAW
()

732 #Thi†
fun˘i⁄
 
li°s
 
down
 
the
 
vﬁumes
 
avaûabÀ
 
ö
Åhe

733 #sy°em. 
It
 
howevî
, 
d€s
 
nŸ
 
show
 
™ythög
 
about
 
AISA
 
T¨gë


735 
def
 
	$dz_˛i_li°_vﬁumes
(
¨gc
, 
¨gv
):

736 i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

737 
	`LOG
(
ERROR
,"Kernel Modulesáre NOTÜoaded")

738  
CLI_FAILURE


740 #avm = 
	`AVM_CORE
()

741 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

742 
ªtobj
 = 
avm
.
	$li°_vﬁume
(
¨gc
, 
¨gv
)

743 
ªtobj
.
	$LOGRAW
()

744  
CLI_SUCCESS


747 #Thi†
fun˘i⁄
 
is
 
ˇ∑bÀ
 
of
 
dñëög
 
AISA
 
T¨gë
,

748 #vﬁumes, 
vm
 
vﬁumes
, 
¢≠shŸ
 volumes

749 #Thi†
fun˘i⁄
 
d€s
 
nŸ
 
check
 
the
 
dïídícy
.

750 #e.
g
. 
ô
 
may
 
Ælow
 
dñëi⁄
 
of
 
∑ª¡
 
vﬁume
 
wôhout
 
eví


751 #dñëög 
¢≠shŸ
 
vﬁumes


753 
def
 
	$dz_˛i_dñëe
(
¨gc
, 
¨gv
):

754 i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

755 
	`LOG
(
ERROR
,"Kernel Modulesáre NOTÜoaded")

756  
CLI_FAILURE


758 i‡(
¨gc
 == 2):

759 
	`¥öt
(
	$dz_˛i_hñp_dñëe
(
¨gc
, 
¨gv
))

760  
CLI_FAILURE


762 
dev_«me
 = 
¨gv
[2]

764 i‡(
dev_«me
 == "all"):

765 #avm = 
	`AVM_CORE
()

766 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

767 
avm
.
	$dñëe_Æl_vﬁumes
()

768  
CLI_SUCCESS


770 
	`ñif
 (
dev_«me
 
	$ö
 (
CLI_DEV_TYPE_AISA
)):

771 #avm = 
	`AVM_CORE
()

772 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

773 
ªtobj
 = 
avm
.
	$dñëe_aiß
()

774 
ªtobj
.
	$LOG
()

775  
CLI_SUCCESS


777 
	`ñif
 (
dev_«me
 
	`ö
 ("help", "--help", "-h")):

778 
	`¥öt
(
	$dz_˛i_hñp_dñëe
(
¨gc
, 
¨gv
))

779  
CLI_SUCCESS


781 
	$ñif
 (
dev_«me
 
is
 
nŸ
 
N⁄e
):

782 #avm = 
	`AVM_CORE
()

783 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

784 
ªtobj
 = 
avm
.
	$dñëe_vﬁume
(
dev_«me
)

785 
ªtobj
.
	$LOG
()

786  
CLI_SUCCESS


789 
	`¥öt
(
	$dz_˛i_hñp_dñëe
(
¨gc
, 
¨gv
))

790  
CLI_FAILURE


794 #Thi†
fun˘i⁄
 
is
 
ˇ∑bÀ
 
of
 
dñëög
 
AISA
 
T¨gë
,

795 #vﬁumes, 
vm
 
vﬁumes
, 
¢≠shŸ
 volumes

796 #Thi†
fun˘i⁄
 
d€s
 
nŸ
 
check
 
the
 
dïídícy
.

797 #e.
g
. 
ô
 
may
 
Ælow
 
dñëi⁄
 
of
 
∑ª¡
 
vﬁume
 
wôhout
 
eví


798 #dñëög 
¢≠shŸ
 
vﬁumes


800 
def
 
	$dz_˛i_de°roy
(
¨gc
, 
¨gv
):

801 i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

802 
	`LOG
(
ERROR
,"Kernel Modulesáre NOTÜoaded")

803  
CLI_FAILURE


805 i‡(
¨gc
 != 2):

806 
	`¥öt
(
	$dz_˛i_hñp_de°roy
(
¨gc
, 
¨gv
))

807  
CLI_FAILURE


809 
dev_«me
 = 
¨gv
[1]

811 i‡(
dev_«me
 == "destroy"):

812 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

813 
avm
.
	$dñëe_Æl_vﬁumes
()

814 
ªtobj
 = 
avm
.
	$dñëe_aiß
()

815 
ªtobj
.
	$LOG
()

816  
CLI_SUCCESS


818 
	`ñif
 (
dev_«me
 
	`ö
 ("help", "--help", "-h")):

819 
	`¥öt
(
	$dz_˛i_hñp_de°roy
(
¨gc
, 
¨gv
))

820  
CLI_SUCCESS


822 
	$ñif
 (
dev_«me
 
is
 
nŸ
 
N⁄e
):

823 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

824 
avm
.
	$dñëe_Æl_vﬁumes
()

825 
ªtobj
 = 
avm
.
	$dñëe_aiß
()

826 
ªtobj
.
	$LOG
()

827  
CLI_SUCCESS


830 
	`¥öt
(
	$dz_˛i_hñp_de°roy
(
¨gc
, 
¨gv
))

831  
CLI_FAILURE


834 #Thi†
fun˘i⁄
 
checks
 
whëhî
 
Æl
 
the
 
¥îequi°es
 
¨e


835 #£à
ö˛udög
 
the
 
ac˚ssiblôy
 
of
 
d©a
 
™d
 
mëad©a
 
disks


836 ###########################################################
 dz_˛i_c⁄fig◊rgc,árgv):

838 
îr
 = 
CLI_SUCCESS


839 i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

840 
	`LOG
(
ERROR
,"Kernel Modulesáre NOTÜoaded")

841  
CLI_FAILURE


843 #Check 
exi°í˚
 
of
 
d©a
 
disk


844 
os
.
∑th
.
	$exi°s
(
CONFIG_AVM_DATA_DEVICE_NAME
):

845 
	`LOG
 (
DEBUG
, "D©®Devi˚ " + 
CONFIG_AVM_DATA_DEVICE_NAME
 + "Éxist")

846 
∑ss


848 
	`LOG
 (
ERROR
, "D©®Devi˚ " + 
CONFIG_AVM_DATA_DEVICE_NAME
 + " doesÇotÉxist")

849 
îr
 = 
CLI_DATA_DEVICE_DOES_NOT_EXIST


851 #Check 
exi°í˚
 
of
 
mëad©a
 
disk


852 
os
.
∑th
.
	$exi°s
(
CONFIG_AVM_METADATA_DEVICE_NAME
):

853 
	`LOG
 (
DEBUG
, "MëaD©®Devi˚ " + 
CONFIG_AVM_METADATA_DEVICE_NAME
 + "Éxist")

854 
∑ss


856 
	`LOG
 (
ERROR
, "MëaD©®Devi˚ " + 
CONFIG_AVM_METADATA_DEVICE_NAME
 + " doesÇotÉxist")

857 i‡(
îr
 =
CLI_DATA_DEVICE_DOES_NOT_EXIST
):

858 
îr
 = 
CLI_DEVICES_DOES_NOT_EXIST


860 
îr
 = 
CLI_METADATA_DEVICE_DOES_NOT_EXIST


862  
îr


865 #Thi†
fun˘i⁄
 
ªtu∫s
 
d©a
 
™d
 
mëad©a
 
disks


866 ###########################################################
 dz_˛i_disks◊rgc,árgv):

868 #î∏
CLI_SUCCESS


869 #i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

870 #LOG(
ERROR
,"Kernel Modulesáre NOTÜoaded")

871 #ªtu∫ 
CLI_FAILURE


873 
disks
 = 
CONFIG_AVM_DATA_DEVICE_NAME


874 
disks
 += "\n"

875 
disks
 +
CONFIG_AVM_METADATA_DEVICE_NAME


876 #LOGR(
disks
)

877  
disks


880 #Thi†
fun˘i⁄
 
¥öts
 
Æl
 
sysfs
 
íåõs
 
¸óãd
 
by
 
AVM


881 ###########################################################
 dz_˛i_sysfs◊rgc,árgv):

883 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

884 
	`¥öt
("\n")

885 
	`¥öt
("AVM sysfsÉntries in kernel")

886 
	`¥öt
("---------------------------")

887 
avm
.
	$gë_sysfs_íåõs
()

888  
CLI_SUCCESS


891 #Thi†
fun˘i⁄
 
checks
 
whëhî
 
Æl
 
the
 
¥îequi°es
 
¨e


892 #£à
bef‹e
 
a˘uÆly
 
¸ótög
 
AISA
 
èrgë
 
™d
 
vﬁumes
.

893 #Hîê
ô
 
makes
 
the
 
ö°™˚
 
of
 
˛ass
 
	`AVM_CORE
()

894 #™d 
övokes
 
a˘uÆ
 
èrgë
 
¸óti⁄
 
™d
 
vﬁume
 creation

897 
def
 
	$dz_˛i_¸óã
(
¨gc
, 
¨gv
):

898 i‡(
	`dz_vÆid©e_kî√l_moduÀs
(0) < 0):

899 
	`LOG
(
ERROR
,"Kernel Modulesáre NOTÜoaded")

900  
CLI_FAILURE


902 
›î©i⁄ty≥
 = '' #argv[1]

903 
devty≥
 = '' #argv[2]

904 
«me
 = '' #argv[3]

905 
v«me
 = '' #argv[4]

906 
size
 = '' #argv[5]

907 
vsize
 = '' #argv[6]

908 
∑ª¡
 = '' #argv[7]

909 
∑ª¡_vﬁ
 = '' #argv[8]

910 
›î©i⁄ty≥
 = 
¨gv
[1]

912 #avm = 
	`AVM_CORE
()

913 
avm
 = 
	$AVM_CORE
(
CONFIG_AVM_DATA_DEVICE_NAME
, 
CONFIG_AVM_METADATA_DEVICE_NAME
)

914 
dev_«me
 = 
AISA_DEVICE_NAME


915 
devty≥
 = 
¨gv
[2]

917 
devty≥
 
	$ö
 (
CLI_DEV_TYPE_ALL
):

918 #i‡(
	`dz_vÆid©e_aiß_èrgë
(0) < 0):

919 #ªtu∫ 
CLI_FAILURE


920 
devty≥
 
	$ö
 (
CLI_DEV_TYPE_VOLUME
):

922 
dev_ty≥
 = 
DEVICE_TYPE_DATA_VOLUME


923 
«me
 = 
¨gv
[3]

924 
«me
 
	`ö
 ("--name"):

925 
dev_«me
 = 
¨gv
[4]

927 i‡(
¨gc
 > 4):

928 if(
¨gv
[5] 
is
 
nŸ
 
N⁄e
):

929 
size
 = 
¨gv
[5]

930 
size
 
	`ö
 ("--size"):

931 
vsize
 = 
¨gv
[6]

932 
dev_size
 = 
vsize


934 
	`LOG
 (
INFO
,"Missing volume size, default size of 1GB is set")

935 
dev_size
 = "2097152" #512b 
£˘‹s
 
i
.
e
. 1
GB


937 
∑ss


939 
	`¥öt
 ("You haveÇotÉnteredÅhe volume size")

940 
	`¥öt
 ("Volume create command usage: ./avm --creat vol --name [VOL-NAME] --size [SIZE]")

943 
dev_size
 = 
	$c⁄vît_gb_to_blocks
(
dev_size
)

944 
	`LOG
(
INFO
, "Cª©ög Vﬁumê" + 
dev_«me
 + " o‡sizê" + 
dev_size
 + " blocks")

945 
ªtobj
 = 
avm
.
	$¸óã_vﬁume
(
dev_ty≥
, 
dev_«me
, 
dev_size
, 
∑ª¡_vﬁ
)

946 
ªtobj
.
	$LOG
()

948 
devty≥
 
	$ö
 (
CLI_DEV_TYPE_SNAPSHOT_READ
):

949 
dev_ty≥
 = 
DEVICE_TYPE_DATA_VOLUME_SNAPSHOT_READ


950 
«me
 = 
¨gv
[3]

951 
«me
 
	`ö
 ("--name"):

952 
dev_«me
 = 
¨gv
[4]

953 
∑ª¡_vﬁ
 = 
¨gv
[6]

955 
pvﬁ∑th
 = 
AISA_VOLUME_PREFIX
 + "/" + 
∑ª¡_vﬁ


956 
dev_size_blocks
 = 
avm
.
	$gë_devi˚_size_blocks
(
pvﬁ∑th
)

958 i‡((
dev_size_blocks
) == -1):

959 
	`LOG
(
ERROR
, "P¨íàVﬁumê" + 
∑ª¡_vﬁ
 + " size is -1. Check if itÉxists")

960  
CLI_FAILURE


962 
	`LOG
(
INFO
, "Cª©ög RódO∆y S«pshŸ Vﬁumê" + 
dev_«me
)

963 
ªtobj
 = 
avm
.
	$¸óã_vﬁume
(
dev_ty≥
, 
dev_«me
, 
dev_size_blocks
, 
∑ª¡_vﬁ
)

964 
ªtobj
.
	$LOG
()

966 
devty≥
 
	$ö
 (
CLI_DEV_TYPE_SNAPSHOT_WRITE
):

967 
dev_ty≥
 = 
DEVICE_TYPE_DATA_VOLUME_SNAPSHOT_WRITE


968 
«me
 = 
¨gv
[3]

969 
«me
 
	`ö
 ("--name"):

970 
dev_«me
 = 
¨gv
[4]

971 
∑ª¡_vﬁ
 = 
¨gv
[6]

973 
pvﬁ∑th
 = 
AISA_VOLUME_PREFIX
 + "/" + 
∑ª¡_vﬁ


974 
dev_size_blocks
 = 
avm
.
	$gë_devi˚_size_blocks
(
pvﬁ∑th
)

975 i‡((
dev_size_blocks
) == -1):

976 
	`LOG
(
ERROR
, "P¨íàVﬁumê" + 
∑ª¡_vﬁ
 + " size is -1. Check if itÉxists")

977  
CLI_FAILURE


979 
	`LOG
(
INFO
, "Cª©ög WrôóbÀ S«pshŸ Vﬁumê" + 
dev_«me
)

980 
ªtobj
 = 
avm
.
	$¸óã_vﬁume
(
dev_ty≥
, 
dev_«me
, 
dev_size_blocks
, 
∑ª¡_vﬁ
)

981 
ªtobj
.
	$LOG
()

983 
devty≥
 
	$ö
 (
CLI_DEV_TYPE_VM_VOLUME
):

984 
dev_ty≥
 = 
DEVICE_TYPE_VM_VOLUME


987 
devty≥
 
	$ö
 (
CLI_DEV_TYPE_VM_SNAPSHOT_READ
):

988 
dev_ty≥
 = 
DEVICE_TYPE_VM_VOLUME_SNAPSHOT_READ


989 
«me
 = 
¨gv
[3]

990 
«me
 
	`ö
 ("--name"):

991 
dev_«me
 = 
¨gv
[4]

992 
∑ª¡_vﬁ
 = 
¨gv
[6]

994 
pvﬁ∑th
 = 
AISA_VOLUME_PREFIX
 + "/" + 
∑ª¡_vﬁ


995 
dev_size_blocks
 = 
avm
.
	$gë_devi˚_size_blocks
(
pvﬁ∑th
)

996 i‡((
dev_size_blocks
) == -1):

997 
	`LOG
(
ERROR
, "P¨íàVﬁumê" + 
∑ª¡_vﬁ
 + " size is -1. Check if itÉxists")

998  
CLI_FAILURE


1000 
	`LOG
(
INFO
, "Cª©ög RódO∆y S«pshŸ VM Vﬁumê" + 
dev_«me
)

1001 
ªtobj
 = 
avm
.
	$¸óã_vﬁume
(
dev_ty≥
, 
dev_«me
, 
dev_size_blocks
, 
∑ª¡_vﬁ
)

1002 
ªtobj
.
	$LOG
()

1004 
devty≥
 
	$ö
 (
CLI_DEV_TYPE_VM_SNAPSHOT_WRITE
):

1005 
dev_ty≥
 = 
DEVICE_TYPE_VM_VOLUME_SNAPSHOT_WRITE


1006 
«me
 = 
¨gv
[3]

1007 
«me
 
	`ö
 ("--name"):

1008 
dev_«me
 = 
¨gv
[4]

1009 
∑ª¡_vﬁ
 = 
¨gv
[6]

1011 
pvﬁ∑th
 = 
AISA_VOLUME_PREFIX
 + "/" + 
∑ª¡_vﬁ


1012 
dev_size_blocks
 = 
avm
.
	$gë_devi˚_size_blocks
(
pvﬁ∑th
)

1013 i‡((
dev_size_blocks
) == -1):

1014 
	`LOG
(
ERROR
, "P¨íàVﬁumê" + 
∑ª¡_vﬁ
 + " size is -1. Check if itÉxists")

1015  
CLI_FAILURE


1017 
	`LOG
(
INFO
, "Cª©ög WrôóbÀ S«pshŸ VM Vﬁumê" + 
dev_«me
)

1018 
ªtobj
 = 
avm
.
	$¸óã_vﬁume
(
dev_ty≥
, 
dev_«me
, 
dev_size_blocks
, 
∑ª¡_vﬁ
)

1019 
ªtobj
.
	$LOG
()

1021 
ñif
 
devty≥
 
	$ö
 (
CLI_DEV_TYPE_AISA
):

1022 
dev_ty≥
 = 
DEVICE_TYPE_AISA


1023 
dev_«me
 = 
¨gv
[2]

1025 if(
¨gc
 == 5):

1026 
size
 = 
¨gv
[3]

1027 
size
 
	`ö
 ("--size"):

1028 
vsize
 = 
¨gv
[4]

1029 
aiß_size_blocks
 = 
	$c⁄vît_gb_to_blocks
(
vsize
)

1030 
aiß_deÁu…_size
 = 
avm
.
	$gë_aiß_deÁu…_size_blocks
()

1031 i‡((
aiß_size_blocks
Ë> (
aiß_deÁu…_size
)):

1032 
	`LOG
(
WARN
,"AISA Target Size is greaterÅhan default size ")

1033 
	`LOG
(
INFO
,"DeÁu… Size: " + 
aiß_deÁu…_size
 + " blocks")

1034 
	`LOG
(
INFO
,"T¨gë Size: " + 
aiß_size_blocks
 + " blocks")

1035 
	`LOG
(
INFO
,"Cª©ög AISA T¨gë wôh deÁu… sizê" + 
aiß_deÁu…_size
 + " blocks")

1037 
aiß_size_blocks
 = 
aiß_deÁu…_size


1038 
ªtobj
 = 
avm
.
	$¸óã_aiß
(
dev_ty≥
, 
dev_«me
, 
aiß_size_blocks
)

1039 
ªtobj
.
	$LOG
()

1040  
ªtobj
.
ªt


1042 
	`LOG
(
INFO
,"Cª©ög AISA T¨gë o‡sizê" + 
aiß_size_blocks
 + " blocks")

1043 
ªtobj
 = 
avm
.
	$¸óã_aiß
(
dev_ty≥
, 
dev_«me
, 
aiß_size_blocks
)

1044 
ªtobj
.
	$LOG
()

1045  
ªtobj
.
ªt


1047 
∑ss


1049 
∑ss


1051 
ªtobj
 = 
avm
.
	$¸óã_aiß_deÁu…
()

1052 
ªtobj
.
	$LOG
()

1053  
ªtobj
.
ªt


1055 #de‡
	`maö
(
£lf
, 
¨gc
 = 
	`Àn
(
sys
.
¨gv
), 
¨g
 = sys.argv):

1056 
def
 
	$maö
(
¨gv
):

1058 
¨gc
 = 
	$Àn
(
sys
.
¨gv
)

1059 
îr
 = 
	`dz_˛i_vÆid©e
(
¨gc
, 
¨gv
);

1061 i‡(
îr
 !
CLI_SUCCESS
):

1062 
	$exô
(
îr
)

1065 
›î©i⁄ty≥
 = 
¨gv
[1]

1067 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_CREATE
):

1068 
	`exô
(
	$dz_˛i_¸óã
(
¨gc
, 
¨gv
))

1070 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_DELETE
):

1071 
	`exô
(
	$dz_˛i_dñëe
(
¨gc
, 
¨gv
))

1073 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_DESTROY
):

1074 
	`exô
(
	$dz_˛i_de°roy
(
¨gc
, 
¨gv
))

1076 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_LIST
):

1077 
	`exô
(
	$dz_˛i_li°_vﬁumes
(
¨gc
, 
¨gv
))

1079 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_INFO
):

1080 
	`exô
(
	$dz_˛i_öfo
(
¨gc
, 
¨gv
))

1082 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_VERSION
):

1083 
	`exô
(
	$dz_˛i_vîsi⁄
(
¨gc
, 
¨gv
))

1085 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_STATUS
):

1086 
	$dz_°©us
(
¨gc
, 
¨gv
)

1087 
	$exô
(
CLI_SUCCESS
)

1089 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_KERNEL_MODULES
):

1090 
	`exô
(
	$dz_li°_kî√l_moduÀs
(
¨gc
, 
¨gv
))

1092 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_RMMOD
):

1093 
	`exô
(
	$dz_˛i_rmmod
(
¨gc
, 
¨gv
))

1095 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_SIZE
):

1096 
	`exô
(
	$dz_˛i_size
(
¨gc
, 
¨gv
))

1098 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_STATS
):

1099 
	`exô
(
	$dz_˛i_°©s
(
¨gc
, 
¨gv
))

1101 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_LBA
):

1102 
	`exô
(
	$dz_˛i_lba_pba
(
¨gc
, 
¨gv
))

1104 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_PBA
):

1105 
	`exô
(
	$dz_˛i_lba_pba
(
¨gc
, 
¨gv
))

1107 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_SIZEOF
):

1108 
	`exô
(
	$dz_˛i_sizeof
(
¨gc
, 
¨gv
))

1110 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_IO
):

1111 
	`exô
(
	$dz_˛i_io_ªad
(
¨gc
, 
¨gv
))

1113 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_IO_READ
):

1114 
	`exô
(
	$dz_˛i_io_ªad
(
¨gc
, 
¨gv
))

1116 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_IO_READ_WRITE
):

1117 
	`exô
(
	$dz_˛i_io_ªad_wrôe
(
¨gc
, 
¨gv
))

1119 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_IO_WRITE
):

1120 
	`exô
(
	$dz_˛i_io_wrôe
(
¨gc
, 
¨gv
))

1122 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_IO_WRITE_READ
):

1123 
	`exô
(
	$dz_˛i_io_wrôe_ªad
(
¨gc
, 
¨gv
))

1125 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_IO_READ_WRITE_READ
):

1126 
	`exô
(
	$dz_˛i_io_ªad_wrôe_ªad
(
¨gc
, 
¨gv
))

1128 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_IO_ZERO
):

1129 
	`exô
(
	$dz_˛i_io_zîo
(
¨gc
, 
¨gv
))

1131 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_IO_READ_ZERO_READ
):

1132 
	`exô
(
	$dz_˛i_io_ªad_zîo_ªad
(
¨gc
, 
¨gv
))

1134 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_LOG
):

1135 
	`exô
(
	$dz_˛i_log
(
¨gc
, 
¨gv
))

1137 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_CONFIG
):

1138 
	`exô
(
	$dz_˛i_c⁄fig
(
¨gc
, 
¨gv
))

1140 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_DISKS
):

1141 
	`exô
(
	$dz_˛i_disks
(
¨gc
, 
¨gv
))

1143 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_SYSFS
):

1144 
	`exô
(
	$dz_˛i_sysfs
(
¨gc
, 
¨gv
))

1146 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_START
):

1147 
	`exô
(
	$dz_˛i_avm_°¨t
(
¨gc
, 
¨gv
))

1149 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_STOP
):

1150 
	`exô
(
	$dz_˛i_avm_°›
(
¨gc
, 
¨gv
))

1152 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_RESTART
):

1153 
	`exô
(
	$dz_˛i_avm_ª°¨t
(
¨gc
, 
¨gv
))

1155 
ñif
 
›î©i⁄ty≥
 
	$ö
 (
CLI_OP_TYPE_HELP
):

1156 
	$dz_˛i_hñp
(
¨gc
, 
¨gv
)

1157 
	$exô
(
CLI_SUCCESS
)

1160 
	$dz_˛i_hñp
(
¨gc
, 
¨gv
)

1161 
	$exô
(
CLI_FAILURE
)

1163 
__«me__
 == "__main__":

1164 
	$maö
(
sys
.
¨gv
[0:])

1165 #maö(
sys
.
¨gv
)

	@AISA_Defaults.py

1 
‰om
 
__futuª__
 
imp‹t
 
¥öt_fun˘i⁄


2 
imp‹t
 
os


3 
imp‹t
 
sys


4 
imp‹t
 
AISA_Eº‹


5 
‰om
 
AISA_Eº‹
 
	gimp‹t
 *

15 
	gAISA_LOCAL_URI_SUFFIX
 = ':///system'

16 
AISA_DEFAULT_HYX
 = 'qemu'

18 #DM 
T¨gë
 
DeÁu…s


19 
AISA_DMTARGET_KERNEL_MODULE
 = "aisa_dmtarget.ko"

20 
AISA_DMTARGET_KERNEL_MODULE_PATH
 = "/aisa/current/src/kernel/dmtarget"

21 
AISA_DMTARGET_NAME
 = "aisa_dmtarget"

22 
AISA_DMTARGET_BACKEND_DEVICE
 = "/dev/md1"

23 
AISA_DMTARGET_EXPORTED_DEVICE
 = "aisp"

24 
AISA_DMTARGET_EXPORTED_SIZE
 = 2097152

26 #St‹agê
Poﬁ
 
Inf‹m©i⁄


27 
AISA_AISP_PREFIX_DATA_LUN
 = "lv_aidl_"

28 
AISA_AISP_PREFIX_VM_LUN
 = "lv_aivl_" #F‹ 
Public
 
VMs


29 
AISA_AISP_PREFIX_VM_LUN_PVT
 = "lvp_aivl_" #F‹ 
Priv©e
 
VMs


32 
AISA_STORAGE_POOL_PATH
 = '/dev/m≠≥r/' + 
AISA_DMTARGET_EXPORTED_DEVICE


33 
AISA_STORAGE_POOL_SIZE
 = 40 #ö 
GB
, 
Ju°
 
like
 
th©


34 
	gAISA_STORAGE_POOL_VG_NAME
 = "vg_AISA_POOL"

35 
AISA_STORAGE_POOL_LV_NAME_DATA_LUN
 = "lv_AISA_POOL_DATA_LUN" #LV 
¸ótög
 
D©a
 
Lun
 
Poﬁ


36 
AISA_STORAGE_POOL_LV_NAME_VM_IMAGE
 = "lv_AISA_POOL_VM_IMAGE" #LV 
¸ótög
 
VútuÆMachöe
 
Image
 
Poﬁ


38 
AISA_DATA_LUN_POOL_PATH
 = '/dev/' + 
AISA_STORAGE_POOL_VG_NAME
 + '/' + 
AISA_STORAGE_POOL_LV_NAME_DATA_LUN


39 
AISA_VM_IMAGE_POOL_PATH
 = '/dev/' + 
AISA_STORAGE_POOL_VG_NAME
 + '/' + 
AISA_STORAGE_POOL_LV_NAME_VM_IMAGE


41 
AISA_DATA_LUN_POOL_VG_NAME
 = "vg_DATA_LUN_POOL" #Ià
wûl
 
be
 
¸óãd
 
⁄
 
AISA_DATA_LUN_POOL_PATH


42 
AISA_VM_IMAGE_POOL_VG_NAME
 = "vg_VM_IMAGE_POOL" #Ià
wûl
 
be
 
¸óãd
 
⁄
 
AISA_VM_IMAGE_POOL_PATH


44 
AISA_DATA_LUN_POOL_PERCENTAGE
 = 60

45 
AISA_VM_IMAGE_POOL_PERCENTAGE
 = (100 - 
AISA_DATA_LUN_POOL_PERCENTAGE
)

47 #VM 
Image
 
Poﬁ


48 
AISA_STORAGE_PREFIX_VM_IMAGE_LUN
 = "lv_aivi_"

49 
AISA_STORAGE_VM_IMAGE_POOL_NAME
 = "lv_aivi_pool"

50 
AISA_STORAGE_VM_IMAGE_POOL_SIZE
 = (
AISA_STORAGE_POOL_SIZE
 / 2)

53 #MDRaid 
D©a
 
Disks


54 
AISA_DATA_DISKS
 = '/dev/sda6 /dev/sda7 /dev/sda8 /dev/sda9 '

55 
AISA_DATA_DISKS
 = AISA_DATA_DISKS + '/dev/sda10 /dev/sda11 /dev/sda12 /dev/sda13 '

56 
AISA_DATA_DISKS
 = AISA_DATA_DISKS + '/dev/sda14 /dev/sda15 /dev/sda16 /dev/sda17 '

57 
AISA_DATA_DISKS
 = AISA_DATA_DISKS + '/dev/sda18 /dev/sda19 /dev/sda20 /dev/sda21 '

59 
AISA_DATA_DISKS_CNT
 = 16

	@AISA_Error.py

1 
‰om
 
__futuª__
 
imp‹t
 
¥öt_fun˘i⁄


2 
imp‹t
 
os


3 
imp‹t
 
sys


4 
imp‹t
 
åa˚


6 
	gSUCCESS
 = 0

7 
FAILURE
 = 1

9 
ERROR
 = 0

10 
WARN
 = 1

11 
INFO
 = 2

12 
DEBUG
 = 3

14 
globÆ
 
LOG_LEVEL


15 
LOG_LEVEL
 = 
DEBUG


17 
LOG_DICT
 = { 
ERROR
 : "ERROR", 
INFO
 : "INFO ", 
WARN
 : "WARN ", 
DEBUG
 : "DEBUG"};

20 
	gAISA_PV_DOES_NOT_EXIST
 = 0

21 
AISA_PV_EXIST
 = 101

23 
AISA_VG_DOES_NOT_EXIST
 = 0

24 
AISA_VG_EXIST
 = 102

26 
AISA_LV_DOES_NOT_EXIST
 = 0

27 
AISA_LV_EXIST
 = 103

	@AISA_Lio.py

1 #! /
u§
/
bö
/
pyth⁄


2 
‰om
 
__futuª__
 
imp‹t
 
¥öt_fun˘i⁄


3 
imp‹t
 
os


4 
imp‹t
 
sys


6 
‰om
 
AISA_Utûs
 
imp‹t
 *

7 
‰om
 
AISA_DeÁu…s
 
imp‹t
 *

8 
‰om
 
AISA_Lvm
 
imp‹t
 *

9 
‰om
 
AISA_Dmèrgë
 
imp‹t
 *

11 
‰om
 
π¶ib
 
imp‹t
 *

12 
‰om
 
π¶ib
 
imp‹t
 
RTSRoŸ


17 
	gAISA_DEV_NAME
 = "/dev/vg_aisp/lv_aisp"

20 
˛ass
 
AISA_LIO
:

24 
def
 
	$__öô__
(
£lf
):

25 
£lf
.
d©a
 = []

26 
	`LOG
(
DEBUG
, 'Cœs†' + 
__«me__
 + ' defined')

27 
£lf
.
so
 = 
N⁄e


29 
def
 
	$¸óãSt‹ageObje˘OnBlockDevi˚
(
£lf
, 
s⁄ame
, 
dev«me
):

30 #Check 
St‹age
 
Obje˘
 
exi°s


31 
isExi°
 = 
£lf
.
	$checkSt‹ageObje˘Exi°s
(
s⁄ame
, 
dev«me
)

32 
isExi°
 =
True
:

33 
	`LOG
(
INFO
, "St‹agêObje˘ "+
s⁄ame
+"áÃódyÉxi°†f‹ devi˚ "+
dev«me
)

34 
£lf
.
	$dñëeSt‹ageObje˘
(
s⁄ame
, 
dev«me
)

35  
FAILURE


37 
£lf
.
so
 = 
	$BlockSt‹ageObje˘
(
s⁄ame
, 
dev«me
, 
FÆ£
, False)

38  
SUCCESS


40 
def
 
	$¸óãT¨gë
(
£lf
, 
ây≥
, 
addr
, 
p‹äo
):

42 
wwn
 = "iqn.2003-01.org.linux-iscsi.aisa-machine.x8664:sn.68ecf3bbc59a"

43 
£lf
.
	`gëT¨gëLi°
("iscsi")

45 
ây≥
 == "iscsi":

46 
£lf
.
fo
 = 
Ábric
.
	$ISCSIFabricModuÀ
()

47 
£lf
.
èrgë
 = 
	`T¨gë
(£lf.
fo
, 
mode
='¸óã'Ë#Cª©e†
a
  
iSCSI
 
T¨gë


48 
£lf
.
çg
 = 
	$TPG
(
£lf
.
èrgë
, 1)

49 
£lf
.
p‹èl
 = 
	$Nëw‹kP‹èl
(
£lf
.
çg
, 
addr
, 
p‹äo
)

50 #£lf.
p‹èl
 = 
	`Nëw‹kP‹èl
(
çg
, "192.168.1.4", "3260")

51  
£lf
.
çg


52  
N⁄e


55 
def
 
	$¸óãLun
(
£lf
, 
¨g_çg
, 
¨g_bo
, 
¨g_lunNo
, 
¨g_lunName
):

56 
çg
 = 
¨g_çg
;

57 
£lf
.
lun
 = 
çg
.
	$lun
(
¨g_lunNo
, 
¨g_bo
, 
¨g_lunName
)

58  
£lf
.
lun


61 
def
 
	$¸óãNodeACLObje˘
(
£lf
, 
¨g_çg
, 
öôüt‹
):

62 
çg
 = 
¨g_çg


63 
nodeACL
 = 
çg
.
	$node_a˛
(
öôüt‹
)

64  
nodeACL


66 
def
 
	$doLunM≠pög
(
£lf
, 
¨g_lunNo
, 
¨g_nodeACL
):

67 
£lf
.
nodeACL
 = 
¨g_nodeACL


68 
£lf
.
m≠≥dLun
 = 
nodeACL
.
	$m≠≥d_lun
(
¨g_lunNo
, 0, 
FÆ£
)

69  
m≠≥dLun


72 
def
 
	$°¨t
(
£lf
, 
s⁄ame
, 
dev«me
, 
lunNo
, 
lunName
, 
ây≥
, 
öôüt‹
, 
ùaddr
, 
p‹äo
):

73 
ªt
 = 
£lf
.
	$¸óãSt‹ageObje˘OnBlockDevi˚
(
s⁄ame
, 
dev«me
)

74 
ªt
 =
SUCCESS
:

75 
çg
 = 
£lf
.
	$¸óãT¨gë
(
ây≥
, 
ùaddr
, 
p‹äo
)

76 
lun
 = 
£lf
.
	$¸óãLun
(
çg
, 
£lf
.
so
, 
lunNo
, 
lunName
)

78 
def
 
	$¥öt
(
£lf
):

79 
£lf
.
so
 
is
 
nŸ
 
N⁄e
:

80 
	`LOG
(
INFO
, "St‹agêObje˘ Namê: " + 
£lf
.
	$gëSt‹ageObje˘Name
())

81 
	`LOG
(
INFO
, "St‹agêObje˘ WWN : " + 
£lf
.
	$gëSt‹ageObje˘WWN
())

82 
	`LOG
(
INFO
, "Block Devi˚ Namê : " + 
£lf
.
	$gëSt‹ageObje˘BlockDevi˚
())

83 
	`LOG
(
INFO
, "T¨gë WWN : " + 
£lf
.
	$gëT¨gëWWN
())

84 
	`LOG
(
INFO
, "Lu¿Nÿ : " + 
	`°r
(
£lf
.
	$gëLunNo
()))

86 
	`LOG
(
INFO
, "List ofÉxisting Storage Objects")

87 
so
 
ö
 
£lf
.
	$gëSt‹ageObje˘Li°
():

88 
	`LOG
(
INFO
, "St‹agêObje˘ Namê: " + 
£lf
.
	$gëSt‹ageObje˘Name
(
so
))

90 
	`LOG
(
INFO
, "List ofÉxisting Luns")

91 
lun
 
ö
 
£lf
.
	$gëLunLi°
():

92 
	`LOG
(
INFO
, "Lu¿Nÿ : " + 
	`°r
(
£lf
.
	$gëLunNo
(
lun
)))

94 
	`LOG
(
INFO
, "List ofÉxisting Targets")

95 
èrgë
 
ö
 
£lf
.
	`gëT¨gëLi°
("iscsi"):

96 
	`LOG
(
INFO
, "T¨gë WWN : " + 
£lf
.
	$gëT¨gëWWN
(
èrgë
))

99 
def
 
	$gëLunNo
(
£lf
, 
lun
=
N⁄e
):

100 
lun
 
is
 
N⁄e
:

101  
£lf
.
lun
.
_lun


103  
lun
.
_lun


105 
def
 
	$gëLunWWULN
(
£lf
):

106  
£lf
.
lun
.
wwu 


108 
def
 
	$gëT¨gëWWN
(
£lf
, 
èrgë
=
N⁄e
):

109 
èrgë
 
is
 
N⁄e
:

110  
£lf
.
èrgë
.
wwn


112  
èrgë
.
wwn


115 
def
 
	$gëSt‹ageObje˘Name
(
£lf
, 
so
=
N⁄e
):

116 
so
 
is
 
N⁄e
:

117  
£lf
.
so
.
	$_gë_«me
()

119  
so
.
	$_gë_«me
()

121 
def
 
	$gëSt‹ageObje˘BlockDevi˚
(
£lf
):

122  
£lf
.
so
.
	$_gë_udev_∑th
()

124 
def
 
	$gëSt‹ageObje˘WWN
(
£lf
):

125  
£lf
.
so
.
wwn


128 
def
 
	$checkSt‹ageObje˘Exi°s
(
£lf
, 
s⁄ame
, 
dev«me
):

129 
so
 = 
£lf
.
	$födSt‹ageObje˘
(
s⁄ame
, 
dev«me
)

130 
so
 
is
 
nŸ
 
N⁄e
:

131  
True


133  
FÆ£


135 
def
 
	$checkT¨gëExi°s
(
£lf
, 
wwn
):

136 
èrgë
 = 
£lf
.
	$födT¨gë
(
wwn
)

137 
èrgë
 
is
 
nŸ
 
N⁄e
:

138  
True


140  
FÆ£


142 
def
 
	$gëSt‹ageObje˘Li°
(
£lf
):

143 
so
 
ö
 
	`RTSRoŸ
().
°‹age_obje˘s
:

144 
yõld
 
so


146 
def
 
	$gëT¨gëLi°
(
£lf
, 
ây≥
):

147 
π§oŸ
 = 
	$RTSRoŸ
()

149 
fm
 
ö
 
π§oŸ
.
Ábric_moduÀs
:

150 
èrgë
 
ö
 
fm
.
èrgës
:

151 
yõld
 
èrgë


153 
def
 
	$gëLunLi°
(
£lf
):

154 
π§oŸ
 = 
	$RTSRoŸ
()

155 
çg
 
ö
 
π§oŸ
.
çgs
:

156 
lun
 
ö
 
çg
.
luns
:

157 
yõld
 
lun


159 
def
 
	$födSt‹ageObje˘
(
£lf
, 
s⁄ame
, 
dev«me
):

160 
so
 
ö
 
	`RTSRoŸ
().
°‹age_obje˘s
:

161 
so
.
udev_∑th
 
™d
 
os
.
∑th
.
	$ßmefûe
(
dev«me
, 
so
.
udev_∑th
):

162  
so


164  
N⁄e


166 
def
 
	$födT¨gë
(
£lf
, 
wwn
):

167 
π§oŸ
 = 
	$RTSRoŸ
()

168 
fm
 
ö
 
π§oŸ
.
Ábric_moduÀs
:

169 
èrgë
 
ö
 
fm
.
èrgës
:

170 
èrgë
.
wwn
 == wwn:

171  
èrgë


172  
N⁄e


174 
def
 
	$dñëeSt‹ageObje˘
(
£lf
, 
s⁄ame
, 
dev«me
):

175 
so
 = 
£lf
.
	$födSt‹ageObje˘
(
s⁄ame
, 
dev«me
)

176 
so
 
is
 
nŸ
 
N⁄e
:

177 
so
.
	$dñëe
()

178 
	`LOG
(
INFO
, "St‹agêObje˘ "+
s⁄ame
+" o¿devi˚ "+
dev«me
+" delete successfully")

180 
def
 
	$dñëeAŒSt‹ageObje˘s
():

181 
π§oŸ
 = 
	$RTSRoŸ
()

182 #f‹ 
so
 
ö
 
£lf
.
°‹age_obje˘s
:

183 #f‹ 
so
 
ö
 
St‹ageObje˘
.
	`Æl
()

186 
def
 
	$dñëeT¨gë
(
£lf
, 
wwn
):

187 
èrgë
 = 
	$födT¨gë
(
wwn
)

188 
èrgë
 
is
 
nŸ
 
N⁄e
:

189 
èrgë
.
	$dñëe
()

191 
def
 
	$dñëeE¡úeT¨gëC⁄figuøti⁄
(
£lf
):

192 
π§oŸ
 = 
	$RTSRoŸ
()

193 
π§oŸ
.
	$˛ór_exi°ög
(
True
)

197 
def
 
	$maö
():

198 
	`LOG
(
INFO
, "Starting LIO")

199 
lio
 = 
	$AISA_LIO
()

201 
dev«me
 = "/dev/vg_aisp/lv_aisp"

202 
lunNo
 = 121

203 
lunName
 = "aiß_lun+"+
	$°r
(
lunNo
)

204 
öôüt‹
 = "abcdefghijklmnop"

205 
ây≥
 = "iscsi"

206 
ùaddr
 = "192.168.1.5"

207 
p‹äo
 = 3260

208 
s⁄ame
 = "aiß_back°‹e_"+
	$°r
(
lunNo
)

210 
lio
.
	$gëLunLi°
()

211 
lio
.
	$°¨t
(
s⁄ame
, 
dev«me
, 
lunNo
, 
lunName
, 
ây≥
, 
öôüt‹
, 
ùaddr
, 
p‹äo
)

213 
lio
.
	$¥öt
()

215 
__«me__
 == "__main__":

216 
	`maö
()

	@AISA_MDRaid.py

1 
‰om
 
__futuª__
 
imp‹t
 
¥öt_fun˘i⁄


2 
imp‹t
 
os


3 
imp‹t
 
sys


4 
imp‹t
 
gë›t


5 
imp‹t
 
cmd


6 
‰om
 
	glsm
.
	glsm˛i
.
cmdlöe
 
imp‹t
 
cmds


7 
‰om
 
sys
 
imp‹t
 
¨gv


9 
‰om
 
AISA_AVMHñp
 
imp‹t
 *

11 
˛ass
 
	$AVM_MDRAID
():

14 
def
 
	$__öô__
(
£lf
):

15 
£lf
.
d©a
 = []

16 
°r
 = 'Cœs†' + 
__«me__
 + ' defined'

17 
	$LOG
(
DEBUG
, 
°r
)

19 
def
 
	$as£mbÀ
(
£lf
):

20 
£lf
.
	$°¨t
()

22 
def
 
	$°¨t_V2
(
£lf
):

23 
disks
 = 
	$°r
(
AISA_DATA_DISKS
)

24 
cmd°r
 = "mdadm --as£mbÀ /dev/md0 "+
disks


25  
ShñlCmd
.
	$runo
(
cmd°r
)

27 
def
 
	$°¨t_d©a_disks
(
£lf
):

28 
disks
 = 
	$°r
(
AISA_DATA_DISKS
)

29 
cmd°r
 = "mdadm --assemble --scan"

30 
	`LOG
(
INFO
, "Starting MDRaid Array")

31 
ªtobj
 = 
ShñlCmd
.
	$runo
(
cmd°r
)

32 
ªtobj
.
	$Log
()

33 
ªtobj
.
ªt
 == 0:

34 
r
 = 
£lf
.
	$gëSize
()

35 
s
 = 
£lf
.
	$gëSizeBlocks
()

36 
	`LOG
(
INFO
, "MDRaid Aºay Size: "+
r
.
ªt°r
+" Byã†OR "+
s
.retstr+" Blocks/Sectors")

37  
SUCCESS


39  
ªtobj
.
ªt


41 
def
 
	$°¨t_mëad©a_disks
(
£lf
):

42 
disks
 = 
	$°r
(
AISA_METADATA_DISKS
)

43 
cmd°r
 = "mdadm --assemble --scan"

44 
	`LOG
(
INFO
, "Starting MDRaid Array")

45 
ªtobj
 = 
ShñlCmd
.
	$runo
(
cmd°r
)

46 
ªtobj
.
	$Log
()

47 
ªtobj
.
ªt
 == 0:

48 
r
 = 
£lf
.
	$gëSize
()

49 
s
 = 
£lf
.
	$gëSizeBlocks
()

50 
	`LOG
(
INFO
, "MDRaid Aºay Size: "+
r
.
ªt°r
+" Byã†OR "+
s
.retstr+" Blocks/Sectors")

51  
SUCCESS


53  
ªtobj
.
ªt


56 
def
 
	$°¨t
(
£lf
):

57 
disks
 = 
	$°r
(
AISA_DATA_DISKS
)

58 
cmd°r
 = "mdadm --assemble --scan"

59 
	`LOG
(
INFO
, "Starting MDRaid Array")

60 
ªtobj
 = 
ShñlCmd
.
	$runo
(
cmd°r
)

61 
ªtobj
.
	$Log
()

62 
ªtobj
.
ªt
 == 0:

63 
r
 = 
£lf
.
	$gëSize
()

64 
s
 = 
£lf
.
	$gëSizeBlocks
()

65 
	`LOG
(
INFO
, "MDRaid Aºay Size: "+
r
.
ªt°r
+" Byã†OR "+
s
.retstr+" Blocks/Sectors")

66  
SUCCESS


68  
ªtobj
.
ªt


70 
def
 
	$°›
(
£lf
):

71 
cmd°r
 = "mdadm --vîbo£ --°› "+ 
AISA_DATA_DISKS_ARRAY


72 
	`LOG
(
INFO
, "Stopping MDRaid Array")

73 
ªtobj
 = 
ShñlCmd
.
	$runo
(
cmd°r
)

74 
ªtobj
.
	$Log
()

75 
ªtobj
.
ªt
 == 0:

76 #ªtu∫ 
SUCCESS


77 
∑ss


79  
FAILURE


81  
	$°›_mëad©a_disks
()

83 
def
 
	$°›_mëad©a_disks
(
£lf
):

84 
cmd°r
 = "mdadm --vîbo£ --°› "+ 
AISA_METADATA_DISKS_ARRAY


85 
	`LOG
(
INFO
, "Stopping MDRaid Array for Metadata Disks")

86 
ªtobj
 = 
ShñlCmd
.
	$runo
(
cmd°r
)

87 
ªtobj
.
	$Log
()

88 
ªtobj
.
ªt
 == 0:

89  
SUCCESS


91  
FAILURE


93 
def
 
	$°›2
(
£lf
):

94 
cmd°r
 = "mdadm --verbose --stop /dev/md0"

95 
	`LOG
(
INFO
, "Stopping MDRaid Array")

96  
ShñlCmd
.
	$runo
(
cmd°r
)

98 
def
 
	$°©
(
£lf
):

99 
cmd°r
 = "cat /proc/mdstat"

100  
ShñlCmd
.
	$runo
(
cmd°r
)

102 
def
 
	$ßve
(
£lf
):

103 
£lf
.
	$ßve_c⁄fig
()

105 
def
 
	$ßve_c⁄fig
(
£lf
):

106 
cmd°r
 = "mdadm --verbose --detail --scan >> /etc/mdadm/mdadm.conf"

107  
ShñlCmd
.
	$run
(
cmd°r
)

109 
def
 
	$m⁄ô‹
(
£lf
):

110 
cmd°r
 = "mdadm --monitor"

111  
ShñlCmd
.
	$runo
(
cmd°r
)

113 #Thò
wûl
 
¸óã
 
RAID
-6 
	`¨øy
 (
Möimum
 6 
disks
 
ªquúed
)

114 
def
 
	$¸óã_d©a_¨øy
(
£lf
):

115 
˙t
 = 
	$°r
(
AISA_DATA_DISKS_CNT
)

116 
disks
 = 
	$°r
(
AISA_DATA_DISKS
)

117 
	`LOG
(
INFO
, "Creating MDRaid Array from Data Disks ofÑaidlevel 6 (RAID6)")

118 
cmd°r
 = "mdadm --¸óã "+
AISA_DATA_DISKS_ARRAY
 +" --mëad©®1.2 --Àvñ=6 --øid-devi˚s="+
˙t
+" "+
disks


119 #cmd°∏"mdadm --¸óã /dev/md0 --f‹˚ --mëad©®1.2 --Àvñ=0 --øid-devi˚s="+
˙t
+" "+
disks


120  
ShñlCmd
.
	$runo
(
cmd°r
)

122 #Thò
wûl
 
¸óã
 
RAID
-1 
i
.
e
. 
múr‹ed
 
disk
 
	`¨øy
 (
Möimum
 2 
disks
 
ªquúed
)

123 
def
 
	$¸óã_mëad©a_¨øy
(
£lf
):

124 
˙t
 = 
	$°r
(
AISA_METADATA_DISKS_CNT
)

125 
disks
 = 
	$°r
(
AISA_METADATA_DISKS
)

126 
	`LOG
(
INFO
, "Creating MDRaid Array from Metedata Disks of RAID-1 i.e. Mirroring")

127 
cmd°r
 = "mdadm --¸óã "+
AISA_METADATA_DISKS_ARRAY
+" --mëad©®1.2 --Àvñ=1 --øid-devi˚s="+
˙t
+" "+
disks


128 #cmd°∏"mdadm --¸óã /dev/md0 --f‹˚ --mëad©®1.2 --Àvñ=0 --øid-devi˚s="+
˙t
+" "+
disks


129  
ShñlCmd
.
	$runo
(
cmd°r
)

131 #Thò
wûl
 
¸óã
 
Löór
 
disk
 
	`¨øy
 (
Möimum
 1 disk 
ªquúed
)

132 
def
 
	$¸óã_löór_mëad©a_¨øy
(
£lf
):

133 
˙t
 = 
	$°r
(
AISA_METADATA_DISKS_CNT
)

134 
disks
 = 
	$°r
(
AISA_METADATA_DISKS
)

135 
	`LOG
(
INFO
, "Creating MDRaid Array from Metedata Disks of RAID-1 i.e. Mirroring")

136 
cmd°r
 = "mdadm --¸óã "+
AISA_METADATA_DISKS_ARRAY
+" --mëad©®1.2 --Àvñˆöó∏--øid-devi˚s="+
˙t
+" "+
disks


137 #cmd°∏"mdadm --¸óã /dev/md0 --f‹˚ --mëad©®1.2 --Àvñ=0 --øid-devi˚s="+
˙t
+" "+
disks


138  
ShñlCmd
.
	$runo
(
cmd°r
)

141 
def
 
	$gëSize
(
£lf
):

142 
cmd°r
 = "blockdev --getsize64 /dev/md0"

143  
ShñlCmd
.
	$runo
(
cmd°r
)

145 
def
 
	$gëSizeBlocks
(
£lf
):

146 
cmd°r
 = "blockdev --getsz /dev/md0"

147  
ShñlCmd
.
	`runo
(
cmd°r
)

	@AISA_Utils.py

1 
‰om
 
__futuª__
 
imp‹t
 
¥öt_fun˘i⁄


2 
imp‹t
 
os


3 
imp‹t
 
sys


4 
imp‹t
 
sub¥o˚ss


5 
imp‹t
 
loggög


6 
imp‹t
 
	gloggög
.
h™dÀrs


7 
imp‹t
 
time


8 
imp‹t
 
f˙é


9 
imp‹t
 

10 
imp‹t
 
f˙é


11 
‰om
 
	gos
.
∑th
 
imp‹t
 
ba£«me


13 
‰om
 
sub¥o˚ss
 
imp‹t
 *

14 
‰om
 
AISA_DeÁu…s
 
imp‹t
 *

17 
def
 
	$Sy¶og
(
°r
):

18 
loggî
 = 
loggög
.
	`gëLoggî
('MyLogger')

19 
loggî
.
	$£tLevñ
(
loggög
.
DEBUG
)

20 
h™dÀr
 = 
loggög
.
h™dÀrs
.
	`SysLogH™dÀr
(
addªss
 = '/dev/log')

21 
loggî
.
	$addH™dÀr
(
h™dÀr
)

22 
loggî
.
	$¸ôiˇl
(
°r
)

24 
˛ass
 
	$Utûs
():

25 
def
 
	$__öô__
(
£lf
):

26 
£lf
.
d©a
 = []

27 #¥öt('Cœs†' + 
__«me__
 + ' defined')

29 @
°©icmëhod


30 
def
 
	$cuºítTime
():

31 
imp‹t
 
time


32  
time
.
	`°r·ime
("%X")

34 
def
 
	$LOG
(
lvl
, 
°ørg
):

35 #¥öt("AVERMA:lvl="+
	`°r
(
lvl
)+" LOG_LEVEL:"+°r(
LOG_LEVEL
))

36 
lvl
 <
LOG_LEVEL
:

37 
lvl°r
 = 
LOG_DICT
[ 
lvl
 ]

38 
	`¥öt
("[" + 
Utûs
.
	`cuºítTime
(Ë+ "][" + 
lvl°r
 + "] "+ 
°ørg
)

39 #Sy¶og(
°r
)

41 
def
 
	$Log
(
lvl
, 
°r
):

42 
	$LOG
(
lvl
, 
°r
)

44 
def
 
	$log
(
lvl
, 
°r
):

45 
	$LOG
(
lvl
, 
°r
)

47 
def
 
	$LOGR
(
°ørg
):

48 
	$¥öt
(
°ørg
)

50 
def
 
	$LOGRAW
(
°ørg
):

51 
	$¥öt
(
°ørg
)

53 
˛ass
 
	$Rëu∫Info
():

54 
def
 
	$__öô__
(
£lf
, 
ªt
, 
ªt°r
):

55 
£lf
.
ªt
 =Ñet

56 
£lf
.
ªtcode
 = 
ªt


57 
£lf
.
ªt°r
 =Ñë°r.
	$°rù
()

59 
def
 
	$LOGRAW
(
£lf
):

60 
	$¥öt
(
£lf
.
ªt°r
)

62 
def
 
	$Log
(
£lf
):

63 
£lf
.
ªt
 == 0:

64 
	`LOG
(
DEBUG
, ' CMD Rëu∫ VÆuê : '+ 
	$°r
(
£lf
.
ªt
))

65 
	`LOG
(
DEBUG
, ' CMD OuçuàSåög : '+ 
£lf
.
ªt°r
)

67 
	`LOG
(
DEBUG
, ' CMD Rëu∫ VÆuê : '+ 
	$°r
(
£lf
.
ªt
))

68 
	`LOG
(
DEBUG
, ' CMD OuçuàSåög : '+ 
£lf
.
ªt°r
)

70 
def
 
	$log
(
£lf
):

71 
£lf
.
	$Log
()

73 
def
 
	$LOG
(
£lf
):

74 
£lf
.
	$Log
()

76 
˛ass
 
	$ShñlCmd
():

77 
def
 
	$__öô__
(
£lf
):

78 
£lf
.
d©a
 = []

79 #¥öt('Cœs†' + 
__«me__
 + ' defined')

81 @
°©icmëhod


82 
def
 
	$run
(
cmd°r
):

83 
	`LOG
(
DEBUG
," CMD : "+ 
cmd°r
)

84  
os
.
	`sy°em
(
cmd°r
)

86 @
°©icmëhod


87 
def
 
	$runo
(
cmd°r
):

88 
	`LOG
(
DEBUG
," CMD: "+ 
cmd°r
)

89 
¥oc
 = 
sub¥o˚ss
.
	$P›í
(
cmd°r
, 
shñl
=
True
, 
°dout
=
sub¥o˚ss
.
PIPE
, 
°dîr
=subprocess.PIPE)

90 
out°r
 = 
¥oc
.
°dout
.
	$ªad
()

91 
out°r
 = out°∏+ 
¥oc
.
°dîr
.
	$ªad
()

92 
ªt
 = 
¥oc
.
	$waô
()

93 
ªtobj
 = 
	$Rëu∫Info
(
ªt
, 
out°r
)

94  
ªtobj


96 @
°©icmëhod


97 
def
 
	$ruƒ
(
cmd°r
):

98 
¥oc
 = 
sub¥o˚ss
.
	$P›í
(
cmd°r
, 
shñl
=
True
, 
°dout
=
sub¥o˚ss
.
PIPE
, 
°dîr
=subprocess.PIPE)

99 
out°r
 = 
¥oc
.
°dout
.
	$ªad
()

100 
out°r
 = out°∏+ 
¥oc
.
°dîr
.
	$ªad
()

101 
ªt
 = 
¥oc
.
	$waô
()

102 
ªtobj
 = 
	$Rëu∫Info
(
ªt
, 
out°r
)

103  
ªtobj


105 @
°©icmëhod


106 
def
 
	$ruƒ
(
cmd°r
): #Raw 
run
 
i
.
e
. 
wôhout
 
™y
 
debug
 
mesßges


107 
¥oc
 = 
sub¥o˚ss
.
	$P›í
(
cmd°r
, 
shñl
=
True
, 
°dout
=
sub¥o˚ss
.
PIPE
, 
°dîr
=subprocess.PIPE)

108 
out°r
 = 
¥oc
.
°dout
.
	$ªad
()

109 
out°r
 = out°∏+ 
¥oc
.
°dîr
.
	$ªad
()

110 
ªt
 = 
¥oc
.
	$waô
()

111 
ªtobj
 = 
	$Rëu∫Info
(
ªt
, 
out°r
)

112  
ªtobj


114 @
°©icmëhod


115 
def
 
	$lﬂd_moduÀ
(
moduÀ
):

116 
k«meba£
 = 
ShñlCmd
.
	$ba£«me
(
moduÀ
)

117 
k«me
 = 
os
.
∑th
.
	`•lôext
(
k«meba£
)[0]

119 
cmd°r
 = "˝ " + 
moduÀ
 + " /lib/modules/`uname -r`/extra/ "

120 
ªtobj
 = 
ShñlCmd
.
	$runo
(
cmd°r
)

121 
ªtobj
.
	$LOG
()

122 
ªtobj
.
ªt
 == 0:

123 
cmd°r
 = "depmod -a "

124 
ªtobj
 = 
ShñlCmd
.
	$runo
(
cmd°r
)

125 
ªtobj
.
	$LOG
()

126 
ªtobj
.
ªt
 == 0:

127 
cmd°r
 = "/u§/sbö/mod¥obê" + 
k«me
 + " > /dev/null 2>&1"

128 
ªtobj
 = 
ShñlCmd
.
	$runo
(
cmd°r
)

129 
ªtobj
.
	$LOG
()

130  
SUCCESS


132 @
°©icmëhod


133 
def
 
	$ösmod
(
moduÀ
):

134 
cmd°r
 = "ösmod " + 
moduÀ
 + " > /dev/null 2>&1"

135  
ShñlCmd
.
	`run
(
cmd°r
)

137 @
°©icmëhod


138 
def
 
	$ªmove_moduÀ
(
moduÀ
):

139 
k«meba£
 = 
ShñlCmd
.
	$ba£«me
(
moduÀ
)

140 
cmd°r
 = "rmmod " + 
k«meba£
 + " > /dev/null 2>&1"

141  
ShñlCmd
.
	`runo
(
cmd°r
)

143 @
°©icmëhod


144 
def
 
	$d©e
():

145  
ShñlCmd
.
	`run
('date')

147 @
°©icmëhod


148 
def
 
	$ba£«me
(
∑th
):

149  
os
.
∑th
.
	$ba£«me
(
∑th
)

151 
˛ass
 
	$FûeUtûs
():

152 
def
 
	$__öô__
(
£lf
):

153 
£lf
.
d©a
 = []

154 #¥öt('Cœs†' + 
__«me__
 + ' defined')

156 @
°©icmëhod


157 
def
 
	$isFûe
(
‚ame
):

158  
os
.
∑th
.
	`isfûe
(
‚ame
)

160 @
°©icmëhod


161 
def
 
	$isDú
(
‚ame
):

162  
os
.
∑th
.
	$exi°s
(
‚ame
)

165 
def
 
	$gëPackageP©h
():

166 
	$¥öt
 (
sys
.
∑th
)

167  
sys
.
∑th


169 
def
 
	$addP©h
(
¨g_∑th
):

170 
sys
.
∑th
.
	$≠≥nd
(
¨g_∑th
)

172 
def
 
	$gëSizeByãs
(
devi˚
):

173 
cmd°r
 = "blockdev --gësize64 " + 
devi˚
 #Rëu∫ 
size
 
ö
 
byãs


174  
ShñlCmd
.
	$runo
(
cmd°r
)

176 
def
 
	$gëSizeBlocks
(
devi˚
):

177 
cmd°r
 = "blockdev --gësz " + 
devi˚
 #Rëu∫ 
size
 
ö
 512 
byãs
 
block


178  
ShñlCmd
.
	$runo
(
cmd°r
)

180 
def
 
	$gëUUID
():

181 
cmd°r
 = "cat /proc/sys/kernel/random/uuid"

182  
ShñlCmd
.
	$runo
(
cmd°r
)

184 
def
 
	$gëHex
(
ch
):

185  
ch
.
	`ícode
('hex')

187 
def
 
	$Trim
(
¨g_°r
):

188  
¨g_°r
.
	$°rù
()

190 
def
 
	$åim
(
¨g_°r
):

191  
	$Trim
(
¨g_°r
)

193 
def
 
	$gëCuºítD©e
():

194  
time
.
	`°r·ime
("%d/%m/%Y")

196 
def
 
	$gëCuºítTime
():

197  
time
.
	`°r·ime
("%H:%M:%S")

199 
def
 
	$gëCuºítTimeAndD©e
():

200  (
	`gëCuºítTime
(Ë+ " " + 
	$gëCuºítD©e
())

202 
def
 
	$gëCuºítD©eAndTime
():

203  (
	`gëCuºítD©e
(Ë+ " " + 
	$gëCuºítTime
())

205 
def
 
	$gëCuºítD©eRaw
():

206  
time
.
	`°r·ime
("%d%m%Y")

208 
def
 
	$gëCuºítTimeRaw
():

209  
time
.
	`°r·ime
("%H%M%S")

211 #I≈uà
is
 
Såög
 
but
 
fun˘i⁄
 i†
ˇ∑bÀ
 
of
 
h™dlög
 
°rög
 
™d
 
öãgî
 
bŸh


212 #Ouçuà
is
 
Såög


213 
def
 
	$c⁄vît_byãs_to_blocks
(
¨g_size_ö_byãs
):

214 
BS
 = 512

215 #¥öà(
	`ty≥
(
¨g_size_ö_byãs
))

216 i‡(
	`ty≥
(
¨g_size_ö_byãs
) == ):

217 
size_ö_byãs
 = (
¨g_size_ö_byãs
)

218 #LOG(
DEBUG
, "Sizê" + 
	`°r
(
¨g_size_ö_byãs
) + " in integer format")

220 i‡(
	`ty≥
(
¨g_size_ö_byãs
Ë=
°r
):

221 
size_ö_byãs
 = ((
¨g_size_ö_byãs
))

222 #LOG(
DEBUG
, "Sizê" + 
¨g_size_ö_byãs
 + " in string format")

224 
size_ö_blocks
 = (
size_ö_byãs
 / 
BS
)

225  
	$°r
(
size_ö_blocks
)

227 #I≈uà
is
 
Såög
 
but
 
fun˘i⁄
 i†
ˇ∑bÀ
 
of
 
h™dlög
 
°rög
 
™d
 
öãgî
 
bŸh


228 #Ouçuà
is
 
Såög


229 
def
 
	$c⁄vît_byãs_to_kb
(
¨g_size_ö_byãs
):

230 
KB
 = 1024

231 #¥öà(
	`ty≥
(
¨g_size_ö_byãs
))

232 i‡(
	`ty≥
(
¨g_size_ö_byãs
) == ):

233 
size_ö_byãs
 = (
¨g_size_ö_byãs
)

234 #LOG(
DEBUG
, "Sizê" + 
	`°r
(
¨g_size_ö_byãs
) + " in integer format")

236 i‡(
	`ty≥
(
¨g_size_ö_byãs
Ë=
°r
):

237 
size_ö_byãs
 = ((
¨g_size_ö_byãs
))

238 #LOG(
DEBUG
, "Sizê" + 
¨g_size_ö_byãs
 + " in string format")

240 
size_ö_kb
 = (
size_ö_byãs
 / 
KB
)

241  
	$°r
(
size_ö_kb
)

243 #I≈uà
is
 
Såög
 
but
 
fun˘i⁄
 i†
ˇ∑bÀ
 
of
 
h™dlög
 
°rög
 
™d
 
öãgî
 
bŸh


244 #Ouçuà
is
 
Såög


245 
def
 
	$c⁄vît_byãs_to_mb
(
¨g_size_ö_byãs
):

246 
MB
 = 1024 * 1024

247 #¥öà(
	`ty≥
(
¨g_size_ö_byãs
))

248 i‡(
	`ty≥
(
¨g_size_ö_byãs
) == ):

249 
size_ö_byãs
 = (
¨g_size_ö_byãs
)

250 #LOG(
DEBUG
, "Sizê" + 
	`°r
(
¨g_size_ö_byãs
) + " in integer format")

252 i‡(
	`ty≥
(
¨g_size_ö_byãs
Ë=
°r
):

253 
size_ö_byãs
 = ((
¨g_size_ö_byãs
))

254 #LOG(
DEBUG
, "Sizê" + 
¨g_size_ö_byãs
 + " in string format")

256 
size_ö_mb
 = (
size_ö_byãs
 / 
MB
)

257  
	$°r
(
size_ö_mb
)

259 #I≈uà
is
 
Såög
 
but
 
fun˘i⁄
 i†
ˇ∑bÀ
 
of
 
h™dlög
 
°rög
 
™d
 
öãgî
 
bŸh


260 #Ouçuà
is
 
Såög


261 
def
 
	$c⁄vît_byãs_to_gb
(
¨g_size_ö_byãs
):

262 
GB
 = 1024 * 1024 * 1024

263 #¥öà(
	`ty≥
(
¨g_size_ö_byãs
))

264 i‡(
	`ty≥
(
¨g_size_ö_byãs
) == ):

265 
size_ö_byãs
 = (
¨g_size_ö_byãs
)

266 #LOG(
DEBUG
, "Sizê" + 
	`°r
(
¨g_size_ö_byãs
) + " in integer format")

268 i‡(
	`ty≥
(
¨g_size_ö_byãs
Ë=
°r
):

269 
size_ö_byãs
 = ((
¨g_size_ö_byãs
))

270 #LOG(
DEBUG
, "Sizê" + 
¨g_size_ö_byãs
 + " in string format")

272 
size_ö_gb
 = (
size_ö_byãs
 / 
GB
)

273  
	$°r
(
size_ö_gb
)

275 #I≈uà
is
 
Såög
 
but
 
fun˘i⁄
 i†
ˇ∑bÀ
 
of
 
h™dlög
 
°rög
 
™d
 
öãgî
 
bŸh


276 #Ouçuà
is
 
Såög


277 
def
 
	$c⁄vît_gb_to_blocks
(
¨g_size_ö_gb
):

278 
GB
 = 1024 * 1024 * 1024

279 
BS
 = 512

280 #¥öà(
	`ty≥
(
¨g_size_ö_gb
))

281 i‡(
	`ty≥
(
¨g_size_ö_gb
) == ):

282 
size_ö_byãs
 = (
¨g_size_ö_gb
 * 
GB
)

283 #LOG(
DEBUG
, "Sizê" + 
	`°r
(
¨g_size_ö_gb
) + " in integer format")

285 i‡(
	`ty≥
(
¨g_size_ö_gb
Ë=
°r
):

286 
size_ö_byãs
 = ((
¨g_size_ö_gb
Ë* 
GB
)

287 #LOG(
DEBUG
, "Sizê" + 
¨g_size_ö_gb
 + " in string format")

289 
size_ö_blocks
 = (
size_ö_byãs
 / 
BS
)

290  
	$°r
(
size_ö_blocks
)

292 #I≈uà
is
 
Såög
 
but
 
fun˘i⁄
 i†
ˇ∑bÀ
 
of
 
h™dlög
 
°rög
 
™d
 
öãgî
 
bŸh


293 #Ouçuà
is
 
Såög


294 
def
 
	$c⁄vît_mb_to_blocks
(
¨g_size_ö_mb
):

295 
MB
 = 1024 * 1024

296 
BS
 = 512

297 #¥öà(
	`ty≥
(
¨g_size_ö_mb
))

298 i‡(
	`ty≥
(
¨g_size_ö_mb
) == ):

299 
size_ö_byãs
 = (
¨g_size_ö_mb
 * 
MB
)

300 #LOG(
DEBUG
, "Sizê" + 
	`°r
(
¨g_size_ö_mb
) + " in integer format")

302 i‡(
	`ty≥
(
¨g_size_ö_mb
Ë=
°r
):

303 
size_ö_byãs
 = ((
¨g_size_ö_mb
Ë* 
MB
)

304 #LOG(
DEBUG
, "Sizê" + 
¨g_size_ö_mb
 + " in string format")

306 
size_ö_blocks
 = (
size_ö_byãs
 / 
BS
)

307  
	$°r
(
size_ö_blocks
)

309 
def
 
	$gë_block_devi˚_size
(
devi˚_«me
):

310 ##
f
 = 
	`›í
(
devi˚_«me
)

311 #wôh 
	`›í
(
devi˚_«me
, 'r'Ë
as
 
fd
:

312 ##
f˙é
.
	`io˘l
(
fd
, f˙é.
BLKGETSIZE
, &
numblocks
)

313 #b†
f˙é
.
	`io˘l
(
fd
, f˙é.
BLKGETSIZE64
)

315 #¥öt(
bs
)

316 
∑ss


	@
1
.
1
/usr/include
10
153
AISA_AVMConfig.py
AISA_AVMCore.py
AISA_AVMGlobals.py
AISA_AVMHelp.py
AISA_Avm.py
AISA_Defaults.py
AISA_Error.py
AISA_Lio.py
AISA_MDRaid.py
AISA_Utils.py
