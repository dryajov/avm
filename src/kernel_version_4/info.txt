FILE: include/linux/blk_types.h

/*
 * Block error status values.  See block/blk-core:blk_errors for the details.
 * Alpha cannot write a byte atomically, so we need to use 32-bit value.
 */
#if defined(CONFIG_ALPHA) && !defined(__alpha_bwx__)
typedef u32 __bitwise blk_status_t;
#else
typedef u8 __bitwise blk_status_t;
#endif


#define BLK_STS_OK 0
#define BLK_STS_NOTSUPP     ((__force blk_status_t)1)
#define BLK_STS_TIMEOUT     ((__force blk_status_t)2)
#define BLK_STS_NOSPC       ((__force blk_status_t)3)
#define BLK_STS_TRANSPORT   ((__force blk_status_t)4)
#define BLK_STS_TARGET      ((__force blk_status_t)5)
#define BLK_STS_NEXUS       ((__force blk_status_t)6)
#define BLK_STS_MEDIUM      ((__force blk_status_t)7)
#define BLK_STS_PROTECTION  ((__force blk_status_t)8)
#define BLK_STS_RESOURCE    ((__force blk_status_t)9)
#define BLK_STS_IOERR       ((__force blk_status_t)10)

/* hack for device mapper, don't use elsewhere: */
#define BLK_STS_DM_REQUEUE    ((__force blk_status_t)11)

#define BLK_STS_AGAIN       ((__force blk_status_t)12)

enum req_opf {
    /* read sectors from the device */
    REQ_OP_READ     = 0,
    /* write sectors to the device */
    REQ_OP_WRITE        = 1,
    /* flush the volatile write cache */
    REQ_OP_FLUSH        = 2,
    /* discard sectors */ 
    REQ_OP_DISCARD      = 3,
    /* get zone information */
    REQ_OP_ZONE_REPORT  = 4,
    /* securely erase sectors */
    REQ_OP_SECURE_ERASE = 5,
    /* seset a zone write pointer */
    REQ_OP_ZONE_RESET   = 6,
    /* write the same sector many times */
    REQ_OP_WRITE_SAME   = 7,
    /* write the zero filled sector many times */
    REQ_OP_WRITE_ZEROES = 9,

    /* SCSI passthrough using struct scsi_request */
    REQ_OP_SCSI_IN      = 32,
    REQ_OP_SCSI_OUT     = 33,
    /* Driver private requests */
    REQ_OP_DRV_IN       = 34,
    REQ_OP_DRV_OUT      = 35,

    REQ_OP_LAST,
};

static inline bool op_is_write(unsigned int op)
{
    return (op & 1);
}



FILE: block/blk-core.c

static const struct {
    int     errno;
    const char  *name;
} blk_errors[] = {
    [BLK_STS_OK]        = { 0,      "" },
    [BLK_STS_NOTSUPP]   = { -EOPNOTSUPP, "operation not supported" },
    [BLK_STS_TIMEOUT]   = { -ETIMEDOUT, "timeout" },
    [BLK_STS_NOSPC]     = { -ENOSPC,    "critical space allocation" },
    [BLK_STS_TRANSPORT] = { -ENOLINK,   "recoverable transport" },
    [BLK_STS_TARGET]    = { -EREMOTEIO, "critical target" },
    [BLK_STS_NEXUS]     = { -EBADE, "critical nexus" },
    [BLK_STS_MEDIUM]    = { -ENODATA,   "critical medium" },
    [BLK_STS_PROTECTION]    = { -EILSEQ,    "protection" },
    [BLK_STS_RESOURCE]  = { -ENOMEM,    "kernel resource" },
    [BLK_STS_AGAIN]     = { -EAGAIN,    "nonblocking retry" },

    /* device mapper special case, should not leak out: */
    [BLK_STS_DM_REQUEUE]    = { -EREMCHG, "dm internal retry" },

    /* everything else not covered above: */
    [BLK_STS_IOERR]     = { -EIO,   "I/O" },
};

