
alignment_engine_sysfs_functions.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <avm_get_align_counters>:

extern PSUPERBLOCK 	superblock;

extern CHAR avm_sysfs_entry_get_align_counters[DZ_SYSFS_PAGE_SIZE];
INT avm_get_align_counters(CHAR *buf)
{
   0:	e8 00 00 00 00       	callq  5 <avm_get_align_counters+0x5>
	UINT wpending_iorequests;
	UINT wpending_threads;
	UINT wpending_jobs;

	CHAR *ptr = (CHAR *)avm_sysfs_entry_get_align_counters;
	memset(avm_sysfs_entry_get_align_counters, 0, DZ_SYSFS_PAGE_SIZE);
   5:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
   c:	ba 00 10 00 00       	mov    $0x1000,%edx
  11:	40 f6 c7 01          	test   $0x1,%dil
  15:	0f 85 75 05 00 00    	jne    590 <avm_get_align_counters+0x590>
  1b:	40 f6 c7 02          	test   $0x2,%dil
  1f:	0f 85 83 05 00 00    	jne    5a8 <avm_get_align_counters+0x5a8>
  25:	40 f6 c7 04          	test   $0x4,%dil
  29:	0f 85 49 05 00 00    	jne    578 <avm_get_align_counters+0x578>
  2f:	89 d1                	mov    %edx,%ecx
  31:	31 c0                	xor    %eax,%eax
  33:	c1 e9 03             	shr    $0x3,%ecx
  36:	f6 c2 04             	test   $0x4,%dl
  39:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  3c:	74 0a                	je     48 <avm_get_align_counters+0x48>
  3e:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
  44:	48 83 c7 04          	add    $0x4,%rdi
  48:	f6 c2 02             	test   $0x2,%dl
  4b:	74 0c                	je     59 <avm_get_align_counters+0x59>
  4d:	45 31 c0             	xor    %r8d,%r8d
  50:	48 83 c7 02          	add    $0x2,%rdi
  54:	66 44 89 47 fe       	mov    %r8w,-0x2(%rdi)
  59:	83 e2 01             	and    $0x1,%edx
  5c:	74 03                	je     61 <avm_get_align_counters+0x61>
  5e:	c6 07 00             	movb   $0x0,(%rdi)
	memcpy(ptr, "\n", 1);
	ptr += 1;
	ptr += sprintf(ptr, "==============================================\n");
  61:	48 b8 3d 3d 3d 3d 3d 	movabs $0x3d3d3d3d3d3d3d3d,%rax
  68:	3d 3d 3d 
	ptr += sprintf(ptr, "ALIGNMENT ENGINE COUNTERS\n");
	ptr += sprintf(ptr, "==============================================\n");
	if (!superblock) {
  6b:	48 83 3d 00 00 00 00 	cmpq   $0x0,0x0(%rip)        # 73 <avm_get_align_counters+0x73>
  72:	00 
	CHAR *ptr = (CHAR *)avm_sysfs_entry_get_align_counters;
	memset(avm_sysfs_entry_get_align_counters, 0, DZ_SYSFS_PAGE_SIZE);
	memcpy(ptr, "\n", 1);
	ptr += 1;
	ptr += sprintf(ptr, "==============================================\n");
	ptr += sprintf(ptr, "ALIGNMENT ENGINE COUNTERS\n");
  73:	be 53 0a 00 00       	mov    $0xa53,%esi

	CHAR *ptr = (CHAR *)avm_sysfs_entry_get_align_counters;
	memset(avm_sysfs_entry_get_align_counters, 0, DZ_SYSFS_PAGE_SIZE);
	memcpy(ptr, "\n", 1);
	ptr += 1;
	ptr += sprintf(ptr, "==============================================\n");
  78:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 7f <avm_get_align_counters+0x7f>
  7f:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 86 <avm_get_align_counters+0x86>
  86:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 8d <avm_get_align_counters+0x8d>
  8d:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 94 <avm_get_align_counters+0x94>
  94:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 9b <avm_get_align_counters+0x9b>
  9b:	48 b8 3d 3d 3d 3d 3d 	movabs $0xa3d3d3d3d3d3d,%rax
  a2:	3d 0a 00 
	UINT wpending_threads;
	UINT wpending_jobs;

	CHAR *ptr = (CHAR *)avm_sysfs_entry_get_align_counters;
	memset(avm_sysfs_entry_get_align_counters, 0, DZ_SYSFS_PAGE_SIZE);
	memcpy(ptr, "\n", 1);
  a5:	c6 05 00 00 00 00 0a 	movb   $0xa,0x0(%rip)        # ac <avm_get_align_counters+0xac>
	ptr += 1;
	ptr += sprintf(ptr, "==============================================\n");
  ac:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # b3 <avm_get_align_counters+0xb3>
	ptr += sprintf(ptr, "ALIGNMENT ENGINE COUNTERS\n");
  b3:	48 b8 41 4c 49 47 4e 	movabs $0x4e454d4e47494c41,%rax
  ba:	4d 45 4e 
  bd:	66 89 35 00 00 00 00 	mov    %si,0x0(%rip)        # c4 <avm_get_align_counters+0xc4>
  c4:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # cb <avm_get_align_counters+0xcb>
  cb:	48 b8 54 20 45 4e 47 	movabs $0x454e49474e452054,%rax
  d2:	49 4e 45 
  d5:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # dc <avm_get_align_counters+0xdc>
  dc:	48 b8 20 43 4f 55 4e 	movabs $0x5245544e554f4320,%rax
  e3:	54 45 52 
  e6:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # ed <avm_get_align_counters+0xed>
	ptr += sprintf(ptr, "==============================================\n");
  ed:	48 b8 3d 3d 3d 3d 3d 	movabs $0x3d3d3d3d3d3d3d3d,%rax
  f4:	3d 3d 3d 
  f7:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # fe <avm_get_align_counters+0xfe>
  fe:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 105 <avm_get_align_counters+0x105>
 105:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 10c <avm_get_align_counters+0x10c>
 10c:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 113 <avm_get_align_counters+0x113>
 113:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 11a <avm_get_align_counters+0x11a>
 11a:	48 b8 3d 3d 3d 3d 3d 	movabs $0xa3d3d3d3d3d3d,%rax
 121:	3d 0a 00 
 124:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 12b <avm_get_align_counters+0x12b>
	if (!superblock) {
 12b:	0f 84 8f 04 00 00    	je     5c0 <avm_get_align_counters+0x5c0>
		ptr += sprintf(ptr, "Superblock is NULL");
		return 0;
	}

	if (dz_switch_alignment_engine == DZ_DISABLED) {
 131:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 137 <avm_get_align_counters+0x137>
 137:	85 d2                	test   %edx,%edx
 139:	0f 84 f1 03 00 00    	je     530 <avm_get_align_counters+0x530>

extern PSUPERBLOCK 	superblock;

extern CHAR avm_sysfs_entry_get_align_counters[DZ_SYSFS_PAGE_SIZE];
INT avm_get_align_counters(CHAR *buf)
{
 13f:	55                   	push   %rbp
 140:	48 89 e5             	mov    %rsp,%rbp
 143:	41 57                	push   %r15
 145:	41 56                	push   %r14
 147:	41 55                	push   %r13
 149:	41 54                	push   %r12
 14b:	53                   	push   %rbx
 14c:	48 81 ec 10 02 00 00 	sub    $0x210,%rsp
	if (dz_switch_alignment_engine == DZ_DISABLED) {
		ptr += sprintf(ptr, "ALIGNMENT ENGINE DISABLED");
		return 0;
	}

	rpending_iorequests	=  atomic_read(&align_read_thread_pool->ioq_num_ios);
 153:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 15a <avm_get_align_counters+0x15a>
 *
 * Atomically reads the value of @v.
 */
static inline int atomic_read(const atomic_t *v)
{
	return (*(volatile int *)&(v)->counter);
 15a:	8b 98 10 01 00 00    	mov    0x110(%rax),%ebx
 160:	8b 70 28             	mov    0x28(%rax),%esi
 163:	8b 80 b0 00 00 00    	mov    0xb0(%rax),%eax
 169:	89 5d d0             	mov    %ebx,-0x30(%rbp)
 16c:	89 75 cc             	mov    %esi,-0x34(%rbp)
 16f:	89 45 c8             	mov    %eax,-0x38(%rbp)
	rpending_threads	=  atomic_read(&align_read_thread_pool->num_active_threads);
	rpending_jobs		=  atomic_read(&align_read_thread_pool->num_jobs);

	wpending_iorequests	=  atomic_read(&align_write_thread_pool->ioq_num_ios);
 172:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 179 <avm_get_align_counters+0x179>
 179:	8b 88 10 01 00 00    	mov    0x110(%rax),%ecx
 17f:	8b 78 28             	mov    0x28(%rax),%edi
 182:	44 8b 90 b0 00 00 00 	mov    0xb0(%rax),%r10d
 * Atomically reads the value of @v.
 * Doesn't imply a read memory barrier.
 */
static inline long atomic64_read(const atomic64_t *v)
{
	return (*(volatile long *)&(v)->counter);
 189:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 190 <avm_get_align_counters+0x190>
 190:	4c 8b 3d 00 00 00 00 	mov    0x0(%rip),%r15        # 197 <avm_get_align_counters+0x197>
 197:	4c 8b 35 00 00 00 00 	mov    0x0(%rip),%r14        # 19e <avm_get_align_counters+0x19e>
 19e:	4c 8b 2d 00 00 00 00 	mov    0x0(%rip),%r13        # 1a5 <avm_get_align_counters+0x1a5>
 1a5:	4c 8b 25 00 00 00 00 	mov    0x0(%rip),%r12        # 1ac <avm_get_align_counters+0x1ac>
 1ac:	48 8b 1d 00 00 00 00 	mov    0x0(%rip),%rbx        # 1b3 <avm_get_align_counters+0x1b3>
 1b3:	4c 8b 1d 00 00 00 00 	mov    0x0(%rip),%r11        # 1ba <avm_get_align_counters+0x1ba>
 1ba:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
 1bd:	89 7d c0             	mov    %edi,-0x40(%rbp)
 1c0:	44 89 55 bc          	mov    %r10d,-0x44(%rbp)
 1c4:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
 1cb:	4c 89 9d 10 ff ff ff 	mov    %r11,-0xf0(%rbp)
 1d2:	4c 8b 1d 00 00 00 00 	mov    0x0(%rip),%r11        # 1d9 <avm_get_align_counters+0x1d9>
 1d9:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1e0 <avm_get_align_counters+0x1e0>
 1e0:	4c 89 5d b0          	mov    %r11,-0x50(%rbp)
 1e4:	48 89 75 a8          	mov    %rsi,-0x58(%rbp)
 1e8:	48 8b 0d 00 00 00 00 	mov    0x0(%rip),%rcx        # 1ef <avm_get_align_counters+0x1ef>
 1ef:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1f6 <avm_get_align_counters+0x1f6>
 1f6:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 1fd <avm_get_align_counters+0x1fd>
 1fd:	4c 8b 05 00 00 00 00 	mov    0x0(%rip),%r8        # 204 <avm_get_align_counters+0x204>
 204:	4c 8b 0d 00 00 00 00 	mov    0x0(%rip),%r9        # 20b <avm_get_align_counters+0x20b>
 20b:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
 20f:	4c 8b 15 00 00 00 00 	mov    0x0(%rip),%r10        # 216 <avm_get_align_counters+0x216>
 216:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 21d <avm_get_align_counters+0x21d>
 21d:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 224 <avm_get_align_counters+0x224>
 224:	48 8b 0d 00 00 00 00 	mov    0x0(%rip),%rcx        # 22b <avm_get_align_counters+0x22b>
 22b:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
 22f:	48 89 7d 90          	mov    %rdi,-0x70(%rbp)
 233:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23a <avm_get_align_counters+0x23a>
 23a:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
 23e:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 245 <avm_get_align_counters+0x245>
 245:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
 249:	4c 8b 05 00 00 00 00 	mov    0x0(%rip),%r8        # 250 <avm_get_align_counters+0x250>
 250:	4c 89 95 78 ff ff ff 	mov    %r10,-0x88(%rbp)
 257:	4c 8b 0d 00 00 00 00 	mov    0x0(%rip),%r9        # 25e <avm_get_align_counters+0x25e>
 25e:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
 265:	4c 8b 15 00 00 00 00 	mov    0x0(%rip),%r10        # 26c <avm_get_align_counters+0x26c>
 26c:	48 89 b5 68 ff ff ff 	mov    %rsi,-0x98(%rbp)
 273:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 27a <avm_get_align_counters+0x27a>
 27a:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
 281:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 288 <avm_get_align_counters+0x288>
 288:	48 8b 0d 00 00 00 00 	mov    0x0(%rip),%rcx        # 28f <avm_get_align_counters+0x28f>
 28f:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
 296:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
 29d:	4c 89 95 38 ff ff ff 	mov    %r10,-0xc8(%rbp)
 2a4:	48 89 b5 28 ff ff ff 	mov    %rsi,-0xd8(%rbp)
 2ab:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
 2b2:	48 89 bd 50 ff ff ff 	mov    %rdi,-0xb0(%rbp)
 2b9:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
 2c0:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
	align_write_thread_pool->quiesce,
	align_write_thread_pool->ioq_open,

	(U64)GET_CURRENT_TIME(),
	(U64)(GET_TIME_DIFF_IN_SECONDS(time_flush_start, GET_CURRENT_TIME())/1000),
	(U64)((GET_TIME_DIFF_IN_SECONDS(time_flush_start, time_flush_end))/1000),
 2c7:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 2ce <avm_get_align_counters+0x2ce>
 2ce:	48 2b 3d 00 00 00 00 	sub    0x0(%rip),%rdi        # 2d5 <avm_get_align_counters+0x2d5>
 2d5:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2dc <avm_get_align_counters+0x2dc>
 2dc:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
 2e3:	e8 00 00 00 00       	callq  2e8 <avm_get_align_counters+0x2e8>
#if (BITS_PER_LONG < 64)
u64 get_jiffies_64(void);
#else
static inline u64 get_jiffies_64(void)
{
	return (u64)jiffies;
 2e8:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 2ef <avm_get_align_counters+0x2ef>
	wpending_jobs,
	align_write_thread_pool->quiesce,
	align_write_thread_pool->ioq_open,

	(U64)GET_CURRENT_TIME(),
	(U64)(GET_TIME_DIFF_IN_SECONDS(time_flush_start, GET_CURRENT_TIME())/1000),
 2ef:	48 2b 3d 00 00 00 00 	sub    0x0(%rip),%rdi        # 2f6 <avm_get_align_counters+0x2f6>
	(U64)((GET_TIME_DIFF_IN_SECONDS(time_flush_start, time_flush_end))/1000),
 2f6:	89 45 d4             	mov    %eax,-0x2c(%rbp)
	wpending_jobs,
	align_write_thread_pool->quiesce,
	align_write_thread_pool->ioq_open,

	(U64)GET_CURRENT_TIME(),
	(U64)(GET_TIME_DIFF_IN_SECONDS(time_flush_start, GET_CURRENT_TIME())/1000),
 2f9:	e8 00 00 00 00       	callq  2fe <avm_get_align_counters+0x2fe>
	align_read_thread_pool->num_threads,
	rpending_iorequests,
	rpending_threads,
	rpending_jobs,
	align_read_thread_pool->quiesce,
	align_read_thread_pool->ioq_open,
 2fe:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 305 <avm_get_align_counters+0x305>
	wpending_iorequests	=  atomic_read(&align_write_thread_pool->ioq_num_ios);
	wpending_threads	=  atomic_read(&align_write_thread_pool->num_active_threads);
	wpending_jobs		=  atomic_read(&align_write_thread_pool->num_jobs);

	//Note: Value is NOT lock safe
	count = sprintf(ptr,
 305:	4c 8b 9d 10 ff ff ff 	mov    -0xf0(%rbp),%r11
	wpending_jobs,
	align_write_thread_pool->quiesce,
	align_write_thread_pool->ioq_open,

	(U64)GET_CURRENT_TIME(),
	(U64)(GET_TIME_DIFF_IN_SECONDS(time_flush_start, GET_CURRENT_TIME())/1000),
 30c:	41 89 c1             	mov    %eax,%r9d
	wpending_iorequests	=  atomic_read(&align_write_thread_pool->ioq_num_ios);
	wpending_threads	=  atomic_read(&align_write_thread_pool->num_active_threads);
	wpending_jobs		=  atomic_read(&align_write_thread_pool->num_jobs);

	//Note: Value is NOT lock safe
	count = sprintf(ptr,
 30f:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
 316:	4c 8b 05 00 00 00 00 	mov    0x0(%rip),%r8        # 31d <avm_get_align_counters+0x31d>
	rpending_jobs,
	align_read_thread_pool->quiesce,
	align_read_thread_pool->ioq_open,

	write_thread_pool->name,
	write_thread_pool->num_threads,
 31d:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 324 <avm_get_align_counters+0x324>
	wpending_iorequests	=  atomic_read(&align_write_thread_pool->ioq_num_ios);
	wpending_threads	=  atomic_read(&align_write_thread_pool->num_active_threads);
	wpending_jobs		=  atomic_read(&align_write_thread_pool->num_jobs);

	//Note: Value is NOT lock safe
	count = sprintf(ptr,
 324:	8b 4e 2c             	mov    0x2c(%rsi),%ecx
 327:	4c 89 9c 24 08 01 00 	mov    %r11,0x108(%rsp)
 32e:	00 
 32f:	4c 8d 56 50          	lea    0x50(%rsi),%r10
 333:	4c 8b 5d b0          	mov    -0x50(%rbp),%r11
 337:	48 89 94 24 38 01 00 	mov    %rdx,0x138(%rsp)
 33e:	00 
 33f:	4c 89 bc 24 30 01 00 	mov    %r15,0x130(%rsp)
 346:	00 
 347:	4c 89 b4 24 28 01 00 	mov    %r14,0x128(%rsp)
 34e:	00 
 34f:	48 83 c7 50          	add    $0x50,%rdi
 353:	4c 89 ac 24 20 01 00 	mov    %r13,0x120(%rsp)
 35a:	00 
 35b:	4c 89 a4 24 18 01 00 	mov    %r12,0x118(%rsp)
 362:	00 
 363:	4c 89 9c 24 00 01 00 	mov    %r11,0x100(%rsp)
 36a:	00 
 36b:	4c 8b 5d a8          	mov    -0x58(%rbp),%r11
 36f:	48 89 9c 24 10 01 00 	mov    %rbx,0x110(%rsp)
 376:	00 
 377:	4c 89 9c 24 f8 00 00 	mov    %r11,0xf8(%rsp)
 37e:	00 
 37f:	4c 8b 5d a0          	mov    -0x60(%rbp),%r11
 383:	4c 89 9c 24 f0 00 00 	mov    %r11,0xf0(%rsp)
 38a:	00 
 38b:	4c 8b 5d 98          	mov    -0x68(%rbp),%r11
 38f:	4c 89 9c 24 e8 00 00 	mov    %r11,0xe8(%rsp)
 396:	00 
 397:	4c 8b 5d 90          	mov    -0x70(%rbp),%r11
 39b:	4c 89 9c 24 e0 00 00 	mov    %r11,0xe0(%rsp)
 3a2:	00 
 3a3:	4c 8b 5d 88          	mov    -0x78(%rbp),%r11
 3a7:	4c 89 9c 24 d8 00 00 	mov    %r11,0xd8(%rsp)
 3ae:	00 
 3af:	4c 8b 5d 80          	mov    -0x80(%rbp),%r11
 3b3:	4c 89 9c 24 d0 00 00 	mov    %r11,0xd0(%rsp)
 3ba:	00 
 3bb:	4c 8b 9d 78 ff ff ff 	mov    -0x88(%rbp),%r11
 3c2:	4c 89 9c 24 c8 00 00 	mov    %r11,0xc8(%rsp)
 3c9:	00 
 3ca:	4c 8b 9d 70 ff ff ff 	mov    -0x90(%rbp),%r11
 3d1:	4c 89 9c 24 c0 00 00 	mov    %r11,0xc0(%rsp)
 3d8:	00 
 3d9:	4c 8b 9d 68 ff ff ff 	mov    -0x98(%rbp),%r11
 3e0:	4c 89 9c 24 b8 00 00 	mov    %r11,0xb8(%rsp)
 3e7:	00 
 3e8:	4c 8b 9d 60 ff ff ff 	mov    -0xa0(%rbp),%r11
 3ef:	4c 89 9c 24 b0 00 00 	mov    %r11,0xb0(%rsp)
 3f6:	00 
 3f7:	4c 8b 9d 58 ff ff ff 	mov    -0xa8(%rbp),%r11
	align_write_thread_pool->quiesce,
	align_write_thread_pool->ioq_open,

	(U64)GET_CURRENT_TIME(),
	(U64)(GET_TIME_DIFF_IN_SECONDS(time_flush_start, GET_CURRENT_TIME())/1000),
	(U64)((GET_TIME_DIFF_IN_SECONDS(time_flush_start, time_flush_end))/1000),
 3fe:	8b 45 d4             	mov    -0x2c(%rbp),%eax
	wpending_iorequests	=  atomic_read(&align_write_thread_pool->ioq_num_ios);
	wpending_threads	=  atomic_read(&align_write_thread_pool->num_active_threads);
	wpending_jobs		=  atomic_read(&align_write_thread_pool->num_jobs);

	//Note: Value is NOT lock safe
	count = sprintf(ptr,
 401:	4c 89 44 24 50       	mov    %r8,0x50(%rsp)
 406:	44 8b 7d bc          	mov    -0x44(%rbp),%r15d
 40a:	44 8b 75 c0          	mov    -0x40(%rbp),%r14d
 40e:	4c 89 9c 24 a8 00 00 	mov    %r11,0xa8(%rsp)
 415:	00 
 416:	4c 8b 9d 50 ff ff ff 	mov    -0xb0(%rbp),%r11
 41d:	4c 89 9c 24 a0 00 00 	mov    %r11,0xa0(%rsp)
 424:	00 
 425:	4c 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11
 42c:	4c 89 9c 24 98 00 00 	mov    %r11,0x98(%rsp)
 433:	00 
 434:	4c 8b 9d 40 ff ff ff 	mov    -0xc0(%rbp),%r11
 43b:	4c 89 9c 24 90 00 00 	mov    %r11,0x90(%rsp)
 442:	00 
 443:	4c 8b 9d 38 ff ff ff 	mov    -0xc8(%rbp),%r11
 44a:	4c 89 9c 24 88 00 00 	mov    %r11,0x88(%rsp)
 451:	00 
 452:	4c 8b 9d 30 ff ff ff 	mov    -0xd0(%rbp),%r11
 459:	4c 89 9c 24 80 00 00 	mov    %r11,0x80(%rsp)
 460:	00 
 461:	4c 8b 9d 28 ff ff ff 	mov    -0xd8(%rbp),%r11
 468:	4c 89 5c 24 78       	mov    %r11,0x78(%rsp)
 46d:	4c 8b 9d 20 ff ff ff 	mov    -0xe0(%rbp),%r11
 474:	4c 89 5c 24 70       	mov    %r11,0x70(%rsp)
 479:	4c 8b 9d 18 ff ff ff 	mov    -0xe8(%rbp),%r11
 480:	4c 89 5c 24 68       	mov    %r11,0x68(%rsp)
	align_write_thread_pool->quiesce,
	align_write_thread_pool->ioq_open,

	(U64)GET_CURRENT_TIME(),
	(U64)(GET_TIME_DIFF_IN_SECONDS(time_flush_start, GET_CURRENT_TIME())/1000),
	(U64)((GET_TIME_DIFF_IN_SECONDS(time_flush_start, time_flush_end))/1000),
 485:	41 bb d3 4d 62 10    	mov    $0x10624dd3,%r11d
 48b:	41 f7 e3             	mul    %r11d
	wpending_jobs,
	align_write_thread_pool->quiesce,
	align_write_thread_pool->ioq_open,

	(U64)GET_CURRENT_TIME(),
	(U64)(GET_TIME_DIFF_IN_SECONDS(time_flush_start, GET_CURRENT_TIME())/1000),
 48e:	44 89 c8             	mov    %r9d,%eax
	(U64)((GET_TIME_DIFF_IN_SECONDS(time_flush_start, time_flush_end))/1000),
 491:	c1 ea 06             	shr    $0x6,%edx
	wpending_iorequests	=  atomic_read(&align_write_thread_pool->ioq_num_ios);
	wpending_threads	=  atomic_read(&align_write_thread_pool->num_active_threads);
	wpending_jobs		=  atomic_read(&align_write_thread_pool->num_jobs);

	//Note: Value is NOT lock safe
	count = sprintf(ptr,
 494:	41 89 d4             	mov    %edx,%r12d
	wpending_jobs,
	align_write_thread_pool->quiesce,
	align_write_thread_pool->ioq_open,

	(U64)GET_CURRENT_TIME(),
	(U64)(GET_TIME_DIFF_IN_SECONDS(time_flush_start, GET_CURRENT_TIME())/1000),
 497:	41 f7 e3             	mul    %r11d
	wpending_iorequests	=  atomic_read(&align_write_thread_pool->ioq_num_ios);
	wpending_threads	=  atomic_read(&align_write_thread_pool->num_active_threads);
	wpending_jobs		=  atomic_read(&align_write_thread_pool->num_jobs);

	//Note: Value is NOT lock safe
	count = sprintf(ptr,
 49a:	4c 89 64 24 60       	mov    %r12,0x60(%rsp)
	wpending_jobs,
	align_write_thread_pool->quiesce,
	align_write_thread_pool->ioq_open,

	(U64)GET_CURRENT_TIME(),
	(U64)(GET_TIME_DIFF_IN_SECONDS(time_flush_start, GET_CURRENT_TIME())/1000),
 49f:	c1 ea 06             	shr    $0x6,%edx
	wpending_iorequests	=  atomic_read(&align_write_thread_pool->ioq_num_ios);
	wpending_threads	=  atomic_read(&align_write_thread_pool->num_active_threads);
	wpending_jobs		=  atomic_read(&align_write_thread_pool->num_jobs);

	//Note: Value is NOT lock safe
	count = sprintf(ptr,
 4a2:	41 89 d3             	mov    %edx,%r11d
 4a5:	8b 55 c4             	mov    -0x3c(%rbp),%edx
 4a8:	4c 89 5c 24 58       	mov    %r11,0x58(%rsp)
 4ad:	4c 8b 1d 00 00 00 00 	mov    0x0(%rip),%r11        # 4b4 <avm_get_align_counters+0x4b4>
 4b4:	41 0f b6 83 d0 00 00 	movzbl 0xd0(%r11),%eax
 4bb:	00 
 4bc:	89 44 24 48          	mov    %eax,0x48(%rsp)
 4c0:	41 0f b6 43 71       	movzbl 0x71(%r11),%eax
 4c5:	44 89 7c 24 38       	mov    %r15d,0x38(%rsp)
 4ca:	44 89 74 24 30       	mov    %r14d,0x30(%rsp)
 4cf:	89 54 24 28          	mov    %edx,0x28(%rsp)
 4d3:	4c 89 d2             	mov    %r10,%rdx
 4d6:	89 44 24 40          	mov    %eax,0x40(%rsp)
 4da:	8b 47 dc             	mov    -0x24(%rdi),%eax
 4dd:	89 44 24 20          	mov    %eax,0x20(%rsp)
 4e1:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
 4e6:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 4ed:	0f b6 86 d0 00 00 00 	movzbl 0xd0(%rsi),%eax
 4f4:	44 8b 4d cc          	mov    -0x34(%rbp),%r9d
 4f8:	44 8b 45 d0          	mov    -0x30(%rbp),%r8d
 4fc:	89 44 24 10          	mov    %eax,0x10(%rsp)
 500:	0f b6 46 71          	movzbl 0x71(%rsi),%eax
 504:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
 50b:	89 44 24 08          	mov    %eax,0x8(%rsp)
 50f:	8b 45 c8             	mov    -0x38(%rbp),%eax
 512:	89 04 24             	mov    %eax,(%rsp)
 515:	31 c0                	xor    %eax,%eax
 517:	e8 00 00 00 00       	callq  51c <avm_get_align_counters+0x51c>

	LOGD("Buffer Bytes used           = %d\n", count);
	//ptr += sprintf(ptr, "==============================================\n");

	return 0;
}
 51c:	48 81 c4 10 02 00 00 	add    $0x210,%rsp
 523:	31 c0                	xor    %eax,%eax
 525:	5b                   	pop    %rbx
 526:	41 5c                	pop    %r12
 528:	41 5d                	pop    %r13
 52a:	41 5e                	pop    %r14
 52c:	41 5f                	pop    %r15
 52e:	5d                   	pop    %rbp
 52f:	c3                   	retq   
		ptr += sprintf(ptr, "Superblock is NULL");
		return 0;
	}

	if (dz_switch_alignment_engine == DZ_DISABLED) {
		ptr += sprintf(ptr, "ALIGNMENT ENGINE DISABLED");
 530:	48 b8 41 4c 49 47 4e 	movabs $0x4e454d4e47494c41,%rax
 537:	4d 45 4e 
 53a:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 541 <avm_get_align_counters+0x541>
 541:	48 b8 54 20 45 4e 47 	movabs $0x454e49474e452054,%rax
 548:	49 4e 45 
 54b:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 552 <avm_get_align_counters+0x552>
 552:	48 b8 20 44 49 53 41 	movabs $0x454c424153494420,%rax
 559:	42 4c 45 
 55c:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 563 <avm_get_align_counters+0x563>
 563:	b8 44 00 00 00       	mov    $0x44,%eax
 568:	66 89 05 00 00 00 00 	mov    %ax,0x0(%rip)        # 56f <avm_get_align_counters+0x56f>

	LOGD("Buffer Bytes used           = %d\n", count);
	//ptr += sprintf(ptr, "==============================================\n");

	return 0;
}
 56f:	31 c0                	xor    %eax,%eax
 571:	c3                   	retq   
 572:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	UINT wpending_iorequests;
	UINT wpending_threads;
	UINT wpending_jobs;

	CHAR *ptr = (CHAR *)avm_sysfs_entry_get_align_counters;
	memset(avm_sysfs_entry_get_align_counters, 0, DZ_SYSFS_PAGE_SIZE);
 578:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
 57e:	83 ea 04             	sub    $0x4,%edx
 581:	48 83 c7 04          	add    $0x4,%rdi
 585:	e9 a5 fa ff ff       	jmpq   2f <avm_get_align_counters+0x2f>
 58a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
 590:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 597:	66 ba ff 0f          	mov    $0xfff,%dx
 59b:	40 f6 c7 02          	test   $0x2,%dil
 59f:	0f 84 80 fa ff ff    	je     25 <avm_get_align_counters+0x25>
 5a5:	0f 1f 00             	nopl   (%rax)
 5a8:	45 31 c9             	xor    %r9d,%r9d
 5ab:	48 83 c7 02          	add    $0x2,%rdi
 5af:	83 ea 02             	sub    $0x2,%edx
 5b2:	66 44 89 4f fe       	mov    %r9w,-0x2(%rdi)
 5b7:	e9 69 fa ff ff       	jmpq   25 <avm_get_align_counters+0x25>
 5bc:	0f 1f 40 00          	nopl   0x0(%rax)
	ptr += 1;
	ptr += sprintf(ptr, "==============================================\n");
	ptr += sprintf(ptr, "ALIGNMENT ENGINE COUNTERS\n");
	ptr += sprintf(ptr, "==============================================\n");
	if (!superblock) {
		ptr += sprintf(ptr, "Superblock is NULL");
 5c0:	48 b8 53 75 70 65 72 	movabs $0x6f6c627265707553,%rax
 5c7:	62 6c 6f 
 5ca:	b9 4c 4c 00 00       	mov    $0x4c4c,%ecx
 5cf:	c6 05 00 00 00 00 00 	movb   $0x0,0x0(%rip)        # 5d6 <avm_get_align_counters+0x5d6>
 5d6:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 5dd <avm_get_align_counters+0x5dd>
 5dd:	48 b8 63 6b 20 69 73 	movabs $0x554e207369206b63,%rax
 5e4:	20 4e 55 
 5e7:	66 89 0d 00 00 00 00 	mov    %cx,0x0(%rip)        # 5ee <avm_get_align_counters+0x5ee>
 5ee:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 5f5 <avm_get_align_counters+0x5f5>
		return 0;
 5f5:	e9 75 ff ff ff       	jmpq   56f <avm_get_align_counters+0x56f>
 5fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000000600 <avm_get_switch_dae>:
	return 0;
}

extern U64 avm_sysfs_entry_get_set_switch_dae;
INT avm_get_switch_dae(CHAR *buf)
{
 600:	e8 00 00 00 00       	callq  605 <avm_get_switch_dae+0x5>
 605:	55                   	push   %rbp
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae, dz_switch_alignment_engine);
 606:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 60d:	be 28 01 00 00       	mov    $0x128,%esi
 612:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 619:	31 c0                	xor    %eax,%eax
	return 0;
}

extern U64 avm_sysfs_entry_get_set_switch_dae;
INT avm_get_switch_dae(CHAR *buf)
{
 61b:	48 89 e5             	mov    %rsp,%rbp
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae, dz_switch_alignment_engine);
 61e:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 625:	00 
 626:	e8 00 00 00 00       	callq  62b <avm_get_switch_dae+0x2b>
 62b:	48 63 05 00 00 00 00 	movslq 0x0(%rip),%rax        # 632 <avm_get_switch_dae+0x32>
}
 632:	5d                   	pop    %rbp
}

extern U64 avm_sysfs_entry_get_set_switch_dae;
INT avm_get_switch_dae(CHAR *buf)
{
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae, dz_switch_alignment_engine);
 633:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 63a <avm_get_switch_dae+0x3a>
}
 63a:	31 c0                	xor    %eax,%eax
 63c:	c3                   	retq   
 63d:	0f 1f 00             	nopl   (%rax)

0000000000000640 <avm_set_switch_dae>:

INT avm_set_switch_dae(U64 buf)
{
 640:	e8 00 00 00 00       	callq  645 <avm_set_switch_dae+0x5>
 645:	55                   	push   %rbp
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine, buf);
 646:	41 89 f8             	mov    %edi,%r8d
 649:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 650:	be 2d 01 00 00       	mov    $0x12d,%esi
 655:	31 c0                	xor    %eax,%eax
{
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae, dz_switch_alignment_engine);
}

INT avm_set_switch_dae(U64 buf)
{
 657:	48 89 e5             	mov    %rsp,%rbp
 65a:	53                   	push   %rbx
 65b:	48 89 fb             	mov    %rdi,%rbx
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine, buf);
 65e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 665:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 66c:	00 
 66d:	e8 00 00 00 00       	callq  672 <avm_set_switch_dae+0x32>
 672:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # 678 <avm_set_switch_dae+0x38>
 678:	be 2d 01 00 00       	mov    $0x12d,%esi
 67d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 684:	31 c0                	xor    %eax,%eax
 686:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 68d:	00 
 68e:	e8 00 00 00 00       	callq  693 <avm_set_switch_dae+0x53>
 693:	89 d9                	mov    %ebx,%ecx
 695:	be 2d 01 00 00       	mov    $0x12d,%esi
 69a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 6a1:	31 c0                	xor    %eax,%eax
 6a3:	89 1d 00 00 00 00    	mov    %ebx,0x0(%rip)        # 6a9 <avm_set_switch_dae+0x69>
 6a9:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 6b0:	00 
 6b1:	e8 00 00 00 00       	callq  6b6 <avm_set_switch_dae+0x76>
}
 6b6:	5b                   	pop    %rbx
 6b7:	31 c0                	xor    %eax,%eax
 6b9:	5d                   	pop    %rbp
 6ba:	c3                   	retq   
 6bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000006c0 <avm_get_switch_dae_mbr>:

extern U64 avm_sysfs_entry_get_set_switch_dae_mbr;
INT avm_get_switch_dae_mbr(CHAR *buf)
{
 6c0:	e8 00 00 00 00       	callq  6c5 <avm_get_switch_dae_mbr+0x5>
 6c5:	55                   	push   %rbp
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_mbr, dz_switch_alignment_engine_multi_block_read);
 6c6:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 6cd:	be 33 01 00 00       	mov    $0x133,%esi
 6d2:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 6d9:	31 c0                	xor    %eax,%eax
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine, buf);
}

extern U64 avm_sysfs_entry_get_set_switch_dae_mbr;
INT avm_get_switch_dae_mbr(CHAR *buf)
{
 6db:	48 89 e5             	mov    %rsp,%rbp
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_mbr, dz_switch_alignment_engine_multi_block_read);
 6de:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 6e5:	00 
 6e6:	e8 00 00 00 00       	callq  6eb <avm_get_switch_dae_mbr+0x2b>
 6eb:	48 63 05 00 00 00 00 	movslq 0x0(%rip),%rax        # 6f2 <avm_get_switch_dae_mbr+0x32>
}
 6f2:	5d                   	pop    %rbp
}

extern U64 avm_sysfs_entry_get_set_switch_dae_mbr;
INT avm_get_switch_dae_mbr(CHAR *buf)
{
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_mbr, dz_switch_alignment_engine_multi_block_read);
 6f3:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 6fa <avm_get_switch_dae_mbr+0x3a>
}
 6fa:	31 c0                	xor    %eax,%eax
 6fc:	c3                   	retq   
 6fd:	0f 1f 00             	nopl   (%rax)

0000000000000700 <avm_set_switch_dae_mbr>:

INT avm_set_switch_dae_mbr(U64 buf)
{
 700:	e8 00 00 00 00       	callq  705 <avm_set_switch_dae_mbr+0x5>
 705:	55                   	push   %rbp
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine_multi_block_read, buf);
 706:	41 89 f8             	mov    %edi,%r8d
 709:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 710:	be 38 01 00 00       	mov    $0x138,%esi
 715:	31 c0                	xor    %eax,%eax
{
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_mbr, dz_switch_alignment_engine_multi_block_read);
}

INT avm_set_switch_dae_mbr(U64 buf)
{
 717:	48 89 e5             	mov    %rsp,%rbp
 71a:	53                   	push   %rbx
 71b:	48 89 fb             	mov    %rdi,%rbx
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine_multi_block_read, buf);
 71e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 725:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 72c:	00 
 72d:	e8 00 00 00 00       	callq  732 <avm_set_switch_dae_mbr+0x32>
 732:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # 738 <avm_set_switch_dae_mbr+0x38>
 738:	be 38 01 00 00       	mov    $0x138,%esi
 73d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 744:	31 c0                	xor    %eax,%eax
 746:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 74d:	00 
 74e:	e8 00 00 00 00       	callq  753 <avm_set_switch_dae_mbr+0x53>
 753:	89 d9                	mov    %ebx,%ecx
 755:	be 38 01 00 00       	mov    $0x138,%esi
 75a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 761:	31 c0                	xor    %eax,%eax
 763:	89 1d 00 00 00 00    	mov    %ebx,0x0(%rip)        # 769 <avm_set_switch_dae_mbr+0x69>
 769:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 770:	00 
 771:	e8 00 00 00 00       	callq  776 <avm_set_switch_dae_mbr+0x76>
}
 776:	5b                   	pop    %rbx
 777:	31 c0                	xor    %eax,%eax
 779:	5d                   	pop    %rbp
 77a:	c3                   	retq   
 77b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000780 <avm_get_switch_dae_mbw>:

extern U64 avm_sysfs_entry_get_set_switch_dae_mbw;
INT avm_get_switch_dae_mbw(CHAR *buf)
{
 780:	e8 00 00 00 00       	callq  785 <avm_get_switch_dae_mbw+0x5>
 785:	55                   	push   %rbp
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_mbw, dz_switch_alignment_engine_multi_block_write);
 786:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 78d:	be 3e 01 00 00       	mov    $0x13e,%esi
 792:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 799:	31 c0                	xor    %eax,%eax
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine_multi_block_read, buf);
}

extern U64 avm_sysfs_entry_get_set_switch_dae_mbw;
INT avm_get_switch_dae_mbw(CHAR *buf)
{
 79b:	48 89 e5             	mov    %rsp,%rbp
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_mbw, dz_switch_alignment_engine_multi_block_write);
 79e:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 7a5:	00 
 7a6:	e8 00 00 00 00       	callq  7ab <avm_get_switch_dae_mbw+0x2b>
 7ab:	48 63 05 00 00 00 00 	movslq 0x0(%rip),%rax        # 7b2 <avm_get_switch_dae_mbw+0x32>
}
 7b2:	5d                   	pop    %rbp
}

extern U64 avm_sysfs_entry_get_set_switch_dae_mbw;
INT avm_get_switch_dae_mbw(CHAR *buf)
{
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_mbw, dz_switch_alignment_engine_multi_block_write);
 7b3:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 7ba <avm_get_switch_dae_mbw+0x3a>
}
 7ba:	31 c0                	xor    %eax,%eax
 7bc:	c3                   	retq   
 7bd:	0f 1f 00             	nopl   (%rax)

00000000000007c0 <avm_set_switch_dae_mbw>:

INT avm_set_switch_dae_mbw(U64 buf)
{
 7c0:	e8 00 00 00 00       	callq  7c5 <avm_set_switch_dae_mbw+0x5>
 7c5:	55                   	push   %rbp
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine_multi_block_write, buf);
 7c6:	41 89 f8             	mov    %edi,%r8d
 7c9:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 7d0:	be 43 01 00 00       	mov    $0x143,%esi
 7d5:	31 c0                	xor    %eax,%eax
{
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_mbw, dz_switch_alignment_engine_multi_block_write);
}

INT avm_set_switch_dae_mbw(U64 buf)
{
 7d7:	48 89 e5             	mov    %rsp,%rbp
 7da:	53                   	push   %rbx
 7db:	48 89 fb             	mov    %rdi,%rbx
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine_multi_block_write, buf);
 7de:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 7e5:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 7ec:	00 
 7ed:	e8 00 00 00 00       	callq  7f2 <avm_set_switch_dae_mbw+0x32>
 7f2:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # 7f8 <avm_set_switch_dae_mbw+0x38>
 7f8:	be 43 01 00 00       	mov    $0x143,%esi
 7fd:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 804:	31 c0                	xor    %eax,%eax
 806:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 80d:	00 
 80e:	e8 00 00 00 00       	callq  813 <avm_set_switch_dae_mbw+0x53>
 813:	89 d9                	mov    %ebx,%ecx
 815:	be 43 01 00 00       	mov    $0x143,%esi
 81a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 821:	31 c0                	xor    %eax,%eax
 823:	89 1d 00 00 00 00    	mov    %ebx,0x0(%rip)        # 829 <avm_set_switch_dae_mbw+0x69>
 829:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 830:	00 
 831:	e8 00 00 00 00       	callq  836 <avm_set_switch_dae_mbw+0x76>
}
 836:	5b                   	pop    %rbx
 837:	31 c0                	xor    %eax,%eax
 839:	5d                   	pop    %rbp
 83a:	c3                   	retq   
 83b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000840 <avm_get_switch_dae_pbr>:

extern U64 avm_sysfs_entry_get_set_switch_dae_pbr;
INT avm_get_switch_dae_pbr(CHAR *buf)
{
 840:	e8 00 00 00 00       	callq  845 <avm_get_switch_dae_pbr+0x5>
 845:	55                   	push   %rbp
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_pbr, dz_switch_alignment_engine_partial_block_read);
 846:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 84d:	be 49 01 00 00       	mov    $0x149,%esi
 852:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 859:	31 c0                	xor    %eax,%eax
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine_multi_block_write, buf);
}

extern U64 avm_sysfs_entry_get_set_switch_dae_pbr;
INT avm_get_switch_dae_pbr(CHAR *buf)
{
 85b:	48 89 e5             	mov    %rsp,%rbp
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_pbr, dz_switch_alignment_engine_partial_block_read);
 85e:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 865:	00 
 866:	e8 00 00 00 00       	callq  86b <avm_get_switch_dae_pbr+0x2b>
 86b:	48 63 05 00 00 00 00 	movslq 0x0(%rip),%rax        # 872 <avm_get_switch_dae_pbr+0x32>
}
 872:	5d                   	pop    %rbp
}

extern U64 avm_sysfs_entry_get_set_switch_dae_pbr;
INT avm_get_switch_dae_pbr(CHAR *buf)
{
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_pbr, dz_switch_alignment_engine_partial_block_read);
 873:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 87a <avm_get_switch_dae_pbr+0x3a>
}
 87a:	31 c0                	xor    %eax,%eax
 87c:	c3                   	retq   
 87d:	0f 1f 00             	nopl   (%rax)

0000000000000880 <avm_set_switch_dae_pbr>:

INT avm_set_switch_dae_pbr(U64 buf)
{
 880:	e8 00 00 00 00       	callq  885 <avm_set_switch_dae_pbr+0x5>
 885:	55                   	push   %rbp
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine_partial_block_read, buf);
 886:	41 89 f8             	mov    %edi,%r8d
 889:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 890:	be 4e 01 00 00       	mov    $0x14e,%esi
 895:	31 c0                	xor    %eax,%eax
{
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_pbr, dz_switch_alignment_engine_partial_block_read);
}

INT avm_set_switch_dae_pbr(U64 buf)
{
 897:	48 89 e5             	mov    %rsp,%rbp
 89a:	53                   	push   %rbx
 89b:	48 89 fb             	mov    %rdi,%rbx
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine_partial_block_read, buf);
 89e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 8a5:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 8ac:	00 
 8ad:	e8 00 00 00 00       	callq  8b2 <avm_set_switch_dae_pbr+0x32>
 8b2:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # 8b8 <avm_set_switch_dae_pbr+0x38>
 8b8:	be 4e 01 00 00       	mov    $0x14e,%esi
 8bd:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 8c4:	31 c0                	xor    %eax,%eax
 8c6:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 8cd:	00 
 8ce:	e8 00 00 00 00       	callq  8d3 <avm_set_switch_dae_pbr+0x53>
 8d3:	89 d9                	mov    %ebx,%ecx
 8d5:	be 4e 01 00 00       	mov    $0x14e,%esi
 8da:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 8e1:	31 c0                	xor    %eax,%eax
 8e3:	89 1d 00 00 00 00    	mov    %ebx,0x0(%rip)        # 8e9 <avm_set_switch_dae_pbr+0x69>
 8e9:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 8f0:	00 
 8f1:	e8 00 00 00 00       	callq  8f6 <avm_set_switch_dae_pbr+0x76>
}
 8f6:	5b                   	pop    %rbx
 8f7:	31 c0                	xor    %eax,%eax
 8f9:	5d                   	pop    %rbp
 8fa:	c3                   	retq   
 8fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000900 <avm_get_switch_dae_pbw>:

extern U64 avm_sysfs_entry_get_set_switch_dae_pbw;
INT avm_get_switch_dae_pbw(CHAR *buf)
{
 900:	e8 00 00 00 00       	callq  905 <avm_get_switch_dae_pbw+0x5>
 905:	55                   	push   %rbp
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_pbw, dz_switch_alignment_engine_partial_block_write);
 906:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 90d:	be 54 01 00 00       	mov    $0x154,%esi
 912:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 919:	31 c0                	xor    %eax,%eax
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine_partial_block_read, buf);
}

extern U64 avm_sysfs_entry_get_set_switch_dae_pbw;
INT avm_get_switch_dae_pbw(CHAR *buf)
{
 91b:	48 89 e5             	mov    %rsp,%rbp
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_pbw, dz_switch_alignment_engine_partial_block_write);
 91e:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 925:	00 
 926:	e8 00 00 00 00       	callq  92b <avm_get_switch_dae_pbw+0x2b>
 92b:	48 63 05 00 00 00 00 	movslq 0x0(%rip),%rax        # 932 <avm_get_switch_dae_pbw+0x32>
}
 932:	5d                   	pop    %rbp
}

extern U64 avm_sysfs_entry_get_set_switch_dae_pbw;
INT avm_get_switch_dae_pbw(CHAR *buf)
{
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_pbw, dz_switch_alignment_engine_partial_block_write);
 933:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 93a <avm_get_switch_dae_pbw+0x3a>
}
 93a:	31 c0                	xor    %eax,%eax
 93c:	c3                   	retq   
 93d:	0f 1f 00             	nopl   (%rax)

0000000000000940 <avm_set_switch_dae_pbw>:

INT avm_set_switch_dae_pbw(U64 buf)
{
 940:	e8 00 00 00 00       	callq  945 <avm_set_switch_dae_pbw+0x5>
 945:	55                   	push   %rbp
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine_partial_block_write, buf);
 946:	41 89 f8             	mov    %edi,%r8d
 949:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 950:	be 59 01 00 00       	mov    $0x159,%esi
 955:	31 c0                	xor    %eax,%eax
{
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_switch_dae_pbw, dz_switch_alignment_engine_partial_block_write);
}

INT avm_set_switch_dae_pbw(U64 buf)
{
 957:	48 89 e5             	mov    %rsp,%rbp
 95a:	53                   	push   %rbx
 95b:	48 89 fb             	mov    %rdi,%rbx
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine_partial_block_write, buf);
 95e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 965:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 96c:	00 
 96d:	e8 00 00 00 00       	callq  972 <avm_set_switch_dae_pbw+0x32>
 972:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # 978 <avm_set_switch_dae_pbw+0x38>
 978:	be 59 01 00 00       	mov    $0x159,%esi
 97d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 984:	31 c0                	xor    %eax,%eax
 986:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 98d:	00 
 98e:	e8 00 00 00 00       	callq  993 <avm_set_switch_dae_pbw+0x53>
 993:	89 d9                	mov    %ebx,%ecx
 995:	be 59 01 00 00       	mov    $0x159,%esi
 99a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 9a1:	31 c0                	xor    %eax,%eax
 9a3:	89 1d 00 00 00 00    	mov    %ebx,0x0(%rip)        # 9a9 <avm_set_switch_dae_pbw+0x69>
 9a9:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 9b0:	00 
 9b1:	e8 00 00 00 00       	callq  9b6 <avm_set_switch_dae_pbw+0x76>
}
 9b6:	5b                   	pop    %rbx
 9b7:	31 c0                	xor    %eax,%eax
 9b9:	5d                   	pop    %rbp
 9ba:	c3                   	retq   
 9bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000009c0 <avm_get_tunable_dae_read_threads>:

extern U64 avm_sysfs_entry_get_set_tunable_dae_rthreads;
INT avm_get_tunable_dae_read_threads(CHAR *buf)
{
 9c0:	e8 00 00 00 00       	callq  9c5 <avm_get_tunable_dae_read_threads+0x5>
 9c5:	55                   	push   %rbp
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_tunable_dae_rthreads, num_align_read_threads);
 9c6:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 9cd:	be 5f 01 00 00       	mov    $0x15f,%esi
 9d2:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 9d9:	31 c0                	xor    %eax,%eax
	DZ_SYS_SET_SWITCH(dz_switch_alignment_engine_partial_block_write, buf);
}

extern U64 avm_sysfs_entry_get_set_tunable_dae_rthreads;
INT avm_get_tunable_dae_read_threads(CHAR *buf)
{
 9db:	48 89 e5             	mov    %rsp,%rbp
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_tunable_dae_rthreads, num_align_read_threads);
 9de:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 9e5:	00 
 9e6:	e8 00 00 00 00       	callq  9eb <avm_get_tunable_dae_read_threads+0x2b>
 9eb:	0f b7 05 00 00 00 00 	movzwl 0x0(%rip),%eax        # 9f2 <avm_get_tunable_dae_read_threads+0x32>

}
 9f2:	5d                   	pop    %rbp
}

extern U64 avm_sysfs_entry_get_set_tunable_dae_rthreads;
INT avm_get_tunable_dae_read_threads(CHAR *buf)
{
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_tunable_dae_rthreads, num_align_read_threads);
 9f3:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 9fa <avm_get_tunable_dae_read_threads+0x3a>

}
 9fa:	31 c0                	xor    %eax,%eax
 9fc:	c3                   	retq   
 9fd:	0f 1f 00             	nopl   (%rax)

0000000000000a00 <avm_set_tunable_dae_read_threads>:

INT avm_set_tunable_dae_read_threads(U64 buf)
{
 a00:	e8 00 00 00 00       	callq  a05 <avm_set_tunable_dae_read_threads+0x5>
 a05:	55                   	push   %rbp
	DZ_SYS_SET_SWITCH(avm_sysfs_entry_get_set_tunable_dae_rthreads, buf);
 a06:	41 89 f8             	mov    %edi,%r8d
 a09:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 a10:	be 65 01 00 00       	mov    $0x165,%esi
 a15:	31 c0                	xor    %eax,%eax
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_tunable_dae_rthreads, num_align_read_threads);

}

INT avm_set_tunable_dae_read_threads(U64 buf)
{
 a17:	48 89 e5             	mov    %rsp,%rbp
 a1a:	53                   	push   %rbx
 a1b:	48 89 fb             	mov    %rdi,%rbx
	DZ_SYS_SET_SWITCH(avm_sysfs_entry_get_set_tunable_dae_rthreads, buf);
 a1e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 a25:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 a2c:	00 
 a2d:	e8 00 00 00 00       	callq  a32 <avm_set_tunable_dae_read_threads+0x32>
 a32:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # a38 <avm_set_tunable_dae_read_threads+0x38>
 a38:	be 65 01 00 00       	mov    $0x165,%esi
 a3d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 a44:	31 c0                	xor    %eax,%eax
 a46:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 a4d:	00 
 a4e:	e8 00 00 00 00       	callq  a53 <avm_set_tunable_dae_read_threads+0x53>
 a53:	89 d9                	mov    %ebx,%ecx
 a55:	be 65 01 00 00       	mov    $0x165,%esi
 a5a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 a61:	31 c0                	xor    %eax,%eax
 a63:	48 89 1d 00 00 00 00 	mov    %rbx,0x0(%rip)        # a6a <avm_set_tunable_dae_read_threads+0x6a>
 a6a:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 a71:	00 
 a72:	e8 00 00 00 00       	callq  a77 <avm_set_tunable_dae_read_threads+0x77>
}
 a77:	5b                   	pop    %rbx
 a78:	31 c0                	xor    %eax,%eax
 a7a:	5d                   	pop    %rbp
 a7b:	c3                   	retq   
 a7c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000000a80 <avm_get_tunable_dae_write_threads>:

extern U64 avm_sysfs_entry_get_set_tunable_dae_wthreads;
INT avm_get_tunable_dae_write_threads(CHAR *buf)
{
 a80:	e8 00 00 00 00       	callq  a85 <avm_get_tunable_dae_write_threads+0x5>
 a85:	55                   	push   %rbp
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_tunable_dae_wthreads, num_align_write_threads);
 a86:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 a8d:	be 6b 01 00 00       	mov    $0x16b,%esi
 a92:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 a99:	31 c0                	xor    %eax,%eax
	DZ_SYS_SET_SWITCH(avm_sysfs_entry_get_set_tunable_dae_rthreads, buf);
}

extern U64 avm_sysfs_entry_get_set_tunable_dae_wthreads;
INT avm_get_tunable_dae_write_threads(CHAR *buf)
{
 a9b:	48 89 e5             	mov    %rsp,%rbp
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_tunable_dae_wthreads, num_align_write_threads);
 a9e:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 aa5:	00 
 aa6:	e8 00 00 00 00       	callq  aab <avm_get_tunable_dae_write_threads+0x2b>
 aab:	0f b7 05 00 00 00 00 	movzwl 0x0(%rip),%eax        # ab2 <avm_get_tunable_dae_write_threads+0x32>

}
 ab2:	5d                   	pop    %rbp
}

extern U64 avm_sysfs_entry_get_set_tunable_dae_wthreads;
INT avm_get_tunable_dae_write_threads(CHAR *buf)
{
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_tunable_dae_wthreads, num_align_write_threads);
 ab3:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # aba <avm_get_tunable_dae_write_threads+0x3a>

}
 aba:	31 c0                	xor    %eax,%eax
 abc:	c3                   	retq   
 abd:	0f 1f 00             	nopl   (%rax)

0000000000000ac0 <avm_set_tunable_dae_write_threads>:

INT avm_set_tunable_dae_write_threads(U64 buf)
{
 ac0:	e8 00 00 00 00       	callq  ac5 <avm_set_tunable_dae_write_threads+0x5>
 ac5:	55                   	push   %rbp
	DZ_SYS_SET_SWITCH(avm_sysfs_entry_get_set_tunable_dae_wthreads, buf);
 ac6:	41 89 f8             	mov    %edi,%r8d
 ac9:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
 ad0:	be 71 01 00 00       	mov    $0x171,%esi
 ad5:	31 c0                	xor    %eax,%eax
	DZ_SYS_GET_SWITCH(avm_sysfs_entry_get_set_tunable_dae_wthreads, num_align_write_threads);

}

INT avm_set_tunable_dae_write_threads(U64 buf)
{
 ad7:	48 89 e5             	mov    %rsp,%rbp
 ada:	53                   	push   %rbx
 adb:	48 89 fb             	mov    %rdi,%rbx
	DZ_SYS_SET_SWITCH(avm_sysfs_entry_get_set_tunable_dae_wthreads, buf);
 ade:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 ae5:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 aec:	00 
 aed:	e8 00 00 00 00       	callq  af2 <avm_set_tunable_dae_write_threads+0x32>
 af2:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # af8 <avm_set_tunable_dae_write_threads+0x38>
 af8:	be 71 01 00 00       	mov    $0x171,%esi
 afd:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 b04:	31 c0                	xor    %eax,%eax
 b06:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 b0d:	00 
 b0e:	e8 00 00 00 00       	callq  b13 <avm_set_tunable_dae_write_threads+0x53>
 b13:	89 d9                	mov    %ebx,%ecx
 b15:	be 71 01 00 00       	mov    $0x171,%esi
 b1a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
 b21:	31 c0                	xor    %eax,%eax
 b23:	48 89 1d 00 00 00 00 	mov    %rbx,0x0(%rip)        # b2a <avm_set_tunable_dae_write_threads+0x6a>
 b2a:	65 8b 14 25 00 00 00 	mov    %gs:0x0,%edx
 b31:	00 
 b32:	e8 00 00 00 00       	callq  b37 <avm_set_tunable_dae_write_threads+0x77>
}
 b37:	5b                   	pop    %rbx
 b38:	31 c0                	xor    %eax,%eax
 b3a:	5d                   	pop    %rbp
 b3b:	c3                   	retq   
